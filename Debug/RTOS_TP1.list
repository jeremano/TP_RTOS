
RTOS_TP1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006eac  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  0800707c  0800707c  0001707c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007240  08007240  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08007240  08007240  00017240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007248  08007248  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007248  08007248  00017248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800724c  0800724c  0001724c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08007250  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000043c8  2000007c  080072cc  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004444  080072cc  00024444  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012443  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fb1  00000000  00000000  000324ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e58  00000000  00000000  000354a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d10  00000000  00000000  000362f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028b52  00000000  00000000  00037008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012333  00000000  00000000  0005fb5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f21ca  00000000  00000000  00071e8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00164057  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041d0  00000000  00000000  001640a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007064 	.word	0x08007064

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000080 	.word	0x20000080
 800020c:	08007064 	.word	0x08007064

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005b4:	b480      	push	{r7}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	4a07      	ldr	r2, [pc, #28]	; (80005e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80005c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	4a06      	ldr	r2, [pc, #24]	; (80005e4 <vApplicationGetIdleTaskMemory+0x30>)
 80005ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2280      	movs	r2, #128	; 0x80
 80005d0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005d2:	bf00      	nop
 80005d4:	3714      	adds	r7, #20
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	2000009c 	.word	0x2000009c
 80005e4:	200000f0 	.word	0x200000f0

080005e8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005e8:	b5b0      	push	{r4, r5, r7, lr}
 80005ea:	b088      	sub	sp, #32
 80005ec:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005ee:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <MX_FREERTOS_Init+0x30>)
 80005f0:	1d3c      	adds	r4, r7, #4
 80005f2:	461d      	mov	r5, r3
 80005f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000600:	1d3b      	adds	r3, r7, #4
 8000602:	2100      	movs	r1, #0
 8000604:	4618      	mov	r0, r3
 8000606:	f003 fc98 	bl	8003f3a <osThreadCreate>
 800060a:	4603      	mov	r3, r0
 800060c:	4a03      	ldr	r2, [pc, #12]	; (800061c <MX_FREERTOS_Init+0x34>)
 800060e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000610:	bf00      	nop
 8000612:	3720      	adds	r7, #32
 8000614:	46bd      	mov	sp, r7
 8000616:	bdb0      	pop	{r4, r5, r7, pc}
 8000618:	08007088 	.word	0x08007088
 800061c:	20000098 	.word	0x20000098

08000620 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000628:	2001      	movs	r0, #1
 800062a:	f003 fcd2 	bl	8003fd2 <osDelay>
 800062e:	e7fb      	b.n	8000628 <StartDefaultTask+0x8>

08000630 <MX_GPIO_Init>:
     PB11   ------> USB_OTG_HS_ULPI_D4
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
void MX_GPIO_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b090      	sub	sp, #64	; 0x40
 8000634:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000636:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]
 8000644:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000646:	4bad      	ldr	r3, [pc, #692]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	4aac      	ldr	r2, [pc, #688]	; (80008fc <MX_GPIO_Init+0x2cc>)
 800064c:	f043 0310 	orr.w	r3, r3, #16
 8000650:	6313      	str	r3, [r2, #48]	; 0x30
 8000652:	4baa      	ldr	r3, [pc, #680]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	f003 0310 	and.w	r3, r3, #16
 800065a:	62bb      	str	r3, [r7, #40]	; 0x28
 800065c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800065e:	4ba7      	ldr	r3, [pc, #668]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	4aa6      	ldr	r2, [pc, #664]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000664:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000668:	6313      	str	r3, [r2, #48]	; 0x30
 800066a:	4ba4      	ldr	r3, [pc, #656]	; (80008fc <MX_GPIO_Init+0x2cc>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000672:	627b      	str	r3, [r7, #36]	; 0x24
 8000674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000676:	4ba1      	ldr	r3, [pc, #644]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	4aa0      	ldr	r2, [pc, #640]	; (80008fc <MX_GPIO_Init+0x2cc>)
 800067c:	f043 0302 	orr.w	r3, r3, #2
 8000680:	6313      	str	r3, [r2, #48]	; 0x30
 8000682:	4b9e      	ldr	r3, [pc, #632]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	f003 0302 	and.w	r3, r3, #2
 800068a:	623b      	str	r3, [r7, #32]
 800068c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800068e:	4b9b      	ldr	r3, [pc, #620]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	4a9a      	ldr	r2, [pc, #616]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000694:	f043 0308 	orr.w	r3, r3, #8
 8000698:	6313      	str	r3, [r2, #48]	; 0x30
 800069a:	4b98      	ldr	r3, [pc, #608]	; (80008fc <MX_GPIO_Init+0x2cc>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	f003 0308 	and.w	r3, r3, #8
 80006a2:	61fb      	str	r3, [r7, #28]
 80006a4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006a6:	4b95      	ldr	r3, [pc, #596]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	4a94      	ldr	r2, [pc, #592]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006ac:	f043 0304 	orr.w	r3, r3, #4
 80006b0:	6313      	str	r3, [r2, #48]	; 0x30
 80006b2:	4b92      	ldr	r3, [pc, #584]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	f003 0304 	and.w	r3, r3, #4
 80006ba:	61bb      	str	r3, [r7, #24]
 80006bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006be:	4b8f      	ldr	r3, [pc, #572]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4a8e      	ldr	r2, [pc, #568]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006c4:	f043 0301 	orr.w	r3, r3, #1
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ca:	4b8c      	ldr	r3, [pc, #560]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	617b      	str	r3, [r7, #20]
 80006d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80006d6:	4b89      	ldr	r3, [pc, #548]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	4a88      	ldr	r2, [pc, #544]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006e0:	6313      	str	r3, [r2, #48]	; 0x30
 80006e2:	4b86      	ldr	r3, [pc, #536]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80006ea:	613b      	str	r3, [r7, #16]
 80006ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80006ee:	4b83      	ldr	r3, [pc, #524]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	4a82      	ldr	r2, [pc, #520]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006f8:	6313      	str	r3, [r2, #48]	; 0x30
 80006fa:	4b80      	ldr	r3, [pc, #512]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000706:	4b7d      	ldr	r3, [pc, #500]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a7c      	ldr	r2, [pc, #496]	; (80008fc <MX_GPIO_Init+0x2cc>)
 800070c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b7a      	ldr	r3, [pc, #488]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800071a:	60bb      	str	r3, [r7, #8]
 800071c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800071e:	4b77      	ldr	r3, [pc, #476]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a76      	ldr	r2, [pc, #472]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000724:	f043 0320 	orr.w	r3, r3, #32
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b74      	ldr	r3, [pc, #464]	; (80008fc <MX_GPIO_Init+0x2cc>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0320 	and.w	r3, r3, #32
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000736:	4b71      	ldr	r3, [pc, #452]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a70      	ldr	r2, [pc, #448]	; (80008fc <MX_GPIO_Init+0x2cc>)
 800073c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b6e      	ldr	r3, [pc, #440]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800074a:	603b      	str	r3, [r7, #0]
 800074c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800074e:	2201      	movs	r2, #1
 8000750:	2120      	movs	r1, #32
 8000752:	486b      	ldr	r0, [pc, #428]	; (8000900 <MX_GPIO_Init+0x2d0>)
 8000754:	f001 fb78 	bl	8001e48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LED_Green_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8000758:	2200      	movs	r2, #0
 800075a:	f241 010e 	movw	r1, #4110	; 0x100e
 800075e:	4869      	ldr	r0, [pc, #420]	; (8000904 <MX_GPIO_Init+0x2d4>)
 8000760:	f001 fb72 	bl	8001e48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000764:	2200      	movs	r2, #0
 8000766:	2108      	movs	r1, #8
 8000768:	4867      	ldr	r0, [pc, #412]	; (8000908 <MX_GPIO_Init+0x2d8>)
 800076a:	f001 fb6d 	bl	8001e48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 800076e:	2200      	movs	r2, #0
 8000770:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000774:	4865      	ldr	r0, [pc, #404]	; (800090c <MX_GPIO_Init+0x2dc>)
 8000776:	f001 fb67 	bl	8001e48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	21c8      	movs	r1, #200	; 0xc8
 800077e:	4864      	ldr	r0, [pc, #400]	; (8000910 <MX_GPIO_Init+0x2e0>)
 8000780:	f001 fb62 	bl	8001e48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 8000784:	2310      	movs	r3, #16
 8000786:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000788:	2302      	movs	r3, #2
 800078a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	2300      	movs	r3, #0
 800078e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000790:	2300      	movs	r3, #0
 8000792:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000794:	230e      	movs	r3, #14
 8000796:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8000798:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800079c:	4619      	mov	r1, r3
 800079e:	485d      	ldr	r0, [pc, #372]	; (8000914 <MX_GPIO_Init+0x2e4>)
 80007a0:	f001 f9a6 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80007a4:	2308      	movs	r3, #8
 80007a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007a8:	2300      	movs	r3, #0
 80007aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007b4:	4619      	mov	r1, r3
 80007b6:	4857      	ldr	r0, [pc, #348]	; (8000914 <MX_GPIO_Init+0x2e4>)
 80007b8:	f001 f99a 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80007bc:	2304      	movs	r3, #4
 80007be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c0:	2302      	movs	r3, #2
 80007c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007c8:	2303      	movs	r3, #3
 80007ca:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80007cc:	2309      	movs	r3, #9
 80007ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80007d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007d4:	4619      	mov	r1, r3
 80007d6:	484f      	ldr	r0, [pc, #316]	; (8000914 <MX_GPIO_Init+0x2e4>)
 80007d8:	f001 f98a 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80007dc:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80007e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e2:	2302      	movs	r3, #2
 80007e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ea:	2303      	movs	r3, #3
 80007ec:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007ee:	230b      	movs	r3, #11
 80007f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007f6:	4619      	mov	r1, r3
 80007f8:	4845      	ldr	r0, [pc, #276]	; (8000910 <MX_GPIO_Init+0x2e0>)
 80007fa:	f001 f979 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80007fe:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000802:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000804:	2302      	movs	r3, #2
 8000806:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800080c:	2303      	movs	r3, #3
 800080e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000810:	230c      	movs	r3, #12
 8000812:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000814:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000818:	4619      	mov	r1, r3
 800081a:	483e      	ldr	r0, [pc, #248]	; (8000914 <MX_GPIO_Init+0x2e4>)
 800081c:	f001 f968 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8000820:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000824:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000826:	2312      	movs	r3, #18
 8000828:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082e:	2300      	movs	r3, #0
 8000830:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000832:	2304      	movs	r3, #4
 8000834:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000836:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800083a:	4619      	mov	r1, r3
 800083c:	4836      	ldr	r0, [pc, #216]	; (8000918 <MX_GPIO_Init+0x2e8>)
 800083e:	f001 f957 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8000842:	f643 4321 	movw	r3, #15393	; 0x3c21
 8000846:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000848:	2302      	movs	r3, #2
 800084a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	2300      	movs	r3, #0
 800084e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000850:	2303      	movs	r3, #3
 8000852:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000854:	230a      	movs	r3, #10
 8000856:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000858:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800085c:	4619      	mov	r1, r3
 800085e:	482e      	ldr	r0, [pc, #184]	; (8000918 <MX_GPIO_Init+0x2e8>)
 8000860:	f001 f946 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8000864:	2310      	movs	r3, #16
 8000866:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000868:	2302      	movs	r3, #2
 800086a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000870:	2300      	movs	r3, #0
 8000872:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000874:	2302      	movs	r3, #2
 8000876:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8000878:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800087c:	4619      	mov	r1, r3
 800087e:	4826      	ldr	r0, [pc, #152]	; (8000918 <MX_GPIO_Init+0x2e8>)
 8000880:	f001 f936 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8000884:	2380      	movs	r3, #128	; 0x80
 8000886:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000888:	2302      	movs	r3, #2
 800088a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000890:	2300      	movs	r3, #0
 8000892:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8000894:	2308      	movs	r3, #8
 8000896:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8000898:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800089c:	4619      	mov	r1, r3
 800089e:	4818      	ldr	r0, [pc, #96]	; (8000900 <MX_GPIO_Init+0x2d0>)
 80008a0:	f001 f926 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 80008a4:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80008a8:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008aa:	2302      	movs	r3, #2
 80008ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b2:	2303      	movs	r3, #3
 80008b4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80008b6:	230c      	movs	r3, #12
 80008b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008be:	4619      	mov	r1, r3
 80008c0:	4816      	ldr	r0, [pc, #88]	; (800091c <MX_GPIO_Init+0x2ec>)
 80008c2:	f001 f915 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80008c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008cc:	2302      	movs	r3, #2
 80008ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d4:	2300      	movs	r3, #0
 80008d6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80008d8:	2301      	movs	r3, #1
 80008da:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 80008dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008e0:	4619      	mov	r1, r3
 80008e2:	480f      	ldr	r0, [pc, #60]	; (8000920 <MX_GPIO_Init+0x2f0>)
 80008e4:	f001 f904 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80008e8:	2360      	movs	r3, #96	; 0x60
 80008ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ec:	2302      	movs	r3, #2
 80008ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f4:	2300      	movs	r3, #0
 80008f6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80008f8:	230d      	movs	r3, #13
 80008fa:	e013      	b.n	8000924 <MX_GPIO_Init+0x2f4>
 80008fc:	40023800 	.word	0x40023800
 8000900:	40020c00 	.word	0x40020c00
 8000904:	40022000 	.word	0x40022000
 8000908:	40022800 	.word	0x40022800
 800090c:	40021c00 	.word	0x40021c00
 8000910:	40021800 	.word	0x40021800
 8000914:	40021000 	.word	0x40021000
 8000918:	40020400 	.word	0x40020400
 800091c:	40020800 	.word	0x40020800
 8000920:	40020000 	.word	0x40020000
 8000924:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000926:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800092a:	4619      	mov	r1, r3
 800092c:	48bc      	ldr	r0, [pc, #752]	; (8000c20 <MX_GPIO_Init+0x5f0>)
 800092e:	f001 f8df 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8000932:	2340      	movs	r3, #64	; 0x40
 8000934:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000936:	2302      	movs	r3, #2
 8000938:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800093e:	2303      	movs	r3, #3
 8000940:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000942:	230a      	movs	r3, #10
 8000944:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8000946:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800094a:	4619      	mov	r1, r3
 800094c:	48b5      	ldr	r0, [pc, #724]	; (8000c24 <MX_GPIO_Init+0x5f4>)
 800094e:	f001 f8cf 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8000952:	f248 1333 	movw	r3, #33075	; 0x8133
 8000956:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000958:	2302      	movs	r3, #2
 800095a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000960:	2303      	movs	r3, #3
 8000962:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000964:	230c      	movs	r3, #12
 8000966:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000968:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800096c:	4619      	mov	r1, r3
 800096e:	48ae      	ldr	r0, [pc, #696]	; (8000c28 <MX_GPIO_Init+0x5f8>)
 8000970:	f001 f8be 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8000974:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8000978:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097a:	2302      	movs	r3, #2
 800097c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2300      	movs	r3, #0
 8000984:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000986:	230e      	movs	r3, #14
 8000988:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800098a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800098e:	4619      	mov	r1, r3
 8000990:	48a6      	ldr	r0, [pc, #664]	; (8000c2c <MX_GPIO_Init+0x5fc>)
 8000992:	f001 f8ad 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000996:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800099a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800099c:	2300      	movs	r3, #0
 800099e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80009a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009a8:	4619      	mov	r1, r3
 80009aa:	48a0      	ldr	r0, [pc, #640]	; (8000c2c <MX_GPIO_Init+0x5fc>)
 80009ac:	f001 f8a0 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80009b0:	2340      	movs	r3, #64	; 0x40
 80009b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009b4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80009be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009c2:	4619      	mov	r1, r3
 80009c4:	489a      	ldr	r0, [pc, #616]	; (8000c30 <MX_GPIO_Init+0x600>)
 80009c6:	f001 f893 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80009ca:	f24c 7303 	movw	r3, #50947	; 0xc703
 80009ce:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d0:	2302      	movs	r3, #2
 80009d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d8:	2303      	movs	r3, #3
 80009da:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009dc:	230c      	movs	r3, #12
 80009de:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009e4:	4619      	mov	r1, r3
 80009e6:	4892      	ldr	r0, [pc, #584]	; (8000c30 <MX_GPIO_Init+0x600>)
 80009e8:	f001 f882 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 80009ec:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80009f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f2:	2302      	movs	r3, #2
 80009f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fa:	2303      	movs	r3, #3
 80009fc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009fe:	230a      	movs	r3, #10
 8000a00:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a06:	4619      	mov	r1, r3
 8000a08:	488a      	ldr	r0, [pc, #552]	; (8000c34 <MX_GPIO_Init+0x604>)
 8000a0a:	f001 f871 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8000a0e:	23f0      	movs	r3, #240	; 0xf0
 8000a10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a12:	2302      	movs	r3, #2
 8000a14:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000a1e:	230a      	movs	r3, #10
 8000a20:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a26:	4619      	mov	r1, r3
 8000a28:	4883      	ldr	r0, [pc, #524]	; (8000c38 <MX_GPIO_Init+0x608>)
 8000a2a:	f001 f861 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PKPin PKPin PKPin PKPin
                           PKPin PKPin PKPin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8000a2e:	23f7      	movs	r3, #247	; 0xf7
 8000a30:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a32:	2302      	movs	r3, #2
 8000a34:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a3e:	230e      	movs	r3, #14
 8000a40:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000a42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a46:	4619      	mov	r1, r3
 8000a48:	487c      	ldr	r0, [pc, #496]	; (8000c3c <MX_GPIO_Init+0x60c>)
 8000a4a:	f001 f851 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8000a4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a54:	2302      	movs	r3, #2
 8000a56:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000a60:	2309      	movs	r3, #9
 8000a62:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8000a64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a68:	4619      	mov	r1, r3
 8000a6a:	486f      	ldr	r0, [pc, #444]	; (8000c28 <MX_GPIO_Init+0x5f8>)
 8000a6c:	f001 f840 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8000a70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a76:	2302      	movs	r3, #2
 8000a78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000a82:	230a      	movs	r3, #10
 8000a84:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8000a86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4866      	ldr	r0, [pc, #408]	; (8000c28 <MX_GPIO_Init+0x5f8>)
 8000a8e:	f001 f82f 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a92:	2320      	movs	r3, #32
 8000a94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a96:	2301      	movs	r3, #1
 8000a98:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000aa2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4861      	ldr	r0, [pc, #388]	; (8000c30 <MX_GPIO_Init+0x600>)
 8000aaa:	f001 f821 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000aae:	2308      	movs	r3, #8
 8000ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aba:	2300      	movs	r3, #0
 8000abc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000abe:	230d      	movs	r3, #13
 8000ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000ac2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4859      	ldr	r0, [pc, #356]	; (8000c30 <MX_GPIO_Init+0x600>)
 8000aca:	f001 f811 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LED_Green_Pin|LCD_DISP_Pin;
 8000ace:	f241 030e 	movw	r3, #4110	; 0x100e
 8000ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000adc:	2300      	movs	r3, #0
 8000ade:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000ae0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4854      	ldr	r0, [pc, #336]	; (8000c38 <MX_GPIO_Init+0x608>)
 8000ae8:	f001 f802 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000aec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000af0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af2:	2300      	movs	r3, #0
 8000af4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000afa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000afe:	4619      	mov	r1, r3
 8000b00:	484f      	ldr	r0, [pc, #316]	; (8000c40 <MX_GPIO_Init+0x610>)
 8000b02:	f000 fff5 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000b06:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b14:	2303      	movs	r3, #3
 8000b16:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b18:	230c      	movs	r3, #12
 8000b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b20:	4619      	mov	r1, r3
 8000b22:	4848      	ldr	r0, [pc, #288]	; (8000c44 <MX_GPIO_Init+0x614>)
 8000b24:	f000 ffe4 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8000b28:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8000b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b36:	2300      	movs	r3, #0
 8000b38:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b3a:	230e      	movs	r3, #14
 8000b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000b3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b42:	4619      	mov	r1, r3
 8000b44:	483c      	ldr	r0, [pc, #240]	; (8000c38 <MX_GPIO_Init+0x608>)
 8000b46:	f000 ffd3 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000b4a:	2308      	movs	r3, #8
 8000b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b56:	2300      	movs	r3, #0
 8000b58:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000b5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4836      	ldr	r0, [pc, #216]	; (8000c3c <MX_GPIO_Init+0x60c>)
 8000b62:	f000 ffc5 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000b66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b74:	2300      	movs	r3, #0
 8000b76:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000b78:	230d      	movs	r3, #13
 8000b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000b7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b80:	4619      	mov	r1, r3
 8000b82:	4829      	ldr	r0, [pc, #164]	; (8000c28 <MX_GPIO_Init+0x5f8>)
 8000b84:	f000 ffb4 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b88:	2310      	movs	r3, #16
 8000b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4825      	ldr	r0, [pc, #148]	; (8000c30 <MX_GPIO_Init+0x600>)
 8000b9c:	f000 ffa8 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8000ba0:	2304      	movs	r3, #4
 8000ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bac:	2303      	movs	r3, #3
 8000bae:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000bb0:	230c      	movs	r3, #12
 8000bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8000bb4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bb8:	4619      	mov	r1, r3
 8000bba:	481d      	ldr	r0, [pc, #116]	; (8000c30 <MX_GPIO_Init+0x600>)
 8000bbc:	f000 ff98 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000bc0:	f248 0304 	movw	r3, #32772	; 0x8004
 8000bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000bce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	481c      	ldr	r0, [pc, #112]	; (8000c48 <MX_GPIO_Init+0x618>)
 8000bd6:	f000 ff8b 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000bda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bde:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be0:	2301      	movs	r3, #1
 8000be2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be8:	2300      	movs	r3, #0
 8000bea:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000bec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4815      	ldr	r0, [pc, #84]	; (8000c48 <MX_GPIO_Init+0x618>)
 8000bf4:	f000 ff7c 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin
                           PHPin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000bf8:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8000bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c06:	2300      	movs	r3, #0
 8000c08:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000c0a:	230d      	movs	r3, #13
 8000c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c12:	4619      	mov	r1, r3
 8000c14:	480c      	ldr	r0, [pc, #48]	; (8000c48 <MX_GPIO_Init+0x618>)
 8000c16:	f000 ff6b 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	e016      	b.n	8000c4c <MX_GPIO_Init+0x61c>
 8000c1e:	bf00      	nop
 8000c20:	40021000 	.word	0x40021000
 8000c24:	40020400 	.word	0x40020400
 8000c28:	40021800 	.word	0x40021800
 8000c2c:	40022400 	.word	0x40022400
 8000c30:	40020c00 	.word	0x40020c00
 8000c34:	40020000 	.word	0x40020000
 8000c38:	40022000 	.word	0x40022000
 8000c3c:	40022800 	.word	0x40022800
 8000c40:	40020800 	.word	0x40020800
 8000c44:	40021400 	.word	0x40021400
 8000c48:	40021c00 	.word	0x40021c00
 8000c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c56:	2300      	movs	r3, #0
 8000c58:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8000c5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c62:	4619      	mov	r1, r3
 8000c64:	48a4      	ldr	r0, [pc, #656]	; (8000ef8 <MX_GPIO_Init+0x8c8>)
 8000c66:	f000 ff43 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PUSH_Pin;
 8000c6a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c70:	2300      	movs	r3, #0
 8000c72:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(PUSH_GPIO_Port, &GPIO_InitStruct);
 8000c78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	489e      	ldr	r0, [pc, #632]	; (8000ef8 <MX_GPIO_Init+0x8c8>)
 8000c80:	f000 ff36 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8000c84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c92:	2300      	movs	r3, #0
 8000c94:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000c96:	2301      	movs	r3, #1
 8000c98:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8000c9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4896      	ldr	r0, [pc, #600]	; (8000efc <MX_GPIO_Init+0x8cc>)
 8000ca2:	f000 ff25 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000ca6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000caa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000cac:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000cb0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000cb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cba:	4619      	mov	r1, r3
 8000cbc:	488e      	ldr	r0, [pc, #568]	; (8000ef8 <MX_GPIO_Init+0x8c8>)
 8000cbe:	f000 ff17 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8000cc2:	23c0      	movs	r3, #192	; 0xc0
 8000cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cce:	2303      	movs	r3, #3
 8000cd0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000cd2:	2308      	movs	r3, #8
 8000cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4888      	ldr	r0, [pc, #544]	; (8000f00 <MX_GPIO_Init+0x8d0>)
 8000cde:	f000 ff07 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000ce2:	2310      	movs	r3, #16
 8000ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cee:	2303      	movs	r3, #3
 8000cf0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000cf2:	230a      	movs	r3, #10
 8000cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000cf6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4881      	ldr	r0, [pc, #516]	; (8000f04 <MX_GPIO_Init+0x8d4>)
 8000cfe:	f000 fef7 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000d02:	2328      	movs	r3, #40	; 0x28
 8000d04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d06:	2302      	movs	r3, #2
 8000d08:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0e:	2303      	movs	r3, #3
 8000d10:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d12:	230c      	movs	r3, #12
 8000d14:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4879      	ldr	r0, [pc, #484]	; (8000f04 <MX_GPIO_Init+0x8d4>)
 8000d1e:	f000 fee7 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8000d22:	23c8      	movs	r3, #200	; 0xc8
 8000d24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d26:	2301      	movs	r3, #1
 8000d28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d36:	4619      	mov	r1, r3
 8000d38:	4873      	ldr	r0, [pc, #460]	; (8000f08 <MX_GPIO_Init+0x8d8>)
 8000d3a:	f000 fed9 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8000d3e:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8000d42:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d44:	2303      	movs	r3, #3
 8000d46:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d50:	4619      	mov	r1, r3
 8000d52:	486e      	ldr	r0, [pc, #440]	; (8000f0c <MX_GPIO_Init+0x8dc>)
 8000d54:	f000 fecc 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000d58:	2308      	movs	r3, #8
 8000d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d64:	2303      	movs	r3, #3
 8000d66:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d68:	230c      	movs	r3, #12
 8000d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000d6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d70:	4619      	mov	r1, r3
 8000d72:	4863      	ldr	r0, [pc, #396]	; (8000f00 <MX_GPIO_Init+0x8d0>)
 8000d74:	f000 febc 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8000d78:	2305      	movs	r3, #5
 8000d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d84:	2303      	movs	r3, #3
 8000d86:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000d88:	230a      	movs	r3, #10
 8000d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d90:	4619      	mov	r1, r3
 8000d92:	485b      	ldr	r0, [pc, #364]	; (8000f00 <MX_GPIO_Init+0x8d0>)
 8000d94:	f000 feac 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000d98:	2332      	movs	r3, #50	; 0x32
 8000d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da4:	2303      	movs	r3, #3
 8000da6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000da8:	230b      	movs	r3, #11
 8000daa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000db0:	4619      	mov	r1, r3
 8000db2:	4853      	ldr	r0, [pc, #332]	; (8000f00 <MX_GPIO_Init+0x8d0>)
 8000db4:	f000 fe9c 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000db8:	2304      	movs	r3, #4
 8000dba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc4:	2303      	movs	r3, #3
 8000dc6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000dc8:	2309      	movs	r3, #9
 8000dca:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dcc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	484f      	ldr	r0, [pc, #316]	; (8000f10 <MX_GPIO_Init+0x8e0>)
 8000dd4:	f000 fe8c 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8000dd8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dde:	2302      	movs	r3, #2
 8000de0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	2300      	movs	r3, #0
 8000de4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de6:	2303      	movs	r3, #3
 8000de8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000dea:	2309      	movs	r3, #9
 8000dec:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000df2:	4619      	mov	r1, r3
 8000df4:	4847      	ldr	r0, [pc, #284]	; (8000f14 <MX_GPIO_Init+0x8e4>)
 8000df6:	f000 fe7b 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8000dfa:	2304      	movs	r3, #4
 8000dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8000e06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	483e      	ldr	r0, [pc, #248]	; (8000f08 <MX_GPIO_Init+0x8d8>)
 8000e0e:	f000 fe6f 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000e12:	2386      	movs	r3, #134	; 0x86
 8000e14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e16:	2302      	movs	r3, #2
 8000e18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e22:	230b      	movs	r3, #11
 8000e24:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4833      	ldr	r0, [pc, #204]	; (8000efc <MX_GPIO_Init+0x8cc>)
 8000e2e:	f000 fe5f 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8000e32:	2301      	movs	r3, #1
 8000e34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e36:	2303      	movs	r3, #3
 8000e38:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8000e3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e42:	4619      	mov	r1, r3
 8000e44:	482d      	ldr	r0, [pc, #180]	; (8000efc <MX_GPIO_Init+0x8cc>)
 8000e46:	f000 fe53 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8000e4a:	2350      	movs	r3, #80	; 0x50
 8000e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e56:	2300      	movs	r3, #0
 8000e58:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000e5a:	230d      	movs	r3, #13
 8000e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e62:	4619      	mov	r1, r3
 8000e64:	4825      	ldr	r0, [pc, #148]	; (8000efc <MX_GPIO_Init+0x8cc>)
 8000e66:	f000 fe43 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8000e6a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e70:	2312      	movs	r3, #18
 8000e72:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e7c:	2304      	movs	r3, #4
 8000e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000e80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e84:	4619      	mov	r1, r3
 8000e86:	481f      	ldr	r0, [pc, #124]	; (8000f04 <MX_GPIO_Init+0x8d4>)
 8000e88:	f000 fe32 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8000e8c:	2328      	movs	r3, #40	; 0x28
 8000e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e90:	2302      	movs	r3, #2
 8000e92:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e98:	2303      	movs	r3, #3
 8000e9a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000e9c:	230a      	movs	r3, #10
 8000e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4815      	ldr	r0, [pc, #84]	; (8000efc <MX_GPIO_Init+0x8cc>)
 8000ea8:	f000 fe22 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8000eac:	2340      	movs	r3, #64	; 0x40
 8000eae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8000ebc:	2309      	movs	r3, #9
 8000ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8000ec0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	480f      	ldr	r0, [pc, #60]	; (8000f04 <MX_GPIO_Init+0x8d4>)
 8000ec8:	f000 fe12 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8000ecc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eda:	2300      	movs	r3, #0
 8000edc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ede:	2305      	movs	r3, #5
 8000ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4809      	ldr	r0, [pc, #36]	; (8000f10 <MX_GPIO_Init+0x8e0>)
 8000eea:	f000 fe01 	bl	8001af0 <HAL_GPIO_Init>

}
 8000eee:	bf00      	nop
 8000ef0:	3740      	adds	r7, #64	; 0x40
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40022000 	.word	0x40022000
 8000efc:	40020000 	.word	0x40020000
 8000f00:	40020800 	.word	0x40020800
 8000f04:	40021c00 	.word	0x40021c00
 8000f08:	40021800 	.word	0x40021800
 8000f0c:	40021400 	.word	0x40021400
 8000f10:	40020400 	.word	0x40020400
 8000f14:	40020c00 	.word	0x40020c00

08000f18 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000f20:	1d39      	adds	r1, r7, #4
 8000f22:	f04f 33ff 	mov.w	r3, #4294967295
 8000f26:	2201      	movs	r2, #1
 8000f28:	4803      	ldr	r0, [pc, #12]	; (8000f38 <__io_putchar+0x20>)
 8000f2a:	f002 f8d9 	bl	80030e0 <HAL_UART_Transmit>
	return ch;
 8000f2e:	687b      	ldr	r3, [r7, #4]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	2000065c 	.word	0x2000065c

08000f3c <fonction>:

int fonction(int argc, char ** argv)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < argc; ++i) {
 8000f46:	2300      	movs	r3, #0
 8000f48:	60fb      	str	r3, [r7, #12]
 8000f4a:	e00c      	b.n	8000f66 <fonction+0x2a>
		printf("argument %d = %s \r\n",i,argv[i]);
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	683a      	ldr	r2, [r7, #0]
 8000f52:	4413      	add	r3, r2
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	461a      	mov	r2, r3
 8000f58:	68f9      	ldr	r1, [r7, #12]
 8000f5a:	4807      	ldr	r0, [pc, #28]	; (8000f78 <fonction+0x3c>)
 8000f5c:	f004 ff12 	bl	8005d84 <iprintf>
	for (int i = 0; i < argc; ++i) {
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	3301      	adds	r3, #1
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	68fa      	ldr	r2, [r7, #12]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	429a      	cmp	r2, r3
 8000f6c:	dbee      	blt.n	8000f4c <fonction+0x10>
	}


	return 0;
 8000f6e:	2300      	movs	r3, #0
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	080070a4 	.word	0x080070a4

08000f7c <gereLed>:
		printf("%d\r\n", RxBuffer);
	}
}

void gereLed(void * unused)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_GPIO_TogglePin(LED_Green_GPIO_Port, LED_Green_Pin);
 8000f84:	2102      	movs	r1, #2
 8000f86:	4804      	ldr	r0, [pc, #16]	; (8000f98 <gereLed+0x1c>)
 8000f88:	f000 ff77 	bl	8001e7a <HAL_GPIO_TogglePin>
		vTaskDelay(500);
 8000f8c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f90:	f003 fce4 	bl	800495c <vTaskDelay>
		HAL_GPIO_TogglePin(LED_Green_GPIO_Port, LED_Green_Pin);
 8000f94:	e7f6      	b.n	8000f84 <gereLed+0x8>
 8000f96:	bf00      	nop
 8000f98:	40022000 	.word	0x40022000

08000f9c <shell>:
	}
}

void shell(void * unused)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
	shell_run();
 8000fa4:	f000 fa1c 	bl	80013e0 <shell_run>
}
 8000fa8:	bf00      	nop
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <led>:

int led(int argc, char ** argv)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
	activate = 1;
 8000fba:	4b07      	ldr	r3, [pc, #28]	; (8000fd8 <led+0x28>)
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	601a      	str	r2, [r3, #0]
	delai = 500;
 8000fc0:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <led+0x2c>)
 8000fc2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000fc6:	601a      	str	r2, [r3, #0]
	return 0;
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	200002f4 	.word	0x200002f4
 8000fdc:	200002f0 	.word	0x200002f0

08000fe0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fe6:	f000 fc40 	bl	800186a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fea:	f000 f841 	bl	8001070 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fee:	f7ff fb1f 	bl	8000630 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000ff2:	f000 fb5f 	bl	80016b4 <MX_USART1_UART_Init>

//****************************************//

//****************************************//

	shell_init();
 8000ff6:	f000 f91b 	bl	8001230 <shell_init>
	shell_add('f', fonction, "Une fonction inutile");
 8000ffa:	4a13      	ldr	r2, [pc, #76]	; (8001048 <main+0x68>)
 8000ffc:	4913      	ldr	r1, [pc, #76]	; (800104c <main+0x6c>)
 8000ffe:	2066      	movs	r0, #102	; 0x66
 8001000:	f000 f942 	bl	8001288 <shell_add>
	shell_add('l', led, "j'allume le led");
 8001004:	4a12      	ldr	r2, [pc, #72]	; (8001050 <main+0x70>)
 8001006:	4913      	ldr	r1, [pc, #76]	; (8001054 <main+0x74>)
 8001008:	206c      	movs	r0, #108	; 0x6c
 800100a:	f000 f93d 	bl	8001288 <shell_add>
	xTaskCreate(shell, "shell", 1000, NULL, 2, &xHandle4);
 800100e:	4b12      	ldr	r3, [pc, #72]	; (8001058 <main+0x78>)
 8001010:	9301      	str	r3, [sp, #4]
 8001012:	2302      	movs	r3, #2
 8001014:	9300      	str	r3, [sp, #0]
 8001016:	2300      	movs	r3, #0
 8001018:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800101c:	490f      	ldr	r1, [pc, #60]	; (800105c <main+0x7c>)
 800101e:	4810      	ldr	r0, [pc, #64]	; (8001060 <main+0x80>)
 8001020:	f003 fb63 	bl	80046ea <xTaskCreate>
  	xTaskCreate(gereLed, "gereled", 1000, NULL, 3, &xHandle3);
 8001024:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <main+0x84>)
 8001026:	9301      	str	r3, [sp, #4]
 8001028:	2303      	movs	r3, #3
 800102a:	9300      	str	r3, [sp, #0]
 800102c:	2300      	movs	r3, #0
 800102e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001032:	490d      	ldr	r1, [pc, #52]	; (8001068 <main+0x88>)
 8001034:	480d      	ldr	r0, [pc, #52]	; (800106c <main+0x8c>)
 8001036:	f003 fb58 	bl	80046ea <xTaskCreate>


	//configASSERT(pdTRUE==xReturned);

	vTaskStartScheduler();
 800103a:	f003 fcc5 	bl	80049c8 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800103e:	f7ff fad3 	bl	80005e8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001042:	f002 ff73 	bl	8003f2c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8001046:	e7fe      	b.n	8001046 <main+0x66>
 8001048:	080070f0 	.word	0x080070f0
 800104c:	08000f3d 	.word	0x08000f3d
 8001050:	08007108 	.word	0x08007108
 8001054:	08000fb1 	.word	0x08000fb1
 8001058:	200002fc 	.word	0x200002fc
 800105c:	08007118 	.word	0x08007118
 8001060:	08000f9d 	.word	0x08000f9d
 8001064:	200002f8 	.word	0x200002f8
 8001068:	08007120 	.word	0x08007120
 800106c:	08000f7d 	.word	0x08000f7d

08001070 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b094      	sub	sp, #80	; 0x50
 8001074:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001076:	f107 0320 	add.w	r3, r7, #32
 800107a:	2230      	movs	r2, #48	; 0x30
 800107c:	2100      	movs	r1, #0
 800107e:	4618      	mov	r0, r3
 8001080:	f004 fe78 	bl	8005d74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001084:	f107 030c 	add.w	r3, r7, #12
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001094:	4b2b      	ldr	r3, [pc, #172]	; (8001144 <SystemClock_Config+0xd4>)
 8001096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001098:	4a2a      	ldr	r2, [pc, #168]	; (8001144 <SystemClock_Config+0xd4>)
 800109a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800109e:	6413      	str	r3, [r2, #64]	; 0x40
 80010a0:	4b28      	ldr	r3, [pc, #160]	; (8001144 <SystemClock_Config+0xd4>)
 80010a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a8:	60bb      	str	r3, [r7, #8]
 80010aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010ac:	4b26      	ldr	r3, [pc, #152]	; (8001148 <SystemClock_Config+0xd8>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a25      	ldr	r2, [pc, #148]	; (8001148 <SystemClock_Config+0xd8>)
 80010b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010b6:	6013      	str	r3, [r2, #0]
 80010b8:	4b23      	ldr	r3, [pc, #140]	; (8001148 <SystemClock_Config+0xd8>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010c0:	607b      	str	r3, [r7, #4]
 80010c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010c4:	2301      	movs	r3, #1
 80010c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ce:	2302      	movs	r3, #2
 80010d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80010d8:	2319      	movs	r3, #25
 80010da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 80010dc:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80010e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010e2:	2302      	movs	r3, #2
 80010e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80010e6:	2302      	movs	r3, #2
 80010e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ea:	f107 0320 	add.w	r3, r7, #32
 80010ee:	4618      	mov	r0, r3
 80010f0:	f000 ff2e 	bl	8001f50 <HAL_RCC_OscConfig>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80010fa:	f000 f827 	bl	800114c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80010fe:	f000 fed7 	bl	8001eb0 <HAL_PWREx_EnableOverDrive>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001108:	f000 f820 	bl	800114c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800110c:	230f      	movs	r3, #15
 800110e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001110:	2302      	movs	r3, #2
 8001112:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001114:	2300      	movs	r3, #0
 8001116:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001118:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800111c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800111e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001122:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001124:	f107 030c 	add.w	r3, r7, #12
 8001128:	2107      	movs	r1, #7
 800112a:	4618      	mov	r0, r3
 800112c:	f001 f9b4 	bl	8002498 <HAL_RCC_ClockConfig>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001136:	f000 f809 	bl	800114c <Error_Handler>
  }
}
 800113a:	bf00      	nop
 800113c:	3750      	adds	r7, #80	; 0x50
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40023800 	.word	0x40023800
 8001148:	40007000 	.word	0x40007000

0800114c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001150:	b672      	cpsid	i
}
 8001152:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001154:	e7fe      	b.n	8001154 <Error_Handler+0x8>
	...

08001158 <uart_read>:

static char print_buffer[BUFFER_SIZE];

SemaphoreHandle_t sem_uart;

static char uart_read() {
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
	char c;

	HAL_UART_Receive_IT(&UART_DEVICE, (uint8_t*)(&c), 1);
 800115e:	1dfb      	adds	r3, r7, #7
 8001160:	2201      	movs	r2, #1
 8001162:	4619      	mov	r1, r3
 8001164:	4807      	ldr	r0, [pc, #28]	; (8001184 <uart_read+0x2c>)
 8001166:	f002 f83e 	bl	80031e6 <HAL_UART_Receive_IT>

	// semaphore take
	xSemaphoreTake(sem_uart, portMAX_DELAY);
 800116a:	4b07      	ldr	r3, [pc, #28]	; (8001188 <uart_read+0x30>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f04f 31ff 	mov.w	r1, #4294967295
 8001172:	4618      	mov	r0, r3
 8001174:	f003 f8c2 	bl	80042fc <xQueueSemaphoreTake>

	return c;
 8001178:	79fb      	ldrb	r3, [r7, #7]
}
 800117a:	4618      	mov	r0, r3
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	2000065c 	.word	0x2000065c
 8001188:	2000062c 	.word	0x2000062c

0800118c <uart_write>:
	// on passe taskWoken en paramètre a portYIELD_FROM_ISR qui va appeler le scheduler si une tache plus prioritaire est réveillée

	portYIELD_FROM_ISR(taskWoken)
}

static int uart_write(char * s, uint16_t size) {
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	460b      	mov	r3, r1
 8001196:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&UART_DEVICE, (uint8_t*)s, size, HAL_MAX_DELAY);
 8001198:	887a      	ldrh	r2, [r7, #2]
 800119a:	f04f 33ff 	mov.w	r3, #4294967295
 800119e:	6879      	ldr	r1, [r7, #4]
 80011a0:	4803      	ldr	r0, [pc, #12]	; (80011b0 <uart_write+0x24>)
 80011a2:	f001 ff9d 	bl	80030e0 <HAL_UART_Transmit>
	return size;
 80011a6:	887b      	ldrh	r3, [r7, #2]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	2000065c 	.word	0x2000065c

080011b4 <sh_help>:

static int sh_help(int argc, char ** argv) {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b086      	sub	sp, #24
 80011b8:	af02      	add	r7, sp, #8
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	6039      	str	r1, [r7, #0]
	int i;
	for(i = 0 ; i < shell_func_list_size ; i++) {
 80011be:	2300      	movs	r3, #0
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	e022      	b.n	800120a <sh_help+0x56>
		int size;
		size = snprintf (print_buffer, BUFFER_SIZE, "%c: %s\r\n", shell_func_list[i].c, shell_func_list[i].description);
 80011c4:	4916      	ldr	r1, [pc, #88]	; (8001220 <sh_help+0x6c>)
 80011c6:	68fa      	ldr	r2, [r7, #12]
 80011c8:	4613      	mov	r3, r2
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	4413      	add	r3, r2
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	440b      	add	r3, r1
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	4618      	mov	r0, r3
 80011d6:	4912      	ldr	r1, [pc, #72]	; (8001220 <sh_help+0x6c>)
 80011d8:	68fa      	ldr	r2, [r7, #12]
 80011da:	4613      	mov	r3, r2
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	4413      	add	r3, r2
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	440b      	add	r3, r1
 80011e4:	3308      	adds	r3, #8
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	9300      	str	r3, [sp, #0]
 80011ea:	4603      	mov	r3, r0
 80011ec:	4a0d      	ldr	r2, [pc, #52]	; (8001224 <sh_help+0x70>)
 80011ee:	2128      	movs	r1, #40	; 0x28
 80011f0:	480d      	ldr	r0, [pc, #52]	; (8001228 <sh_help+0x74>)
 80011f2:	f004 fddf 	bl	8005db4 <sniprintf>
 80011f6:	60b8      	str	r0, [r7, #8]
		uart_write(print_buffer, size);
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	4619      	mov	r1, r3
 80011fe:	480a      	ldr	r0, [pc, #40]	; (8001228 <sh_help+0x74>)
 8001200:	f7ff ffc4 	bl	800118c <uart_write>
	for(i = 0 ; i < shell_func_list_size ; i++) {
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	3301      	adds	r3, #1
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	4b08      	ldr	r3, [pc, #32]	; (800122c <sh_help+0x78>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	68fa      	ldr	r2, [r7, #12]
 8001210:	429a      	cmp	r2, r3
 8001212:	dbd7      	blt.n	80011c4 <sh_help+0x10>
	}

	return 0;
 8001214:	2300      	movs	r3, #0
}
 8001216:	4618      	mov	r0, r3
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20000304 	.word	0x20000304
 8001224:	08007128 	.word	0x08007128
 8001228:	20000604 	.word	0x20000604
 800122c:	20000300 	.word	0x20000300

08001230 <shell_init>:

void shell_init() {
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
	int size = 0;
 8001236:	2300      	movs	r3, #0
 8001238:	607b      	str	r3, [r7, #4]

	size = snprintf (print_buffer, BUFFER_SIZE, "\r\n\r\n===== Monsieur Shell v0.2 =====\r\n");
 800123a:	4a0e      	ldr	r2, [pc, #56]	; (8001274 <shell_init+0x44>)
 800123c:	2128      	movs	r1, #40	; 0x28
 800123e:	480e      	ldr	r0, [pc, #56]	; (8001278 <shell_init+0x48>)
 8001240:	f004 fdb8 	bl	8005db4 <sniprintf>
 8001244:	6078      	str	r0, [r7, #4]
	uart_write(print_buffer, size);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	b29b      	uxth	r3, r3
 800124a:	4619      	mov	r1, r3
 800124c:	480a      	ldr	r0, [pc, #40]	; (8001278 <shell_init+0x48>)
 800124e:	f7ff ff9d 	bl	800118c <uart_write>

	sem_uart = xSemaphoreCreateBinary();
 8001252:	2203      	movs	r2, #3
 8001254:	2100      	movs	r1, #0
 8001256:	2001      	movs	r0, #1
 8001258:	f002 ffee 	bl	8004238 <xQueueGenericCreate>
 800125c:	4603      	mov	r3, r0
 800125e:	4a07      	ldr	r2, [pc, #28]	; (800127c <shell_init+0x4c>)
 8001260:	6013      	str	r3, [r2, #0]

	shell_add('h', sh_help, "Help");
 8001262:	4a07      	ldr	r2, [pc, #28]	; (8001280 <shell_init+0x50>)
 8001264:	4907      	ldr	r1, [pc, #28]	; (8001284 <shell_init+0x54>)
 8001266:	2068      	movs	r0, #104	; 0x68
 8001268:	f000 f80e 	bl	8001288 <shell_add>
}
 800126c:	bf00      	nop
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	08007134 	.word	0x08007134
 8001278:	20000604 	.word	0x20000604
 800127c:	2000062c 	.word	0x2000062c
 8001280:	0800715c 	.word	0x0800715c
 8001284:	080011b5 	.word	0x080011b5

08001288 <shell_add>:

int shell_add(char c, int (* pfunc)(int argc, char ** argv), char * description) {
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]
 8001294:	73fb      	strb	r3, [r7, #15]
	if (shell_func_list_size < SHELL_FUNC_LIST_MAX_SIZE) {
 8001296:	4b19      	ldr	r3, [pc, #100]	; (80012fc <shell_add+0x74>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	2b3f      	cmp	r3, #63	; 0x3f
 800129c:	dc26      	bgt.n	80012ec <shell_add+0x64>
		shell_func_list[shell_func_list_size].c = c;
 800129e:	4b17      	ldr	r3, [pc, #92]	; (80012fc <shell_add+0x74>)
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	4917      	ldr	r1, [pc, #92]	; (8001300 <shell_add+0x78>)
 80012a4:	4613      	mov	r3, r2
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	4413      	add	r3, r2
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	440b      	add	r3, r1
 80012ae:	7bfa      	ldrb	r2, [r7, #15]
 80012b0:	701a      	strb	r2, [r3, #0]
		shell_func_list[shell_func_list_size].func = pfunc;
 80012b2:	4b12      	ldr	r3, [pc, #72]	; (80012fc <shell_add+0x74>)
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	4912      	ldr	r1, [pc, #72]	; (8001300 <shell_add+0x78>)
 80012b8:	4613      	mov	r3, r2
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	4413      	add	r3, r2
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	440b      	add	r3, r1
 80012c2:	3304      	adds	r3, #4
 80012c4:	68ba      	ldr	r2, [r7, #8]
 80012c6:	601a      	str	r2, [r3, #0]
		shell_func_list[shell_func_list_size].description = description;
 80012c8:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <shell_add+0x74>)
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	490c      	ldr	r1, [pc, #48]	; (8001300 <shell_add+0x78>)
 80012ce:	4613      	mov	r3, r2
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	4413      	add	r3, r2
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	440b      	add	r3, r1
 80012d8:	3308      	adds	r3, #8
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	601a      	str	r2, [r3, #0]
		shell_func_list_size++;
 80012de:	4b07      	ldr	r3, [pc, #28]	; (80012fc <shell_add+0x74>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	3301      	adds	r3, #1
 80012e4:	4a05      	ldr	r2, [pc, #20]	; (80012fc <shell_add+0x74>)
 80012e6:	6013      	str	r3, [r2, #0]
		return 0;
 80012e8:	2300      	movs	r3, #0
 80012ea:	e001      	b.n	80012f0 <shell_add+0x68>
	}

	return -1;
 80012ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3714      	adds	r7, #20
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	20000300 	.word	0x20000300
 8001300:	20000304 	.word	0x20000304

08001304 <shell_exec>:

static int shell_exec(char * buf) {
 8001304:	b580      	push	{r7, lr}
 8001306:	b090      	sub	sp, #64	; 0x40
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
	int i;

	char c = buf[0];
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	int argc;
	char * argv[ARGC_MAX];
	char *p;

	for(i = 0 ; i < shell_func_list_size ; i++) {
 8001314:	2300      	movs	r3, #0
 8001316:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001318:	e040      	b.n	800139c <shell_exec+0x98>
		if (shell_func_list[i].c == c) {
 800131a:	492d      	ldr	r1, [pc, #180]	; (80013d0 <shell_exec+0xcc>)
 800131c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800131e:	4613      	mov	r3, r2
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	4413      	add	r3, r2
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	440b      	add	r3, r1
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800132e:	429a      	cmp	r2, r3
 8001330:	d131      	bne.n	8001396 <shell_exec+0x92>
			argc = 1;
 8001332:	2301      	movs	r3, #1
 8001334:	63bb      	str	r3, [r7, #56]	; 0x38
			argv[0] = buf;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	60fb      	str	r3, [r7, #12]

			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	637b      	str	r3, [r7, #52]	; 0x34
 800133e:	e013      	b.n	8001368 <shell_exec+0x64>
				if(*p == ' ') {
 8001340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	2b20      	cmp	r3, #32
 8001346:	d10c      	bne.n	8001362 <shell_exec+0x5e>
					*p = '\0';
 8001348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800134a:	2200      	movs	r2, #0
 800134c:	701a      	strb	r2, [r3, #0]
					argv[argc++] = p+1;
 800134e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001350:	1c5a      	adds	r2, r3, #1
 8001352:	63ba      	str	r2, [r7, #56]	; 0x38
 8001354:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001356:	3201      	adds	r2, #1
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	3340      	adds	r3, #64	; 0x40
 800135c:	443b      	add	r3, r7
 800135e:	f843 2c34 	str.w	r2, [r3, #-52]
			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 8001362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001364:	3301      	adds	r3, #1
 8001366:	637b      	str	r3, [r7, #52]	; 0x34
 8001368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d002      	beq.n	8001376 <shell_exec+0x72>
 8001370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001372:	2b07      	cmp	r3, #7
 8001374:	dde4      	ble.n	8001340 <shell_exec+0x3c>
				}
			}

			return shell_func_list[i].func(argc, argv);
 8001376:	4916      	ldr	r1, [pc, #88]	; (80013d0 <shell_exec+0xcc>)
 8001378:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800137a:	4613      	mov	r3, r2
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	4413      	add	r3, r2
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	440b      	add	r3, r1
 8001384:	3304      	adds	r3, #4
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f107 020c 	add.w	r2, r7, #12
 800138c:	4611      	mov	r1, r2
 800138e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001390:	4798      	blx	r3
 8001392:	4603      	mov	r3, r0
 8001394:	e017      	b.n	80013c6 <shell_exec+0xc2>
	for(i = 0 ; i < shell_func_list_size ; i++) {
 8001396:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001398:	3301      	adds	r3, #1
 800139a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800139c:	4b0d      	ldr	r3, [pc, #52]	; (80013d4 <shell_exec+0xd0>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80013a2:	429a      	cmp	r2, r3
 80013a4:	dbb9      	blt.n	800131a <shell_exec+0x16>
		}
	}

	int size;
	size = snprintf (print_buffer, BUFFER_SIZE, "%c: no such command\r\n", c);
 80013a6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80013aa:	4a0b      	ldr	r2, [pc, #44]	; (80013d8 <shell_exec+0xd4>)
 80013ac:	2128      	movs	r1, #40	; 0x28
 80013ae:	480b      	ldr	r0, [pc, #44]	; (80013dc <shell_exec+0xd8>)
 80013b0:	f004 fd00 	bl	8005db4 <sniprintf>
 80013b4:	62f8      	str	r0, [r7, #44]	; 0x2c
	uart_write(print_buffer, size);
 80013b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	4619      	mov	r1, r3
 80013bc:	4807      	ldr	r0, [pc, #28]	; (80013dc <shell_exec+0xd8>)
 80013be:	f7ff fee5 	bl	800118c <uart_write>
	return -1;
 80013c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3740      	adds	r7, #64	; 0x40
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20000304 	.word	0x20000304
 80013d4:	20000300 	.word	0x20000300
 80013d8:	08007164 	.word	0x08007164
 80013dc:	20000604 	.word	0x20000604

080013e0 <shell_run>:

static char backspace[] = "\b \b";
static char prompt[] = "> ";

int shell_run() {
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
	int reading = 0;
 80013e6:	2300      	movs	r3, #0
 80013e8:	60fb      	str	r3, [r7, #12]
	int pos = 0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	60bb      	str	r3, [r7, #8]

	static char cmd_buffer[BUFFER_SIZE];

	while (1) {
		uart_write(prompt, 2);
 80013ee:	2102      	movs	r1, #2
 80013f0:	482a      	ldr	r0, [pc, #168]	; (800149c <shell_run+0xbc>)
 80013f2:	f7ff fecb 	bl	800118c <uart_write>
		reading = 1;
 80013f6:	2301      	movs	r3, #1
 80013f8:	60fb      	str	r3, [r7, #12]

		while(reading) {
 80013fa:	e047      	b.n	800148c <shell_run+0xac>
			char c = uart_read();
 80013fc:	f7ff feac 	bl	8001158 <uart_read>
 8001400:	4603      	mov	r3, r0
 8001402:	70fb      	strb	r3, [r7, #3]
			int size;

			switch (c) {
 8001404:	78fb      	ldrb	r3, [r7, #3]
 8001406:	2b08      	cmp	r3, #8
 8001408:	d025      	beq.n	8001456 <shell_run+0x76>
 800140a:	2b0d      	cmp	r3, #13
 800140c:	d12e      	bne.n	800146c <shell_run+0x8c>
			//process RETURN key
			case '\r':
				//case '\n':
				size = snprintf (print_buffer, BUFFER_SIZE, "\r\n");
 800140e:	4a24      	ldr	r2, [pc, #144]	; (80014a0 <shell_run+0xc0>)
 8001410:	2128      	movs	r1, #40	; 0x28
 8001412:	4824      	ldr	r0, [pc, #144]	; (80014a4 <shell_run+0xc4>)
 8001414:	f004 fcce 	bl	8005db4 <sniprintf>
 8001418:	6078      	str	r0, [r7, #4]
				uart_write(print_buffer, size);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	b29b      	uxth	r3, r3
 800141e:	4619      	mov	r1, r3
 8001420:	4820      	ldr	r0, [pc, #128]	; (80014a4 <shell_run+0xc4>)
 8001422:	f7ff feb3 	bl	800118c <uart_write>
				cmd_buffer[pos++] = 0;     //add \0 char at end of string
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	1c5a      	adds	r2, r3, #1
 800142a:	60ba      	str	r2, [r7, #8]
 800142c:	4a1e      	ldr	r2, [pc, #120]	; (80014a8 <shell_run+0xc8>)
 800142e:	2100      	movs	r1, #0
 8001430:	54d1      	strb	r1, [r2, r3]
				size = snprintf (print_buffer, BUFFER_SIZE, ":%s\r\n", cmd_buffer);
 8001432:	4b1d      	ldr	r3, [pc, #116]	; (80014a8 <shell_run+0xc8>)
 8001434:	4a1d      	ldr	r2, [pc, #116]	; (80014ac <shell_run+0xcc>)
 8001436:	2128      	movs	r1, #40	; 0x28
 8001438:	481a      	ldr	r0, [pc, #104]	; (80014a4 <shell_run+0xc4>)
 800143a:	f004 fcbb 	bl	8005db4 <sniprintf>
 800143e:	6078      	str	r0, [r7, #4]
				uart_write(print_buffer, size);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	b29b      	uxth	r3, r3
 8001444:	4619      	mov	r1, r3
 8001446:	4817      	ldr	r0, [pc, #92]	; (80014a4 <shell_run+0xc4>)
 8001448:	f7ff fea0 	bl	800118c <uart_write>
				reading = 0;        //exit read loop
 800144c:	2300      	movs	r3, #0
 800144e:	60fb      	str	r3, [r7, #12]
				pos = 0;            //reset buffer
 8001450:	2300      	movs	r3, #0
 8001452:	60bb      	str	r3, [r7, #8]
				break;
 8001454:	e01a      	b.n	800148c <shell_run+0xac>
				//backspace
			case '\b':
				if (pos > 0) {      //is there a char to delete?
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	2b00      	cmp	r3, #0
 800145a:	dd16      	ble.n	800148a <shell_run+0xaa>
					pos--;          //remove it in buffer
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	3b01      	subs	r3, #1
 8001460:	60bb      	str	r3, [r7, #8]

					uart_write(backspace, 3);	// delete the char on the terminal
 8001462:	2103      	movs	r1, #3
 8001464:	4812      	ldr	r0, [pc, #72]	; (80014b0 <shell_run+0xd0>)
 8001466:	f7ff fe91 	bl	800118c <uart_write>
				}
				break;
 800146a:	e00e      	b.n	800148a <shell_run+0xaa>
				//other characters
			default:
				//only store characters if buffer has space
				if (pos < BUFFER_SIZE) {
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	2b27      	cmp	r3, #39	; 0x27
 8001470:	dc0c      	bgt.n	800148c <shell_run+0xac>
					uart_write(&c, 1);
 8001472:	1cfb      	adds	r3, r7, #3
 8001474:	2101      	movs	r1, #1
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff fe88 	bl	800118c <uart_write>
					cmd_buffer[pos++] = c; //store
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	1c5a      	adds	r2, r3, #1
 8001480:	60ba      	str	r2, [r7, #8]
 8001482:	78f9      	ldrb	r1, [r7, #3]
 8001484:	4a08      	ldr	r2, [pc, #32]	; (80014a8 <shell_run+0xc8>)
 8001486:	54d1      	strb	r1, [r2, r3]
 8001488:	e000      	b.n	800148c <shell_run+0xac>
				break;
 800148a:	bf00      	nop
		while(reading) {
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d1b4      	bne.n	80013fc <shell_run+0x1c>
				}
			}
		}
		shell_exec(cmd_buffer);
 8001492:	4805      	ldr	r0, [pc, #20]	; (80014a8 <shell_run+0xc8>)
 8001494:	f7ff ff36 	bl	8001304 <shell_exec>
		uart_write(prompt, 2);
 8001498:	e7a9      	b.n	80013ee <shell_run+0xe>
 800149a:	bf00      	nop
 800149c:	20000004 	.word	0x20000004
 80014a0:	0800717c 	.word	0x0800717c
 80014a4:	20000604 	.word	0x20000604
 80014a8:	20000630 	.word	0x20000630
 80014ac:	08007180 	.word	0x08007180
 80014b0:	20000000 	.word	0x20000000

080014b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80014ba:	4b11      	ldr	r3, [pc, #68]	; (8001500 <HAL_MspInit+0x4c>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	4a10      	ldr	r2, [pc, #64]	; (8001500 <HAL_MspInit+0x4c>)
 80014c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014c4:	6413      	str	r3, [r2, #64]	; 0x40
 80014c6:	4b0e      	ldr	r3, [pc, #56]	; (8001500 <HAL_MspInit+0x4c>)
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ce:	607b      	str	r3, [r7, #4]
 80014d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014d2:	4b0b      	ldr	r3, [pc, #44]	; (8001500 <HAL_MspInit+0x4c>)
 80014d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d6:	4a0a      	ldr	r2, [pc, #40]	; (8001500 <HAL_MspInit+0x4c>)
 80014d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014dc:	6453      	str	r3, [r2, #68]	; 0x44
 80014de:	4b08      	ldr	r3, [pc, #32]	; (8001500 <HAL_MspInit+0x4c>)
 80014e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014e6:	603b      	str	r3, [r7, #0]
 80014e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014ea:	2200      	movs	r2, #0
 80014ec:	210f      	movs	r1, #15
 80014ee:	f06f 0001 	mvn.w	r0, #1
 80014f2:	f000 fad4 	bl	8001a9e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40023800 	.word	0x40023800

08001504 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001508:	e7fe      	b.n	8001508 <NMI_Handler+0x4>

0800150a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800150a:	b480      	push	{r7}
 800150c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800150e:	e7fe      	b.n	800150e <HardFault_Handler+0x4>

08001510 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001514:	e7fe      	b.n	8001514 <MemManage_Handler+0x4>

08001516 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001516:	b480      	push	{r7}
 8001518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800151a:	e7fe      	b.n	800151a <BusFault_Handler+0x4>

0800151c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001520:	e7fe      	b.n	8001520 <UsageFault_Handler+0x4>

08001522 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001522:	b480      	push	{r7}
 8001524:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001534:	f000 f9d6 	bl	80018e4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001538:	f003 fe58 	bl	80051ec <xTaskGetSchedulerState>
 800153c:	4603      	mov	r3, r0
 800153e:	2b01      	cmp	r3, #1
 8001540:	d001      	beq.n	8001546 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001542:	f004 f9a9 	bl	8005898 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}

0800154a <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	b086      	sub	sp, #24
 800154e:	af00      	add	r7, sp, #0
 8001550:	60f8      	str	r0, [r7, #12]
 8001552:	60b9      	str	r1, [r7, #8]
 8001554:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001556:	2300      	movs	r3, #0
 8001558:	617b      	str	r3, [r7, #20]
 800155a:	e00a      	b.n	8001572 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800155c:	f3af 8000 	nop.w
 8001560:	4601      	mov	r1, r0
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	1c5a      	adds	r2, r3, #1
 8001566:	60ba      	str	r2, [r7, #8]
 8001568:	b2ca      	uxtb	r2, r1
 800156a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	3301      	adds	r3, #1
 8001570:	617b      	str	r3, [r7, #20]
 8001572:	697a      	ldr	r2, [r7, #20]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	429a      	cmp	r2, r3
 8001578:	dbf0      	blt.n	800155c <_read+0x12>
	}

return len;
 800157a:	687b      	ldr	r3, [r7, #4]
}
 800157c:	4618      	mov	r0, r3
 800157e:	3718      	adds	r7, #24
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
 800158a:	60f8      	str	r0, [r7, #12]
 800158c:	60b9      	str	r1, [r7, #8]
 800158e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001590:	2300      	movs	r3, #0
 8001592:	617b      	str	r3, [r7, #20]
 8001594:	e009      	b.n	80015aa <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	1c5a      	adds	r2, r3, #1
 800159a:	60ba      	str	r2, [r7, #8]
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff fcba 	bl	8000f18 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	3301      	adds	r3, #1
 80015a8:	617b      	str	r3, [r7, #20]
 80015aa:	697a      	ldr	r2, [r7, #20]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	429a      	cmp	r2, r3
 80015b0:	dbf1      	blt.n	8001596 <_write+0x12>
	}
	return len;
 80015b2:	687b      	ldr	r3, [r7, #4]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3718      	adds	r7, #24
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <_close>:

int _close(int file)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
	return -1;
 80015c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015e4:	605a      	str	r2, [r3, #4]
	return 0;
 80015e6:	2300      	movs	r3, #0
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <_isatty>:

int _isatty(int file)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
	return 1;
 80015fc:	2301      	movs	r3, #1
}
 80015fe:	4618      	mov	r0, r3
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr

0800160a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800160a:	b480      	push	{r7}
 800160c:	b085      	sub	sp, #20
 800160e:	af00      	add	r7, sp, #0
 8001610:	60f8      	str	r0, [r7, #12]
 8001612:	60b9      	str	r1, [r7, #8]
 8001614:	607a      	str	r2, [r7, #4]
	return 0;
 8001616:	2300      	movs	r3, #0
}
 8001618:	4618      	mov	r0, r3
 800161a:	3714      	adds	r7, #20
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800162c:	4a14      	ldr	r2, [pc, #80]	; (8001680 <_sbrk+0x5c>)
 800162e:	4b15      	ldr	r3, [pc, #84]	; (8001684 <_sbrk+0x60>)
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001638:	4b13      	ldr	r3, [pc, #76]	; (8001688 <_sbrk+0x64>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d102      	bne.n	8001646 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001640:	4b11      	ldr	r3, [pc, #68]	; (8001688 <_sbrk+0x64>)
 8001642:	4a12      	ldr	r2, [pc, #72]	; (800168c <_sbrk+0x68>)
 8001644:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001646:	4b10      	ldr	r3, [pc, #64]	; (8001688 <_sbrk+0x64>)
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4413      	add	r3, r2
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	429a      	cmp	r2, r3
 8001652:	d207      	bcs.n	8001664 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001654:	f004 fb56 	bl	8005d04 <__errno>
 8001658:	4603      	mov	r3, r0
 800165a:	220c      	movs	r2, #12
 800165c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800165e:	f04f 33ff 	mov.w	r3, #4294967295
 8001662:	e009      	b.n	8001678 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001664:	4b08      	ldr	r3, [pc, #32]	; (8001688 <_sbrk+0x64>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800166a:	4b07      	ldr	r3, [pc, #28]	; (8001688 <_sbrk+0x64>)
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4413      	add	r3, r2
 8001672:	4a05      	ldr	r2, [pc, #20]	; (8001688 <_sbrk+0x64>)
 8001674:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001676:	68fb      	ldr	r3, [r7, #12]
}
 8001678:	4618      	mov	r0, r3
 800167a:	3718      	adds	r7, #24
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	20050000 	.word	0x20050000
 8001684:	00000400 	.word	0x00000400
 8001688:	20000658 	.word	0x20000658
 800168c:	20004448 	.word	0x20004448

08001690 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001694:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <SystemInit+0x20>)
 8001696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800169a:	4a05      	ldr	r2, [pc, #20]	; (80016b0 <SystemInit+0x20>)
 800169c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016a4:	bf00      	nop
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	e000ed00 	.word	0xe000ed00

080016b4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016b8:	4b14      	ldr	r3, [pc, #80]	; (800170c <MX_USART1_UART_Init+0x58>)
 80016ba:	4a15      	ldr	r2, [pc, #84]	; (8001710 <MX_USART1_UART_Init+0x5c>)
 80016bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80016be:	4b13      	ldr	r3, [pc, #76]	; (800170c <MX_USART1_UART_Init+0x58>)
 80016c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016c6:	4b11      	ldr	r3, [pc, #68]	; (800170c <MX_USART1_UART_Init+0x58>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016cc:	4b0f      	ldr	r3, [pc, #60]	; (800170c <MX_USART1_UART_Init+0x58>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016d2:	4b0e      	ldr	r3, [pc, #56]	; (800170c <MX_USART1_UART_Init+0x58>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016d8:	4b0c      	ldr	r3, [pc, #48]	; (800170c <MX_USART1_UART_Init+0x58>)
 80016da:	220c      	movs	r2, #12
 80016dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016de:	4b0b      	ldr	r3, [pc, #44]	; (800170c <MX_USART1_UART_Init+0x58>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016e4:	4b09      	ldr	r3, [pc, #36]	; (800170c <MX_USART1_UART_Init+0x58>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016ea:	4b08      	ldr	r3, [pc, #32]	; (800170c <MX_USART1_UART_Init+0x58>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016f0:	4b06      	ldr	r3, [pc, #24]	; (800170c <MX_USART1_UART_Init+0x58>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016f6:	4805      	ldr	r0, [pc, #20]	; (800170c <MX_USART1_UART_Init+0x58>)
 80016f8:	f001 fca4 	bl	8003044 <HAL_UART_Init>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001702:	f7ff fd23 	bl	800114c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	2000065c 	.word	0x2000065c
 8001710:	40011000 	.word	0x40011000

08001714 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b0ac      	sub	sp, #176	; 0xb0
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800172c:	f107 0318 	add.w	r3, r7, #24
 8001730:	2284      	movs	r2, #132	; 0x84
 8001732:	2100      	movs	r1, #0
 8001734:	4618      	mov	r0, r3
 8001736:	f004 fb1d 	bl	8005d74 <memset>
  if(uartHandle->Instance==USART1)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a32      	ldr	r2, [pc, #200]	; (8001808 <HAL_UART_MspInit+0xf4>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d15c      	bne.n	80017fe <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001744:	2340      	movs	r3, #64	; 0x40
 8001746:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001748:	2300      	movs	r3, #0
 800174a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800174c:	f107 0318 	add.w	r3, r7, #24
 8001750:	4618      	mov	r0, r3
 8001752:	f001 f887 	bl	8002864 <HAL_RCCEx_PeriphCLKConfig>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800175c:	f7ff fcf6 	bl	800114c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001760:	4b2a      	ldr	r3, [pc, #168]	; (800180c <HAL_UART_MspInit+0xf8>)
 8001762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001764:	4a29      	ldr	r2, [pc, #164]	; (800180c <HAL_UART_MspInit+0xf8>)
 8001766:	f043 0310 	orr.w	r3, r3, #16
 800176a:	6453      	str	r3, [r2, #68]	; 0x44
 800176c:	4b27      	ldr	r3, [pc, #156]	; (800180c <HAL_UART_MspInit+0xf8>)
 800176e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001770:	f003 0310 	and.w	r3, r3, #16
 8001774:	617b      	str	r3, [r7, #20]
 8001776:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001778:	4b24      	ldr	r3, [pc, #144]	; (800180c <HAL_UART_MspInit+0xf8>)
 800177a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177c:	4a23      	ldr	r2, [pc, #140]	; (800180c <HAL_UART_MspInit+0xf8>)
 800177e:	f043 0302 	orr.w	r3, r3, #2
 8001782:	6313      	str	r3, [r2, #48]	; 0x30
 8001784:	4b21      	ldr	r3, [pc, #132]	; (800180c <HAL_UART_MspInit+0xf8>)
 8001786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001788:	f003 0302 	and.w	r3, r3, #2
 800178c:	613b      	str	r3, [r7, #16]
 800178e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001790:	4b1e      	ldr	r3, [pc, #120]	; (800180c <HAL_UART_MspInit+0xf8>)
 8001792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001794:	4a1d      	ldr	r2, [pc, #116]	; (800180c <HAL_UART_MspInit+0xf8>)
 8001796:	f043 0301 	orr.w	r3, r3, #1
 800179a:	6313      	str	r3, [r2, #48]	; 0x30
 800179c:	4b1b      	ldr	r3, [pc, #108]	; (800180c <HAL_UART_MspInit+0xf8>)
 800179e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a0:	f003 0301 	and.w	r3, r3, #1
 80017a4:	60fb      	str	r3, [r7, #12]
 80017a6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80017a8:	2380      	movs	r3, #128	; 0x80
 80017aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ae:	2302      	movs	r3, #2
 80017b0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b4:	2300      	movs	r3, #0
 80017b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ba:	2300      	movs	r3, #0
 80017bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017c0:	2307      	movs	r3, #7
 80017c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80017c6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017ca:	4619      	mov	r1, r3
 80017cc:	4810      	ldr	r0, [pc, #64]	; (8001810 <HAL_UART_MspInit+0xfc>)
 80017ce:	f000 f98f 	bl	8001af0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80017d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017da:	2302      	movs	r3, #2
 80017dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e0:	2300      	movs	r3, #0
 80017e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e6:	2300      	movs	r3, #0
 80017e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017ec:	2307      	movs	r3, #7
 80017ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80017f2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017f6:	4619      	mov	r1, r3
 80017f8:	4806      	ldr	r0, [pc, #24]	; (8001814 <HAL_UART_MspInit+0x100>)
 80017fa:	f000 f979 	bl	8001af0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80017fe:	bf00      	nop
 8001800:	37b0      	adds	r7, #176	; 0xb0
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40011000 	.word	0x40011000
 800180c:	40023800 	.word	0x40023800
 8001810:	40020400 	.word	0x40020400
 8001814:	40020000 	.word	0x40020000

08001818 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001818:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001850 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800181c:	480d      	ldr	r0, [pc, #52]	; (8001854 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800181e:	490e      	ldr	r1, [pc, #56]	; (8001858 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001820:	4a0e      	ldr	r2, [pc, #56]	; (800185c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001822:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001824:	e002      	b.n	800182c <LoopCopyDataInit>

08001826 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001826:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001828:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800182a:	3304      	adds	r3, #4

0800182c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800182c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800182e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001830:	d3f9      	bcc.n	8001826 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001832:	4a0b      	ldr	r2, [pc, #44]	; (8001860 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001834:	4c0b      	ldr	r4, [pc, #44]	; (8001864 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001836:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001838:	e001      	b.n	800183e <LoopFillZerobss>

0800183a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800183a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800183c:	3204      	adds	r2, #4

0800183e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800183e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001840:	d3fb      	bcc.n	800183a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001842:	f7ff ff25 	bl	8001690 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001846:	f004 fa63 	bl	8005d10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800184a:	f7ff fbc9 	bl	8000fe0 <main>
  bx  lr    
 800184e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001850:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001854:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001858:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 800185c:	08007250 	.word	0x08007250
  ldr r2, =_sbss
 8001860:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001864:	20004444 	.word	0x20004444

08001868 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001868:	e7fe      	b.n	8001868 <ADC_IRQHandler>

0800186a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800186e:	2003      	movs	r0, #3
 8001870:	f000 f90a 	bl	8001a88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001874:	200f      	movs	r0, #15
 8001876:	f000 f805 	bl	8001884 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800187a:	f7ff fe1b 	bl	80014b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800187e:	2300      	movs	r3, #0
}
 8001880:	4618      	mov	r0, r3
 8001882:	bd80      	pop	{r7, pc}

08001884 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800188c:	4b12      	ldr	r3, [pc, #72]	; (80018d8 <HAL_InitTick+0x54>)
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	4b12      	ldr	r3, [pc, #72]	; (80018dc <HAL_InitTick+0x58>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	4619      	mov	r1, r3
 8001896:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800189a:	fbb3 f3f1 	udiv	r3, r3, r1
 800189e:	fbb2 f3f3 	udiv	r3, r2, r3
 80018a2:	4618      	mov	r0, r3
 80018a4:	f000 f917 	bl	8001ad6 <HAL_SYSTICK_Config>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e00e      	b.n	80018d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2b0f      	cmp	r3, #15
 80018b6:	d80a      	bhi.n	80018ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018b8:	2200      	movs	r2, #0
 80018ba:	6879      	ldr	r1, [r7, #4]
 80018bc:	f04f 30ff 	mov.w	r0, #4294967295
 80018c0:	f000 f8ed 	bl	8001a9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018c4:	4a06      	ldr	r2, [pc, #24]	; (80018e0 <HAL_InitTick+0x5c>)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018ca:	2300      	movs	r3, #0
 80018cc:	e000      	b.n	80018d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3708      	adds	r7, #8
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	20000008 	.word	0x20000008
 80018dc:	20000010 	.word	0x20000010
 80018e0:	2000000c 	.word	0x2000000c

080018e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018e8:	4b06      	ldr	r3, [pc, #24]	; (8001904 <HAL_IncTick+0x20>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	461a      	mov	r2, r3
 80018ee:	4b06      	ldr	r3, [pc, #24]	; (8001908 <HAL_IncTick+0x24>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4413      	add	r3, r2
 80018f4:	4a04      	ldr	r2, [pc, #16]	; (8001908 <HAL_IncTick+0x24>)
 80018f6:	6013      	str	r3, [r2, #0]
}
 80018f8:	bf00      	nop
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	20000010 	.word	0x20000010
 8001908:	200006e4 	.word	0x200006e4

0800190c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  return uwTick;
 8001910:	4b03      	ldr	r3, [pc, #12]	; (8001920 <HAL_GetTick+0x14>)
 8001912:	681b      	ldr	r3, [r3, #0]
}
 8001914:	4618      	mov	r0, r3
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	200006e4 	.word	0x200006e4

08001924 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f003 0307 	and.w	r3, r3, #7
 8001932:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001934:	4b0b      	ldr	r3, [pc, #44]	; (8001964 <__NVIC_SetPriorityGrouping+0x40>)
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800193a:	68ba      	ldr	r2, [r7, #8]
 800193c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001940:	4013      	ands	r3, r2
 8001942:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800194c:	4b06      	ldr	r3, [pc, #24]	; (8001968 <__NVIC_SetPriorityGrouping+0x44>)
 800194e:	4313      	orrs	r3, r2
 8001950:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001952:	4a04      	ldr	r2, [pc, #16]	; (8001964 <__NVIC_SetPriorityGrouping+0x40>)
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	60d3      	str	r3, [r2, #12]
}
 8001958:	bf00      	nop
 800195a:	3714      	adds	r7, #20
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	e000ed00 	.word	0xe000ed00
 8001968:	05fa0000 	.word	0x05fa0000

0800196c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001970:	4b04      	ldr	r3, [pc, #16]	; (8001984 <__NVIC_GetPriorityGrouping+0x18>)
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	0a1b      	lsrs	r3, r3, #8
 8001976:	f003 0307 	and.w	r3, r3, #7
}
 800197a:	4618      	mov	r0, r3
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr
 8001984:	e000ed00 	.word	0xe000ed00

08001988 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	4603      	mov	r3, r0
 8001990:	6039      	str	r1, [r7, #0]
 8001992:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001998:	2b00      	cmp	r3, #0
 800199a:	db0a      	blt.n	80019b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	b2da      	uxtb	r2, r3
 80019a0:	490c      	ldr	r1, [pc, #48]	; (80019d4 <__NVIC_SetPriority+0x4c>)
 80019a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a6:	0112      	lsls	r2, r2, #4
 80019a8:	b2d2      	uxtb	r2, r2
 80019aa:	440b      	add	r3, r1
 80019ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019b0:	e00a      	b.n	80019c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	b2da      	uxtb	r2, r3
 80019b6:	4908      	ldr	r1, [pc, #32]	; (80019d8 <__NVIC_SetPriority+0x50>)
 80019b8:	79fb      	ldrb	r3, [r7, #7]
 80019ba:	f003 030f 	and.w	r3, r3, #15
 80019be:	3b04      	subs	r3, #4
 80019c0:	0112      	lsls	r2, r2, #4
 80019c2:	b2d2      	uxtb	r2, r2
 80019c4:	440b      	add	r3, r1
 80019c6:	761a      	strb	r2, [r3, #24]
}
 80019c8:	bf00      	nop
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr
 80019d4:	e000e100 	.word	0xe000e100
 80019d8:	e000ed00 	.word	0xe000ed00

080019dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019dc:	b480      	push	{r7}
 80019de:	b089      	sub	sp, #36	; 0x24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	60b9      	str	r1, [r7, #8]
 80019e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	f1c3 0307 	rsb	r3, r3, #7
 80019f6:	2b04      	cmp	r3, #4
 80019f8:	bf28      	it	cs
 80019fa:	2304      	movcs	r3, #4
 80019fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	3304      	adds	r3, #4
 8001a02:	2b06      	cmp	r3, #6
 8001a04:	d902      	bls.n	8001a0c <NVIC_EncodePriority+0x30>
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	3b03      	subs	r3, #3
 8001a0a:	e000      	b.n	8001a0e <NVIC_EncodePriority+0x32>
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a10:	f04f 32ff 	mov.w	r2, #4294967295
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1a:	43da      	mvns	r2, r3
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	401a      	ands	r2, r3
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a24:	f04f 31ff 	mov.w	r1, #4294967295
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2e:	43d9      	mvns	r1, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a34:	4313      	orrs	r3, r2
         );
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3724      	adds	r7, #36	; 0x24
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
	...

08001a44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a54:	d301      	bcc.n	8001a5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a56:	2301      	movs	r3, #1
 8001a58:	e00f      	b.n	8001a7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a5a:	4a0a      	ldr	r2, [pc, #40]	; (8001a84 <SysTick_Config+0x40>)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a62:	210f      	movs	r1, #15
 8001a64:	f04f 30ff 	mov.w	r0, #4294967295
 8001a68:	f7ff ff8e 	bl	8001988 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a6c:	4b05      	ldr	r3, [pc, #20]	; (8001a84 <SysTick_Config+0x40>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a72:	4b04      	ldr	r3, [pc, #16]	; (8001a84 <SysTick_Config+0x40>)
 8001a74:	2207      	movs	r2, #7
 8001a76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	e000e010 	.word	0xe000e010

08001a88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f7ff ff47 	bl	8001924 <__NVIC_SetPriorityGrouping>
}
 8001a96:	bf00      	nop
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b086      	sub	sp, #24
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	60b9      	str	r1, [r7, #8]
 8001aa8:	607a      	str	r2, [r7, #4]
 8001aaa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001aac:	2300      	movs	r3, #0
 8001aae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ab0:	f7ff ff5c 	bl	800196c <__NVIC_GetPriorityGrouping>
 8001ab4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	68b9      	ldr	r1, [r7, #8]
 8001aba:	6978      	ldr	r0, [r7, #20]
 8001abc:	f7ff ff8e 	bl	80019dc <NVIC_EncodePriority>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ac6:	4611      	mov	r1, r2
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7ff ff5d 	bl	8001988 <__NVIC_SetPriority>
}
 8001ace:	bf00      	nop
 8001ad0:	3718      	adds	r7, #24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b082      	sub	sp, #8
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f7ff ffb0 	bl	8001a44 <SysTick_Config>
 8001ae4:	4603      	mov	r3, r0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
	...

08001af0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b089      	sub	sp, #36	; 0x24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001afa:	2300      	movs	r3, #0
 8001afc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001afe:	2300      	movs	r3, #0
 8001b00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001b02:	2300      	movs	r3, #0
 8001b04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001b06:	2300      	movs	r3, #0
 8001b08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	61fb      	str	r3, [r7, #28]
 8001b0e:	e175      	b.n	8001dfc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001b10:	2201      	movs	r2, #1
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	697a      	ldr	r2, [r7, #20]
 8001b20:	4013      	ands	r3, r2
 8001b22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	f040 8164 	bne.w	8001df6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f003 0303 	and.w	r3, r3, #3
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d005      	beq.n	8001b46 <HAL_GPIO_Init+0x56>
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f003 0303 	and.w	r3, r3, #3
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d130      	bne.n	8001ba8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	2203      	movs	r2, #3
 8001b52:	fa02 f303 	lsl.w	r3, r2, r3
 8001b56:	43db      	mvns	r3, r3
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	68da      	ldr	r2, [r3, #12]
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	43db      	mvns	r3, r3
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	091b      	lsrs	r3, r3, #4
 8001b92:	f003 0201 	and.w	r2, r3, #1
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f003 0303 	and.w	r3, r3, #3
 8001bb0:	2b03      	cmp	r3, #3
 8001bb2:	d017      	beq.n	8001be4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	2203      	movs	r2, #3
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	689a      	ldr	r2, [r3, #8]
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f003 0303 	and.w	r3, r3, #3
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d123      	bne.n	8001c38 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	08da      	lsrs	r2, r3, #3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	3208      	adds	r2, #8
 8001bf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	f003 0307 	and.w	r3, r3, #7
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	220f      	movs	r2, #15
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	43db      	mvns	r3, r3
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	4013      	ands	r3, r2
 8001c12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	691a      	ldr	r2, [r3, #16]
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	08da      	lsrs	r2, r3, #3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	3208      	adds	r2, #8
 8001c32:	69b9      	ldr	r1, [r7, #24]
 8001c34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	2203      	movs	r2, #3
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f003 0203 	and.w	r2, r3, #3
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	f000 80be 	beq.w	8001df6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c7a:	4b66      	ldr	r3, [pc, #408]	; (8001e14 <HAL_GPIO_Init+0x324>)
 8001c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7e:	4a65      	ldr	r2, [pc, #404]	; (8001e14 <HAL_GPIO_Init+0x324>)
 8001c80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c84:	6453      	str	r3, [r2, #68]	; 0x44
 8001c86:	4b63      	ldr	r3, [pc, #396]	; (8001e14 <HAL_GPIO_Init+0x324>)
 8001c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c8e:	60fb      	str	r3, [r7, #12]
 8001c90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001c92:	4a61      	ldr	r2, [pc, #388]	; (8001e18 <HAL_GPIO_Init+0x328>)
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	089b      	lsrs	r3, r3, #2
 8001c98:	3302      	adds	r3, #2
 8001c9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	f003 0303 	and.w	r3, r3, #3
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	220f      	movs	r2, #15
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	43db      	mvns	r3, r3
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a58      	ldr	r2, [pc, #352]	; (8001e1c <HAL_GPIO_Init+0x32c>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d037      	beq.n	8001d2e <HAL_GPIO_Init+0x23e>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a57      	ldr	r2, [pc, #348]	; (8001e20 <HAL_GPIO_Init+0x330>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d031      	beq.n	8001d2a <HAL_GPIO_Init+0x23a>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a56      	ldr	r2, [pc, #344]	; (8001e24 <HAL_GPIO_Init+0x334>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d02b      	beq.n	8001d26 <HAL_GPIO_Init+0x236>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a55      	ldr	r2, [pc, #340]	; (8001e28 <HAL_GPIO_Init+0x338>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d025      	beq.n	8001d22 <HAL_GPIO_Init+0x232>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a54      	ldr	r2, [pc, #336]	; (8001e2c <HAL_GPIO_Init+0x33c>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d01f      	beq.n	8001d1e <HAL_GPIO_Init+0x22e>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a53      	ldr	r2, [pc, #332]	; (8001e30 <HAL_GPIO_Init+0x340>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d019      	beq.n	8001d1a <HAL_GPIO_Init+0x22a>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a52      	ldr	r2, [pc, #328]	; (8001e34 <HAL_GPIO_Init+0x344>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d013      	beq.n	8001d16 <HAL_GPIO_Init+0x226>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a51      	ldr	r2, [pc, #324]	; (8001e38 <HAL_GPIO_Init+0x348>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d00d      	beq.n	8001d12 <HAL_GPIO_Init+0x222>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4a50      	ldr	r2, [pc, #320]	; (8001e3c <HAL_GPIO_Init+0x34c>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d007      	beq.n	8001d0e <HAL_GPIO_Init+0x21e>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a4f      	ldr	r2, [pc, #316]	; (8001e40 <HAL_GPIO_Init+0x350>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d101      	bne.n	8001d0a <HAL_GPIO_Init+0x21a>
 8001d06:	2309      	movs	r3, #9
 8001d08:	e012      	b.n	8001d30 <HAL_GPIO_Init+0x240>
 8001d0a:	230a      	movs	r3, #10
 8001d0c:	e010      	b.n	8001d30 <HAL_GPIO_Init+0x240>
 8001d0e:	2308      	movs	r3, #8
 8001d10:	e00e      	b.n	8001d30 <HAL_GPIO_Init+0x240>
 8001d12:	2307      	movs	r3, #7
 8001d14:	e00c      	b.n	8001d30 <HAL_GPIO_Init+0x240>
 8001d16:	2306      	movs	r3, #6
 8001d18:	e00a      	b.n	8001d30 <HAL_GPIO_Init+0x240>
 8001d1a:	2305      	movs	r3, #5
 8001d1c:	e008      	b.n	8001d30 <HAL_GPIO_Init+0x240>
 8001d1e:	2304      	movs	r3, #4
 8001d20:	e006      	b.n	8001d30 <HAL_GPIO_Init+0x240>
 8001d22:	2303      	movs	r3, #3
 8001d24:	e004      	b.n	8001d30 <HAL_GPIO_Init+0x240>
 8001d26:	2302      	movs	r3, #2
 8001d28:	e002      	b.n	8001d30 <HAL_GPIO_Init+0x240>
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e000      	b.n	8001d30 <HAL_GPIO_Init+0x240>
 8001d2e:	2300      	movs	r3, #0
 8001d30:	69fa      	ldr	r2, [r7, #28]
 8001d32:	f002 0203 	and.w	r2, r2, #3
 8001d36:	0092      	lsls	r2, r2, #2
 8001d38:	4093      	lsls	r3, r2
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001d40:	4935      	ldr	r1, [pc, #212]	; (8001e18 <HAL_GPIO_Init+0x328>)
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	089b      	lsrs	r3, r3, #2
 8001d46:	3302      	adds	r3, #2
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d4e:	4b3d      	ldr	r3, [pc, #244]	; (8001e44 <HAL_GPIO_Init+0x354>)
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	43db      	mvns	r3, r3
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d003      	beq.n	8001d72 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d72:	4a34      	ldr	r2, [pc, #208]	; (8001e44 <HAL_GPIO_Init+0x354>)
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d78:	4b32      	ldr	r3, [pc, #200]	; (8001e44 <HAL_GPIO_Init+0x354>)
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	43db      	mvns	r3, r3
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	4013      	ands	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d003      	beq.n	8001d9c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d9c:	4a29      	ldr	r2, [pc, #164]	; (8001e44 <HAL_GPIO_Init+0x354>)
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001da2:	4b28      	ldr	r3, [pc, #160]	; (8001e44 <HAL_GPIO_Init+0x354>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	43db      	mvns	r3, r3
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	4013      	ands	r3, r2
 8001db0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d003      	beq.n	8001dc6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dc6:	4a1f      	ldr	r2, [pc, #124]	; (8001e44 <HAL_GPIO_Init+0x354>)
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dcc:	4b1d      	ldr	r3, [pc, #116]	; (8001e44 <HAL_GPIO_Init+0x354>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	43db      	mvns	r3, r3
 8001dd6:	69ba      	ldr	r2, [r7, #24]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d003      	beq.n	8001df0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001df0:	4a14      	ldr	r2, [pc, #80]	; (8001e44 <HAL_GPIO_Init+0x354>)
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	3301      	adds	r3, #1
 8001dfa:	61fb      	str	r3, [r7, #28]
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	2b0f      	cmp	r3, #15
 8001e00:	f67f ae86 	bls.w	8001b10 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001e04:	bf00      	nop
 8001e06:	bf00      	nop
 8001e08:	3724      	adds	r7, #36	; 0x24
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	40023800 	.word	0x40023800
 8001e18:	40013800 	.word	0x40013800
 8001e1c:	40020000 	.word	0x40020000
 8001e20:	40020400 	.word	0x40020400
 8001e24:	40020800 	.word	0x40020800
 8001e28:	40020c00 	.word	0x40020c00
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	40021400 	.word	0x40021400
 8001e34:	40021800 	.word	0x40021800
 8001e38:	40021c00 	.word	0x40021c00
 8001e3c:	40022000 	.word	0x40022000
 8001e40:	40022400 	.word	0x40022400
 8001e44:	40013c00 	.word	0x40013c00

08001e48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	460b      	mov	r3, r1
 8001e52:	807b      	strh	r3, [r7, #2]
 8001e54:	4613      	mov	r3, r2
 8001e56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e58:	787b      	ldrb	r3, [r7, #1]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d003      	beq.n	8001e66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e5e:	887a      	ldrh	r2, [r7, #2]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001e64:	e003      	b.n	8001e6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001e66:	887b      	ldrh	r3, [r7, #2]
 8001e68:	041a      	lsls	r2, r3, #16
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	619a      	str	r2, [r3, #24]
}
 8001e6e:	bf00      	nop
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr

08001e7a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	b085      	sub	sp, #20
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
 8001e82:	460b      	mov	r3, r1
 8001e84:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	695b      	ldr	r3, [r3, #20]
 8001e8a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e8c:	887a      	ldrh	r2, [r7, #2]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	4013      	ands	r3, r2
 8001e92:	041a      	lsls	r2, r3, #16
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	43d9      	mvns	r1, r3
 8001e98:	887b      	ldrh	r3, [r7, #2]
 8001e9a:	400b      	ands	r3, r1
 8001e9c:	431a      	orrs	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	619a      	str	r2, [r3, #24]
}
 8001ea2:	bf00      	nop
 8001ea4:	3714      	adds	r7, #20
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
	...

08001eb0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001eba:	4b23      	ldr	r3, [pc, #140]	; (8001f48 <HAL_PWREx_EnableOverDrive+0x98>)
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	4a22      	ldr	r2, [pc, #136]	; (8001f48 <HAL_PWREx_EnableOverDrive+0x98>)
 8001ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ec4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ec6:	4b20      	ldr	r3, [pc, #128]	; (8001f48 <HAL_PWREx_EnableOverDrive+0x98>)
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ece:	603b      	str	r3, [r7, #0]
 8001ed0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001ed2:	4b1e      	ldr	r3, [pc, #120]	; (8001f4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a1d      	ldr	r2, [pc, #116]	; (8001f4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ed8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001edc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ede:	f7ff fd15 	bl	800190c <HAL_GetTick>
 8001ee2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001ee4:	e009      	b.n	8001efa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001ee6:	f7ff fd11 	bl	800190c <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ef4:	d901      	bls.n	8001efa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e022      	b.n	8001f40 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001efa:	4b14      	ldr	r3, [pc, #80]	; (8001f4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f06:	d1ee      	bne.n	8001ee6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001f08:	4b10      	ldr	r3, [pc, #64]	; (8001f4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a0f      	ldr	r2, [pc, #60]	; (8001f4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f12:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f14:	f7ff fcfa 	bl	800190c <HAL_GetTick>
 8001f18:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001f1a:	e009      	b.n	8001f30 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001f1c:	f7ff fcf6 	bl	800190c <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f2a:	d901      	bls.n	8001f30 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e007      	b.n	8001f40 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001f30:	4b06      	ldr	r3, [pc, #24]	; (8001f4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001f3c:	d1ee      	bne.n	8001f1c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001f3e:	2300      	movs	r3, #0
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3708      	adds	r7, #8
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40023800 	.word	0x40023800
 8001f4c:	40007000 	.word	0x40007000

08001f50 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b086      	sub	sp, #24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d101      	bne.n	8001f66 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e291      	b.n	800248a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	f000 8087 	beq.w	8002082 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f74:	4b96      	ldr	r3, [pc, #600]	; (80021d0 <HAL_RCC_OscConfig+0x280>)
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f003 030c 	and.w	r3, r3, #12
 8001f7c:	2b04      	cmp	r3, #4
 8001f7e:	d00c      	beq.n	8001f9a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f80:	4b93      	ldr	r3, [pc, #588]	; (80021d0 <HAL_RCC_OscConfig+0x280>)
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	f003 030c 	and.w	r3, r3, #12
 8001f88:	2b08      	cmp	r3, #8
 8001f8a:	d112      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x62>
 8001f8c:	4b90      	ldr	r3, [pc, #576]	; (80021d0 <HAL_RCC_OscConfig+0x280>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f98:	d10b      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f9a:	4b8d      	ldr	r3, [pc, #564]	; (80021d0 <HAL_RCC_OscConfig+0x280>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d06c      	beq.n	8002080 <HAL_RCC_OscConfig+0x130>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d168      	bne.n	8002080 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e26b      	b.n	800248a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fba:	d106      	bne.n	8001fca <HAL_RCC_OscConfig+0x7a>
 8001fbc:	4b84      	ldr	r3, [pc, #528]	; (80021d0 <HAL_RCC_OscConfig+0x280>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a83      	ldr	r2, [pc, #524]	; (80021d0 <HAL_RCC_OscConfig+0x280>)
 8001fc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fc6:	6013      	str	r3, [r2, #0]
 8001fc8:	e02e      	b.n	8002028 <HAL_RCC_OscConfig+0xd8>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d10c      	bne.n	8001fec <HAL_RCC_OscConfig+0x9c>
 8001fd2:	4b7f      	ldr	r3, [pc, #508]	; (80021d0 <HAL_RCC_OscConfig+0x280>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a7e      	ldr	r2, [pc, #504]	; (80021d0 <HAL_RCC_OscConfig+0x280>)
 8001fd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fdc:	6013      	str	r3, [r2, #0]
 8001fde:	4b7c      	ldr	r3, [pc, #496]	; (80021d0 <HAL_RCC_OscConfig+0x280>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a7b      	ldr	r2, [pc, #492]	; (80021d0 <HAL_RCC_OscConfig+0x280>)
 8001fe4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fe8:	6013      	str	r3, [r2, #0]
 8001fea:	e01d      	b.n	8002028 <HAL_RCC_OscConfig+0xd8>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ff4:	d10c      	bne.n	8002010 <HAL_RCC_OscConfig+0xc0>
 8001ff6:	4b76      	ldr	r3, [pc, #472]	; (80021d0 <HAL_RCC_OscConfig+0x280>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a75      	ldr	r2, [pc, #468]	; (80021d0 <HAL_RCC_OscConfig+0x280>)
 8001ffc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002000:	6013      	str	r3, [r2, #0]
 8002002:	4b73      	ldr	r3, [pc, #460]	; (80021d0 <HAL_RCC_OscConfig+0x280>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a72      	ldr	r2, [pc, #456]	; (80021d0 <HAL_RCC_OscConfig+0x280>)
 8002008:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800200c:	6013      	str	r3, [r2, #0]
 800200e:	e00b      	b.n	8002028 <HAL_RCC_OscConfig+0xd8>
 8002010:	4b6f      	ldr	r3, [pc, #444]	; (80021d0 <HAL_RCC_OscConfig+0x280>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a6e      	ldr	r2, [pc, #440]	; (80021d0 <HAL_RCC_OscConfig+0x280>)
 8002016:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800201a:	6013      	str	r3, [r2, #0]
 800201c:	4b6c      	ldr	r3, [pc, #432]	; (80021d0 <HAL_RCC_OscConfig+0x280>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a6b      	ldr	r2, [pc, #428]	; (80021d0 <HAL_RCC_OscConfig+0x280>)
 8002022:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002026:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d013      	beq.n	8002058 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002030:	f7ff fc6c 	bl	800190c <HAL_GetTick>
 8002034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002036:	e008      	b.n	800204a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002038:	f7ff fc68 	bl	800190c <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b64      	cmp	r3, #100	; 0x64
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e21f      	b.n	800248a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800204a:	4b61      	ldr	r3, [pc, #388]	; (80021d0 <HAL_RCC_OscConfig+0x280>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d0f0      	beq.n	8002038 <HAL_RCC_OscConfig+0xe8>
 8002056:	e014      	b.n	8002082 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002058:	f7ff fc58 	bl	800190c <HAL_GetTick>
 800205c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800205e:	e008      	b.n	8002072 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002060:	f7ff fc54 	bl	800190c <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b64      	cmp	r3, #100	; 0x64
 800206c:	d901      	bls.n	8002072 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e20b      	b.n	800248a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002072:	4b57      	ldr	r3, [pc, #348]	; (80021d0 <HAL_RCC_OscConfig+0x280>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d1f0      	bne.n	8002060 <HAL_RCC_OscConfig+0x110>
 800207e:	e000      	b.n	8002082 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002080:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d069      	beq.n	8002162 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800208e:	4b50      	ldr	r3, [pc, #320]	; (80021d0 <HAL_RCC_OscConfig+0x280>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f003 030c 	and.w	r3, r3, #12
 8002096:	2b00      	cmp	r3, #0
 8002098:	d00b      	beq.n	80020b2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800209a:	4b4d      	ldr	r3, [pc, #308]	; (80021d0 <HAL_RCC_OscConfig+0x280>)
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f003 030c 	and.w	r3, r3, #12
 80020a2:	2b08      	cmp	r3, #8
 80020a4:	d11c      	bne.n	80020e0 <HAL_RCC_OscConfig+0x190>
 80020a6:	4b4a      	ldr	r3, [pc, #296]	; (80021d0 <HAL_RCC_OscConfig+0x280>)
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d116      	bne.n	80020e0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020b2:	4b47      	ldr	r3, [pc, #284]	; (80021d0 <HAL_RCC_OscConfig+0x280>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d005      	beq.n	80020ca <HAL_RCC_OscConfig+0x17a>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d001      	beq.n	80020ca <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e1df      	b.n	800248a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ca:	4b41      	ldr	r3, [pc, #260]	; (80021d0 <HAL_RCC_OscConfig+0x280>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	493d      	ldr	r1, [pc, #244]	; (80021d0 <HAL_RCC_OscConfig+0x280>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020de:	e040      	b.n	8002162 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d023      	beq.n	8002130 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020e8:	4b39      	ldr	r3, [pc, #228]	; (80021d0 <HAL_RCC_OscConfig+0x280>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a38      	ldr	r2, [pc, #224]	; (80021d0 <HAL_RCC_OscConfig+0x280>)
 80020ee:	f043 0301 	orr.w	r3, r3, #1
 80020f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f4:	f7ff fc0a 	bl	800190c <HAL_GetTick>
 80020f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020fa:	e008      	b.n	800210e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020fc:	f7ff fc06 	bl	800190c <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b02      	cmp	r3, #2
 8002108:	d901      	bls.n	800210e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e1bd      	b.n	800248a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800210e:	4b30      	ldr	r3, [pc, #192]	; (80021d0 <HAL_RCC_OscConfig+0x280>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d0f0      	beq.n	80020fc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800211a:	4b2d      	ldr	r3, [pc, #180]	; (80021d0 <HAL_RCC_OscConfig+0x280>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	00db      	lsls	r3, r3, #3
 8002128:	4929      	ldr	r1, [pc, #164]	; (80021d0 <HAL_RCC_OscConfig+0x280>)
 800212a:	4313      	orrs	r3, r2
 800212c:	600b      	str	r3, [r1, #0]
 800212e:	e018      	b.n	8002162 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002130:	4b27      	ldr	r3, [pc, #156]	; (80021d0 <HAL_RCC_OscConfig+0x280>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a26      	ldr	r2, [pc, #152]	; (80021d0 <HAL_RCC_OscConfig+0x280>)
 8002136:	f023 0301 	bic.w	r3, r3, #1
 800213a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800213c:	f7ff fbe6 	bl	800190c <HAL_GetTick>
 8002140:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002142:	e008      	b.n	8002156 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002144:	f7ff fbe2 	bl	800190c <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b02      	cmp	r3, #2
 8002150:	d901      	bls.n	8002156 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e199      	b.n	800248a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002156:	4b1e      	ldr	r3, [pc, #120]	; (80021d0 <HAL_RCC_OscConfig+0x280>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1f0      	bne.n	8002144 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0308 	and.w	r3, r3, #8
 800216a:	2b00      	cmp	r3, #0
 800216c:	d038      	beq.n	80021e0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	695b      	ldr	r3, [r3, #20]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d019      	beq.n	80021aa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002176:	4b16      	ldr	r3, [pc, #88]	; (80021d0 <HAL_RCC_OscConfig+0x280>)
 8002178:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800217a:	4a15      	ldr	r2, [pc, #84]	; (80021d0 <HAL_RCC_OscConfig+0x280>)
 800217c:	f043 0301 	orr.w	r3, r3, #1
 8002180:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002182:	f7ff fbc3 	bl	800190c <HAL_GetTick>
 8002186:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002188:	e008      	b.n	800219c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800218a:	f7ff fbbf 	bl	800190c <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	2b02      	cmp	r3, #2
 8002196:	d901      	bls.n	800219c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e176      	b.n	800248a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800219c:	4b0c      	ldr	r3, [pc, #48]	; (80021d0 <HAL_RCC_OscConfig+0x280>)
 800219e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021a0:	f003 0302 	and.w	r3, r3, #2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d0f0      	beq.n	800218a <HAL_RCC_OscConfig+0x23a>
 80021a8:	e01a      	b.n	80021e0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021aa:	4b09      	ldr	r3, [pc, #36]	; (80021d0 <HAL_RCC_OscConfig+0x280>)
 80021ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021ae:	4a08      	ldr	r2, [pc, #32]	; (80021d0 <HAL_RCC_OscConfig+0x280>)
 80021b0:	f023 0301 	bic.w	r3, r3, #1
 80021b4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021b6:	f7ff fba9 	bl	800190c <HAL_GetTick>
 80021ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021bc:	e00a      	b.n	80021d4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021be:	f7ff fba5 	bl	800190c <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d903      	bls.n	80021d4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	e15c      	b.n	800248a <HAL_RCC_OscConfig+0x53a>
 80021d0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021d4:	4b91      	ldr	r3, [pc, #580]	; (800241c <HAL_RCC_OscConfig+0x4cc>)
 80021d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021d8:	f003 0302 	and.w	r3, r3, #2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d1ee      	bne.n	80021be <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0304 	and.w	r3, r3, #4
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	f000 80a4 	beq.w	8002336 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021ee:	4b8b      	ldr	r3, [pc, #556]	; (800241c <HAL_RCC_OscConfig+0x4cc>)
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d10d      	bne.n	8002216 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80021fa:	4b88      	ldr	r3, [pc, #544]	; (800241c <HAL_RCC_OscConfig+0x4cc>)
 80021fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fe:	4a87      	ldr	r2, [pc, #540]	; (800241c <HAL_RCC_OscConfig+0x4cc>)
 8002200:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002204:	6413      	str	r3, [r2, #64]	; 0x40
 8002206:	4b85      	ldr	r3, [pc, #532]	; (800241c <HAL_RCC_OscConfig+0x4cc>)
 8002208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800220e:	60bb      	str	r3, [r7, #8]
 8002210:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002212:	2301      	movs	r3, #1
 8002214:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002216:	4b82      	ldr	r3, [pc, #520]	; (8002420 <HAL_RCC_OscConfig+0x4d0>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800221e:	2b00      	cmp	r3, #0
 8002220:	d118      	bne.n	8002254 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002222:	4b7f      	ldr	r3, [pc, #508]	; (8002420 <HAL_RCC_OscConfig+0x4d0>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a7e      	ldr	r2, [pc, #504]	; (8002420 <HAL_RCC_OscConfig+0x4d0>)
 8002228:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800222c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800222e:	f7ff fb6d 	bl	800190c <HAL_GetTick>
 8002232:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002234:	e008      	b.n	8002248 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002236:	f7ff fb69 	bl	800190c <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	2b64      	cmp	r3, #100	; 0x64
 8002242:	d901      	bls.n	8002248 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e120      	b.n	800248a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002248:	4b75      	ldr	r3, [pc, #468]	; (8002420 <HAL_RCC_OscConfig+0x4d0>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002250:	2b00      	cmp	r3, #0
 8002252:	d0f0      	beq.n	8002236 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d106      	bne.n	800226a <HAL_RCC_OscConfig+0x31a>
 800225c:	4b6f      	ldr	r3, [pc, #444]	; (800241c <HAL_RCC_OscConfig+0x4cc>)
 800225e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002260:	4a6e      	ldr	r2, [pc, #440]	; (800241c <HAL_RCC_OscConfig+0x4cc>)
 8002262:	f043 0301 	orr.w	r3, r3, #1
 8002266:	6713      	str	r3, [r2, #112]	; 0x70
 8002268:	e02d      	b.n	80022c6 <HAL_RCC_OscConfig+0x376>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d10c      	bne.n	800228c <HAL_RCC_OscConfig+0x33c>
 8002272:	4b6a      	ldr	r3, [pc, #424]	; (800241c <HAL_RCC_OscConfig+0x4cc>)
 8002274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002276:	4a69      	ldr	r2, [pc, #420]	; (800241c <HAL_RCC_OscConfig+0x4cc>)
 8002278:	f023 0301 	bic.w	r3, r3, #1
 800227c:	6713      	str	r3, [r2, #112]	; 0x70
 800227e:	4b67      	ldr	r3, [pc, #412]	; (800241c <HAL_RCC_OscConfig+0x4cc>)
 8002280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002282:	4a66      	ldr	r2, [pc, #408]	; (800241c <HAL_RCC_OscConfig+0x4cc>)
 8002284:	f023 0304 	bic.w	r3, r3, #4
 8002288:	6713      	str	r3, [r2, #112]	; 0x70
 800228a:	e01c      	b.n	80022c6 <HAL_RCC_OscConfig+0x376>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	2b05      	cmp	r3, #5
 8002292:	d10c      	bne.n	80022ae <HAL_RCC_OscConfig+0x35e>
 8002294:	4b61      	ldr	r3, [pc, #388]	; (800241c <HAL_RCC_OscConfig+0x4cc>)
 8002296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002298:	4a60      	ldr	r2, [pc, #384]	; (800241c <HAL_RCC_OscConfig+0x4cc>)
 800229a:	f043 0304 	orr.w	r3, r3, #4
 800229e:	6713      	str	r3, [r2, #112]	; 0x70
 80022a0:	4b5e      	ldr	r3, [pc, #376]	; (800241c <HAL_RCC_OscConfig+0x4cc>)
 80022a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a4:	4a5d      	ldr	r2, [pc, #372]	; (800241c <HAL_RCC_OscConfig+0x4cc>)
 80022a6:	f043 0301 	orr.w	r3, r3, #1
 80022aa:	6713      	str	r3, [r2, #112]	; 0x70
 80022ac:	e00b      	b.n	80022c6 <HAL_RCC_OscConfig+0x376>
 80022ae:	4b5b      	ldr	r3, [pc, #364]	; (800241c <HAL_RCC_OscConfig+0x4cc>)
 80022b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b2:	4a5a      	ldr	r2, [pc, #360]	; (800241c <HAL_RCC_OscConfig+0x4cc>)
 80022b4:	f023 0301 	bic.w	r3, r3, #1
 80022b8:	6713      	str	r3, [r2, #112]	; 0x70
 80022ba:	4b58      	ldr	r3, [pc, #352]	; (800241c <HAL_RCC_OscConfig+0x4cc>)
 80022bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022be:	4a57      	ldr	r2, [pc, #348]	; (800241c <HAL_RCC_OscConfig+0x4cc>)
 80022c0:	f023 0304 	bic.w	r3, r3, #4
 80022c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d015      	beq.n	80022fa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ce:	f7ff fb1d 	bl	800190c <HAL_GetTick>
 80022d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022d4:	e00a      	b.n	80022ec <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022d6:	f7ff fb19 	bl	800190c <HAL_GetTick>
 80022da:	4602      	mov	r2, r0
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d901      	bls.n	80022ec <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e0ce      	b.n	800248a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ec:	4b4b      	ldr	r3, [pc, #300]	; (800241c <HAL_RCC_OscConfig+0x4cc>)
 80022ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f0:	f003 0302 	and.w	r3, r3, #2
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d0ee      	beq.n	80022d6 <HAL_RCC_OscConfig+0x386>
 80022f8:	e014      	b.n	8002324 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022fa:	f7ff fb07 	bl	800190c <HAL_GetTick>
 80022fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002300:	e00a      	b.n	8002318 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002302:	f7ff fb03 	bl	800190c <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002310:	4293      	cmp	r3, r2
 8002312:	d901      	bls.n	8002318 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e0b8      	b.n	800248a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002318:	4b40      	ldr	r3, [pc, #256]	; (800241c <HAL_RCC_OscConfig+0x4cc>)
 800231a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800231c:	f003 0302 	and.w	r3, r3, #2
 8002320:	2b00      	cmp	r3, #0
 8002322:	d1ee      	bne.n	8002302 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002324:	7dfb      	ldrb	r3, [r7, #23]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d105      	bne.n	8002336 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800232a:	4b3c      	ldr	r3, [pc, #240]	; (800241c <HAL_RCC_OscConfig+0x4cc>)
 800232c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232e:	4a3b      	ldr	r2, [pc, #236]	; (800241c <HAL_RCC_OscConfig+0x4cc>)
 8002330:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002334:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	699b      	ldr	r3, [r3, #24]
 800233a:	2b00      	cmp	r3, #0
 800233c:	f000 80a4 	beq.w	8002488 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002340:	4b36      	ldr	r3, [pc, #216]	; (800241c <HAL_RCC_OscConfig+0x4cc>)
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f003 030c 	and.w	r3, r3, #12
 8002348:	2b08      	cmp	r3, #8
 800234a:	d06b      	beq.n	8002424 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	2b02      	cmp	r3, #2
 8002352:	d149      	bne.n	80023e8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002354:	4b31      	ldr	r3, [pc, #196]	; (800241c <HAL_RCC_OscConfig+0x4cc>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a30      	ldr	r2, [pc, #192]	; (800241c <HAL_RCC_OscConfig+0x4cc>)
 800235a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800235e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002360:	f7ff fad4 	bl	800190c <HAL_GetTick>
 8002364:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002366:	e008      	b.n	800237a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002368:	f7ff fad0 	bl	800190c <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b02      	cmp	r3, #2
 8002374:	d901      	bls.n	800237a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e087      	b.n	800248a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800237a:	4b28      	ldr	r3, [pc, #160]	; (800241c <HAL_RCC_OscConfig+0x4cc>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d1f0      	bne.n	8002368 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	69da      	ldr	r2, [r3, #28]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a1b      	ldr	r3, [r3, #32]
 800238e:	431a      	orrs	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002394:	019b      	lsls	r3, r3, #6
 8002396:	431a      	orrs	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800239c:	085b      	lsrs	r3, r3, #1
 800239e:	3b01      	subs	r3, #1
 80023a0:	041b      	lsls	r3, r3, #16
 80023a2:	431a      	orrs	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a8:	061b      	lsls	r3, r3, #24
 80023aa:	4313      	orrs	r3, r2
 80023ac:	4a1b      	ldr	r2, [pc, #108]	; (800241c <HAL_RCC_OscConfig+0x4cc>)
 80023ae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80023b2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023b4:	4b19      	ldr	r3, [pc, #100]	; (800241c <HAL_RCC_OscConfig+0x4cc>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a18      	ldr	r2, [pc, #96]	; (800241c <HAL_RCC_OscConfig+0x4cc>)
 80023ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c0:	f7ff faa4 	bl	800190c <HAL_GetTick>
 80023c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023c8:	f7ff faa0 	bl	800190c <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e057      	b.n	800248a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023da:	4b10      	ldr	r3, [pc, #64]	; (800241c <HAL_RCC_OscConfig+0x4cc>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d0f0      	beq.n	80023c8 <HAL_RCC_OscConfig+0x478>
 80023e6:	e04f      	b.n	8002488 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023e8:	4b0c      	ldr	r3, [pc, #48]	; (800241c <HAL_RCC_OscConfig+0x4cc>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a0b      	ldr	r2, [pc, #44]	; (800241c <HAL_RCC_OscConfig+0x4cc>)
 80023ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f4:	f7ff fa8a 	bl	800190c <HAL_GetTick>
 80023f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023fa:	e008      	b.n	800240e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023fc:	f7ff fa86 	bl	800190c <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b02      	cmp	r3, #2
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e03d      	b.n	800248a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800240e:	4b03      	ldr	r3, [pc, #12]	; (800241c <HAL_RCC_OscConfig+0x4cc>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d1f0      	bne.n	80023fc <HAL_RCC_OscConfig+0x4ac>
 800241a:	e035      	b.n	8002488 <HAL_RCC_OscConfig+0x538>
 800241c:	40023800 	.word	0x40023800
 8002420:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002424:	4b1b      	ldr	r3, [pc, #108]	; (8002494 <HAL_RCC_OscConfig+0x544>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	699b      	ldr	r3, [r3, #24]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d028      	beq.n	8002484 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800243c:	429a      	cmp	r2, r3
 800243e:	d121      	bne.n	8002484 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800244a:	429a      	cmp	r2, r3
 800244c:	d11a      	bne.n	8002484 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800244e:	68fa      	ldr	r2, [r7, #12]
 8002450:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002454:	4013      	ands	r3, r2
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800245a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800245c:	4293      	cmp	r3, r2
 800245e:	d111      	bne.n	8002484 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246a:	085b      	lsrs	r3, r3, #1
 800246c:	3b01      	subs	r3, #1
 800246e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002470:	429a      	cmp	r2, r3
 8002472:	d107      	bne.n	8002484 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800247e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002480:	429a      	cmp	r2, r3
 8002482:	d001      	beq.n	8002488 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e000      	b.n	800248a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3718      	adds	r7, #24
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	40023800 	.word	0x40023800

08002498 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80024a2:	2300      	movs	r3, #0
 80024a4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d101      	bne.n	80024b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e0d0      	b.n	8002652 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024b0:	4b6a      	ldr	r3, [pc, #424]	; (800265c <HAL_RCC_ClockConfig+0x1c4>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 030f 	and.w	r3, r3, #15
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d910      	bls.n	80024e0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024be:	4b67      	ldr	r3, [pc, #412]	; (800265c <HAL_RCC_ClockConfig+0x1c4>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f023 020f 	bic.w	r2, r3, #15
 80024c6:	4965      	ldr	r1, [pc, #404]	; (800265c <HAL_RCC_ClockConfig+0x1c4>)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ce:	4b63      	ldr	r3, [pc, #396]	; (800265c <HAL_RCC_ClockConfig+0x1c4>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 030f 	and.w	r3, r3, #15
 80024d6:	683a      	ldr	r2, [r7, #0]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d001      	beq.n	80024e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e0b8      	b.n	8002652 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0302 	and.w	r3, r3, #2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d020      	beq.n	800252e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0304 	and.w	r3, r3, #4
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d005      	beq.n	8002504 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024f8:	4b59      	ldr	r3, [pc, #356]	; (8002660 <HAL_RCC_ClockConfig+0x1c8>)
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	4a58      	ldr	r2, [pc, #352]	; (8002660 <HAL_RCC_ClockConfig+0x1c8>)
 80024fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002502:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0308 	and.w	r3, r3, #8
 800250c:	2b00      	cmp	r3, #0
 800250e:	d005      	beq.n	800251c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002510:	4b53      	ldr	r3, [pc, #332]	; (8002660 <HAL_RCC_ClockConfig+0x1c8>)
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	4a52      	ldr	r2, [pc, #328]	; (8002660 <HAL_RCC_ClockConfig+0x1c8>)
 8002516:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800251a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800251c:	4b50      	ldr	r3, [pc, #320]	; (8002660 <HAL_RCC_ClockConfig+0x1c8>)
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	494d      	ldr	r1, [pc, #308]	; (8002660 <HAL_RCC_ClockConfig+0x1c8>)
 800252a:	4313      	orrs	r3, r2
 800252c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	2b00      	cmp	r3, #0
 8002538:	d040      	beq.n	80025bc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d107      	bne.n	8002552 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002542:	4b47      	ldr	r3, [pc, #284]	; (8002660 <HAL_RCC_ClockConfig+0x1c8>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d115      	bne.n	800257a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e07f      	b.n	8002652 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	2b02      	cmp	r3, #2
 8002558:	d107      	bne.n	800256a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800255a:	4b41      	ldr	r3, [pc, #260]	; (8002660 <HAL_RCC_ClockConfig+0x1c8>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d109      	bne.n	800257a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e073      	b.n	8002652 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800256a:	4b3d      	ldr	r3, [pc, #244]	; (8002660 <HAL_RCC_ClockConfig+0x1c8>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d101      	bne.n	800257a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e06b      	b.n	8002652 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800257a:	4b39      	ldr	r3, [pc, #228]	; (8002660 <HAL_RCC_ClockConfig+0x1c8>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f023 0203 	bic.w	r2, r3, #3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	4936      	ldr	r1, [pc, #216]	; (8002660 <HAL_RCC_ClockConfig+0x1c8>)
 8002588:	4313      	orrs	r3, r2
 800258a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800258c:	f7ff f9be 	bl	800190c <HAL_GetTick>
 8002590:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002592:	e00a      	b.n	80025aa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002594:	f7ff f9ba 	bl	800190c <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	f241 3288 	movw	r2, #5000	; 0x1388
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e053      	b.n	8002652 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025aa:	4b2d      	ldr	r3, [pc, #180]	; (8002660 <HAL_RCC_ClockConfig+0x1c8>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f003 020c 	and.w	r2, r3, #12
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d1eb      	bne.n	8002594 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025bc:	4b27      	ldr	r3, [pc, #156]	; (800265c <HAL_RCC_ClockConfig+0x1c4>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 030f 	and.w	r3, r3, #15
 80025c4:	683a      	ldr	r2, [r7, #0]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d210      	bcs.n	80025ec <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ca:	4b24      	ldr	r3, [pc, #144]	; (800265c <HAL_RCC_ClockConfig+0x1c4>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f023 020f 	bic.w	r2, r3, #15
 80025d2:	4922      	ldr	r1, [pc, #136]	; (800265c <HAL_RCC_ClockConfig+0x1c4>)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025da:	4b20      	ldr	r3, [pc, #128]	; (800265c <HAL_RCC_ClockConfig+0x1c4>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 030f 	and.w	r3, r3, #15
 80025e2:	683a      	ldr	r2, [r7, #0]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d001      	beq.n	80025ec <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e032      	b.n	8002652 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0304 	and.w	r3, r3, #4
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d008      	beq.n	800260a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025f8:	4b19      	ldr	r3, [pc, #100]	; (8002660 <HAL_RCC_ClockConfig+0x1c8>)
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	4916      	ldr	r1, [pc, #88]	; (8002660 <HAL_RCC_ClockConfig+0x1c8>)
 8002606:	4313      	orrs	r3, r2
 8002608:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0308 	and.w	r3, r3, #8
 8002612:	2b00      	cmp	r3, #0
 8002614:	d009      	beq.n	800262a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002616:	4b12      	ldr	r3, [pc, #72]	; (8002660 <HAL_RCC_ClockConfig+0x1c8>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	00db      	lsls	r3, r3, #3
 8002624:	490e      	ldr	r1, [pc, #56]	; (8002660 <HAL_RCC_ClockConfig+0x1c8>)
 8002626:	4313      	orrs	r3, r2
 8002628:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800262a:	f000 f821 	bl	8002670 <HAL_RCC_GetSysClockFreq>
 800262e:	4602      	mov	r2, r0
 8002630:	4b0b      	ldr	r3, [pc, #44]	; (8002660 <HAL_RCC_ClockConfig+0x1c8>)
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	091b      	lsrs	r3, r3, #4
 8002636:	f003 030f 	and.w	r3, r3, #15
 800263a:	490a      	ldr	r1, [pc, #40]	; (8002664 <HAL_RCC_ClockConfig+0x1cc>)
 800263c:	5ccb      	ldrb	r3, [r1, r3]
 800263e:	fa22 f303 	lsr.w	r3, r2, r3
 8002642:	4a09      	ldr	r2, [pc, #36]	; (8002668 <HAL_RCC_ClockConfig+0x1d0>)
 8002644:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002646:	4b09      	ldr	r3, [pc, #36]	; (800266c <HAL_RCC_ClockConfig+0x1d4>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4618      	mov	r0, r3
 800264c:	f7ff f91a 	bl	8001884 <HAL_InitTick>

  return HAL_OK;
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3710      	adds	r7, #16
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	40023c00 	.word	0x40023c00
 8002660:	40023800 	.word	0x40023800
 8002664:	08007190 	.word	0x08007190
 8002668:	20000008 	.word	0x20000008
 800266c:	2000000c 	.word	0x2000000c

08002670 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002670:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002674:	b090      	sub	sp, #64	; 0x40
 8002676:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002678:	2300      	movs	r3, #0
 800267a:	637b      	str	r3, [r7, #52]	; 0x34
 800267c:	2300      	movs	r3, #0
 800267e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002680:	2300      	movs	r3, #0
 8002682:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8002684:	2300      	movs	r3, #0
 8002686:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002688:	4b59      	ldr	r3, [pc, #356]	; (80027f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f003 030c 	and.w	r3, r3, #12
 8002690:	2b08      	cmp	r3, #8
 8002692:	d00d      	beq.n	80026b0 <HAL_RCC_GetSysClockFreq+0x40>
 8002694:	2b08      	cmp	r3, #8
 8002696:	f200 80a1 	bhi.w	80027dc <HAL_RCC_GetSysClockFreq+0x16c>
 800269a:	2b00      	cmp	r3, #0
 800269c:	d002      	beq.n	80026a4 <HAL_RCC_GetSysClockFreq+0x34>
 800269e:	2b04      	cmp	r3, #4
 80026a0:	d003      	beq.n	80026aa <HAL_RCC_GetSysClockFreq+0x3a>
 80026a2:	e09b      	b.n	80027dc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026a4:	4b53      	ldr	r3, [pc, #332]	; (80027f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80026a6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80026a8:	e09b      	b.n	80027e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026aa:	4b53      	ldr	r3, [pc, #332]	; (80027f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80026ac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80026ae:	e098      	b.n	80027e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026b0:	4b4f      	ldr	r3, [pc, #316]	; (80027f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026b8:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80026ba:	4b4d      	ldr	r3, [pc, #308]	; (80027f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d028      	beq.n	8002718 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026c6:	4b4a      	ldr	r3, [pc, #296]	; (80027f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	099b      	lsrs	r3, r3, #6
 80026cc:	2200      	movs	r2, #0
 80026ce:	623b      	str	r3, [r7, #32]
 80026d0:	627a      	str	r2, [r7, #36]	; 0x24
 80026d2:	6a3b      	ldr	r3, [r7, #32]
 80026d4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80026d8:	2100      	movs	r1, #0
 80026da:	4b47      	ldr	r3, [pc, #284]	; (80027f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80026dc:	fb03 f201 	mul.w	r2, r3, r1
 80026e0:	2300      	movs	r3, #0
 80026e2:	fb00 f303 	mul.w	r3, r0, r3
 80026e6:	4413      	add	r3, r2
 80026e8:	4a43      	ldr	r2, [pc, #268]	; (80027f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80026ea:	fba0 1202 	umull	r1, r2, r0, r2
 80026ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80026f0:	460a      	mov	r2, r1
 80026f2:	62ba      	str	r2, [r7, #40]	; 0x28
 80026f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026f6:	4413      	add	r3, r2
 80026f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026fc:	2200      	movs	r2, #0
 80026fe:	61bb      	str	r3, [r7, #24]
 8002700:	61fa      	str	r2, [r7, #28]
 8002702:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002706:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800270a:	f7fd fdd1 	bl	80002b0 <__aeabi_uldivmod>
 800270e:	4602      	mov	r2, r0
 8002710:	460b      	mov	r3, r1
 8002712:	4613      	mov	r3, r2
 8002714:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002716:	e053      	b.n	80027c0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002718:	4b35      	ldr	r3, [pc, #212]	; (80027f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	099b      	lsrs	r3, r3, #6
 800271e:	2200      	movs	r2, #0
 8002720:	613b      	str	r3, [r7, #16]
 8002722:	617a      	str	r2, [r7, #20]
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800272a:	f04f 0b00 	mov.w	fp, #0
 800272e:	4652      	mov	r2, sl
 8002730:	465b      	mov	r3, fp
 8002732:	f04f 0000 	mov.w	r0, #0
 8002736:	f04f 0100 	mov.w	r1, #0
 800273a:	0159      	lsls	r1, r3, #5
 800273c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002740:	0150      	lsls	r0, r2, #5
 8002742:	4602      	mov	r2, r0
 8002744:	460b      	mov	r3, r1
 8002746:	ebb2 080a 	subs.w	r8, r2, sl
 800274a:	eb63 090b 	sbc.w	r9, r3, fp
 800274e:	f04f 0200 	mov.w	r2, #0
 8002752:	f04f 0300 	mov.w	r3, #0
 8002756:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800275a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800275e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002762:	ebb2 0408 	subs.w	r4, r2, r8
 8002766:	eb63 0509 	sbc.w	r5, r3, r9
 800276a:	f04f 0200 	mov.w	r2, #0
 800276e:	f04f 0300 	mov.w	r3, #0
 8002772:	00eb      	lsls	r3, r5, #3
 8002774:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002778:	00e2      	lsls	r2, r4, #3
 800277a:	4614      	mov	r4, r2
 800277c:	461d      	mov	r5, r3
 800277e:	eb14 030a 	adds.w	r3, r4, sl
 8002782:	603b      	str	r3, [r7, #0]
 8002784:	eb45 030b 	adc.w	r3, r5, fp
 8002788:	607b      	str	r3, [r7, #4]
 800278a:	f04f 0200 	mov.w	r2, #0
 800278e:	f04f 0300 	mov.w	r3, #0
 8002792:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002796:	4629      	mov	r1, r5
 8002798:	028b      	lsls	r3, r1, #10
 800279a:	4621      	mov	r1, r4
 800279c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027a0:	4621      	mov	r1, r4
 80027a2:	028a      	lsls	r2, r1, #10
 80027a4:	4610      	mov	r0, r2
 80027a6:	4619      	mov	r1, r3
 80027a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027aa:	2200      	movs	r2, #0
 80027ac:	60bb      	str	r3, [r7, #8]
 80027ae:	60fa      	str	r2, [r7, #12]
 80027b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80027b4:	f7fd fd7c 	bl	80002b0 <__aeabi_uldivmod>
 80027b8:	4602      	mov	r2, r0
 80027ba:	460b      	mov	r3, r1
 80027bc:	4613      	mov	r3, r2
 80027be:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80027c0:	4b0b      	ldr	r3, [pc, #44]	; (80027f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	0c1b      	lsrs	r3, r3, #16
 80027c6:	f003 0303 	and.w	r3, r3, #3
 80027ca:	3301      	adds	r3, #1
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80027d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80027d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027d8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80027da:	e002      	b.n	80027e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027dc:	4b05      	ldr	r3, [pc, #20]	; (80027f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80027de:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80027e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3740      	adds	r7, #64	; 0x40
 80027e8:	46bd      	mov	sp, r7
 80027ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027ee:	bf00      	nop
 80027f0:	40023800 	.word	0x40023800
 80027f4:	00f42400 	.word	0x00f42400
 80027f8:	017d7840 	.word	0x017d7840

080027fc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002800:	4b03      	ldr	r3, [pc, #12]	; (8002810 <HAL_RCC_GetHCLKFreq+0x14>)
 8002802:	681b      	ldr	r3, [r3, #0]
}
 8002804:	4618      	mov	r0, r3
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	20000008 	.word	0x20000008

08002814 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002818:	f7ff fff0 	bl	80027fc <HAL_RCC_GetHCLKFreq>
 800281c:	4602      	mov	r2, r0
 800281e:	4b05      	ldr	r3, [pc, #20]	; (8002834 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	0a9b      	lsrs	r3, r3, #10
 8002824:	f003 0307 	and.w	r3, r3, #7
 8002828:	4903      	ldr	r1, [pc, #12]	; (8002838 <HAL_RCC_GetPCLK1Freq+0x24>)
 800282a:	5ccb      	ldrb	r3, [r1, r3]
 800282c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002830:	4618      	mov	r0, r3
 8002832:	bd80      	pop	{r7, pc}
 8002834:	40023800 	.word	0x40023800
 8002838:	080071a0 	.word	0x080071a0

0800283c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002840:	f7ff ffdc 	bl	80027fc <HAL_RCC_GetHCLKFreq>
 8002844:	4602      	mov	r2, r0
 8002846:	4b05      	ldr	r3, [pc, #20]	; (800285c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	0b5b      	lsrs	r3, r3, #13
 800284c:	f003 0307 	and.w	r3, r3, #7
 8002850:	4903      	ldr	r1, [pc, #12]	; (8002860 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002852:	5ccb      	ldrb	r3, [r1, r3]
 8002854:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002858:	4618      	mov	r0, r3
 800285a:	bd80      	pop	{r7, pc}
 800285c:	40023800 	.word	0x40023800
 8002860:	080071a0 	.word	0x080071a0

08002864 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b088      	sub	sp, #32
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800286c:	2300      	movs	r3, #0
 800286e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002870:	2300      	movs	r3, #0
 8002872:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002874:	2300      	movs	r3, #0
 8002876:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002878:	2300      	movs	r3, #0
 800287a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800287c:	2300      	movs	r3, #0
 800287e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0301 	and.w	r3, r3, #1
 8002888:	2b00      	cmp	r3, #0
 800288a:	d012      	beq.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800288c:	4b69      	ldr	r3, [pc, #420]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	4a68      	ldr	r2, [pc, #416]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002892:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002896:	6093      	str	r3, [r2, #8]
 8002898:	4b66      	ldr	r3, [pc, #408]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800289a:	689a      	ldr	r2, [r3, #8]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028a0:	4964      	ldr	r1, [pc, #400]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d101      	bne.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80028ae:	2301      	movs	r3, #1
 80028b0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d017      	beq.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028be:	4b5d      	ldr	r3, [pc, #372]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028cc:	4959      	ldr	r1, [pc, #356]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028dc:	d101      	bne.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80028de:	2301      	movs	r3, #1
 80028e0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d101      	bne.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80028ea:	2301      	movs	r3, #1
 80028ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d017      	beq.n	800292a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80028fa:	4b4e      	ldr	r3, [pc, #312]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002900:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002908:	494a      	ldr	r1, [pc, #296]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800290a:	4313      	orrs	r3, r2
 800290c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002914:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002918:	d101      	bne.n	800291e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800291a:	2301      	movs	r3, #1
 800291c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002922:	2b00      	cmp	r3, #0
 8002924:	d101      	bne.n	800292a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002926:	2301      	movs	r3, #1
 8002928:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002936:	2301      	movs	r3, #1
 8002938:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0320 	and.w	r3, r3, #32
 8002942:	2b00      	cmp	r3, #0
 8002944:	f000 808b 	beq.w	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002948:	4b3a      	ldr	r3, [pc, #232]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800294a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294c:	4a39      	ldr	r2, [pc, #228]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800294e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002952:	6413      	str	r3, [r2, #64]	; 0x40
 8002954:	4b37      	ldr	r3, [pc, #220]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002958:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800295c:	60bb      	str	r3, [r7, #8]
 800295e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002960:	4b35      	ldr	r3, [pc, #212]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a34      	ldr	r2, [pc, #208]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002966:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800296a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800296c:	f7fe ffce 	bl	800190c <HAL_GetTick>
 8002970:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002972:	e008      	b.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002974:	f7fe ffca 	bl	800190c <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b64      	cmp	r3, #100	; 0x64
 8002980:	d901      	bls.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e357      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002986:	4b2c      	ldr	r3, [pc, #176]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800298e:	2b00      	cmp	r3, #0
 8002990:	d0f0      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002992:	4b28      	ldr	r3, [pc, #160]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002996:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800299a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d035      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d02e      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029b0:	4b20      	ldr	r3, [pc, #128]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029b8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80029ba:	4b1e      	ldr	r3, [pc, #120]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029be:	4a1d      	ldr	r2, [pc, #116]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029c4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029c6:	4b1b      	ldr	r3, [pc, #108]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ca:	4a1a      	ldr	r2, [pc, #104]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029d0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80029d2:	4a18      	ldr	r2, [pc, #96]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80029d8:	4b16      	ldr	r3, [pc, #88]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029dc:	f003 0301 	and.w	r3, r3, #1
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d114      	bne.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e4:	f7fe ff92 	bl	800190c <HAL_GetTick>
 80029e8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ea:	e00a      	b.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029ec:	f7fe ff8e 	bl	800190c <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e319      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a02:	4b0c      	ldr	r3, [pc, #48]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d0ee      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a1a:	d111      	bne.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002a1c:	4b05      	ldr	r3, [pc, #20]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a28:	4b04      	ldr	r3, [pc, #16]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002a2a:	400b      	ands	r3, r1
 8002a2c:	4901      	ldr	r1, [pc, #4]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	608b      	str	r3, [r1, #8]
 8002a32:	e00b      	b.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002a34:	40023800 	.word	0x40023800
 8002a38:	40007000 	.word	0x40007000
 8002a3c:	0ffffcff 	.word	0x0ffffcff
 8002a40:	4baa      	ldr	r3, [pc, #680]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	4aa9      	ldr	r2, [pc, #676]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a46:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002a4a:	6093      	str	r3, [r2, #8]
 8002a4c:	4ba7      	ldr	r3, [pc, #668]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a4e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a58:	49a4      	ldr	r1, [pc, #656]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0310 	and.w	r3, r3, #16
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d010      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002a6a:	4ba0      	ldr	r3, [pc, #640]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a70:	4a9e      	ldr	r2, [pc, #632]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a76:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002a7a:	4b9c      	ldr	r3, [pc, #624]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a7c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a84:	4999      	ldr	r1, [pc, #612]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d00a      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a98:	4b94      	ldr	r3, [pc, #592]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a9e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002aa6:	4991      	ldr	r1, [pc, #580]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d00a      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002aba:	4b8c      	ldr	r3, [pc, #560]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002abc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ac0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ac8:	4988      	ldr	r1, [pc, #544]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d00a      	beq.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002adc:	4b83      	ldr	r3, [pc, #524]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ae2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002aea:	4980      	ldr	r1, [pc, #512]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d00a      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002afe:	4b7b      	ldr	r3, [pc, #492]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b04:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b0c:	4977      	ldr	r1, [pc, #476]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d00a      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b20:	4b72      	ldr	r3, [pc, #456]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b26:	f023 0203 	bic.w	r2, r3, #3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2e:	496f      	ldr	r1, [pc, #444]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d00a      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b42:	4b6a      	ldr	r3, [pc, #424]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b48:	f023 020c 	bic.w	r2, r3, #12
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b50:	4966      	ldr	r1, [pc, #408]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d00a      	beq.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b64:	4b61      	ldr	r3, [pc, #388]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b6a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b72:	495e      	ldr	r1, [pc, #376]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00a      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b86:	4b59      	ldr	r3, [pc, #356]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b8c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b94:	4955      	ldr	r1, [pc, #340]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d00a      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ba8:	4b50      	ldr	r3, [pc, #320]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bb6:	494d      	ldr	r1, [pc, #308]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00a      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002bca:	4b48      	ldr	r3, [pc, #288]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bd0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd8:	4944      	ldr	r1, [pc, #272]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d00a      	beq.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002bec:	4b3f      	ldr	r3, [pc, #252]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bf2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bfa:	493c      	ldr	r1, [pc, #240]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d00a      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002c0e:	4b37      	ldr	r3, [pc, #220]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c14:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c1c:	4933      	ldr	r1, [pc, #204]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d00a      	beq.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002c30:	4b2e      	ldr	r3, [pc, #184]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c36:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c3e:	492b      	ldr	r1, [pc, #172]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d011      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002c52:	4b26      	ldr	r3, [pc, #152]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c58:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c60:	4922      	ldr	r1, [pc, #136]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c70:	d101      	bne.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002c72:	2301      	movs	r3, #1
 8002c74:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0308 	and.w	r3, r3, #8
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002c82:	2301      	movs	r3, #1
 8002c84:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d00a      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c92:	4b16      	ldr	r3, [pc, #88]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c98:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ca0:	4912      	ldr	r1, [pc, #72]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d00b      	beq.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002cb4:	4b0d      	ldr	r3, [pc, #52]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cba:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cc4:	4909      	ldr	r1, [pc, #36]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d006      	beq.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	f000 80d9 	beq.w	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002ce0:	4b02      	ldr	r3, [pc, #8]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a01      	ldr	r2, [pc, #4]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ce6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002cea:	e001      	b.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002cec:	40023800 	.word	0x40023800
 8002cf0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cf2:	f7fe fe0b 	bl	800190c <HAL_GetTick>
 8002cf6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002cf8:	e008      	b.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002cfa:	f7fe fe07 	bl	800190c <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	2b64      	cmp	r3, #100	; 0x64
 8002d06:	d901      	bls.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e194      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d0c:	4b6c      	ldr	r3, [pc, #432]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d1f0      	bne.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0301 	and.w	r3, r3, #1
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d021      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d11d      	bne.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002d2c:	4b64      	ldr	r3, [pc, #400]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d32:	0c1b      	lsrs	r3, r3, #16
 8002d34:	f003 0303 	and.w	r3, r3, #3
 8002d38:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002d3a:	4b61      	ldr	r3, [pc, #388]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d40:	0e1b      	lsrs	r3, r3, #24
 8002d42:	f003 030f 	and.w	r3, r3, #15
 8002d46:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	019a      	lsls	r2, r3, #6
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	041b      	lsls	r3, r3, #16
 8002d52:	431a      	orrs	r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	061b      	lsls	r3, r3, #24
 8002d58:	431a      	orrs	r2, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	071b      	lsls	r3, r3, #28
 8002d60:	4957      	ldr	r1, [pc, #348]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d004      	beq.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d7c:	d00a      	beq.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d02e      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d92:	d129      	bne.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002d94:	4b4a      	ldr	r3, [pc, #296]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d9a:	0c1b      	lsrs	r3, r3, #16
 8002d9c:	f003 0303 	and.w	r3, r3, #3
 8002da0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002da2:	4b47      	ldr	r3, [pc, #284]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002da4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002da8:	0f1b      	lsrs	r3, r3, #28
 8002daa:	f003 0307 	and.w	r3, r3, #7
 8002dae:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	019a      	lsls	r2, r3, #6
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	041b      	lsls	r3, r3, #16
 8002dba:	431a      	orrs	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	061b      	lsls	r3, r3, #24
 8002dc2:	431a      	orrs	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	071b      	lsls	r3, r3, #28
 8002dc8:	493d      	ldr	r1, [pc, #244]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002dd0:	4b3b      	ldr	r3, [pc, #236]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002dd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002dd6:	f023 021f 	bic.w	r2, r3, #31
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dde:	3b01      	subs	r3, #1
 8002de0:	4937      	ldr	r1, [pc, #220]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d01d      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002df4:	4b32      	ldr	r3, [pc, #200]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002df6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dfa:	0e1b      	lsrs	r3, r3, #24
 8002dfc:	f003 030f 	and.w	r3, r3, #15
 8002e00:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002e02:	4b2f      	ldr	r3, [pc, #188]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e08:	0f1b      	lsrs	r3, r3, #28
 8002e0a:	f003 0307 	and.w	r3, r3, #7
 8002e0e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	019a      	lsls	r2, r3, #6
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	041b      	lsls	r3, r3, #16
 8002e1c:	431a      	orrs	r2, r3
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	061b      	lsls	r3, r3, #24
 8002e22:	431a      	orrs	r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	071b      	lsls	r3, r3, #28
 8002e28:	4925      	ldr	r1, [pc, #148]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d011      	beq.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	019a      	lsls	r2, r3, #6
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	041b      	lsls	r3, r3, #16
 8002e48:	431a      	orrs	r2, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	061b      	lsls	r3, r3, #24
 8002e50:	431a      	orrs	r2, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	071b      	lsls	r3, r3, #28
 8002e58:	4919      	ldr	r1, [pc, #100]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002e60:	4b17      	ldr	r3, [pc, #92]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a16      	ldr	r2, [pc, #88]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e66:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e6c:	f7fe fd4e 	bl	800190c <HAL_GetTick>
 8002e70:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e72:	e008      	b.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002e74:	f7fe fd4a 	bl	800190c <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	2b64      	cmp	r3, #100	; 0x64
 8002e80:	d901      	bls.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e0d7      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e86:	4b0e      	ldr	r3, [pc, #56]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d0f0      	beq.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	f040 80cd 	bne.w	8003034 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002e9a:	4b09      	ldr	r3, [pc, #36]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a08      	ldr	r2, [pc, #32]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ea0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ea4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ea6:	f7fe fd31 	bl	800190c <HAL_GetTick>
 8002eaa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002eac:	e00a      	b.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002eae:	f7fe fd2d 	bl	800190c <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	2b64      	cmp	r3, #100	; 0x64
 8002eba:	d903      	bls.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e0ba      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002ec0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ec4:	4b5e      	ldr	r3, [pc, #376]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ecc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ed0:	d0ed      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d003      	beq.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d009      	beq.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d02e      	beq.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d12a      	bne.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002efa:	4b51      	ldr	r3, [pc, #324]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f00:	0c1b      	lsrs	r3, r3, #16
 8002f02:	f003 0303 	and.w	r3, r3, #3
 8002f06:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002f08:	4b4d      	ldr	r3, [pc, #308]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f0e:	0f1b      	lsrs	r3, r3, #28
 8002f10:	f003 0307 	and.w	r3, r3, #7
 8002f14:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	019a      	lsls	r2, r3, #6
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	041b      	lsls	r3, r3, #16
 8002f20:	431a      	orrs	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	061b      	lsls	r3, r3, #24
 8002f28:	431a      	orrs	r2, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	071b      	lsls	r3, r3, #28
 8002f2e:	4944      	ldr	r1, [pc, #272]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f30:	4313      	orrs	r3, r2
 8002f32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002f36:	4b42      	ldr	r3, [pc, #264]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f3c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f44:	3b01      	subs	r3, #1
 8002f46:	021b      	lsls	r3, r3, #8
 8002f48:	493d      	ldr	r1, [pc, #244]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d022      	beq.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f64:	d11d      	bne.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002f66:	4b36      	ldr	r3, [pc, #216]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f6c:	0e1b      	lsrs	r3, r3, #24
 8002f6e:	f003 030f 	and.w	r3, r3, #15
 8002f72:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002f74:	4b32      	ldr	r3, [pc, #200]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f7a:	0f1b      	lsrs	r3, r3, #28
 8002f7c:	f003 0307 	and.w	r3, r3, #7
 8002f80:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	019a      	lsls	r2, r3, #6
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a1b      	ldr	r3, [r3, #32]
 8002f8c:	041b      	lsls	r3, r3, #16
 8002f8e:	431a      	orrs	r2, r3
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	061b      	lsls	r3, r3, #24
 8002f94:	431a      	orrs	r2, r3
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	071b      	lsls	r3, r3, #28
 8002f9a:	4929      	ldr	r1, [pc, #164]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0308 	and.w	r3, r3, #8
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d028      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002fae:	4b24      	ldr	r3, [pc, #144]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fb4:	0e1b      	lsrs	r3, r3, #24
 8002fb6:	f003 030f 	and.w	r3, r3, #15
 8002fba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002fbc:	4b20      	ldr	r3, [pc, #128]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fc2:	0c1b      	lsrs	r3, r3, #16
 8002fc4:	f003 0303 	and.w	r3, r3, #3
 8002fc8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	695b      	ldr	r3, [r3, #20]
 8002fce:	019a      	lsls	r2, r3, #6
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	041b      	lsls	r3, r3, #16
 8002fd4:	431a      	orrs	r2, r3
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	061b      	lsls	r3, r3, #24
 8002fda:	431a      	orrs	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	69db      	ldr	r3, [r3, #28]
 8002fe0:	071b      	lsls	r3, r3, #28
 8002fe2:	4917      	ldr	r1, [pc, #92]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002fea:	4b15      	ldr	r3, [pc, #84]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002fec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ff0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff8:	4911      	ldr	r1, [pc, #68]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003000:	4b0f      	ldr	r3, [pc, #60]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a0e      	ldr	r2, [pc, #56]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003006:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800300a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800300c:	f7fe fc7e 	bl	800190c <HAL_GetTick>
 8003010:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003012:	e008      	b.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003014:	f7fe fc7a 	bl	800190c <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	2b64      	cmp	r3, #100	; 0x64
 8003020:	d901      	bls.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e007      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003026:	4b06      	ldr	r3, [pc, #24]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800302e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003032:	d1ef      	bne.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3720      	adds	r7, #32
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	40023800 	.word	0x40023800

08003044 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d101      	bne.n	8003056 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e040      	b.n	80030d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800305a:	2b00      	cmp	r3, #0
 800305c:	d106      	bne.n	800306c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f7fe fb54 	bl	8001714 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2224      	movs	r2, #36	; 0x24
 8003070:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f022 0201 	bic.w	r2, r2, #1
 8003080:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 f90a 	bl	800329c <UART_SetConfig>
 8003088:	4603      	mov	r3, r0
 800308a:	2b01      	cmp	r3, #1
 800308c:	d101      	bne.n	8003092 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e022      	b.n	80030d8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003096:	2b00      	cmp	r3, #0
 8003098:	d002      	beq.n	80030a0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 fb62 	bl	8003764 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	685a      	ldr	r2, [r3, #4]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	689a      	ldr	r2, [r3, #8]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f042 0201 	orr.w	r2, r2, #1
 80030ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f000 fbe9 	bl	80038a8 <UART_CheckIdleState>
 80030d6:	4603      	mov	r3, r0
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3708      	adds	r7, #8
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b08a      	sub	sp, #40	; 0x28
 80030e4:	af02      	add	r7, sp, #8
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	603b      	str	r3, [r7, #0]
 80030ec:	4613      	mov	r3, r2
 80030ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030f4:	2b20      	cmp	r3, #32
 80030f6:	d171      	bne.n	80031dc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d002      	beq.n	8003104 <HAL_UART_Transmit+0x24>
 80030fe:	88fb      	ldrh	r3, [r7, #6]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d101      	bne.n	8003108 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e06a      	b.n	80031de <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2200      	movs	r2, #0
 800310c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2221      	movs	r2, #33	; 0x21
 8003114:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003116:	f7fe fbf9 	bl	800190c <HAL_GetTick>
 800311a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	88fa      	ldrh	r2, [r7, #6]
 8003120:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	88fa      	ldrh	r2, [r7, #6]
 8003128:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003134:	d108      	bne.n	8003148 <HAL_UART_Transmit+0x68>
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d104      	bne.n	8003148 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800313e:	2300      	movs	r3, #0
 8003140:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	61bb      	str	r3, [r7, #24]
 8003146:	e003      	b.n	8003150 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800314c:	2300      	movs	r3, #0
 800314e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003150:	e02c      	b.n	80031ac <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	9300      	str	r3, [sp, #0]
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	2200      	movs	r2, #0
 800315a:	2180      	movs	r1, #128	; 0x80
 800315c:	68f8      	ldr	r0, [r7, #12]
 800315e:	f000 fbda 	bl	8003916 <UART_WaitOnFlagUntilTimeout>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d001      	beq.n	800316c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	e038      	b.n	80031de <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d10b      	bne.n	800318a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	881b      	ldrh	r3, [r3, #0]
 8003176:	461a      	mov	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003180:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	3302      	adds	r3, #2
 8003186:	61bb      	str	r3, [r7, #24]
 8003188:	e007      	b.n	800319a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	781a      	ldrb	r2, [r3, #0]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	3301      	adds	r3, #1
 8003198:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	3b01      	subs	r3, #1
 80031a4:	b29a      	uxth	r2, r3
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d1cc      	bne.n	8003152 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	9300      	str	r3, [sp, #0]
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	2200      	movs	r2, #0
 80031c0:	2140      	movs	r1, #64	; 0x40
 80031c2:	68f8      	ldr	r0, [r7, #12]
 80031c4:	f000 fba7 	bl	8003916 <UART_WaitOnFlagUntilTimeout>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d001      	beq.n	80031d2 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e005      	b.n	80031de <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2220      	movs	r2, #32
 80031d6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80031d8:	2300      	movs	r3, #0
 80031da:	e000      	b.n	80031de <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80031dc:	2302      	movs	r3, #2
  }
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3720      	adds	r7, #32
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}

080031e6 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80031e6:	b580      	push	{r7, lr}
 80031e8:	b08a      	sub	sp, #40	; 0x28
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	60f8      	str	r0, [r7, #12]
 80031ee:	60b9      	str	r1, [r7, #8]
 80031f0:	4613      	mov	r3, r2
 80031f2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031fa:	2b20      	cmp	r3, #32
 80031fc:	d132      	bne.n	8003264 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d002      	beq.n	800320a <HAL_UART_Receive_IT+0x24>
 8003204:	88fb      	ldrh	r3, [r7, #6]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d101      	bne.n	800320e <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e02b      	b.n	8003266 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2200      	movs	r2, #0
 8003212:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d018      	beq.n	8003254 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	e853 3f00 	ldrex	r3, [r3]
 800322e:	613b      	str	r3, [r7, #16]
   return(result);
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003236:	627b      	str	r3, [r7, #36]	; 0x24
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	461a      	mov	r2, r3
 800323e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003240:	623b      	str	r3, [r7, #32]
 8003242:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003244:	69f9      	ldr	r1, [r7, #28]
 8003246:	6a3a      	ldr	r2, [r7, #32]
 8003248:	e841 2300 	strex	r3, r2, [r1]
 800324c:	61bb      	str	r3, [r7, #24]
   return(result);
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d1e6      	bne.n	8003222 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003254:	88fb      	ldrh	r3, [r7, #6]
 8003256:	461a      	mov	r2, r3
 8003258:	68b9      	ldr	r1, [r7, #8]
 800325a:	68f8      	ldr	r0, [r7, #12]
 800325c:	f000 fc22 	bl	8003aa4 <UART_Start_Receive_IT>
 8003260:	4603      	mov	r3, r0
 8003262:	e000      	b.n	8003266 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8003264:	2302      	movs	r3, #2
  }
}
 8003266:	4618      	mov	r0, r3
 8003268:	3728      	adds	r7, #40	; 0x28
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}

0800326e <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800326e:	b480      	push	{r7}
 8003270:	b083      	sub	sp, #12
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003276:	bf00      	nop
 8003278:	370c      	adds	r7, #12
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr

08003282 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003282:	b480      	push	{r7}
 8003284:	b083      	sub	sp, #12
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
 800328a:	460b      	mov	r3, r1
 800328c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800328e:	bf00      	nop
 8003290:	370c      	adds	r7, #12
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
	...

0800329c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b088      	sub	sp, #32
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80032a4:	2300      	movs	r3, #0
 80032a6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689a      	ldr	r2, [r3, #8]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	691b      	ldr	r3, [r3, #16]
 80032b0:	431a      	orrs	r2, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	695b      	ldr	r3, [r3, #20]
 80032b6:	431a      	orrs	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	69db      	ldr	r3, [r3, #28]
 80032bc:	4313      	orrs	r3, r2
 80032be:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	4ba6      	ldr	r3, [pc, #664]	; (8003560 <UART_SetConfig+0x2c4>)
 80032c8:	4013      	ands	r3, r2
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	6812      	ldr	r2, [r2, #0]
 80032ce:	6979      	ldr	r1, [r7, #20]
 80032d0:	430b      	orrs	r3, r1
 80032d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	68da      	ldr	r2, [r3, #12]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	430a      	orrs	r2, r1
 80032e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	699b      	ldr	r3, [r3, #24]
 80032ee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6a1b      	ldr	r3, [r3, #32]
 80032f4:	697a      	ldr	r2, [r7, #20]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	697a      	ldr	r2, [r7, #20]
 800330a:	430a      	orrs	r2, r1
 800330c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a94      	ldr	r2, [pc, #592]	; (8003564 <UART_SetConfig+0x2c8>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d120      	bne.n	800335a <UART_SetConfig+0xbe>
 8003318:	4b93      	ldr	r3, [pc, #588]	; (8003568 <UART_SetConfig+0x2cc>)
 800331a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800331e:	f003 0303 	and.w	r3, r3, #3
 8003322:	2b03      	cmp	r3, #3
 8003324:	d816      	bhi.n	8003354 <UART_SetConfig+0xb8>
 8003326:	a201      	add	r2, pc, #4	; (adr r2, 800332c <UART_SetConfig+0x90>)
 8003328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800332c:	0800333d 	.word	0x0800333d
 8003330:	08003349 	.word	0x08003349
 8003334:	08003343 	.word	0x08003343
 8003338:	0800334f 	.word	0x0800334f
 800333c:	2301      	movs	r3, #1
 800333e:	77fb      	strb	r3, [r7, #31]
 8003340:	e150      	b.n	80035e4 <UART_SetConfig+0x348>
 8003342:	2302      	movs	r3, #2
 8003344:	77fb      	strb	r3, [r7, #31]
 8003346:	e14d      	b.n	80035e4 <UART_SetConfig+0x348>
 8003348:	2304      	movs	r3, #4
 800334a:	77fb      	strb	r3, [r7, #31]
 800334c:	e14a      	b.n	80035e4 <UART_SetConfig+0x348>
 800334e:	2308      	movs	r3, #8
 8003350:	77fb      	strb	r3, [r7, #31]
 8003352:	e147      	b.n	80035e4 <UART_SetConfig+0x348>
 8003354:	2310      	movs	r3, #16
 8003356:	77fb      	strb	r3, [r7, #31]
 8003358:	e144      	b.n	80035e4 <UART_SetConfig+0x348>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a83      	ldr	r2, [pc, #524]	; (800356c <UART_SetConfig+0x2d0>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d132      	bne.n	80033ca <UART_SetConfig+0x12e>
 8003364:	4b80      	ldr	r3, [pc, #512]	; (8003568 <UART_SetConfig+0x2cc>)
 8003366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800336a:	f003 030c 	and.w	r3, r3, #12
 800336e:	2b0c      	cmp	r3, #12
 8003370:	d828      	bhi.n	80033c4 <UART_SetConfig+0x128>
 8003372:	a201      	add	r2, pc, #4	; (adr r2, 8003378 <UART_SetConfig+0xdc>)
 8003374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003378:	080033ad 	.word	0x080033ad
 800337c:	080033c5 	.word	0x080033c5
 8003380:	080033c5 	.word	0x080033c5
 8003384:	080033c5 	.word	0x080033c5
 8003388:	080033b9 	.word	0x080033b9
 800338c:	080033c5 	.word	0x080033c5
 8003390:	080033c5 	.word	0x080033c5
 8003394:	080033c5 	.word	0x080033c5
 8003398:	080033b3 	.word	0x080033b3
 800339c:	080033c5 	.word	0x080033c5
 80033a0:	080033c5 	.word	0x080033c5
 80033a4:	080033c5 	.word	0x080033c5
 80033a8:	080033bf 	.word	0x080033bf
 80033ac:	2300      	movs	r3, #0
 80033ae:	77fb      	strb	r3, [r7, #31]
 80033b0:	e118      	b.n	80035e4 <UART_SetConfig+0x348>
 80033b2:	2302      	movs	r3, #2
 80033b4:	77fb      	strb	r3, [r7, #31]
 80033b6:	e115      	b.n	80035e4 <UART_SetConfig+0x348>
 80033b8:	2304      	movs	r3, #4
 80033ba:	77fb      	strb	r3, [r7, #31]
 80033bc:	e112      	b.n	80035e4 <UART_SetConfig+0x348>
 80033be:	2308      	movs	r3, #8
 80033c0:	77fb      	strb	r3, [r7, #31]
 80033c2:	e10f      	b.n	80035e4 <UART_SetConfig+0x348>
 80033c4:	2310      	movs	r3, #16
 80033c6:	77fb      	strb	r3, [r7, #31]
 80033c8:	e10c      	b.n	80035e4 <UART_SetConfig+0x348>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a68      	ldr	r2, [pc, #416]	; (8003570 <UART_SetConfig+0x2d4>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d120      	bne.n	8003416 <UART_SetConfig+0x17a>
 80033d4:	4b64      	ldr	r3, [pc, #400]	; (8003568 <UART_SetConfig+0x2cc>)
 80033d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033da:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80033de:	2b30      	cmp	r3, #48	; 0x30
 80033e0:	d013      	beq.n	800340a <UART_SetConfig+0x16e>
 80033e2:	2b30      	cmp	r3, #48	; 0x30
 80033e4:	d814      	bhi.n	8003410 <UART_SetConfig+0x174>
 80033e6:	2b20      	cmp	r3, #32
 80033e8:	d009      	beq.n	80033fe <UART_SetConfig+0x162>
 80033ea:	2b20      	cmp	r3, #32
 80033ec:	d810      	bhi.n	8003410 <UART_SetConfig+0x174>
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d002      	beq.n	80033f8 <UART_SetConfig+0x15c>
 80033f2:	2b10      	cmp	r3, #16
 80033f4:	d006      	beq.n	8003404 <UART_SetConfig+0x168>
 80033f6:	e00b      	b.n	8003410 <UART_SetConfig+0x174>
 80033f8:	2300      	movs	r3, #0
 80033fa:	77fb      	strb	r3, [r7, #31]
 80033fc:	e0f2      	b.n	80035e4 <UART_SetConfig+0x348>
 80033fe:	2302      	movs	r3, #2
 8003400:	77fb      	strb	r3, [r7, #31]
 8003402:	e0ef      	b.n	80035e4 <UART_SetConfig+0x348>
 8003404:	2304      	movs	r3, #4
 8003406:	77fb      	strb	r3, [r7, #31]
 8003408:	e0ec      	b.n	80035e4 <UART_SetConfig+0x348>
 800340a:	2308      	movs	r3, #8
 800340c:	77fb      	strb	r3, [r7, #31]
 800340e:	e0e9      	b.n	80035e4 <UART_SetConfig+0x348>
 8003410:	2310      	movs	r3, #16
 8003412:	77fb      	strb	r3, [r7, #31]
 8003414:	e0e6      	b.n	80035e4 <UART_SetConfig+0x348>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a56      	ldr	r2, [pc, #344]	; (8003574 <UART_SetConfig+0x2d8>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d120      	bne.n	8003462 <UART_SetConfig+0x1c6>
 8003420:	4b51      	ldr	r3, [pc, #324]	; (8003568 <UART_SetConfig+0x2cc>)
 8003422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003426:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800342a:	2bc0      	cmp	r3, #192	; 0xc0
 800342c:	d013      	beq.n	8003456 <UART_SetConfig+0x1ba>
 800342e:	2bc0      	cmp	r3, #192	; 0xc0
 8003430:	d814      	bhi.n	800345c <UART_SetConfig+0x1c0>
 8003432:	2b80      	cmp	r3, #128	; 0x80
 8003434:	d009      	beq.n	800344a <UART_SetConfig+0x1ae>
 8003436:	2b80      	cmp	r3, #128	; 0x80
 8003438:	d810      	bhi.n	800345c <UART_SetConfig+0x1c0>
 800343a:	2b00      	cmp	r3, #0
 800343c:	d002      	beq.n	8003444 <UART_SetConfig+0x1a8>
 800343e:	2b40      	cmp	r3, #64	; 0x40
 8003440:	d006      	beq.n	8003450 <UART_SetConfig+0x1b4>
 8003442:	e00b      	b.n	800345c <UART_SetConfig+0x1c0>
 8003444:	2300      	movs	r3, #0
 8003446:	77fb      	strb	r3, [r7, #31]
 8003448:	e0cc      	b.n	80035e4 <UART_SetConfig+0x348>
 800344a:	2302      	movs	r3, #2
 800344c:	77fb      	strb	r3, [r7, #31]
 800344e:	e0c9      	b.n	80035e4 <UART_SetConfig+0x348>
 8003450:	2304      	movs	r3, #4
 8003452:	77fb      	strb	r3, [r7, #31]
 8003454:	e0c6      	b.n	80035e4 <UART_SetConfig+0x348>
 8003456:	2308      	movs	r3, #8
 8003458:	77fb      	strb	r3, [r7, #31]
 800345a:	e0c3      	b.n	80035e4 <UART_SetConfig+0x348>
 800345c:	2310      	movs	r3, #16
 800345e:	77fb      	strb	r3, [r7, #31]
 8003460:	e0c0      	b.n	80035e4 <UART_SetConfig+0x348>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a44      	ldr	r2, [pc, #272]	; (8003578 <UART_SetConfig+0x2dc>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d125      	bne.n	80034b8 <UART_SetConfig+0x21c>
 800346c:	4b3e      	ldr	r3, [pc, #248]	; (8003568 <UART_SetConfig+0x2cc>)
 800346e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003472:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003476:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800347a:	d017      	beq.n	80034ac <UART_SetConfig+0x210>
 800347c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003480:	d817      	bhi.n	80034b2 <UART_SetConfig+0x216>
 8003482:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003486:	d00b      	beq.n	80034a0 <UART_SetConfig+0x204>
 8003488:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800348c:	d811      	bhi.n	80034b2 <UART_SetConfig+0x216>
 800348e:	2b00      	cmp	r3, #0
 8003490:	d003      	beq.n	800349a <UART_SetConfig+0x1fe>
 8003492:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003496:	d006      	beq.n	80034a6 <UART_SetConfig+0x20a>
 8003498:	e00b      	b.n	80034b2 <UART_SetConfig+0x216>
 800349a:	2300      	movs	r3, #0
 800349c:	77fb      	strb	r3, [r7, #31]
 800349e:	e0a1      	b.n	80035e4 <UART_SetConfig+0x348>
 80034a0:	2302      	movs	r3, #2
 80034a2:	77fb      	strb	r3, [r7, #31]
 80034a4:	e09e      	b.n	80035e4 <UART_SetConfig+0x348>
 80034a6:	2304      	movs	r3, #4
 80034a8:	77fb      	strb	r3, [r7, #31]
 80034aa:	e09b      	b.n	80035e4 <UART_SetConfig+0x348>
 80034ac:	2308      	movs	r3, #8
 80034ae:	77fb      	strb	r3, [r7, #31]
 80034b0:	e098      	b.n	80035e4 <UART_SetConfig+0x348>
 80034b2:	2310      	movs	r3, #16
 80034b4:	77fb      	strb	r3, [r7, #31]
 80034b6:	e095      	b.n	80035e4 <UART_SetConfig+0x348>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a2f      	ldr	r2, [pc, #188]	; (800357c <UART_SetConfig+0x2e0>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d125      	bne.n	800350e <UART_SetConfig+0x272>
 80034c2:	4b29      	ldr	r3, [pc, #164]	; (8003568 <UART_SetConfig+0x2cc>)
 80034c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80034cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80034d0:	d017      	beq.n	8003502 <UART_SetConfig+0x266>
 80034d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80034d6:	d817      	bhi.n	8003508 <UART_SetConfig+0x26c>
 80034d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034dc:	d00b      	beq.n	80034f6 <UART_SetConfig+0x25a>
 80034de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034e2:	d811      	bhi.n	8003508 <UART_SetConfig+0x26c>
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d003      	beq.n	80034f0 <UART_SetConfig+0x254>
 80034e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034ec:	d006      	beq.n	80034fc <UART_SetConfig+0x260>
 80034ee:	e00b      	b.n	8003508 <UART_SetConfig+0x26c>
 80034f0:	2301      	movs	r3, #1
 80034f2:	77fb      	strb	r3, [r7, #31]
 80034f4:	e076      	b.n	80035e4 <UART_SetConfig+0x348>
 80034f6:	2302      	movs	r3, #2
 80034f8:	77fb      	strb	r3, [r7, #31]
 80034fa:	e073      	b.n	80035e4 <UART_SetConfig+0x348>
 80034fc:	2304      	movs	r3, #4
 80034fe:	77fb      	strb	r3, [r7, #31]
 8003500:	e070      	b.n	80035e4 <UART_SetConfig+0x348>
 8003502:	2308      	movs	r3, #8
 8003504:	77fb      	strb	r3, [r7, #31]
 8003506:	e06d      	b.n	80035e4 <UART_SetConfig+0x348>
 8003508:	2310      	movs	r3, #16
 800350a:	77fb      	strb	r3, [r7, #31]
 800350c:	e06a      	b.n	80035e4 <UART_SetConfig+0x348>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a1b      	ldr	r2, [pc, #108]	; (8003580 <UART_SetConfig+0x2e4>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d138      	bne.n	800358a <UART_SetConfig+0x2ee>
 8003518:	4b13      	ldr	r3, [pc, #76]	; (8003568 <UART_SetConfig+0x2cc>)
 800351a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800351e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003522:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003526:	d017      	beq.n	8003558 <UART_SetConfig+0x2bc>
 8003528:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800352c:	d82a      	bhi.n	8003584 <UART_SetConfig+0x2e8>
 800352e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003532:	d00b      	beq.n	800354c <UART_SetConfig+0x2b0>
 8003534:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003538:	d824      	bhi.n	8003584 <UART_SetConfig+0x2e8>
 800353a:	2b00      	cmp	r3, #0
 800353c:	d003      	beq.n	8003546 <UART_SetConfig+0x2aa>
 800353e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003542:	d006      	beq.n	8003552 <UART_SetConfig+0x2b6>
 8003544:	e01e      	b.n	8003584 <UART_SetConfig+0x2e8>
 8003546:	2300      	movs	r3, #0
 8003548:	77fb      	strb	r3, [r7, #31]
 800354a:	e04b      	b.n	80035e4 <UART_SetConfig+0x348>
 800354c:	2302      	movs	r3, #2
 800354e:	77fb      	strb	r3, [r7, #31]
 8003550:	e048      	b.n	80035e4 <UART_SetConfig+0x348>
 8003552:	2304      	movs	r3, #4
 8003554:	77fb      	strb	r3, [r7, #31]
 8003556:	e045      	b.n	80035e4 <UART_SetConfig+0x348>
 8003558:	2308      	movs	r3, #8
 800355a:	77fb      	strb	r3, [r7, #31]
 800355c:	e042      	b.n	80035e4 <UART_SetConfig+0x348>
 800355e:	bf00      	nop
 8003560:	efff69f3 	.word	0xefff69f3
 8003564:	40011000 	.word	0x40011000
 8003568:	40023800 	.word	0x40023800
 800356c:	40004400 	.word	0x40004400
 8003570:	40004800 	.word	0x40004800
 8003574:	40004c00 	.word	0x40004c00
 8003578:	40005000 	.word	0x40005000
 800357c:	40011400 	.word	0x40011400
 8003580:	40007800 	.word	0x40007800
 8003584:	2310      	movs	r3, #16
 8003586:	77fb      	strb	r3, [r7, #31]
 8003588:	e02c      	b.n	80035e4 <UART_SetConfig+0x348>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a72      	ldr	r2, [pc, #456]	; (8003758 <UART_SetConfig+0x4bc>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d125      	bne.n	80035e0 <UART_SetConfig+0x344>
 8003594:	4b71      	ldr	r3, [pc, #452]	; (800375c <UART_SetConfig+0x4c0>)
 8003596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800359a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800359e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80035a2:	d017      	beq.n	80035d4 <UART_SetConfig+0x338>
 80035a4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80035a8:	d817      	bhi.n	80035da <UART_SetConfig+0x33e>
 80035aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035ae:	d00b      	beq.n	80035c8 <UART_SetConfig+0x32c>
 80035b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035b4:	d811      	bhi.n	80035da <UART_SetConfig+0x33e>
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d003      	beq.n	80035c2 <UART_SetConfig+0x326>
 80035ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035be:	d006      	beq.n	80035ce <UART_SetConfig+0x332>
 80035c0:	e00b      	b.n	80035da <UART_SetConfig+0x33e>
 80035c2:	2300      	movs	r3, #0
 80035c4:	77fb      	strb	r3, [r7, #31]
 80035c6:	e00d      	b.n	80035e4 <UART_SetConfig+0x348>
 80035c8:	2302      	movs	r3, #2
 80035ca:	77fb      	strb	r3, [r7, #31]
 80035cc:	e00a      	b.n	80035e4 <UART_SetConfig+0x348>
 80035ce:	2304      	movs	r3, #4
 80035d0:	77fb      	strb	r3, [r7, #31]
 80035d2:	e007      	b.n	80035e4 <UART_SetConfig+0x348>
 80035d4:	2308      	movs	r3, #8
 80035d6:	77fb      	strb	r3, [r7, #31]
 80035d8:	e004      	b.n	80035e4 <UART_SetConfig+0x348>
 80035da:	2310      	movs	r3, #16
 80035dc:	77fb      	strb	r3, [r7, #31]
 80035de:	e001      	b.n	80035e4 <UART_SetConfig+0x348>
 80035e0:	2310      	movs	r3, #16
 80035e2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	69db      	ldr	r3, [r3, #28]
 80035e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035ec:	d15b      	bne.n	80036a6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80035ee:	7ffb      	ldrb	r3, [r7, #31]
 80035f0:	2b08      	cmp	r3, #8
 80035f2:	d828      	bhi.n	8003646 <UART_SetConfig+0x3aa>
 80035f4:	a201      	add	r2, pc, #4	; (adr r2, 80035fc <UART_SetConfig+0x360>)
 80035f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035fa:	bf00      	nop
 80035fc:	08003621 	.word	0x08003621
 8003600:	08003629 	.word	0x08003629
 8003604:	08003631 	.word	0x08003631
 8003608:	08003647 	.word	0x08003647
 800360c:	08003637 	.word	0x08003637
 8003610:	08003647 	.word	0x08003647
 8003614:	08003647 	.word	0x08003647
 8003618:	08003647 	.word	0x08003647
 800361c:	0800363f 	.word	0x0800363f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003620:	f7ff f8f8 	bl	8002814 <HAL_RCC_GetPCLK1Freq>
 8003624:	61b8      	str	r0, [r7, #24]
        break;
 8003626:	e013      	b.n	8003650 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003628:	f7ff f908 	bl	800283c <HAL_RCC_GetPCLK2Freq>
 800362c:	61b8      	str	r0, [r7, #24]
        break;
 800362e:	e00f      	b.n	8003650 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003630:	4b4b      	ldr	r3, [pc, #300]	; (8003760 <UART_SetConfig+0x4c4>)
 8003632:	61bb      	str	r3, [r7, #24]
        break;
 8003634:	e00c      	b.n	8003650 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003636:	f7ff f81b 	bl	8002670 <HAL_RCC_GetSysClockFreq>
 800363a:	61b8      	str	r0, [r7, #24]
        break;
 800363c:	e008      	b.n	8003650 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800363e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003642:	61bb      	str	r3, [r7, #24]
        break;
 8003644:	e004      	b.n	8003650 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003646:	2300      	movs	r3, #0
 8003648:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	77bb      	strb	r3, [r7, #30]
        break;
 800364e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d074      	beq.n	8003740 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	005a      	lsls	r2, r3, #1
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	085b      	lsrs	r3, r3, #1
 8003660:	441a      	add	r2, r3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	fbb2 f3f3 	udiv	r3, r2, r3
 800366a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	2b0f      	cmp	r3, #15
 8003670:	d916      	bls.n	80036a0 <UART_SetConfig+0x404>
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003678:	d212      	bcs.n	80036a0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	b29b      	uxth	r3, r3
 800367e:	f023 030f 	bic.w	r3, r3, #15
 8003682:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	085b      	lsrs	r3, r3, #1
 8003688:	b29b      	uxth	r3, r3
 800368a:	f003 0307 	and.w	r3, r3, #7
 800368e:	b29a      	uxth	r2, r3
 8003690:	89fb      	ldrh	r3, [r7, #14]
 8003692:	4313      	orrs	r3, r2
 8003694:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	89fa      	ldrh	r2, [r7, #14]
 800369c:	60da      	str	r2, [r3, #12]
 800369e:	e04f      	b.n	8003740 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	77bb      	strb	r3, [r7, #30]
 80036a4:	e04c      	b.n	8003740 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80036a6:	7ffb      	ldrb	r3, [r7, #31]
 80036a8:	2b08      	cmp	r3, #8
 80036aa:	d828      	bhi.n	80036fe <UART_SetConfig+0x462>
 80036ac:	a201      	add	r2, pc, #4	; (adr r2, 80036b4 <UART_SetConfig+0x418>)
 80036ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036b2:	bf00      	nop
 80036b4:	080036d9 	.word	0x080036d9
 80036b8:	080036e1 	.word	0x080036e1
 80036bc:	080036e9 	.word	0x080036e9
 80036c0:	080036ff 	.word	0x080036ff
 80036c4:	080036ef 	.word	0x080036ef
 80036c8:	080036ff 	.word	0x080036ff
 80036cc:	080036ff 	.word	0x080036ff
 80036d0:	080036ff 	.word	0x080036ff
 80036d4:	080036f7 	.word	0x080036f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036d8:	f7ff f89c 	bl	8002814 <HAL_RCC_GetPCLK1Freq>
 80036dc:	61b8      	str	r0, [r7, #24]
        break;
 80036de:	e013      	b.n	8003708 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036e0:	f7ff f8ac 	bl	800283c <HAL_RCC_GetPCLK2Freq>
 80036e4:	61b8      	str	r0, [r7, #24]
        break;
 80036e6:	e00f      	b.n	8003708 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036e8:	4b1d      	ldr	r3, [pc, #116]	; (8003760 <UART_SetConfig+0x4c4>)
 80036ea:	61bb      	str	r3, [r7, #24]
        break;
 80036ec:	e00c      	b.n	8003708 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036ee:	f7fe ffbf 	bl	8002670 <HAL_RCC_GetSysClockFreq>
 80036f2:	61b8      	str	r0, [r7, #24]
        break;
 80036f4:	e008      	b.n	8003708 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036fa:	61bb      	str	r3, [r7, #24]
        break;
 80036fc:	e004      	b.n	8003708 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80036fe:	2300      	movs	r3, #0
 8003700:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	77bb      	strb	r3, [r7, #30]
        break;
 8003706:	bf00      	nop
    }

    if (pclk != 0U)
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d018      	beq.n	8003740 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	085a      	lsrs	r2, r3, #1
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	441a      	add	r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003720:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	2b0f      	cmp	r3, #15
 8003726:	d909      	bls.n	800373c <UART_SetConfig+0x4a0>
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800372e:	d205      	bcs.n	800373c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	b29a      	uxth	r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	60da      	str	r2, [r3, #12]
 800373a:	e001      	b.n	8003740 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800374c:	7fbb      	ldrb	r3, [r7, #30]
}
 800374e:	4618      	mov	r0, r3
 8003750:	3720      	adds	r7, #32
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	40007c00 	.word	0x40007c00
 800375c:	40023800 	.word	0x40023800
 8003760:	00f42400 	.word	0x00f42400

08003764 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003770:	f003 0301 	and.w	r3, r3, #1
 8003774:	2b00      	cmp	r3, #0
 8003776:	d00a      	beq.n	800378e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	430a      	orrs	r2, r1
 800378c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003792:	f003 0302 	and.w	r3, r3, #2
 8003796:	2b00      	cmp	r3, #0
 8003798:	d00a      	beq.n	80037b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	430a      	orrs	r2, r1
 80037ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b4:	f003 0304 	and.w	r3, r3, #4
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d00a      	beq.n	80037d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	430a      	orrs	r2, r1
 80037d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d6:	f003 0308 	and.w	r3, r3, #8
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d00a      	beq.n	80037f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	430a      	orrs	r2, r1
 80037f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f8:	f003 0310 	and.w	r3, r3, #16
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d00a      	beq.n	8003816 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	430a      	orrs	r2, r1
 8003814:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381a:	f003 0320 	and.w	r3, r3, #32
 800381e:	2b00      	cmp	r3, #0
 8003820:	d00a      	beq.n	8003838 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	430a      	orrs	r2, r1
 8003836:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003840:	2b00      	cmp	r3, #0
 8003842:	d01a      	beq.n	800387a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	430a      	orrs	r2, r1
 8003858:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003862:	d10a      	bne.n	800387a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	430a      	orrs	r2, r1
 8003878:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00a      	beq.n	800389c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	430a      	orrs	r2, r1
 800389a:	605a      	str	r2, [r3, #4]
  }
}
 800389c:	bf00      	nop
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b086      	sub	sp, #24
 80038ac:	af02      	add	r7, sp, #8
 80038ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80038b8:	f7fe f828 	bl	800190c <HAL_GetTick>
 80038bc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0308 	and.w	r3, r3, #8
 80038c8:	2b08      	cmp	r3, #8
 80038ca:	d10e      	bne.n	80038ea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80038d0:	9300      	str	r3, [sp, #0]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f000 f81b 	bl	8003916 <UART_WaitOnFlagUntilTimeout>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d001      	beq.n	80038ea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e011      	b.n	800390e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2220      	movs	r2, #32
 80038ee:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2220      	movs	r2, #32
 80038f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	3710      	adds	r7, #16
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}

08003916 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003916:	b580      	push	{r7, lr}
 8003918:	b09c      	sub	sp, #112	; 0x70
 800391a:	af00      	add	r7, sp, #0
 800391c:	60f8      	str	r0, [r7, #12]
 800391e:	60b9      	str	r1, [r7, #8]
 8003920:	603b      	str	r3, [r7, #0]
 8003922:	4613      	mov	r3, r2
 8003924:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003926:	e0a7      	b.n	8003a78 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003928:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800392a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800392e:	f000 80a3 	beq.w	8003a78 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003932:	f7fd ffeb 	bl	800190c <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800393e:	429a      	cmp	r2, r3
 8003940:	d302      	bcc.n	8003948 <UART_WaitOnFlagUntilTimeout+0x32>
 8003942:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003944:	2b00      	cmp	r3, #0
 8003946:	d13f      	bne.n	80039c8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800394e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003950:	e853 3f00 	ldrex	r3, [r3]
 8003954:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003956:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003958:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800395c:	667b      	str	r3, [r7, #100]	; 0x64
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	461a      	mov	r2, r3
 8003964:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003966:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003968:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800396a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800396c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800396e:	e841 2300 	strex	r3, r2, [r1]
 8003972:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003974:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1e6      	bne.n	8003948 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	3308      	adds	r3, #8
 8003980:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003982:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003984:	e853 3f00 	ldrex	r3, [r3]
 8003988:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800398a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800398c:	f023 0301 	bic.w	r3, r3, #1
 8003990:	663b      	str	r3, [r7, #96]	; 0x60
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	3308      	adds	r3, #8
 8003998:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800399a:	64ba      	str	r2, [r7, #72]	; 0x48
 800399c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800399e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80039a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039a2:	e841 2300 	strex	r3, r2, [r1]
 80039a6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80039a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1e5      	bne.n	800397a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2220      	movs	r2, #32
 80039b2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2220      	movs	r2, #32
 80039b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80039c4:	2303      	movs	r3, #3
 80039c6:	e068      	b.n	8003a9a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0304 	and.w	r3, r3, #4
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d050      	beq.n	8003a78 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	69db      	ldr	r3, [r3, #28]
 80039dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039e4:	d148      	bne.n	8003a78 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80039ee:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f8:	e853 3f00 	ldrex	r3, [r3]
 80039fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80039fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a00:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a04:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a0e:	637b      	str	r3, [r7, #52]	; 0x34
 8003a10:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a16:	e841 2300 	strex	r3, r2, [r1]
 8003a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d1e6      	bne.n	80039f0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	3308      	adds	r3, #8
 8003a28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	e853 3f00 	ldrex	r3, [r3]
 8003a30:	613b      	str	r3, [r7, #16]
   return(result);
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	f023 0301 	bic.w	r3, r3, #1
 8003a38:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	3308      	adds	r3, #8
 8003a40:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003a42:	623a      	str	r2, [r7, #32]
 8003a44:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a46:	69f9      	ldr	r1, [r7, #28]
 8003a48:	6a3a      	ldr	r2, [r7, #32]
 8003a4a:	e841 2300 	strex	r3, r2, [r1]
 8003a4e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d1e5      	bne.n	8003a22 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2220      	movs	r2, #32
 8003a5a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2220      	movs	r2, #32
 8003a60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2220      	movs	r2, #32
 8003a68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e010      	b.n	8003a9a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	69da      	ldr	r2, [r3, #28]
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	4013      	ands	r3, r2
 8003a82:	68ba      	ldr	r2, [r7, #8]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	bf0c      	ite	eq
 8003a88:	2301      	moveq	r3, #1
 8003a8a:	2300      	movne	r3, #0
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	461a      	mov	r2, r3
 8003a90:	79fb      	ldrb	r3, [r7, #7]
 8003a92:	429a      	cmp	r2, r3
 8003a94:	f43f af48 	beq.w	8003928 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3770      	adds	r7, #112	; 0x70
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
	...

08003aa4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b097      	sub	sp, #92	; 0x5c
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	4613      	mov	r3, r2
 8003ab0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	68ba      	ldr	r2, [r7, #8]
 8003ab6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	88fa      	ldrh	r2, [r7, #6]
 8003abc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	88fa      	ldrh	r2, [r7, #6]
 8003ac4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ad6:	d10e      	bne.n	8003af6 <UART_Start_Receive_IT+0x52>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	691b      	ldr	r3, [r3, #16]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d105      	bne.n	8003aec <UART_Start_Receive_IT+0x48>
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003ae6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003aea:	e02d      	b.n	8003b48 <UART_Start_Receive_IT+0xa4>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	22ff      	movs	r2, #255	; 0xff
 8003af0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003af4:	e028      	b.n	8003b48 <UART_Start_Receive_IT+0xa4>
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d10d      	bne.n	8003b1a <UART_Start_Receive_IT+0x76>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d104      	bne.n	8003b10 <UART_Start_Receive_IT+0x6c>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	22ff      	movs	r2, #255	; 0xff
 8003b0a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b0e:	e01b      	b.n	8003b48 <UART_Start_Receive_IT+0xa4>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	227f      	movs	r2, #127	; 0x7f
 8003b14:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b18:	e016      	b.n	8003b48 <UART_Start_Receive_IT+0xa4>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b22:	d10d      	bne.n	8003b40 <UART_Start_Receive_IT+0x9c>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	691b      	ldr	r3, [r3, #16]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d104      	bne.n	8003b36 <UART_Start_Receive_IT+0x92>
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	227f      	movs	r2, #127	; 0x7f
 8003b30:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b34:	e008      	b.n	8003b48 <UART_Start_Receive_IT+0xa4>
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	223f      	movs	r2, #63	; 0x3f
 8003b3a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b3e:	e003      	b.n	8003b48 <UART_Start_Receive_IT+0xa4>
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2222      	movs	r2, #34	; 0x22
 8003b54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	3308      	adds	r3, #8
 8003b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b62:	e853 3f00 	ldrex	r3, [r3]
 8003b66:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b6a:	f043 0301 	orr.w	r3, r3, #1
 8003b6e:	657b      	str	r3, [r7, #84]	; 0x54
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	3308      	adds	r3, #8
 8003b76:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003b78:	64ba      	str	r2, [r7, #72]	; 0x48
 8003b7a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b7c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003b7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b80:	e841 2300 	strex	r3, r2, [r1]
 8003b84:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003b86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d1e5      	bne.n	8003b58 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b94:	d107      	bne.n	8003ba6 <UART_Start_Receive_IT+0x102>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d103      	bne.n	8003ba6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	4a21      	ldr	r2, [pc, #132]	; (8003c28 <UART_Start_Receive_IT+0x184>)
 8003ba2:	669a      	str	r2, [r3, #104]	; 0x68
 8003ba4:	e002      	b.n	8003bac <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	4a20      	ldr	r2, [pc, #128]	; (8003c2c <UART_Start_Receive_IT+0x188>)
 8003baa:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	691b      	ldr	r3, [r3, #16]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d019      	beq.n	8003be8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bbc:	e853 3f00 	ldrex	r3, [r3]
 8003bc0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc4:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003bc8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	461a      	mov	r2, r3
 8003bd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bd2:	637b      	str	r3, [r7, #52]	; 0x34
 8003bd4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003bd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003bda:	e841 2300 	strex	r3, r2, [r1]
 8003bde:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d1e6      	bne.n	8003bb4 <UART_Start_Receive_IT+0x110>
 8003be6:	e018      	b.n	8003c1a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	e853 3f00 	ldrex	r3, [r3]
 8003bf4:	613b      	str	r3, [r7, #16]
   return(result);
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	f043 0320 	orr.w	r3, r3, #32
 8003bfc:	653b      	str	r3, [r7, #80]	; 0x50
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	461a      	mov	r2, r3
 8003c04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c06:	623b      	str	r3, [r7, #32]
 8003c08:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c0a:	69f9      	ldr	r1, [r7, #28]
 8003c0c:	6a3a      	ldr	r2, [r7, #32]
 8003c0e:	e841 2300 	strex	r3, r2, [r1]
 8003c12:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d1e6      	bne.n	8003be8 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	375c      	adds	r7, #92	; 0x5c
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr
 8003c28:	08003d97 	.word	0x08003d97
 8003c2c:	08003c31 	.word	0x08003c31

08003c30 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b096      	sub	sp, #88	; 0x58
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003c3e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c48:	2b22      	cmp	r3, #34	; 0x22
 8003c4a:	f040 8098 	bne.w	8003d7e <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c54:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003c58:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003c5c:	b2d9      	uxtb	r1, r3
 8003c5e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003c62:	b2da      	uxtb	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c68:	400a      	ands	r2, r1
 8003c6a:	b2d2      	uxtb	r2, r2
 8003c6c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c72:	1c5a      	adds	r2, r3, #1
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	3b01      	subs	r3, #1
 8003c82:	b29a      	uxth	r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d17b      	bne.n	8003d8e <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c9e:	e853 3f00 	ldrex	r3, [r3]
 8003ca2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003ca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ca6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003caa:	653b      	str	r3, [r7, #80]	; 0x50
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cb4:	647b      	str	r3, [r7, #68]	; 0x44
 8003cb6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003cba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003cbc:	e841 2300 	strex	r3, r2, [r1]
 8003cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003cc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d1e6      	bne.n	8003c96 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	3308      	adds	r3, #8
 8003cce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd2:	e853 3f00 	ldrex	r3, [r3]
 8003cd6:	623b      	str	r3, [r7, #32]
   return(result);
 8003cd8:	6a3b      	ldr	r3, [r7, #32]
 8003cda:	f023 0301 	bic.w	r3, r3, #1
 8003cde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	3308      	adds	r3, #8
 8003ce6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ce8:	633a      	str	r2, [r7, #48]	; 0x30
 8003cea:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003cee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cf0:	e841 2300 	strex	r3, r2, [r1]
 8003cf4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d1e5      	bne.n	8003cc8 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2220      	movs	r2, #32
 8003d00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d12e      	bne.n	8003d76 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	e853 3f00 	ldrex	r3, [r3]
 8003d2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f023 0310 	bic.w	r3, r3, #16
 8003d32:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	461a      	mov	r2, r3
 8003d3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d3c:	61fb      	str	r3, [r7, #28]
 8003d3e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d40:	69b9      	ldr	r1, [r7, #24]
 8003d42:	69fa      	ldr	r2, [r7, #28]
 8003d44:	e841 2300 	strex	r3, r2, [r1]
 8003d48:	617b      	str	r3, [r7, #20]
   return(result);
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d1e6      	bne.n	8003d1e <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	69db      	ldr	r3, [r3, #28]
 8003d56:	f003 0310 	and.w	r3, r3, #16
 8003d5a:	2b10      	cmp	r3, #16
 8003d5c:	d103      	bne.n	8003d66 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2210      	movs	r2, #16
 8003d64:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f7ff fa87 	bl	8003282 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003d74:	e00b      	b.n	8003d8e <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f7ff fa79 	bl	800326e <HAL_UART_RxCpltCallback>
}
 8003d7c:	e007      	b.n	8003d8e <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	699a      	ldr	r2, [r3, #24]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f042 0208 	orr.w	r2, r2, #8
 8003d8c:	619a      	str	r2, [r3, #24]
}
 8003d8e:	bf00      	nop
 8003d90:	3758      	adds	r7, #88	; 0x58
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}

08003d96 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003d96:	b580      	push	{r7, lr}
 8003d98:	b096      	sub	sp, #88	; 0x58
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003da4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dae:	2b22      	cmp	r3, #34	; 0x22
 8003db0:	f040 8098 	bne.w	8003ee4 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dba:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dc2:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8003dc4:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8003dc8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003dcc:	4013      	ands	r3, r2
 8003dce:	b29a      	uxth	r2, r3
 8003dd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dd2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dd8:	1c9a      	adds	r2, r3, #2
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	3b01      	subs	r3, #1
 8003de8:	b29a      	uxth	r2, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d17b      	bne.n	8003ef4 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e04:	e853 3f00 	ldrex	r3, [r3]
 8003e08:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e10:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	461a      	mov	r2, r3
 8003e18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e1a:	643b      	str	r3, [r7, #64]	; 0x40
 8003e1c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e1e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003e20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e22:	e841 2300 	strex	r3, r2, [r1]
 8003e26:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d1e6      	bne.n	8003dfc <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	3308      	adds	r3, #8
 8003e34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e36:	6a3b      	ldr	r3, [r7, #32]
 8003e38:	e853 3f00 	ldrex	r3, [r3]
 8003e3c:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	f023 0301 	bic.w	r3, r3, #1
 8003e44:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	3308      	adds	r3, #8
 8003e4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e50:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e56:	e841 2300 	strex	r3, r2, [r1]
 8003e5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d1e5      	bne.n	8003e2e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2220      	movs	r2, #32
 8003e66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d12e      	bne.n	8003edc <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	e853 3f00 	ldrex	r3, [r3]
 8003e90:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	f023 0310 	bic.w	r3, r3, #16
 8003e98:	647b      	str	r3, [r7, #68]	; 0x44
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ea2:	61bb      	str	r3, [r7, #24]
 8003ea4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea6:	6979      	ldr	r1, [r7, #20]
 8003ea8:	69ba      	ldr	r2, [r7, #24]
 8003eaa:	e841 2300 	strex	r3, r2, [r1]
 8003eae:	613b      	str	r3, [r7, #16]
   return(result);
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d1e6      	bne.n	8003e84 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	69db      	ldr	r3, [r3, #28]
 8003ebc:	f003 0310 	and.w	r3, r3, #16
 8003ec0:	2b10      	cmp	r3, #16
 8003ec2:	d103      	bne.n	8003ecc <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2210      	movs	r2, #16
 8003eca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f7ff f9d4 	bl	8003282 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003eda:	e00b      	b.n	8003ef4 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f7ff f9c6 	bl	800326e <HAL_UART_RxCpltCallback>
}
 8003ee2:	e007      	b.n	8003ef4 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	699a      	ldr	r2, [r3, #24]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f042 0208 	orr.w	r2, r2, #8
 8003ef2:	619a      	str	r2, [r3, #24]
}
 8003ef4:	bf00      	nop
 8003ef6:	3758      	adds	r7, #88	; 0x58
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b085      	sub	sp, #20
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	4603      	mov	r3, r0
 8003f04:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003f06:	2300      	movs	r3, #0
 8003f08:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003f0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f0e:	2b84      	cmp	r3, #132	; 0x84
 8003f10:	d005      	beq.n	8003f1e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003f12:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	4413      	add	r3, r2
 8003f1a:	3303      	adds	r3, #3
 8003f1c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3714      	adds	r7, #20
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003f30:	f000 fd4a 	bl	80049c8 <vTaskStartScheduler>
  
  return osOK;
 8003f34:	2300      	movs	r3, #0
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	bd80      	pop	{r7, pc}

08003f3a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003f3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f3c:	b089      	sub	sp, #36	; 0x24
 8003f3e:	af04      	add	r7, sp, #16
 8003f40:	6078      	str	r0, [r7, #4]
 8003f42:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	695b      	ldr	r3, [r3, #20]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d020      	beq.n	8003f8e <osThreadCreate+0x54>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	699b      	ldr	r3, [r3, #24]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d01c      	beq.n	8003f8e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685c      	ldr	r4, [r3, #4]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681d      	ldr	r5, [r3, #0]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	691e      	ldr	r6, [r3, #16]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7ff ffc8 	bl	8003efc <makeFreeRtosPriority>
 8003f6c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	695b      	ldr	r3, [r3, #20]
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f76:	9202      	str	r2, [sp, #8]
 8003f78:	9301      	str	r3, [sp, #4]
 8003f7a:	9100      	str	r1, [sp, #0]
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	4632      	mov	r2, r6
 8003f80:	4629      	mov	r1, r5
 8003f82:	4620      	mov	r0, r4
 8003f84:	f000 fb4e 	bl	8004624 <xTaskCreateStatic>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	60fb      	str	r3, [r7, #12]
 8003f8c:	e01c      	b.n	8003fc8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685c      	ldr	r4, [r3, #4]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f9a:	b29e      	uxth	r6, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f7ff ffaa 	bl	8003efc <makeFreeRtosPriority>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	f107 030c 	add.w	r3, r7, #12
 8003fae:	9301      	str	r3, [sp, #4]
 8003fb0:	9200      	str	r2, [sp, #0]
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	4632      	mov	r2, r6
 8003fb6:	4629      	mov	r1, r5
 8003fb8:	4620      	mov	r0, r4
 8003fba:	f000 fb96 	bl	80046ea <xTaskCreate>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d001      	beq.n	8003fc8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	e000      	b.n	8003fca <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3714      	adds	r7, #20
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003fd2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003fd2:	b580      	push	{r7, lr}
 8003fd4:	b084      	sub	sp, #16
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d001      	beq.n	8003fe8 <osDelay+0x16>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	e000      	b.n	8003fea <osDelay+0x18>
 8003fe8:	2301      	movs	r3, #1
 8003fea:	4618      	mov	r0, r3
 8003fec:	f000 fcb6 	bl	800495c <vTaskDelay>
  
  return osOK;
 8003ff0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3710      	adds	r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	b083      	sub	sp, #12
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f103 0208 	add.w	r2, r3, #8
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f04f 32ff 	mov.w	r2, #4294967295
 8004012:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f103 0208 	add.w	r2, r3, #8
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f103 0208 	add.w	r2, r3, #8
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800402e:	bf00      	nop
 8004030:	370c      	adds	r7, #12
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr

0800403a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800403a:	b480      	push	{r7}
 800403c:	b083      	sub	sp, #12
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004048:	bf00      	nop
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004054:	b480      	push	{r7}
 8004056:	b085      	sub	sp, #20
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	68fa      	ldr	r2, [r7, #12]
 8004068:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	689a      	ldr	r2, [r3, #8]
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	683a      	ldr	r2, [r7, #0]
 8004078:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	683a      	ldr	r2, [r7, #0]
 800407e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	1c5a      	adds	r2, r3, #1
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	601a      	str	r2, [r3, #0]
}
 8004090:	bf00      	nop
 8004092:	3714      	adds	r7, #20
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr

0800409c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800409c:	b480      	push	{r7}
 800409e:	b085      	sub	sp, #20
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b2:	d103      	bne.n	80040bc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	60fb      	str	r3, [r7, #12]
 80040ba:	e00c      	b.n	80040d6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	3308      	adds	r3, #8
 80040c0:	60fb      	str	r3, [r7, #12]
 80040c2:	e002      	b.n	80040ca <vListInsert+0x2e>
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	60fb      	str	r3, [r7, #12]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68ba      	ldr	r2, [r7, #8]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d2f6      	bcs.n	80040c4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	685a      	ldr	r2, [r3, #4]
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	683a      	ldr	r2, [r7, #0]
 80040e4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	68fa      	ldr	r2, [r7, #12]
 80040ea:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	683a      	ldr	r2, [r7, #0]
 80040f0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	1c5a      	adds	r2, r3, #1
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	601a      	str	r2, [r3, #0]
}
 8004102:	bf00      	nop
 8004104:	3714      	adds	r7, #20
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr

0800410e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800410e:	b480      	push	{r7}
 8004110:	b085      	sub	sp, #20
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	6892      	ldr	r2, [r2, #8]
 8004124:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	6852      	ldr	r2, [r2, #4]
 800412e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	429a      	cmp	r2, r3
 8004138:	d103      	bne.n	8004142 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	689a      	ldr	r2, [r3, #8]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	1e5a      	subs	r2, r3, #1
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
}
 8004156:	4618      	mov	r0, r3
 8004158:	3714      	adds	r7, #20
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
	...

08004164 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d10c      	bne.n	8004192 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800417c:	b672      	cpsid	i
 800417e:	f383 8811 	msr	BASEPRI, r3
 8004182:	f3bf 8f6f 	isb	sy
 8004186:	f3bf 8f4f 	dsb	sy
 800418a:	b662      	cpsie	i
 800418c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800418e:	bf00      	nop
 8004190:	e7fe      	b.n	8004190 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8004192:	f001 faeb 	bl	800576c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800419e:	68f9      	ldr	r1, [r7, #12]
 80041a0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80041a2:	fb01 f303 	mul.w	r3, r1, r3
 80041a6:	441a      	add	r2, r3
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2200      	movs	r2, #0
 80041b0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041c2:	3b01      	subs	r3, #1
 80041c4:	68f9      	ldr	r1, [r7, #12]
 80041c6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80041c8:	fb01 f303 	mul.w	r3, r1, r3
 80041cc:	441a      	add	r2, r3
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	22ff      	movs	r2, #255	; 0xff
 80041d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	22ff      	movs	r2, #255	; 0xff
 80041de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d114      	bne.n	8004212 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	691b      	ldr	r3, [r3, #16]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d01a      	beq.n	8004226 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	3310      	adds	r3, #16
 80041f4:	4618      	mov	r0, r3
 80041f6:	f000 fe35 	bl	8004e64 <xTaskRemoveFromEventList>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d012      	beq.n	8004226 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004200:	4b0c      	ldr	r3, [pc, #48]	; (8004234 <xQueueGenericReset+0xd0>)
 8004202:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004206:	601a      	str	r2, [r3, #0]
 8004208:	f3bf 8f4f 	dsb	sy
 800420c:	f3bf 8f6f 	isb	sy
 8004210:	e009      	b.n	8004226 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	3310      	adds	r3, #16
 8004216:	4618      	mov	r0, r3
 8004218:	f7ff feef 	bl	8003ffa <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	3324      	adds	r3, #36	; 0x24
 8004220:	4618      	mov	r0, r3
 8004222:	f7ff feea 	bl	8003ffa <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004226:	f001 fad5 	bl	80057d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800422a:	2301      	movs	r3, #1
}
 800422c:	4618      	mov	r0, r3
 800422e:	3710      	adds	r7, #16
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}
 8004234:	e000ed04 	.word	0xe000ed04

08004238 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004238:	b580      	push	{r7, lr}
 800423a:	b08a      	sub	sp, #40	; 0x28
 800423c:	af02      	add	r7, sp, #8
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	4613      	mov	r3, r2
 8004244:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d10c      	bne.n	8004266 <xQueueGenericCreate+0x2e>
	__asm volatile
 800424c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004250:	b672      	cpsid	i
 8004252:	f383 8811 	msr	BASEPRI, r3
 8004256:	f3bf 8f6f 	isb	sy
 800425a:	f3bf 8f4f 	dsb	sy
 800425e:	b662      	cpsie	i
 8004260:	613b      	str	r3, [r7, #16]
}
 8004262:	bf00      	nop
 8004264:	e7fe      	b.n	8004264 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d102      	bne.n	8004272 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800426c:	2300      	movs	r3, #0
 800426e:	61fb      	str	r3, [r7, #28]
 8004270:	e004      	b.n	800427c <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	68ba      	ldr	r2, [r7, #8]
 8004276:	fb02 f303 	mul.w	r3, r2, r3
 800427a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	3348      	adds	r3, #72	; 0x48
 8004280:	4618      	mov	r0, r3
 8004282:	f001 fb5b 	bl	800593c <pvPortMalloc>
 8004286:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d011      	beq.n	80042b2 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	3348      	adds	r3, #72	; 0x48
 8004296:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	2200      	movs	r2, #0
 800429c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80042a0:	79fa      	ldrb	r2, [r7, #7]
 80042a2:	69bb      	ldr	r3, [r7, #24]
 80042a4:	9300      	str	r3, [sp, #0]
 80042a6:	4613      	mov	r3, r2
 80042a8:	697a      	ldr	r2, [r7, #20]
 80042aa:	68b9      	ldr	r1, [r7, #8]
 80042ac:	68f8      	ldr	r0, [r7, #12]
 80042ae:	f000 f805 	bl	80042bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80042b2:	69bb      	ldr	r3, [r7, #24]
	}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3720      	adds	r7, #32
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	607a      	str	r2, [r7, #4]
 80042c8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d103      	bne.n	80042d8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	69ba      	ldr	r2, [r7, #24]
 80042d4:	601a      	str	r2, [r3, #0]
 80042d6:	e002      	b.n	80042de <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80042de:	69bb      	ldr	r3, [r7, #24]
 80042e0:	68fa      	ldr	r2, [r7, #12]
 80042e2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	68ba      	ldr	r2, [r7, #8]
 80042e8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80042ea:	2101      	movs	r1, #1
 80042ec:	69b8      	ldr	r0, [r7, #24]
 80042ee:	f7ff ff39 	bl	8004164 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80042f2:	bf00      	nop
 80042f4:	3710      	adds	r7, #16
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
	...

080042fc <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b08e      	sub	sp, #56	; 0x38
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004306:	2300      	movs	r3, #0
 8004308:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800430e:	2300      	movs	r3, #0
 8004310:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004314:	2b00      	cmp	r3, #0
 8004316:	d10c      	bne.n	8004332 <xQueueSemaphoreTake+0x36>
	__asm volatile
 8004318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800431c:	b672      	cpsid	i
 800431e:	f383 8811 	msr	BASEPRI, r3
 8004322:	f3bf 8f6f 	isb	sy
 8004326:	f3bf 8f4f 	dsb	sy
 800432a:	b662      	cpsie	i
 800432c:	623b      	str	r3, [r7, #32]
}
 800432e:	bf00      	nop
 8004330:	e7fe      	b.n	8004330 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00c      	beq.n	8004354 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800433a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800433e:	b672      	cpsid	i
 8004340:	f383 8811 	msr	BASEPRI, r3
 8004344:	f3bf 8f6f 	isb	sy
 8004348:	f3bf 8f4f 	dsb	sy
 800434c:	b662      	cpsie	i
 800434e:	61fb      	str	r3, [r7, #28]
}
 8004350:	bf00      	nop
 8004352:	e7fe      	b.n	8004352 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004354:	f000 ff4a 	bl	80051ec <xTaskGetSchedulerState>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d102      	bne.n	8004364 <xQueueSemaphoreTake+0x68>
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d101      	bne.n	8004368 <xQueueSemaphoreTake+0x6c>
 8004364:	2301      	movs	r3, #1
 8004366:	e000      	b.n	800436a <xQueueSemaphoreTake+0x6e>
 8004368:	2300      	movs	r3, #0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d10c      	bne.n	8004388 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800436e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004372:	b672      	cpsid	i
 8004374:	f383 8811 	msr	BASEPRI, r3
 8004378:	f3bf 8f6f 	isb	sy
 800437c:	f3bf 8f4f 	dsb	sy
 8004380:	b662      	cpsie	i
 8004382:	61bb      	str	r3, [r7, #24]
}
 8004384:	bf00      	nop
 8004386:	e7fe      	b.n	8004386 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004388:	f001 f9f0 	bl	800576c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800438c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800438e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004390:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004394:	2b00      	cmp	r3, #0
 8004396:	d024      	beq.n	80043e2 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800439a:	1e5a      	subs	r2, r3, #1
 800439c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800439e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80043a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d104      	bne.n	80043b2 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80043a8:	f001 f85c 	bl	8005464 <pvTaskIncrementMutexHeldCount>
 80043ac:	4602      	mov	r2, r0
 80043ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80043b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00f      	beq.n	80043da <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80043ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043bc:	3310      	adds	r3, #16
 80043be:	4618      	mov	r0, r3
 80043c0:	f000 fd50 	bl	8004e64 <xTaskRemoveFromEventList>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d007      	beq.n	80043da <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80043ca:	4b55      	ldr	r3, [pc, #340]	; (8004520 <xQueueSemaphoreTake+0x224>)
 80043cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043d0:	601a      	str	r2, [r3, #0]
 80043d2:	f3bf 8f4f 	dsb	sy
 80043d6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80043da:	f001 f9fb 	bl	80057d4 <vPortExitCritical>
				return pdPASS;
 80043de:	2301      	movs	r3, #1
 80043e0:	e099      	b.n	8004516 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d113      	bne.n	8004410 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80043e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d00c      	beq.n	8004408 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 80043ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f2:	b672      	cpsid	i
 80043f4:	f383 8811 	msr	BASEPRI, r3
 80043f8:	f3bf 8f6f 	isb	sy
 80043fc:	f3bf 8f4f 	dsb	sy
 8004400:	b662      	cpsie	i
 8004402:	617b      	str	r3, [r7, #20]
}
 8004404:	bf00      	nop
 8004406:	e7fe      	b.n	8004406 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004408:	f001 f9e4 	bl	80057d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800440c:	2300      	movs	r3, #0
 800440e:	e082      	b.n	8004516 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004412:	2b00      	cmp	r3, #0
 8004414:	d106      	bne.n	8004424 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004416:	f107 030c 	add.w	r3, r7, #12
 800441a:	4618      	mov	r0, r3
 800441c:	f000 fd86 	bl	8004f2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004420:	2301      	movs	r3, #1
 8004422:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004424:	f001 f9d6 	bl	80057d4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004428:	f000 fb32 	bl	8004a90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800442c:	f001 f99e 	bl	800576c <vPortEnterCritical>
 8004430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004432:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004436:	b25b      	sxtb	r3, r3
 8004438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800443c:	d103      	bne.n	8004446 <xQueueSemaphoreTake+0x14a>
 800443e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004440:	2200      	movs	r2, #0
 8004442:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004448:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800444c:	b25b      	sxtb	r3, r3
 800444e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004452:	d103      	bne.n	800445c <xQueueSemaphoreTake+0x160>
 8004454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004456:	2200      	movs	r2, #0
 8004458:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800445c:	f001 f9ba 	bl	80057d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004460:	463a      	mov	r2, r7
 8004462:	f107 030c 	add.w	r3, r7, #12
 8004466:	4611      	mov	r1, r2
 8004468:	4618      	mov	r0, r3
 800446a:	f000 fd75 	bl	8004f58 <xTaskCheckForTimeOut>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d132      	bne.n	80044da <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004474:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004476:	f000 f8bf 	bl	80045f8 <prvIsQueueEmpty>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d026      	beq.n	80044ce <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d109      	bne.n	800449c <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8004488:	f001 f970 	bl	800576c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800448c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	4618      	mov	r0, r3
 8004492:	f000 fec9 	bl	8005228 <xTaskPriorityInherit>
 8004496:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004498:	f001 f99c 	bl	80057d4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800449c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800449e:	3324      	adds	r3, #36	; 0x24
 80044a0:	683a      	ldr	r2, [r7, #0]
 80044a2:	4611      	mov	r1, r2
 80044a4:	4618      	mov	r0, r3
 80044a6:	f000 fcb7 	bl	8004e18 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80044aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80044ac:	f000 f852 	bl	8004554 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80044b0:	f000 fafc 	bl	8004aac <xTaskResumeAll>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	f47f af66 	bne.w	8004388 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 80044bc:	4b18      	ldr	r3, [pc, #96]	; (8004520 <xQueueSemaphoreTake+0x224>)
 80044be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044c2:	601a      	str	r2, [r3, #0]
 80044c4:	f3bf 8f4f 	dsb	sy
 80044c8:	f3bf 8f6f 	isb	sy
 80044cc:	e75c      	b.n	8004388 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80044ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80044d0:	f000 f840 	bl	8004554 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80044d4:	f000 faea 	bl	8004aac <xTaskResumeAll>
 80044d8:	e756      	b.n	8004388 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80044da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80044dc:	f000 f83a 	bl	8004554 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80044e0:	f000 fae4 	bl	8004aac <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80044e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80044e6:	f000 f887 	bl	80045f8 <prvIsQueueEmpty>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	f43f af4b 	beq.w	8004388 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80044f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d00d      	beq.n	8004514 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 80044f8:	f001 f938 	bl	800576c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80044fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80044fe:	f000 f811 	bl	8004524 <prvGetDisinheritPriorityAfterTimeout>
 8004502:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800450a:	4618      	mov	r0, r3
 800450c:	f000 ff0c 	bl	8005328 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004510:	f001 f960 	bl	80057d4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004514:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004516:	4618      	mov	r0, r3
 8004518:	3738      	adds	r7, #56	; 0x38
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop
 8004520:	e000ed04 	.word	0xe000ed04

08004524 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004524:	b480      	push	{r7}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004530:	2b00      	cmp	r3, #0
 8004532:	d006      	beq.n	8004542 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f1c3 0307 	rsb	r3, r3, #7
 800453e:	60fb      	str	r3, [r7, #12]
 8004540:	e001      	b.n	8004546 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004542:	2300      	movs	r3, #0
 8004544:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004546:	68fb      	ldr	r3, [r7, #12]
	}
 8004548:	4618      	mov	r0, r3
 800454a:	3714      	adds	r7, #20
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800455c:	f001 f906 	bl	800576c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004566:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004568:	e011      	b.n	800458e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456e:	2b00      	cmp	r3, #0
 8004570:	d012      	beq.n	8004598 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	3324      	adds	r3, #36	; 0x24
 8004576:	4618      	mov	r0, r3
 8004578:	f000 fc74 	bl	8004e64 <xTaskRemoveFromEventList>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d001      	beq.n	8004586 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004582:	f000 fd4f 	bl	8005024 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004586:	7bfb      	ldrb	r3, [r7, #15]
 8004588:	3b01      	subs	r3, #1
 800458a:	b2db      	uxtb	r3, r3
 800458c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800458e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004592:	2b00      	cmp	r3, #0
 8004594:	dce9      	bgt.n	800456a <prvUnlockQueue+0x16>
 8004596:	e000      	b.n	800459a <prvUnlockQueue+0x46>
					break;
 8004598:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	22ff      	movs	r2, #255	; 0xff
 800459e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80045a2:	f001 f917 	bl	80057d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80045a6:	f001 f8e1 	bl	800576c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80045b0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80045b2:	e011      	b.n	80045d8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	691b      	ldr	r3, [r3, #16]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d012      	beq.n	80045e2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	3310      	adds	r3, #16
 80045c0:	4618      	mov	r0, r3
 80045c2:	f000 fc4f 	bl	8004e64 <xTaskRemoveFromEventList>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d001      	beq.n	80045d0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80045cc:	f000 fd2a 	bl	8005024 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80045d0:	7bbb      	ldrb	r3, [r7, #14]
 80045d2:	3b01      	subs	r3, #1
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80045d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	dce9      	bgt.n	80045b4 <prvUnlockQueue+0x60>
 80045e0:	e000      	b.n	80045e4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80045e2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	22ff      	movs	r2, #255	; 0xff
 80045e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80045ec:	f001 f8f2 	bl	80057d4 <vPortExitCritical>
}
 80045f0:	bf00      	nop
 80045f2:	3710      	adds	r7, #16
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b084      	sub	sp, #16
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004600:	f001 f8b4 	bl	800576c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004608:	2b00      	cmp	r3, #0
 800460a:	d102      	bne.n	8004612 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800460c:	2301      	movs	r3, #1
 800460e:	60fb      	str	r3, [r7, #12]
 8004610:	e001      	b.n	8004616 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004612:	2300      	movs	r3, #0
 8004614:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004616:	f001 f8dd 	bl	80057d4 <vPortExitCritical>

	return xReturn;
 800461a:	68fb      	ldr	r3, [r7, #12]
}
 800461c:	4618      	mov	r0, r3
 800461e:	3710      	adds	r7, #16
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004624:	b580      	push	{r7, lr}
 8004626:	b08e      	sub	sp, #56	; 0x38
 8004628:	af04      	add	r7, sp, #16
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	607a      	str	r2, [r7, #4]
 8004630:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004634:	2b00      	cmp	r3, #0
 8004636:	d10c      	bne.n	8004652 <xTaskCreateStatic+0x2e>
	__asm volatile
 8004638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800463c:	b672      	cpsid	i
 800463e:	f383 8811 	msr	BASEPRI, r3
 8004642:	f3bf 8f6f 	isb	sy
 8004646:	f3bf 8f4f 	dsb	sy
 800464a:	b662      	cpsie	i
 800464c:	623b      	str	r3, [r7, #32]
}
 800464e:	bf00      	nop
 8004650:	e7fe      	b.n	8004650 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8004652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004654:	2b00      	cmp	r3, #0
 8004656:	d10c      	bne.n	8004672 <xTaskCreateStatic+0x4e>
	__asm volatile
 8004658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800465c:	b672      	cpsid	i
 800465e:	f383 8811 	msr	BASEPRI, r3
 8004662:	f3bf 8f6f 	isb	sy
 8004666:	f3bf 8f4f 	dsb	sy
 800466a:	b662      	cpsie	i
 800466c:	61fb      	str	r3, [r7, #28]
}
 800466e:	bf00      	nop
 8004670:	e7fe      	b.n	8004670 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004672:	2354      	movs	r3, #84	; 0x54
 8004674:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	2b54      	cmp	r3, #84	; 0x54
 800467a:	d00c      	beq.n	8004696 <xTaskCreateStatic+0x72>
	__asm volatile
 800467c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004680:	b672      	cpsid	i
 8004682:	f383 8811 	msr	BASEPRI, r3
 8004686:	f3bf 8f6f 	isb	sy
 800468a:	f3bf 8f4f 	dsb	sy
 800468e:	b662      	cpsie	i
 8004690:	61bb      	str	r3, [r7, #24]
}
 8004692:	bf00      	nop
 8004694:	e7fe      	b.n	8004694 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004696:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800469a:	2b00      	cmp	r3, #0
 800469c:	d01e      	beq.n	80046dc <xTaskCreateStatic+0xb8>
 800469e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d01b      	beq.n	80046dc <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80046a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046a6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80046a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046ac:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80046ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b0:	2202      	movs	r2, #2
 80046b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80046b6:	2300      	movs	r3, #0
 80046b8:	9303      	str	r3, [sp, #12]
 80046ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046bc:	9302      	str	r3, [sp, #8]
 80046be:	f107 0314 	add.w	r3, r7, #20
 80046c2:	9301      	str	r3, [sp, #4]
 80046c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c6:	9300      	str	r3, [sp, #0]
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	68b9      	ldr	r1, [r7, #8]
 80046ce:	68f8      	ldr	r0, [r7, #12]
 80046d0:	f000 f850 	bl	8004774 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80046d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80046d6:	f000 f8d7 	bl	8004888 <prvAddNewTaskToReadyList>
 80046da:	e001      	b.n	80046e0 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 80046dc:	2300      	movs	r3, #0
 80046de:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80046e0:	697b      	ldr	r3, [r7, #20]
	}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3728      	adds	r7, #40	; 0x28
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}

080046ea <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80046ea:	b580      	push	{r7, lr}
 80046ec:	b08c      	sub	sp, #48	; 0x30
 80046ee:	af04      	add	r7, sp, #16
 80046f0:	60f8      	str	r0, [r7, #12]
 80046f2:	60b9      	str	r1, [r7, #8]
 80046f4:	603b      	str	r3, [r7, #0]
 80046f6:	4613      	mov	r3, r2
 80046f8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80046fa:	88fb      	ldrh	r3, [r7, #6]
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	4618      	mov	r0, r3
 8004700:	f001 f91c 	bl	800593c <pvPortMalloc>
 8004704:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d00e      	beq.n	800472a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800470c:	2054      	movs	r0, #84	; 0x54
 800470e:	f001 f915 	bl	800593c <pvPortMalloc>
 8004712:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d003      	beq.n	8004722 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	697a      	ldr	r2, [r7, #20]
 800471e:	631a      	str	r2, [r3, #48]	; 0x30
 8004720:	e005      	b.n	800472e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004722:	6978      	ldr	r0, [r7, #20]
 8004724:	f001 f9d4 	bl	8005ad0 <vPortFree>
 8004728:	e001      	b.n	800472e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800472a:	2300      	movs	r3, #0
 800472c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d017      	beq.n	8004764 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	2200      	movs	r2, #0
 8004738:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800473c:	88fa      	ldrh	r2, [r7, #6]
 800473e:	2300      	movs	r3, #0
 8004740:	9303      	str	r3, [sp, #12]
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	9302      	str	r3, [sp, #8]
 8004746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004748:	9301      	str	r3, [sp, #4]
 800474a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800474c:	9300      	str	r3, [sp, #0]
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	68b9      	ldr	r1, [r7, #8]
 8004752:	68f8      	ldr	r0, [r7, #12]
 8004754:	f000 f80e 	bl	8004774 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004758:	69f8      	ldr	r0, [r7, #28]
 800475a:	f000 f895 	bl	8004888 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800475e:	2301      	movs	r3, #1
 8004760:	61bb      	str	r3, [r7, #24]
 8004762:	e002      	b.n	800476a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004764:	f04f 33ff 	mov.w	r3, #4294967295
 8004768:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800476a:	69bb      	ldr	r3, [r7, #24]
	}
 800476c:	4618      	mov	r0, r3
 800476e:	3720      	adds	r7, #32
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b088      	sub	sp, #32
 8004778:	af00      	add	r7, sp, #0
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	607a      	str	r2, [r7, #4]
 8004780:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004784:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004786:	6879      	ldr	r1, [r7, #4]
 8004788:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800478c:	440b      	add	r3, r1
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	4413      	add	r3, r2
 8004792:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	f023 0307 	bic.w	r3, r3, #7
 800479a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	f003 0307 	and.w	r3, r3, #7
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d00c      	beq.n	80047c0 <prvInitialiseNewTask+0x4c>
	__asm volatile
 80047a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047aa:	b672      	cpsid	i
 80047ac:	f383 8811 	msr	BASEPRI, r3
 80047b0:	f3bf 8f6f 	isb	sy
 80047b4:	f3bf 8f4f 	dsb	sy
 80047b8:	b662      	cpsie	i
 80047ba:	617b      	str	r3, [r7, #20]
}
 80047bc:	bf00      	nop
 80047be:	e7fe      	b.n	80047be <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d01f      	beq.n	8004806 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80047c6:	2300      	movs	r3, #0
 80047c8:	61fb      	str	r3, [r7, #28]
 80047ca:	e012      	b.n	80047f2 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80047cc:	68ba      	ldr	r2, [r7, #8]
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	4413      	add	r3, r2
 80047d2:	7819      	ldrb	r1, [r3, #0]
 80047d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	4413      	add	r3, r2
 80047da:	3334      	adds	r3, #52	; 0x34
 80047dc:	460a      	mov	r2, r1
 80047de:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80047e0:	68ba      	ldr	r2, [r7, #8]
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	4413      	add	r3, r2
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d006      	beq.n	80047fa <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	3301      	adds	r3, #1
 80047f0:	61fb      	str	r3, [r7, #28]
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	2b0f      	cmp	r3, #15
 80047f6:	d9e9      	bls.n	80047cc <prvInitialiseNewTask+0x58>
 80047f8:	e000      	b.n	80047fc <prvInitialiseNewTask+0x88>
			{
				break;
 80047fa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80047fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047fe:	2200      	movs	r2, #0
 8004800:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004804:	e003      	b.n	800480e <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004808:	2200      	movs	r2, #0
 800480a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800480e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004810:	2b06      	cmp	r3, #6
 8004812:	d901      	bls.n	8004818 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004814:	2306      	movs	r3, #6
 8004816:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800481a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800481c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800481e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004820:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004822:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004826:	2200      	movs	r2, #0
 8004828:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800482a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800482c:	3304      	adds	r3, #4
 800482e:	4618      	mov	r0, r3
 8004830:	f7ff fc03 	bl	800403a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004836:	3318      	adds	r3, #24
 8004838:	4618      	mov	r0, r3
 800483a:	f7ff fbfe 	bl	800403a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800483e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004840:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004842:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004846:	f1c3 0207 	rsb	r2, r3, #7
 800484a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800484c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800484e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004850:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004852:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004856:	2200      	movs	r2, #0
 8004858:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800485a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800485c:	2200      	movs	r2, #0
 800485e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004862:	683a      	ldr	r2, [r7, #0]
 8004864:	68f9      	ldr	r1, [r7, #12]
 8004866:	69b8      	ldr	r0, [r7, #24]
 8004868:	f000 fe76 	bl	8005558 <pxPortInitialiseStack>
 800486c:	4602      	mov	r2, r0
 800486e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004870:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004874:	2b00      	cmp	r3, #0
 8004876:	d002      	beq.n	800487e <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800487a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800487c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800487e:	bf00      	nop
 8004880:	3720      	adds	r7, #32
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
	...

08004888 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004890:	f000 ff6c 	bl	800576c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004894:	4b2a      	ldr	r3, [pc, #168]	; (8004940 <prvAddNewTaskToReadyList+0xb8>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	3301      	adds	r3, #1
 800489a:	4a29      	ldr	r2, [pc, #164]	; (8004940 <prvAddNewTaskToReadyList+0xb8>)
 800489c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800489e:	4b29      	ldr	r3, [pc, #164]	; (8004944 <prvAddNewTaskToReadyList+0xbc>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d109      	bne.n	80048ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80048a6:	4a27      	ldr	r2, [pc, #156]	; (8004944 <prvAddNewTaskToReadyList+0xbc>)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80048ac:	4b24      	ldr	r3, [pc, #144]	; (8004940 <prvAddNewTaskToReadyList+0xb8>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d110      	bne.n	80048d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80048b4:	f000 fbda 	bl	800506c <prvInitialiseTaskLists>
 80048b8:	e00d      	b.n	80048d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80048ba:	4b23      	ldr	r3, [pc, #140]	; (8004948 <prvAddNewTaskToReadyList+0xc0>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d109      	bne.n	80048d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80048c2:	4b20      	ldr	r3, [pc, #128]	; (8004944 <prvAddNewTaskToReadyList+0xbc>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d802      	bhi.n	80048d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80048d0:	4a1c      	ldr	r2, [pc, #112]	; (8004944 <prvAddNewTaskToReadyList+0xbc>)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80048d6:	4b1d      	ldr	r3, [pc, #116]	; (800494c <prvAddNewTaskToReadyList+0xc4>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	3301      	adds	r3, #1
 80048dc:	4a1b      	ldr	r2, [pc, #108]	; (800494c <prvAddNewTaskToReadyList+0xc4>)
 80048de:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e4:	2201      	movs	r2, #1
 80048e6:	409a      	lsls	r2, r3
 80048e8:	4b19      	ldr	r3, [pc, #100]	; (8004950 <prvAddNewTaskToReadyList+0xc8>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	4a18      	ldr	r2, [pc, #96]	; (8004950 <prvAddNewTaskToReadyList+0xc8>)
 80048f0:	6013      	str	r3, [r2, #0]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048f6:	4613      	mov	r3, r2
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	4413      	add	r3, r2
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	4a15      	ldr	r2, [pc, #84]	; (8004954 <prvAddNewTaskToReadyList+0xcc>)
 8004900:	441a      	add	r2, r3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	3304      	adds	r3, #4
 8004906:	4619      	mov	r1, r3
 8004908:	4610      	mov	r0, r2
 800490a:	f7ff fba3 	bl	8004054 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800490e:	f000 ff61 	bl	80057d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004912:	4b0d      	ldr	r3, [pc, #52]	; (8004948 <prvAddNewTaskToReadyList+0xc0>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d00e      	beq.n	8004938 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800491a:	4b0a      	ldr	r3, [pc, #40]	; (8004944 <prvAddNewTaskToReadyList+0xbc>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004924:	429a      	cmp	r2, r3
 8004926:	d207      	bcs.n	8004938 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004928:	4b0b      	ldr	r3, [pc, #44]	; (8004958 <prvAddNewTaskToReadyList+0xd0>)
 800492a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800492e:	601a      	str	r2, [r3, #0]
 8004930:	f3bf 8f4f 	dsb	sy
 8004934:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004938:	bf00      	nop
 800493a:	3708      	adds	r7, #8
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}
 8004940:	200007e8 	.word	0x200007e8
 8004944:	200006e8 	.word	0x200006e8
 8004948:	200007f4 	.word	0x200007f4
 800494c:	20000804 	.word	0x20000804
 8004950:	200007f0 	.word	0x200007f0
 8004954:	200006ec 	.word	0x200006ec
 8004958:	e000ed04 	.word	0xe000ed04

0800495c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004964:	2300      	movs	r3, #0
 8004966:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d019      	beq.n	80049a2 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800496e:	4b14      	ldr	r3, [pc, #80]	; (80049c0 <vTaskDelay+0x64>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d00c      	beq.n	8004990 <vTaskDelay+0x34>
	__asm volatile
 8004976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800497a:	b672      	cpsid	i
 800497c:	f383 8811 	msr	BASEPRI, r3
 8004980:	f3bf 8f6f 	isb	sy
 8004984:	f3bf 8f4f 	dsb	sy
 8004988:	b662      	cpsie	i
 800498a:	60bb      	str	r3, [r7, #8]
}
 800498c:	bf00      	nop
 800498e:	e7fe      	b.n	800498e <vTaskDelay+0x32>
			vTaskSuspendAll();
 8004990:	f000 f87e 	bl	8004a90 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004994:	2100      	movs	r1, #0
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 fd78 	bl	800548c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800499c:	f000 f886 	bl	8004aac <xTaskResumeAll>
 80049a0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d107      	bne.n	80049b8 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80049a8:	4b06      	ldr	r3, [pc, #24]	; (80049c4 <vTaskDelay+0x68>)
 80049aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049ae:	601a      	str	r2, [r3, #0]
 80049b0:	f3bf 8f4f 	dsb	sy
 80049b4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80049b8:	bf00      	nop
 80049ba:	3710      	adds	r7, #16
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	20000810 	.word	0x20000810
 80049c4:	e000ed04 	.word	0xe000ed04

080049c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b08a      	sub	sp, #40	; 0x28
 80049cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80049ce:	2300      	movs	r3, #0
 80049d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80049d2:	2300      	movs	r3, #0
 80049d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80049d6:	463a      	mov	r2, r7
 80049d8:	1d39      	adds	r1, r7, #4
 80049da:	f107 0308 	add.w	r3, r7, #8
 80049de:	4618      	mov	r0, r3
 80049e0:	f7fb fde8 	bl	80005b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80049e4:	6839      	ldr	r1, [r7, #0]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	68ba      	ldr	r2, [r7, #8]
 80049ea:	9202      	str	r2, [sp, #8]
 80049ec:	9301      	str	r3, [sp, #4]
 80049ee:	2300      	movs	r3, #0
 80049f0:	9300      	str	r3, [sp, #0]
 80049f2:	2300      	movs	r3, #0
 80049f4:	460a      	mov	r2, r1
 80049f6:	4920      	ldr	r1, [pc, #128]	; (8004a78 <vTaskStartScheduler+0xb0>)
 80049f8:	4820      	ldr	r0, [pc, #128]	; (8004a7c <vTaskStartScheduler+0xb4>)
 80049fa:	f7ff fe13 	bl	8004624 <xTaskCreateStatic>
 80049fe:	4603      	mov	r3, r0
 8004a00:	4a1f      	ldr	r2, [pc, #124]	; (8004a80 <vTaskStartScheduler+0xb8>)
 8004a02:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004a04:	4b1e      	ldr	r3, [pc, #120]	; (8004a80 <vTaskStartScheduler+0xb8>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d002      	beq.n	8004a12 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	617b      	str	r3, [r7, #20]
 8004a10:	e001      	b.n	8004a16 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004a12:	2300      	movs	r3, #0
 8004a14:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d118      	bne.n	8004a4e <vTaskStartScheduler+0x86>
	__asm volatile
 8004a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a20:	b672      	cpsid	i
 8004a22:	f383 8811 	msr	BASEPRI, r3
 8004a26:	f3bf 8f6f 	isb	sy
 8004a2a:	f3bf 8f4f 	dsb	sy
 8004a2e:	b662      	cpsie	i
 8004a30:	613b      	str	r3, [r7, #16]
}
 8004a32:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004a34:	4b13      	ldr	r3, [pc, #76]	; (8004a84 <vTaskStartScheduler+0xbc>)
 8004a36:	f04f 32ff 	mov.w	r2, #4294967295
 8004a3a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004a3c:	4b12      	ldr	r3, [pc, #72]	; (8004a88 <vTaskStartScheduler+0xc0>)
 8004a3e:	2201      	movs	r2, #1
 8004a40:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004a42:	4b12      	ldr	r3, [pc, #72]	; (8004a8c <vTaskStartScheduler+0xc4>)
 8004a44:	2200      	movs	r2, #0
 8004a46:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004a48:	f000 fe12 	bl	8005670 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004a4c:	e010      	b.n	8004a70 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a54:	d10c      	bne.n	8004a70 <vTaskStartScheduler+0xa8>
	__asm volatile
 8004a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a5a:	b672      	cpsid	i
 8004a5c:	f383 8811 	msr	BASEPRI, r3
 8004a60:	f3bf 8f6f 	isb	sy
 8004a64:	f3bf 8f4f 	dsb	sy
 8004a68:	b662      	cpsie	i
 8004a6a:	60fb      	str	r3, [r7, #12]
}
 8004a6c:	bf00      	nop
 8004a6e:	e7fe      	b.n	8004a6e <vTaskStartScheduler+0xa6>
}
 8004a70:	bf00      	nop
 8004a72:	3718      	adds	r7, #24
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}
 8004a78:	08007188 	.word	0x08007188
 8004a7c:	0800503d 	.word	0x0800503d
 8004a80:	2000080c 	.word	0x2000080c
 8004a84:	20000808 	.word	0x20000808
 8004a88:	200007f4 	.word	0x200007f4
 8004a8c:	200007ec 	.word	0x200007ec

08004a90 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004a90:	b480      	push	{r7}
 8004a92:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004a94:	4b04      	ldr	r3, [pc, #16]	; (8004aa8 <vTaskSuspendAll+0x18>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	3301      	adds	r3, #1
 8004a9a:	4a03      	ldr	r2, [pc, #12]	; (8004aa8 <vTaskSuspendAll+0x18>)
 8004a9c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004a9e:	bf00      	nop
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr
 8004aa8:	20000810 	.word	0x20000810

08004aac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004aba:	4b42      	ldr	r3, [pc, #264]	; (8004bc4 <xTaskResumeAll+0x118>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d10c      	bne.n	8004adc <xTaskResumeAll+0x30>
	__asm volatile
 8004ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac6:	b672      	cpsid	i
 8004ac8:	f383 8811 	msr	BASEPRI, r3
 8004acc:	f3bf 8f6f 	isb	sy
 8004ad0:	f3bf 8f4f 	dsb	sy
 8004ad4:	b662      	cpsie	i
 8004ad6:	603b      	str	r3, [r7, #0]
}
 8004ad8:	bf00      	nop
 8004ada:	e7fe      	b.n	8004ada <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004adc:	f000 fe46 	bl	800576c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004ae0:	4b38      	ldr	r3, [pc, #224]	; (8004bc4 <xTaskResumeAll+0x118>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	3b01      	subs	r3, #1
 8004ae6:	4a37      	ldr	r2, [pc, #220]	; (8004bc4 <xTaskResumeAll+0x118>)
 8004ae8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004aea:	4b36      	ldr	r3, [pc, #216]	; (8004bc4 <xTaskResumeAll+0x118>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d161      	bne.n	8004bb6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004af2:	4b35      	ldr	r3, [pc, #212]	; (8004bc8 <xTaskResumeAll+0x11c>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d05d      	beq.n	8004bb6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004afa:	e02e      	b.n	8004b5a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004afc:	4b33      	ldr	r3, [pc, #204]	; (8004bcc <xTaskResumeAll+0x120>)
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	3318      	adds	r3, #24
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f7ff fb00 	bl	800410e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	3304      	adds	r3, #4
 8004b12:	4618      	mov	r0, r3
 8004b14:	f7ff fafb 	bl	800410e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	409a      	lsls	r2, r3
 8004b20:	4b2b      	ldr	r3, [pc, #172]	; (8004bd0 <xTaskResumeAll+0x124>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	4a2a      	ldr	r2, [pc, #168]	; (8004bd0 <xTaskResumeAll+0x124>)
 8004b28:	6013      	str	r3, [r2, #0]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b2e:	4613      	mov	r3, r2
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	4413      	add	r3, r2
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	4a27      	ldr	r2, [pc, #156]	; (8004bd4 <xTaskResumeAll+0x128>)
 8004b38:	441a      	add	r2, r3
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	3304      	adds	r3, #4
 8004b3e:	4619      	mov	r1, r3
 8004b40:	4610      	mov	r0, r2
 8004b42:	f7ff fa87 	bl	8004054 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b4a:	4b23      	ldr	r3, [pc, #140]	; (8004bd8 <xTaskResumeAll+0x12c>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d302      	bcc.n	8004b5a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004b54:	4b21      	ldr	r3, [pc, #132]	; (8004bdc <xTaskResumeAll+0x130>)
 8004b56:	2201      	movs	r2, #1
 8004b58:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004b5a:	4b1c      	ldr	r3, [pc, #112]	; (8004bcc <xTaskResumeAll+0x120>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d1cc      	bne.n	8004afc <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d001      	beq.n	8004b6c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004b68:	f000 fb20 	bl	80051ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004b6c:	4b1c      	ldr	r3, [pc, #112]	; (8004be0 <xTaskResumeAll+0x134>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d010      	beq.n	8004b9a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004b78:	f000 f836 	bl	8004be8 <xTaskIncrementTick>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d002      	beq.n	8004b88 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004b82:	4b16      	ldr	r3, [pc, #88]	; (8004bdc <xTaskResumeAll+0x130>)
 8004b84:	2201      	movs	r2, #1
 8004b86:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d1f1      	bne.n	8004b78 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8004b94:	4b12      	ldr	r3, [pc, #72]	; (8004be0 <xTaskResumeAll+0x134>)
 8004b96:	2200      	movs	r2, #0
 8004b98:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004b9a:	4b10      	ldr	r3, [pc, #64]	; (8004bdc <xTaskResumeAll+0x130>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d009      	beq.n	8004bb6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004ba6:	4b0f      	ldr	r3, [pc, #60]	; (8004be4 <xTaskResumeAll+0x138>)
 8004ba8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bac:	601a      	str	r2, [r3, #0]
 8004bae:	f3bf 8f4f 	dsb	sy
 8004bb2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004bb6:	f000 fe0d 	bl	80057d4 <vPortExitCritical>

	return xAlreadyYielded;
 8004bba:	68bb      	ldr	r3, [r7, #8]
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3710      	adds	r7, #16
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	20000810 	.word	0x20000810
 8004bc8:	200007e8 	.word	0x200007e8
 8004bcc:	200007a8 	.word	0x200007a8
 8004bd0:	200007f0 	.word	0x200007f0
 8004bd4:	200006ec 	.word	0x200006ec
 8004bd8:	200006e8 	.word	0x200006e8
 8004bdc:	200007fc 	.word	0x200007fc
 8004be0:	200007f8 	.word	0x200007f8
 8004be4:	e000ed04 	.word	0xe000ed04

08004be8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b086      	sub	sp, #24
 8004bec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bf2:	4b4f      	ldr	r3, [pc, #316]	; (8004d30 <xTaskIncrementTick+0x148>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	f040 808a 	bne.w	8004d10 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004bfc:	4b4d      	ldr	r3, [pc, #308]	; (8004d34 <xTaskIncrementTick+0x14c>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	3301      	adds	r3, #1
 8004c02:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004c04:	4a4b      	ldr	r2, [pc, #300]	; (8004d34 <xTaskIncrementTick+0x14c>)
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d122      	bne.n	8004c56 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8004c10:	4b49      	ldr	r3, [pc, #292]	; (8004d38 <xTaskIncrementTick+0x150>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d00c      	beq.n	8004c34 <xTaskIncrementTick+0x4c>
	__asm volatile
 8004c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c1e:	b672      	cpsid	i
 8004c20:	f383 8811 	msr	BASEPRI, r3
 8004c24:	f3bf 8f6f 	isb	sy
 8004c28:	f3bf 8f4f 	dsb	sy
 8004c2c:	b662      	cpsie	i
 8004c2e:	603b      	str	r3, [r7, #0]
}
 8004c30:	bf00      	nop
 8004c32:	e7fe      	b.n	8004c32 <xTaskIncrementTick+0x4a>
 8004c34:	4b40      	ldr	r3, [pc, #256]	; (8004d38 <xTaskIncrementTick+0x150>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	60fb      	str	r3, [r7, #12]
 8004c3a:	4b40      	ldr	r3, [pc, #256]	; (8004d3c <xTaskIncrementTick+0x154>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a3e      	ldr	r2, [pc, #248]	; (8004d38 <xTaskIncrementTick+0x150>)
 8004c40:	6013      	str	r3, [r2, #0]
 8004c42:	4a3e      	ldr	r2, [pc, #248]	; (8004d3c <xTaskIncrementTick+0x154>)
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6013      	str	r3, [r2, #0]
 8004c48:	4b3d      	ldr	r3, [pc, #244]	; (8004d40 <xTaskIncrementTick+0x158>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	3301      	adds	r3, #1
 8004c4e:	4a3c      	ldr	r2, [pc, #240]	; (8004d40 <xTaskIncrementTick+0x158>)
 8004c50:	6013      	str	r3, [r2, #0]
 8004c52:	f000 faab 	bl	80051ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004c56:	4b3b      	ldr	r3, [pc, #236]	; (8004d44 <xTaskIncrementTick+0x15c>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	693a      	ldr	r2, [r7, #16]
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d348      	bcc.n	8004cf2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c60:	4b35      	ldr	r3, [pc, #212]	; (8004d38 <xTaskIncrementTick+0x150>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d104      	bne.n	8004c74 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c6a:	4b36      	ldr	r3, [pc, #216]	; (8004d44 <xTaskIncrementTick+0x15c>)
 8004c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8004c70:	601a      	str	r2, [r3, #0]
					break;
 8004c72:	e03e      	b.n	8004cf2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c74:	4b30      	ldr	r3, [pc, #192]	; (8004d38 <xTaskIncrementTick+0x150>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004c84:	693a      	ldr	r2, [r7, #16]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d203      	bcs.n	8004c94 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004c8c:	4a2d      	ldr	r2, [pc, #180]	; (8004d44 <xTaskIncrementTick+0x15c>)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004c92:	e02e      	b.n	8004cf2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	3304      	adds	r3, #4
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f7ff fa38 	bl	800410e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d004      	beq.n	8004cb0 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	3318      	adds	r3, #24
 8004caa:	4618      	mov	r0, r3
 8004cac:	f7ff fa2f 	bl	800410e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	409a      	lsls	r2, r3
 8004cb8:	4b23      	ldr	r3, [pc, #140]	; (8004d48 <xTaskIncrementTick+0x160>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	4a22      	ldr	r2, [pc, #136]	; (8004d48 <xTaskIncrementTick+0x160>)
 8004cc0:	6013      	str	r3, [r2, #0]
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cc6:	4613      	mov	r3, r2
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	4413      	add	r3, r2
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	4a1f      	ldr	r2, [pc, #124]	; (8004d4c <xTaskIncrementTick+0x164>)
 8004cd0:	441a      	add	r2, r3
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	3304      	adds	r3, #4
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	4610      	mov	r0, r2
 8004cda:	f7ff f9bb 	bl	8004054 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ce2:	4b1b      	ldr	r3, [pc, #108]	; (8004d50 <xTaskIncrementTick+0x168>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d3b9      	bcc.n	8004c60 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8004cec:	2301      	movs	r3, #1
 8004cee:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004cf0:	e7b6      	b.n	8004c60 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004cf2:	4b17      	ldr	r3, [pc, #92]	; (8004d50 <xTaskIncrementTick+0x168>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cf8:	4914      	ldr	r1, [pc, #80]	; (8004d4c <xTaskIncrementTick+0x164>)
 8004cfa:	4613      	mov	r3, r2
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	4413      	add	r3, r2
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	440b      	add	r3, r1
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d907      	bls.n	8004d1a <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	617b      	str	r3, [r7, #20]
 8004d0e:	e004      	b.n	8004d1a <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004d10:	4b10      	ldr	r3, [pc, #64]	; (8004d54 <xTaskIncrementTick+0x16c>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	3301      	adds	r3, #1
 8004d16:	4a0f      	ldr	r2, [pc, #60]	; (8004d54 <xTaskIncrementTick+0x16c>)
 8004d18:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004d1a:	4b0f      	ldr	r3, [pc, #60]	; (8004d58 <xTaskIncrementTick+0x170>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d001      	beq.n	8004d26 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8004d22:	2301      	movs	r3, #1
 8004d24:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004d26:	697b      	ldr	r3, [r7, #20]
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3718      	adds	r7, #24
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	20000810 	.word	0x20000810
 8004d34:	200007ec 	.word	0x200007ec
 8004d38:	200007a0 	.word	0x200007a0
 8004d3c:	200007a4 	.word	0x200007a4
 8004d40:	20000800 	.word	0x20000800
 8004d44:	20000808 	.word	0x20000808
 8004d48:	200007f0 	.word	0x200007f0
 8004d4c:	200006ec 	.word	0x200006ec
 8004d50:	200006e8 	.word	0x200006e8
 8004d54:	200007f8 	.word	0x200007f8
 8004d58:	200007fc 	.word	0x200007fc

08004d5c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b087      	sub	sp, #28
 8004d60:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004d62:	4b28      	ldr	r3, [pc, #160]	; (8004e04 <vTaskSwitchContext+0xa8>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d003      	beq.n	8004d72 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004d6a:	4b27      	ldr	r3, [pc, #156]	; (8004e08 <vTaskSwitchContext+0xac>)
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004d70:	e041      	b.n	8004df6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8004d72:	4b25      	ldr	r3, [pc, #148]	; (8004e08 <vTaskSwitchContext+0xac>)
 8004d74:	2200      	movs	r2, #0
 8004d76:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d78:	4b24      	ldr	r3, [pc, #144]	; (8004e0c <vTaskSwitchContext+0xb0>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	fab3 f383 	clz	r3, r3
 8004d84:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004d86:	7afb      	ldrb	r3, [r7, #11]
 8004d88:	f1c3 031f 	rsb	r3, r3, #31
 8004d8c:	617b      	str	r3, [r7, #20]
 8004d8e:	4920      	ldr	r1, [pc, #128]	; (8004e10 <vTaskSwitchContext+0xb4>)
 8004d90:	697a      	ldr	r2, [r7, #20]
 8004d92:	4613      	mov	r3, r2
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	4413      	add	r3, r2
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	440b      	add	r3, r1
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d10c      	bne.n	8004dbc <vTaskSwitchContext+0x60>
	__asm volatile
 8004da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da6:	b672      	cpsid	i
 8004da8:	f383 8811 	msr	BASEPRI, r3
 8004dac:	f3bf 8f6f 	isb	sy
 8004db0:	f3bf 8f4f 	dsb	sy
 8004db4:	b662      	cpsie	i
 8004db6:	607b      	str	r3, [r7, #4]
}
 8004db8:	bf00      	nop
 8004dba:	e7fe      	b.n	8004dba <vTaskSwitchContext+0x5e>
 8004dbc:	697a      	ldr	r2, [r7, #20]
 8004dbe:	4613      	mov	r3, r2
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	4413      	add	r3, r2
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	4a12      	ldr	r2, [pc, #72]	; (8004e10 <vTaskSwitchContext+0xb4>)
 8004dc8:	4413      	add	r3, r2
 8004dca:	613b      	str	r3, [r7, #16]
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	685a      	ldr	r2, [r3, #4]
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	605a      	str	r2, [r3, #4]
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	685a      	ldr	r2, [r3, #4]
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	3308      	adds	r3, #8
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d104      	bne.n	8004dec <vTaskSwitchContext+0x90>
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	685a      	ldr	r2, [r3, #4]
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	605a      	str	r2, [r3, #4]
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	4a08      	ldr	r2, [pc, #32]	; (8004e14 <vTaskSwitchContext+0xb8>)
 8004df4:	6013      	str	r3, [r2, #0]
}
 8004df6:	bf00      	nop
 8004df8:	371c      	adds	r7, #28
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr
 8004e02:	bf00      	nop
 8004e04:	20000810 	.word	0x20000810
 8004e08:	200007fc 	.word	0x200007fc
 8004e0c:	200007f0 	.word	0x200007f0
 8004e10:	200006ec 	.word	0x200006ec
 8004e14:	200006e8 	.word	0x200006e8

08004e18 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d10c      	bne.n	8004e42 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8004e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e2c:	b672      	cpsid	i
 8004e2e:	f383 8811 	msr	BASEPRI, r3
 8004e32:	f3bf 8f6f 	isb	sy
 8004e36:	f3bf 8f4f 	dsb	sy
 8004e3a:	b662      	cpsie	i
 8004e3c:	60fb      	str	r3, [r7, #12]
}
 8004e3e:	bf00      	nop
 8004e40:	e7fe      	b.n	8004e40 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004e42:	4b07      	ldr	r3, [pc, #28]	; (8004e60 <vTaskPlaceOnEventList+0x48>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	3318      	adds	r3, #24
 8004e48:	4619      	mov	r1, r3
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f7ff f926 	bl	800409c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004e50:	2101      	movs	r1, #1
 8004e52:	6838      	ldr	r0, [r7, #0]
 8004e54:	f000 fb1a 	bl	800548c <prvAddCurrentTaskToDelayedList>
}
 8004e58:	bf00      	nop
 8004e5a:	3710      	adds	r7, #16
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	200006e8 	.word	0x200006e8

08004e64 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b086      	sub	sp, #24
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d10c      	bne.n	8004e94 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8004e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e7e:	b672      	cpsid	i
 8004e80:	f383 8811 	msr	BASEPRI, r3
 8004e84:	f3bf 8f6f 	isb	sy
 8004e88:	f3bf 8f4f 	dsb	sy
 8004e8c:	b662      	cpsie	i
 8004e8e:	60fb      	str	r3, [r7, #12]
}
 8004e90:	bf00      	nop
 8004e92:	e7fe      	b.n	8004e92 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	3318      	adds	r3, #24
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f7ff f938 	bl	800410e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e9e:	4b1d      	ldr	r3, [pc, #116]	; (8004f14 <xTaskRemoveFromEventList+0xb0>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d11c      	bne.n	8004ee0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	3304      	adds	r3, #4
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f7ff f92f 	bl	800410e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	409a      	lsls	r2, r3
 8004eb8:	4b17      	ldr	r3, [pc, #92]	; (8004f18 <xTaskRemoveFromEventList+0xb4>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	4a16      	ldr	r2, [pc, #88]	; (8004f18 <xTaskRemoveFromEventList+0xb4>)
 8004ec0:	6013      	str	r3, [r2, #0]
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	4413      	add	r3, r2
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	4a13      	ldr	r2, [pc, #76]	; (8004f1c <xTaskRemoveFromEventList+0xb8>)
 8004ed0:	441a      	add	r2, r3
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	3304      	adds	r3, #4
 8004ed6:	4619      	mov	r1, r3
 8004ed8:	4610      	mov	r0, r2
 8004eda:	f7ff f8bb 	bl	8004054 <vListInsertEnd>
 8004ede:	e005      	b.n	8004eec <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	3318      	adds	r3, #24
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	480e      	ldr	r0, [pc, #56]	; (8004f20 <xTaskRemoveFromEventList+0xbc>)
 8004ee8:	f7ff f8b4 	bl	8004054 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ef0:	4b0c      	ldr	r3, [pc, #48]	; (8004f24 <xTaskRemoveFromEventList+0xc0>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d905      	bls.n	8004f06 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004efa:	2301      	movs	r3, #1
 8004efc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004efe:	4b0a      	ldr	r3, [pc, #40]	; (8004f28 <xTaskRemoveFromEventList+0xc4>)
 8004f00:	2201      	movs	r2, #1
 8004f02:	601a      	str	r2, [r3, #0]
 8004f04:	e001      	b.n	8004f0a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004f06:	2300      	movs	r3, #0
 8004f08:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004f0a:	697b      	ldr	r3, [r7, #20]
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3718      	adds	r7, #24
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	20000810 	.word	0x20000810
 8004f18:	200007f0 	.word	0x200007f0
 8004f1c:	200006ec 	.word	0x200006ec
 8004f20:	200007a8 	.word	0x200007a8
 8004f24:	200006e8 	.word	0x200006e8
 8004f28:	200007fc 	.word	0x200007fc

08004f2c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004f34:	4b06      	ldr	r3, [pc, #24]	; (8004f50 <vTaskInternalSetTimeOutState+0x24>)
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004f3c:	4b05      	ldr	r3, [pc, #20]	; (8004f54 <vTaskInternalSetTimeOutState+0x28>)
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	605a      	str	r2, [r3, #4]
}
 8004f44:	bf00      	nop
 8004f46:	370c      	adds	r7, #12
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr
 8004f50:	20000800 	.word	0x20000800
 8004f54:	200007ec 	.word	0x200007ec

08004f58 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b088      	sub	sp, #32
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d10c      	bne.n	8004f82 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8004f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f6c:	b672      	cpsid	i
 8004f6e:	f383 8811 	msr	BASEPRI, r3
 8004f72:	f3bf 8f6f 	isb	sy
 8004f76:	f3bf 8f4f 	dsb	sy
 8004f7a:	b662      	cpsie	i
 8004f7c:	613b      	str	r3, [r7, #16]
}
 8004f7e:	bf00      	nop
 8004f80:	e7fe      	b.n	8004f80 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d10c      	bne.n	8004fa2 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8004f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f8c:	b672      	cpsid	i
 8004f8e:	f383 8811 	msr	BASEPRI, r3
 8004f92:	f3bf 8f6f 	isb	sy
 8004f96:	f3bf 8f4f 	dsb	sy
 8004f9a:	b662      	cpsie	i
 8004f9c:	60fb      	str	r3, [r7, #12]
}
 8004f9e:	bf00      	nop
 8004fa0:	e7fe      	b.n	8004fa0 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8004fa2:	f000 fbe3 	bl	800576c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004fa6:	4b1d      	ldr	r3, [pc, #116]	; (800501c <xTaskCheckForTimeOut+0xc4>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	69ba      	ldr	r2, [r7, #24]
 8004fb2:	1ad3      	subs	r3, r2, r3
 8004fb4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fbe:	d102      	bne.n	8004fc6 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	61fb      	str	r3, [r7, #28]
 8004fc4:	e023      	b.n	800500e <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	4b15      	ldr	r3, [pc, #84]	; (8005020 <xTaskCheckForTimeOut+0xc8>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d007      	beq.n	8004fe2 <xTaskCheckForTimeOut+0x8a>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	69ba      	ldr	r2, [r7, #24]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d302      	bcc.n	8004fe2 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	61fb      	str	r3, [r7, #28]
 8004fe0:	e015      	b.n	800500e <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	697a      	ldr	r2, [r7, #20]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d20b      	bcs.n	8005004 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	1ad2      	subs	r2, r2, r3
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f7ff ff97 	bl	8004f2c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004ffe:	2300      	movs	r3, #0
 8005000:	61fb      	str	r3, [r7, #28]
 8005002:	e004      	b.n	800500e <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	2200      	movs	r2, #0
 8005008:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800500a:	2301      	movs	r3, #1
 800500c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800500e:	f000 fbe1 	bl	80057d4 <vPortExitCritical>

	return xReturn;
 8005012:	69fb      	ldr	r3, [r7, #28]
}
 8005014:	4618      	mov	r0, r3
 8005016:	3720      	adds	r7, #32
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}
 800501c:	200007ec 	.word	0x200007ec
 8005020:	20000800 	.word	0x20000800

08005024 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005024:	b480      	push	{r7}
 8005026:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005028:	4b03      	ldr	r3, [pc, #12]	; (8005038 <vTaskMissedYield+0x14>)
 800502a:	2201      	movs	r2, #1
 800502c:	601a      	str	r2, [r3, #0]
}
 800502e:	bf00      	nop
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr
 8005038:	200007fc 	.word	0x200007fc

0800503c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b082      	sub	sp, #8
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005044:	f000 f852 	bl	80050ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005048:	4b06      	ldr	r3, [pc, #24]	; (8005064 <prvIdleTask+0x28>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2b01      	cmp	r3, #1
 800504e:	d9f9      	bls.n	8005044 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005050:	4b05      	ldr	r3, [pc, #20]	; (8005068 <prvIdleTask+0x2c>)
 8005052:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005056:	601a      	str	r2, [r3, #0]
 8005058:	f3bf 8f4f 	dsb	sy
 800505c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005060:	e7f0      	b.n	8005044 <prvIdleTask+0x8>
 8005062:	bf00      	nop
 8005064:	200006ec 	.word	0x200006ec
 8005068:	e000ed04 	.word	0xe000ed04

0800506c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b082      	sub	sp, #8
 8005070:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005072:	2300      	movs	r3, #0
 8005074:	607b      	str	r3, [r7, #4]
 8005076:	e00c      	b.n	8005092 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	4613      	mov	r3, r2
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	4413      	add	r3, r2
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	4a12      	ldr	r2, [pc, #72]	; (80050cc <prvInitialiseTaskLists+0x60>)
 8005084:	4413      	add	r3, r2
 8005086:	4618      	mov	r0, r3
 8005088:	f7fe ffb7 	bl	8003ffa <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	3301      	adds	r3, #1
 8005090:	607b      	str	r3, [r7, #4]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2b06      	cmp	r3, #6
 8005096:	d9ef      	bls.n	8005078 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005098:	480d      	ldr	r0, [pc, #52]	; (80050d0 <prvInitialiseTaskLists+0x64>)
 800509a:	f7fe ffae 	bl	8003ffa <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800509e:	480d      	ldr	r0, [pc, #52]	; (80050d4 <prvInitialiseTaskLists+0x68>)
 80050a0:	f7fe ffab 	bl	8003ffa <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80050a4:	480c      	ldr	r0, [pc, #48]	; (80050d8 <prvInitialiseTaskLists+0x6c>)
 80050a6:	f7fe ffa8 	bl	8003ffa <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80050aa:	480c      	ldr	r0, [pc, #48]	; (80050dc <prvInitialiseTaskLists+0x70>)
 80050ac:	f7fe ffa5 	bl	8003ffa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80050b0:	480b      	ldr	r0, [pc, #44]	; (80050e0 <prvInitialiseTaskLists+0x74>)
 80050b2:	f7fe ffa2 	bl	8003ffa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80050b6:	4b0b      	ldr	r3, [pc, #44]	; (80050e4 <prvInitialiseTaskLists+0x78>)
 80050b8:	4a05      	ldr	r2, [pc, #20]	; (80050d0 <prvInitialiseTaskLists+0x64>)
 80050ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80050bc:	4b0a      	ldr	r3, [pc, #40]	; (80050e8 <prvInitialiseTaskLists+0x7c>)
 80050be:	4a05      	ldr	r2, [pc, #20]	; (80050d4 <prvInitialiseTaskLists+0x68>)
 80050c0:	601a      	str	r2, [r3, #0]
}
 80050c2:	bf00      	nop
 80050c4:	3708      	adds	r7, #8
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	200006ec 	.word	0x200006ec
 80050d0:	20000778 	.word	0x20000778
 80050d4:	2000078c 	.word	0x2000078c
 80050d8:	200007a8 	.word	0x200007a8
 80050dc:	200007bc 	.word	0x200007bc
 80050e0:	200007d4 	.word	0x200007d4
 80050e4:	200007a0 	.word	0x200007a0
 80050e8:	200007a4 	.word	0x200007a4

080050ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b082      	sub	sp, #8
 80050f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80050f2:	e019      	b.n	8005128 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80050f4:	f000 fb3a 	bl	800576c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050f8:	4b10      	ldr	r3, [pc, #64]	; (800513c <prvCheckTasksWaitingTermination+0x50>)
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	3304      	adds	r3, #4
 8005104:	4618      	mov	r0, r3
 8005106:	f7ff f802 	bl	800410e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800510a:	4b0d      	ldr	r3, [pc, #52]	; (8005140 <prvCheckTasksWaitingTermination+0x54>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	3b01      	subs	r3, #1
 8005110:	4a0b      	ldr	r2, [pc, #44]	; (8005140 <prvCheckTasksWaitingTermination+0x54>)
 8005112:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005114:	4b0b      	ldr	r3, [pc, #44]	; (8005144 <prvCheckTasksWaitingTermination+0x58>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	3b01      	subs	r3, #1
 800511a:	4a0a      	ldr	r2, [pc, #40]	; (8005144 <prvCheckTasksWaitingTermination+0x58>)
 800511c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800511e:	f000 fb59 	bl	80057d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 f810 	bl	8005148 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005128:	4b06      	ldr	r3, [pc, #24]	; (8005144 <prvCheckTasksWaitingTermination+0x58>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d1e1      	bne.n	80050f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005130:	bf00      	nop
 8005132:	bf00      	nop
 8005134:	3708      	adds	r7, #8
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop
 800513c:	200007bc 	.word	0x200007bc
 8005140:	200007e8 	.word	0x200007e8
 8005144:	200007d0 	.word	0x200007d0

08005148 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005156:	2b00      	cmp	r3, #0
 8005158:	d108      	bne.n	800516c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800515e:	4618      	mov	r0, r3
 8005160:	f000 fcb6 	bl	8005ad0 <vPortFree>
				vPortFree( pxTCB );
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f000 fcb3 	bl	8005ad0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800516a:	e01a      	b.n	80051a2 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005172:	2b01      	cmp	r3, #1
 8005174:	d103      	bne.n	800517e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 fcaa 	bl	8005ad0 <vPortFree>
	}
 800517c:	e011      	b.n	80051a2 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005184:	2b02      	cmp	r3, #2
 8005186:	d00c      	beq.n	80051a2 <prvDeleteTCB+0x5a>
	__asm volatile
 8005188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800518c:	b672      	cpsid	i
 800518e:	f383 8811 	msr	BASEPRI, r3
 8005192:	f3bf 8f6f 	isb	sy
 8005196:	f3bf 8f4f 	dsb	sy
 800519a:	b662      	cpsie	i
 800519c:	60fb      	str	r3, [r7, #12]
}
 800519e:	bf00      	nop
 80051a0:	e7fe      	b.n	80051a0 <prvDeleteTCB+0x58>
	}
 80051a2:	bf00      	nop
 80051a4:	3710      	adds	r7, #16
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
	...

080051ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80051ac:	b480      	push	{r7}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051b2:	4b0c      	ldr	r3, [pc, #48]	; (80051e4 <prvResetNextTaskUnblockTime+0x38>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d104      	bne.n	80051c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80051bc:	4b0a      	ldr	r3, [pc, #40]	; (80051e8 <prvResetNextTaskUnblockTime+0x3c>)
 80051be:	f04f 32ff 	mov.w	r2, #4294967295
 80051c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80051c4:	e008      	b.n	80051d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051c6:	4b07      	ldr	r3, [pc, #28]	; (80051e4 <prvResetNextTaskUnblockTime+0x38>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	4a04      	ldr	r2, [pc, #16]	; (80051e8 <prvResetNextTaskUnblockTime+0x3c>)
 80051d6:	6013      	str	r3, [r2, #0]
}
 80051d8:	bf00      	nop
 80051da:	370c      	adds	r7, #12
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr
 80051e4:	200007a0 	.word	0x200007a0
 80051e8:	20000808 	.word	0x20000808

080051ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80051ec:	b480      	push	{r7}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80051f2:	4b0b      	ldr	r3, [pc, #44]	; (8005220 <xTaskGetSchedulerState+0x34>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d102      	bne.n	8005200 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80051fa:	2301      	movs	r3, #1
 80051fc:	607b      	str	r3, [r7, #4]
 80051fe:	e008      	b.n	8005212 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005200:	4b08      	ldr	r3, [pc, #32]	; (8005224 <xTaskGetSchedulerState+0x38>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d102      	bne.n	800520e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005208:	2302      	movs	r3, #2
 800520a:	607b      	str	r3, [r7, #4]
 800520c:	e001      	b.n	8005212 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800520e:	2300      	movs	r3, #0
 8005210:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005212:	687b      	ldr	r3, [r7, #4]
	}
 8005214:	4618      	mov	r0, r3
 8005216:	370c      	adds	r7, #12
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr
 8005220:	200007f4 	.word	0x200007f4
 8005224:	20000810 	.word	0x20000810

08005228 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005228:	b580      	push	{r7, lr}
 800522a:	b084      	sub	sp, #16
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005234:	2300      	movs	r3, #0
 8005236:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d069      	beq.n	8005312 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005242:	4b36      	ldr	r3, [pc, #216]	; (800531c <xTaskPriorityInherit+0xf4>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005248:	429a      	cmp	r2, r3
 800524a:	d259      	bcs.n	8005300 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	699b      	ldr	r3, [r3, #24]
 8005250:	2b00      	cmp	r3, #0
 8005252:	db06      	blt.n	8005262 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005254:	4b31      	ldr	r3, [pc, #196]	; (800531c <xTaskPriorityInherit+0xf4>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800525a:	f1c3 0207 	rsb	r2, r3, #7
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	6959      	ldr	r1, [r3, #20]
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800526a:	4613      	mov	r3, r2
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	4413      	add	r3, r2
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	4a2b      	ldr	r2, [pc, #172]	; (8005320 <xTaskPriorityInherit+0xf8>)
 8005274:	4413      	add	r3, r2
 8005276:	4299      	cmp	r1, r3
 8005278:	d13a      	bne.n	80052f0 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	3304      	adds	r3, #4
 800527e:	4618      	mov	r0, r3
 8005280:	f7fe ff45 	bl	800410e <uxListRemove>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d115      	bne.n	80052b6 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800528e:	4924      	ldr	r1, [pc, #144]	; (8005320 <xTaskPriorityInherit+0xf8>)
 8005290:	4613      	mov	r3, r2
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	4413      	add	r3, r2
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	440b      	add	r3, r1
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d10a      	bne.n	80052b6 <xTaskPriorityInherit+0x8e>
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a4:	2201      	movs	r2, #1
 80052a6:	fa02 f303 	lsl.w	r3, r2, r3
 80052aa:	43da      	mvns	r2, r3
 80052ac:	4b1d      	ldr	r3, [pc, #116]	; (8005324 <xTaskPriorityInherit+0xfc>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4013      	ands	r3, r2
 80052b2:	4a1c      	ldr	r2, [pc, #112]	; (8005324 <xTaskPriorityInherit+0xfc>)
 80052b4:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80052b6:	4b19      	ldr	r3, [pc, #100]	; (800531c <xTaskPriorityInherit+0xf4>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c4:	2201      	movs	r2, #1
 80052c6:	409a      	lsls	r2, r3
 80052c8:	4b16      	ldr	r3, [pc, #88]	; (8005324 <xTaskPriorityInherit+0xfc>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	4a15      	ldr	r2, [pc, #84]	; (8005324 <xTaskPriorityInherit+0xfc>)
 80052d0:	6013      	str	r3, [r2, #0]
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052d6:	4613      	mov	r3, r2
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	4413      	add	r3, r2
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	4a10      	ldr	r2, [pc, #64]	; (8005320 <xTaskPriorityInherit+0xf8>)
 80052e0:	441a      	add	r2, r3
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	3304      	adds	r3, #4
 80052e6:	4619      	mov	r1, r3
 80052e8:	4610      	mov	r0, r2
 80052ea:	f7fe feb3 	bl	8004054 <vListInsertEnd>
 80052ee:	e004      	b.n	80052fa <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80052f0:	4b0a      	ldr	r3, [pc, #40]	; (800531c <xTaskPriorityInherit+0xf4>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80052fa:	2301      	movs	r3, #1
 80052fc:	60fb      	str	r3, [r7, #12]
 80052fe:	e008      	b.n	8005312 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005304:	4b05      	ldr	r3, [pc, #20]	; (800531c <xTaskPriorityInherit+0xf4>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800530a:	429a      	cmp	r2, r3
 800530c:	d201      	bcs.n	8005312 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800530e:	2301      	movs	r3, #1
 8005310:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005312:	68fb      	ldr	r3, [r7, #12]
	}
 8005314:	4618      	mov	r0, r3
 8005316:	3710      	adds	r7, #16
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}
 800531c:	200006e8 	.word	0x200006e8
 8005320:	200006ec 	.word	0x200006ec
 8005324:	200007f0 	.word	0x200007f0

08005328 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005328:	b580      	push	{r7, lr}
 800532a:	b088      	sub	sp, #32
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005336:	2301      	movs	r3, #1
 8005338:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2b00      	cmp	r3, #0
 800533e:	f000 8087 	beq.w	8005450 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005342:	69bb      	ldr	r3, [r7, #24]
 8005344:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005346:	2b00      	cmp	r3, #0
 8005348:	d10c      	bne.n	8005364 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800534a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800534e:	b672      	cpsid	i
 8005350:	f383 8811 	msr	BASEPRI, r3
 8005354:	f3bf 8f6f 	isb	sy
 8005358:	f3bf 8f4f 	dsb	sy
 800535c:	b662      	cpsie	i
 800535e:	60fb      	str	r3, [r7, #12]
}
 8005360:	bf00      	nop
 8005362:	e7fe      	b.n	8005362 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005368:	683a      	ldr	r2, [r7, #0]
 800536a:	429a      	cmp	r2, r3
 800536c:	d902      	bls.n	8005374 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	61fb      	str	r3, [r7, #28]
 8005372:	e002      	b.n	800537a <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005378:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800537a:	69bb      	ldr	r3, [r7, #24]
 800537c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800537e:	69fa      	ldr	r2, [r7, #28]
 8005380:	429a      	cmp	r2, r3
 8005382:	d065      	beq.n	8005450 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005388:	697a      	ldr	r2, [r7, #20]
 800538a:	429a      	cmp	r2, r3
 800538c:	d160      	bne.n	8005450 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800538e:	4b32      	ldr	r3, [pc, #200]	; (8005458 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	69ba      	ldr	r2, [r7, #24]
 8005394:	429a      	cmp	r2, r3
 8005396:	d10c      	bne.n	80053b2 <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 8005398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800539c:	b672      	cpsid	i
 800539e:	f383 8811 	msr	BASEPRI, r3
 80053a2:	f3bf 8f6f 	isb	sy
 80053a6:	f3bf 8f4f 	dsb	sy
 80053aa:	b662      	cpsie	i
 80053ac:	60bb      	str	r3, [r7, #8]
}
 80053ae:	bf00      	nop
 80053b0:	e7fe      	b.n	80053b0 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80053b2:	69bb      	ldr	r3, [r7, #24]
 80053b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b6:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	69fa      	ldr	r2, [r7, #28]
 80053bc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80053be:	69bb      	ldr	r3, [r7, #24]
 80053c0:	699b      	ldr	r3, [r3, #24]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	db04      	blt.n	80053d0 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053c6:	69fb      	ldr	r3, [r7, #28]
 80053c8:	f1c3 0207 	rsb	r2, r3, #7
 80053cc:	69bb      	ldr	r3, [r7, #24]
 80053ce:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	6959      	ldr	r1, [r3, #20]
 80053d4:	693a      	ldr	r2, [r7, #16]
 80053d6:	4613      	mov	r3, r2
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	4413      	add	r3, r2
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	4a1f      	ldr	r2, [pc, #124]	; (800545c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80053e0:	4413      	add	r3, r2
 80053e2:	4299      	cmp	r1, r3
 80053e4:	d134      	bne.n	8005450 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	3304      	adds	r3, #4
 80053ea:	4618      	mov	r0, r3
 80053ec:	f7fe fe8f 	bl	800410e <uxListRemove>
 80053f0:	4603      	mov	r3, r0
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d115      	bne.n	8005422 <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80053f6:	69bb      	ldr	r3, [r7, #24]
 80053f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053fa:	4918      	ldr	r1, [pc, #96]	; (800545c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80053fc:	4613      	mov	r3, r2
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	4413      	add	r3, r2
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	440b      	add	r3, r1
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d10a      	bne.n	8005422 <vTaskPriorityDisinheritAfterTimeout+0xfa>
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005410:	2201      	movs	r2, #1
 8005412:	fa02 f303 	lsl.w	r3, r2, r3
 8005416:	43da      	mvns	r2, r3
 8005418:	4b11      	ldr	r3, [pc, #68]	; (8005460 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4013      	ands	r3, r2
 800541e:	4a10      	ldr	r2, [pc, #64]	; (8005460 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005420:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005422:	69bb      	ldr	r3, [r7, #24]
 8005424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005426:	2201      	movs	r2, #1
 8005428:	409a      	lsls	r2, r3
 800542a:	4b0d      	ldr	r3, [pc, #52]	; (8005460 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4313      	orrs	r3, r2
 8005430:	4a0b      	ldr	r2, [pc, #44]	; (8005460 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005432:	6013      	str	r3, [r2, #0]
 8005434:	69bb      	ldr	r3, [r7, #24]
 8005436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005438:	4613      	mov	r3, r2
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	4413      	add	r3, r2
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	4a06      	ldr	r2, [pc, #24]	; (800545c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8005442:	441a      	add	r2, r3
 8005444:	69bb      	ldr	r3, [r7, #24]
 8005446:	3304      	adds	r3, #4
 8005448:	4619      	mov	r1, r3
 800544a:	4610      	mov	r0, r2
 800544c:	f7fe fe02 	bl	8004054 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005450:	bf00      	nop
 8005452:	3720      	adds	r7, #32
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}
 8005458:	200006e8 	.word	0x200006e8
 800545c:	200006ec 	.word	0x200006ec
 8005460:	200007f0 	.word	0x200007f0

08005464 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005464:	b480      	push	{r7}
 8005466:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005468:	4b07      	ldr	r3, [pc, #28]	; (8005488 <pvTaskIncrementMutexHeldCount+0x24>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d004      	beq.n	800547a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005470:	4b05      	ldr	r3, [pc, #20]	; (8005488 <pvTaskIncrementMutexHeldCount+0x24>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005476:	3201      	adds	r2, #1
 8005478:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800547a:	4b03      	ldr	r3, [pc, #12]	; (8005488 <pvTaskIncrementMutexHeldCount+0x24>)
 800547c:	681b      	ldr	r3, [r3, #0]
	}
 800547e:	4618      	mov	r0, r3
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr
 8005488:	200006e8 	.word	0x200006e8

0800548c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005496:	4b29      	ldr	r3, [pc, #164]	; (800553c <prvAddCurrentTaskToDelayedList+0xb0>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800549c:	4b28      	ldr	r3, [pc, #160]	; (8005540 <prvAddCurrentTaskToDelayedList+0xb4>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	3304      	adds	r3, #4
 80054a2:	4618      	mov	r0, r3
 80054a4:	f7fe fe33 	bl	800410e <uxListRemove>
 80054a8:	4603      	mov	r3, r0
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d10b      	bne.n	80054c6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80054ae:	4b24      	ldr	r3, [pc, #144]	; (8005540 <prvAddCurrentTaskToDelayedList+0xb4>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b4:	2201      	movs	r2, #1
 80054b6:	fa02 f303 	lsl.w	r3, r2, r3
 80054ba:	43da      	mvns	r2, r3
 80054bc:	4b21      	ldr	r3, [pc, #132]	; (8005544 <prvAddCurrentTaskToDelayedList+0xb8>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4013      	ands	r3, r2
 80054c2:	4a20      	ldr	r2, [pc, #128]	; (8005544 <prvAddCurrentTaskToDelayedList+0xb8>)
 80054c4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054cc:	d10a      	bne.n	80054e4 <prvAddCurrentTaskToDelayedList+0x58>
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d007      	beq.n	80054e4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054d4:	4b1a      	ldr	r3, [pc, #104]	; (8005540 <prvAddCurrentTaskToDelayedList+0xb4>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	3304      	adds	r3, #4
 80054da:	4619      	mov	r1, r3
 80054dc:	481a      	ldr	r0, [pc, #104]	; (8005548 <prvAddCurrentTaskToDelayedList+0xbc>)
 80054de:	f7fe fdb9 	bl	8004054 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80054e2:	e026      	b.n	8005532 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80054e4:	68fa      	ldr	r2, [r7, #12]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4413      	add	r3, r2
 80054ea:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80054ec:	4b14      	ldr	r3, [pc, #80]	; (8005540 <prvAddCurrentTaskToDelayedList+0xb4>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68ba      	ldr	r2, [r7, #8]
 80054f2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80054f4:	68ba      	ldr	r2, [r7, #8]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d209      	bcs.n	8005510 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054fc:	4b13      	ldr	r3, [pc, #76]	; (800554c <prvAddCurrentTaskToDelayedList+0xc0>)
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	4b0f      	ldr	r3, [pc, #60]	; (8005540 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	3304      	adds	r3, #4
 8005506:	4619      	mov	r1, r3
 8005508:	4610      	mov	r0, r2
 800550a:	f7fe fdc7 	bl	800409c <vListInsert>
}
 800550e:	e010      	b.n	8005532 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005510:	4b0f      	ldr	r3, [pc, #60]	; (8005550 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	4b0a      	ldr	r3, [pc, #40]	; (8005540 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	3304      	adds	r3, #4
 800551a:	4619      	mov	r1, r3
 800551c:	4610      	mov	r0, r2
 800551e:	f7fe fdbd 	bl	800409c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005522:	4b0c      	ldr	r3, [pc, #48]	; (8005554 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	68ba      	ldr	r2, [r7, #8]
 8005528:	429a      	cmp	r2, r3
 800552a:	d202      	bcs.n	8005532 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800552c:	4a09      	ldr	r2, [pc, #36]	; (8005554 <prvAddCurrentTaskToDelayedList+0xc8>)
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	6013      	str	r3, [r2, #0]
}
 8005532:	bf00      	nop
 8005534:	3710      	adds	r7, #16
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
 800553a:	bf00      	nop
 800553c:	200007ec 	.word	0x200007ec
 8005540:	200006e8 	.word	0x200006e8
 8005544:	200007f0 	.word	0x200007f0
 8005548:	200007d4 	.word	0x200007d4
 800554c:	200007a4 	.word	0x200007a4
 8005550:	200007a0 	.word	0x200007a0
 8005554:	20000808 	.word	0x20000808

08005558 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005558:	b480      	push	{r7}
 800555a:	b085      	sub	sp, #20
 800555c:	af00      	add	r7, sp, #0
 800555e:	60f8      	str	r0, [r7, #12]
 8005560:	60b9      	str	r1, [r7, #8]
 8005562:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	3b04      	subs	r3, #4
 8005568:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005570:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	3b04      	subs	r3, #4
 8005576:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	f023 0201 	bic.w	r2, r3, #1
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	3b04      	subs	r3, #4
 8005586:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005588:	4a0c      	ldr	r2, [pc, #48]	; (80055bc <pxPortInitialiseStack+0x64>)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	3b14      	subs	r3, #20
 8005592:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	3b04      	subs	r3, #4
 800559e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f06f 0202 	mvn.w	r2, #2
 80055a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	3b20      	subs	r3, #32
 80055ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80055ae:	68fb      	ldr	r3, [r7, #12]
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3714      	adds	r7, #20
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr
 80055bc:	080055c1 	.word	0x080055c1

080055c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80055c0:	b480      	push	{r7}
 80055c2:	b085      	sub	sp, #20
 80055c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80055c6:	2300      	movs	r3, #0
 80055c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80055ca:	4b14      	ldr	r3, [pc, #80]	; (800561c <prvTaskExitError+0x5c>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055d2:	d00c      	beq.n	80055ee <prvTaskExitError+0x2e>
	__asm volatile
 80055d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d8:	b672      	cpsid	i
 80055da:	f383 8811 	msr	BASEPRI, r3
 80055de:	f3bf 8f6f 	isb	sy
 80055e2:	f3bf 8f4f 	dsb	sy
 80055e6:	b662      	cpsie	i
 80055e8:	60fb      	str	r3, [r7, #12]
}
 80055ea:	bf00      	nop
 80055ec:	e7fe      	b.n	80055ec <prvTaskExitError+0x2c>
	__asm volatile
 80055ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f2:	b672      	cpsid	i
 80055f4:	f383 8811 	msr	BASEPRI, r3
 80055f8:	f3bf 8f6f 	isb	sy
 80055fc:	f3bf 8f4f 	dsb	sy
 8005600:	b662      	cpsie	i
 8005602:	60bb      	str	r3, [r7, #8]
}
 8005604:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005606:	bf00      	nop
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d0fc      	beq.n	8005608 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800560e:	bf00      	nop
 8005610:	bf00      	nop
 8005612:	3714      	adds	r7, #20
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr
 800561c:	20000014 	.word	0x20000014

08005620 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005620:	4b07      	ldr	r3, [pc, #28]	; (8005640 <pxCurrentTCBConst2>)
 8005622:	6819      	ldr	r1, [r3, #0]
 8005624:	6808      	ldr	r0, [r1, #0]
 8005626:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800562a:	f380 8809 	msr	PSP, r0
 800562e:	f3bf 8f6f 	isb	sy
 8005632:	f04f 0000 	mov.w	r0, #0
 8005636:	f380 8811 	msr	BASEPRI, r0
 800563a:	4770      	bx	lr
 800563c:	f3af 8000 	nop.w

08005640 <pxCurrentTCBConst2>:
 8005640:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005644:	bf00      	nop
 8005646:	bf00      	nop

08005648 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005648:	4808      	ldr	r0, [pc, #32]	; (800566c <prvPortStartFirstTask+0x24>)
 800564a:	6800      	ldr	r0, [r0, #0]
 800564c:	6800      	ldr	r0, [r0, #0]
 800564e:	f380 8808 	msr	MSP, r0
 8005652:	f04f 0000 	mov.w	r0, #0
 8005656:	f380 8814 	msr	CONTROL, r0
 800565a:	b662      	cpsie	i
 800565c:	b661      	cpsie	f
 800565e:	f3bf 8f4f 	dsb	sy
 8005662:	f3bf 8f6f 	isb	sy
 8005666:	df00      	svc	0
 8005668:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800566a:	bf00      	nop
 800566c:	e000ed08 	.word	0xe000ed08

08005670 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b084      	sub	sp, #16
 8005674:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005676:	4b37      	ldr	r3, [pc, #220]	; (8005754 <xPortStartScheduler+0xe4>)
 8005678:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	b2db      	uxtb	r3, r3
 8005680:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	22ff      	movs	r2, #255	; 0xff
 8005686:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	b2db      	uxtb	r3, r3
 800568e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005690:	78fb      	ldrb	r3, [r7, #3]
 8005692:	b2db      	uxtb	r3, r3
 8005694:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005698:	b2da      	uxtb	r2, r3
 800569a:	4b2f      	ldr	r3, [pc, #188]	; (8005758 <xPortStartScheduler+0xe8>)
 800569c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800569e:	4b2f      	ldr	r3, [pc, #188]	; (800575c <xPortStartScheduler+0xec>)
 80056a0:	2207      	movs	r2, #7
 80056a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80056a4:	e009      	b.n	80056ba <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80056a6:	4b2d      	ldr	r3, [pc, #180]	; (800575c <xPortStartScheduler+0xec>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	3b01      	subs	r3, #1
 80056ac:	4a2b      	ldr	r2, [pc, #172]	; (800575c <xPortStartScheduler+0xec>)
 80056ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80056b0:	78fb      	ldrb	r3, [r7, #3]
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	005b      	lsls	r3, r3, #1
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80056ba:	78fb      	ldrb	r3, [r7, #3]
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056c2:	2b80      	cmp	r3, #128	; 0x80
 80056c4:	d0ef      	beq.n	80056a6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80056c6:	4b25      	ldr	r3, [pc, #148]	; (800575c <xPortStartScheduler+0xec>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f1c3 0307 	rsb	r3, r3, #7
 80056ce:	2b04      	cmp	r3, #4
 80056d0:	d00c      	beq.n	80056ec <xPortStartScheduler+0x7c>
	__asm volatile
 80056d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d6:	b672      	cpsid	i
 80056d8:	f383 8811 	msr	BASEPRI, r3
 80056dc:	f3bf 8f6f 	isb	sy
 80056e0:	f3bf 8f4f 	dsb	sy
 80056e4:	b662      	cpsie	i
 80056e6:	60bb      	str	r3, [r7, #8]
}
 80056e8:	bf00      	nop
 80056ea:	e7fe      	b.n	80056ea <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80056ec:	4b1b      	ldr	r3, [pc, #108]	; (800575c <xPortStartScheduler+0xec>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	021b      	lsls	r3, r3, #8
 80056f2:	4a1a      	ldr	r2, [pc, #104]	; (800575c <xPortStartScheduler+0xec>)
 80056f4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80056f6:	4b19      	ldr	r3, [pc, #100]	; (800575c <xPortStartScheduler+0xec>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80056fe:	4a17      	ldr	r2, [pc, #92]	; (800575c <xPortStartScheduler+0xec>)
 8005700:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	b2da      	uxtb	r2, r3
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800570a:	4b15      	ldr	r3, [pc, #84]	; (8005760 <xPortStartScheduler+0xf0>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a14      	ldr	r2, [pc, #80]	; (8005760 <xPortStartScheduler+0xf0>)
 8005710:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005714:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005716:	4b12      	ldr	r3, [pc, #72]	; (8005760 <xPortStartScheduler+0xf0>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a11      	ldr	r2, [pc, #68]	; (8005760 <xPortStartScheduler+0xf0>)
 800571c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005720:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005722:	f000 f8dd 	bl	80058e0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005726:	4b0f      	ldr	r3, [pc, #60]	; (8005764 <xPortStartScheduler+0xf4>)
 8005728:	2200      	movs	r2, #0
 800572a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800572c:	f000 f8fc 	bl	8005928 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005730:	4b0d      	ldr	r3, [pc, #52]	; (8005768 <xPortStartScheduler+0xf8>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a0c      	ldr	r2, [pc, #48]	; (8005768 <xPortStartScheduler+0xf8>)
 8005736:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800573a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800573c:	f7ff ff84 	bl	8005648 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005740:	f7ff fb0c 	bl	8004d5c <vTaskSwitchContext>
	prvTaskExitError();
 8005744:	f7ff ff3c 	bl	80055c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005748:	2300      	movs	r3, #0
}
 800574a:	4618      	mov	r0, r3
 800574c:	3710      	adds	r7, #16
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
 8005752:	bf00      	nop
 8005754:	e000e400 	.word	0xe000e400
 8005758:	20000814 	.word	0x20000814
 800575c:	20000818 	.word	0x20000818
 8005760:	e000ed20 	.word	0xe000ed20
 8005764:	20000014 	.word	0x20000014
 8005768:	e000ef34 	.word	0xe000ef34

0800576c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
	__asm volatile
 8005772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005776:	b672      	cpsid	i
 8005778:	f383 8811 	msr	BASEPRI, r3
 800577c:	f3bf 8f6f 	isb	sy
 8005780:	f3bf 8f4f 	dsb	sy
 8005784:	b662      	cpsie	i
 8005786:	607b      	str	r3, [r7, #4]
}
 8005788:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800578a:	4b10      	ldr	r3, [pc, #64]	; (80057cc <vPortEnterCritical+0x60>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	3301      	adds	r3, #1
 8005790:	4a0e      	ldr	r2, [pc, #56]	; (80057cc <vPortEnterCritical+0x60>)
 8005792:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005794:	4b0d      	ldr	r3, [pc, #52]	; (80057cc <vPortEnterCritical+0x60>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	2b01      	cmp	r3, #1
 800579a:	d111      	bne.n	80057c0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800579c:	4b0c      	ldr	r3, [pc, #48]	; (80057d0 <vPortEnterCritical+0x64>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d00c      	beq.n	80057c0 <vPortEnterCritical+0x54>
	__asm volatile
 80057a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057aa:	b672      	cpsid	i
 80057ac:	f383 8811 	msr	BASEPRI, r3
 80057b0:	f3bf 8f6f 	isb	sy
 80057b4:	f3bf 8f4f 	dsb	sy
 80057b8:	b662      	cpsie	i
 80057ba:	603b      	str	r3, [r7, #0]
}
 80057bc:	bf00      	nop
 80057be:	e7fe      	b.n	80057be <vPortEnterCritical+0x52>
	}
}
 80057c0:	bf00      	nop
 80057c2:	370c      	adds	r7, #12
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr
 80057cc:	20000014 	.word	0x20000014
 80057d0:	e000ed04 	.word	0xe000ed04

080057d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80057d4:	b480      	push	{r7}
 80057d6:	b083      	sub	sp, #12
 80057d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80057da:	4b13      	ldr	r3, [pc, #76]	; (8005828 <vPortExitCritical+0x54>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d10c      	bne.n	80057fc <vPortExitCritical+0x28>
	__asm volatile
 80057e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e6:	b672      	cpsid	i
 80057e8:	f383 8811 	msr	BASEPRI, r3
 80057ec:	f3bf 8f6f 	isb	sy
 80057f0:	f3bf 8f4f 	dsb	sy
 80057f4:	b662      	cpsie	i
 80057f6:	607b      	str	r3, [r7, #4]
}
 80057f8:	bf00      	nop
 80057fa:	e7fe      	b.n	80057fa <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80057fc:	4b0a      	ldr	r3, [pc, #40]	; (8005828 <vPortExitCritical+0x54>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	3b01      	subs	r3, #1
 8005802:	4a09      	ldr	r2, [pc, #36]	; (8005828 <vPortExitCritical+0x54>)
 8005804:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005806:	4b08      	ldr	r3, [pc, #32]	; (8005828 <vPortExitCritical+0x54>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d105      	bne.n	800581a <vPortExitCritical+0x46>
 800580e:	2300      	movs	r3, #0
 8005810:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005818:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800581a:	bf00      	nop
 800581c:	370c      	adds	r7, #12
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr
 8005826:	bf00      	nop
 8005828:	20000014 	.word	0x20000014
 800582c:	00000000 	.word	0x00000000

08005830 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005830:	f3ef 8009 	mrs	r0, PSP
 8005834:	f3bf 8f6f 	isb	sy
 8005838:	4b15      	ldr	r3, [pc, #84]	; (8005890 <pxCurrentTCBConst>)
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	f01e 0f10 	tst.w	lr, #16
 8005840:	bf08      	it	eq
 8005842:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005846:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800584a:	6010      	str	r0, [r2, #0]
 800584c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005850:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005854:	b672      	cpsid	i
 8005856:	f380 8811 	msr	BASEPRI, r0
 800585a:	f3bf 8f4f 	dsb	sy
 800585e:	f3bf 8f6f 	isb	sy
 8005862:	b662      	cpsie	i
 8005864:	f7ff fa7a 	bl	8004d5c <vTaskSwitchContext>
 8005868:	f04f 0000 	mov.w	r0, #0
 800586c:	f380 8811 	msr	BASEPRI, r0
 8005870:	bc09      	pop	{r0, r3}
 8005872:	6819      	ldr	r1, [r3, #0]
 8005874:	6808      	ldr	r0, [r1, #0]
 8005876:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800587a:	f01e 0f10 	tst.w	lr, #16
 800587e:	bf08      	it	eq
 8005880:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005884:	f380 8809 	msr	PSP, r0
 8005888:	f3bf 8f6f 	isb	sy
 800588c:	4770      	bx	lr
 800588e:	bf00      	nop

08005890 <pxCurrentTCBConst>:
 8005890:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005894:	bf00      	nop
 8005896:	bf00      	nop

08005898 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b082      	sub	sp, #8
 800589c:	af00      	add	r7, sp, #0
	__asm volatile
 800589e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a2:	b672      	cpsid	i
 80058a4:	f383 8811 	msr	BASEPRI, r3
 80058a8:	f3bf 8f6f 	isb	sy
 80058ac:	f3bf 8f4f 	dsb	sy
 80058b0:	b662      	cpsie	i
 80058b2:	607b      	str	r3, [r7, #4]
}
 80058b4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80058b6:	f7ff f997 	bl	8004be8 <xTaskIncrementTick>
 80058ba:	4603      	mov	r3, r0
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d003      	beq.n	80058c8 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80058c0:	4b06      	ldr	r3, [pc, #24]	; (80058dc <xPortSysTickHandler+0x44>)
 80058c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058c6:	601a      	str	r2, [r3, #0]
 80058c8:	2300      	movs	r3, #0
 80058ca:	603b      	str	r3, [r7, #0]
	__asm volatile
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	f383 8811 	msr	BASEPRI, r3
}
 80058d2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80058d4:	bf00      	nop
 80058d6:	3708      	adds	r7, #8
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	e000ed04 	.word	0xe000ed04

080058e0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80058e0:	b480      	push	{r7}
 80058e2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80058e4:	4b0b      	ldr	r3, [pc, #44]	; (8005914 <vPortSetupTimerInterrupt+0x34>)
 80058e6:	2200      	movs	r2, #0
 80058e8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80058ea:	4b0b      	ldr	r3, [pc, #44]	; (8005918 <vPortSetupTimerInterrupt+0x38>)
 80058ec:	2200      	movs	r2, #0
 80058ee:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80058f0:	4b0a      	ldr	r3, [pc, #40]	; (800591c <vPortSetupTimerInterrupt+0x3c>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a0a      	ldr	r2, [pc, #40]	; (8005920 <vPortSetupTimerInterrupt+0x40>)
 80058f6:	fba2 2303 	umull	r2, r3, r2, r3
 80058fa:	099b      	lsrs	r3, r3, #6
 80058fc:	4a09      	ldr	r2, [pc, #36]	; (8005924 <vPortSetupTimerInterrupt+0x44>)
 80058fe:	3b01      	subs	r3, #1
 8005900:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005902:	4b04      	ldr	r3, [pc, #16]	; (8005914 <vPortSetupTimerInterrupt+0x34>)
 8005904:	2207      	movs	r2, #7
 8005906:	601a      	str	r2, [r3, #0]
}
 8005908:	bf00      	nop
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr
 8005912:	bf00      	nop
 8005914:	e000e010 	.word	0xe000e010
 8005918:	e000e018 	.word	0xe000e018
 800591c:	20000008 	.word	0x20000008
 8005920:	10624dd3 	.word	0x10624dd3
 8005924:	e000e014 	.word	0xe000e014

08005928 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005928:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005938 <vPortEnableVFP+0x10>
 800592c:	6801      	ldr	r1, [r0, #0]
 800592e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005932:	6001      	str	r1, [r0, #0]
 8005934:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005936:	bf00      	nop
 8005938:	e000ed88 	.word	0xe000ed88

0800593c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b08a      	sub	sp, #40	; 0x28
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005944:	2300      	movs	r3, #0
 8005946:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005948:	f7ff f8a2 	bl	8004a90 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800594c:	4b5b      	ldr	r3, [pc, #364]	; (8005abc <pvPortMalloc+0x180>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d101      	bne.n	8005958 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005954:	f000 f91a 	bl	8005b8c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005958:	4b59      	ldr	r3, [pc, #356]	; (8005ac0 <pvPortMalloc+0x184>)
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4013      	ands	r3, r2
 8005960:	2b00      	cmp	r3, #0
 8005962:	f040 8092 	bne.w	8005a8a <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d01f      	beq.n	80059ac <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800596c:	2208      	movs	r2, #8
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	4413      	add	r3, r2
 8005972:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f003 0307 	and.w	r3, r3, #7
 800597a:	2b00      	cmp	r3, #0
 800597c:	d016      	beq.n	80059ac <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f023 0307 	bic.w	r3, r3, #7
 8005984:	3308      	adds	r3, #8
 8005986:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f003 0307 	and.w	r3, r3, #7
 800598e:	2b00      	cmp	r3, #0
 8005990:	d00c      	beq.n	80059ac <pvPortMalloc+0x70>
	__asm volatile
 8005992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005996:	b672      	cpsid	i
 8005998:	f383 8811 	msr	BASEPRI, r3
 800599c:	f3bf 8f6f 	isb	sy
 80059a0:	f3bf 8f4f 	dsb	sy
 80059a4:	b662      	cpsie	i
 80059a6:	617b      	str	r3, [r7, #20]
}
 80059a8:	bf00      	nop
 80059aa:	e7fe      	b.n	80059aa <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d06b      	beq.n	8005a8a <pvPortMalloc+0x14e>
 80059b2:	4b44      	ldr	r3, [pc, #272]	; (8005ac4 <pvPortMalloc+0x188>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d866      	bhi.n	8005a8a <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80059bc:	4b42      	ldr	r3, [pc, #264]	; (8005ac8 <pvPortMalloc+0x18c>)
 80059be:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80059c0:	4b41      	ldr	r3, [pc, #260]	; (8005ac8 <pvPortMalloc+0x18c>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80059c6:	e004      	b.n	80059d2 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 80059c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ca:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80059cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80059d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	429a      	cmp	r2, r3
 80059da:	d903      	bls.n	80059e4 <pvPortMalloc+0xa8>
 80059dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d1f1      	bne.n	80059c8 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80059e4:	4b35      	ldr	r3, [pc, #212]	; (8005abc <pvPortMalloc+0x180>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d04d      	beq.n	8005a8a <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80059ee:	6a3b      	ldr	r3, [r7, #32]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	2208      	movs	r2, #8
 80059f4:	4413      	add	r3, r2
 80059f6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80059f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	6a3b      	ldr	r3, [r7, #32]
 80059fe:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a02:	685a      	ldr	r2, [r3, #4]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	1ad2      	subs	r2, r2, r3
 8005a08:	2308      	movs	r3, #8
 8005a0a:	005b      	lsls	r3, r3, #1
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d921      	bls.n	8005a54 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005a10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4413      	add	r3, r2
 8005a16:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a18:	69bb      	ldr	r3, [r7, #24]
 8005a1a:	f003 0307 	and.w	r3, r3, #7
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d00c      	beq.n	8005a3c <pvPortMalloc+0x100>
	__asm volatile
 8005a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a26:	b672      	cpsid	i
 8005a28:	f383 8811 	msr	BASEPRI, r3
 8005a2c:	f3bf 8f6f 	isb	sy
 8005a30:	f3bf 8f4f 	dsb	sy
 8005a34:	b662      	cpsie	i
 8005a36:	613b      	str	r3, [r7, #16]
}
 8005a38:	bf00      	nop
 8005a3a:	e7fe      	b.n	8005a3a <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3e:	685a      	ldr	r2, [r3, #4]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	1ad2      	subs	r2, r2, r3
 8005a44:	69bb      	ldr	r3, [r7, #24]
 8005a46:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005a4e:	69b8      	ldr	r0, [r7, #24]
 8005a50:	f000 f8fe 	bl	8005c50 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005a54:	4b1b      	ldr	r3, [pc, #108]	; (8005ac4 <pvPortMalloc+0x188>)
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	1ad3      	subs	r3, r2, r3
 8005a5e:	4a19      	ldr	r2, [pc, #100]	; (8005ac4 <pvPortMalloc+0x188>)
 8005a60:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005a62:	4b18      	ldr	r3, [pc, #96]	; (8005ac4 <pvPortMalloc+0x188>)
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	4b19      	ldr	r3, [pc, #100]	; (8005acc <pvPortMalloc+0x190>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d203      	bcs.n	8005a76 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005a6e:	4b15      	ldr	r3, [pc, #84]	; (8005ac4 <pvPortMalloc+0x188>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a16      	ldr	r2, [pc, #88]	; (8005acc <pvPortMalloc+0x190>)
 8005a74:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a78:	685a      	ldr	r2, [r3, #4]
 8005a7a:	4b11      	ldr	r3, [pc, #68]	; (8005ac0 <pvPortMalloc+0x184>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	431a      	orrs	r2, r3
 8005a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a82:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a86:	2200      	movs	r2, #0
 8005a88:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005a8a:	f7ff f80f 	bl	8004aac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	f003 0307 	and.w	r3, r3, #7
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d00c      	beq.n	8005ab2 <pvPortMalloc+0x176>
	__asm volatile
 8005a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a9c:	b672      	cpsid	i
 8005a9e:	f383 8811 	msr	BASEPRI, r3
 8005aa2:	f3bf 8f6f 	isb	sy
 8005aa6:	f3bf 8f4f 	dsb	sy
 8005aaa:	b662      	cpsie	i
 8005aac:	60fb      	str	r3, [r7, #12]
}
 8005aae:	bf00      	nop
 8005ab0:	e7fe      	b.n	8005ab0 <pvPortMalloc+0x174>
	return pvReturn;
 8005ab2:	69fb      	ldr	r3, [r7, #28]
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3728      	adds	r7, #40	; 0x28
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	20004424 	.word	0x20004424
 8005ac0:	20004430 	.word	0x20004430
 8005ac4:	20004428 	.word	0x20004428
 8005ac8:	2000441c 	.word	0x2000441c
 8005acc:	2000442c 	.word	0x2000442c

08005ad0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b086      	sub	sp, #24
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d04c      	beq.n	8005b7c <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005ae2:	2308      	movs	r3, #8
 8005ae4:	425b      	negs	r3, r3
 8005ae6:	697a      	ldr	r2, [r7, #20]
 8005ae8:	4413      	add	r3, r2
 8005aea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	685a      	ldr	r2, [r3, #4]
 8005af4:	4b23      	ldr	r3, [pc, #140]	; (8005b84 <vPortFree+0xb4>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4013      	ands	r3, r2
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d10c      	bne.n	8005b18 <vPortFree+0x48>
	__asm volatile
 8005afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b02:	b672      	cpsid	i
 8005b04:	f383 8811 	msr	BASEPRI, r3
 8005b08:	f3bf 8f6f 	isb	sy
 8005b0c:	f3bf 8f4f 	dsb	sy
 8005b10:	b662      	cpsie	i
 8005b12:	60fb      	str	r3, [r7, #12]
}
 8005b14:	bf00      	nop
 8005b16:	e7fe      	b.n	8005b16 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d00c      	beq.n	8005b3a <vPortFree+0x6a>
	__asm volatile
 8005b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b24:	b672      	cpsid	i
 8005b26:	f383 8811 	msr	BASEPRI, r3
 8005b2a:	f3bf 8f6f 	isb	sy
 8005b2e:	f3bf 8f4f 	dsb	sy
 8005b32:	b662      	cpsie	i
 8005b34:	60bb      	str	r3, [r7, #8]
}
 8005b36:	bf00      	nop
 8005b38:	e7fe      	b.n	8005b38 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	685a      	ldr	r2, [r3, #4]
 8005b3e:	4b11      	ldr	r3, [pc, #68]	; (8005b84 <vPortFree+0xb4>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4013      	ands	r3, r2
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d019      	beq.n	8005b7c <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d115      	bne.n	8005b7c <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	685a      	ldr	r2, [r3, #4]
 8005b54:	4b0b      	ldr	r3, [pc, #44]	; (8005b84 <vPortFree+0xb4>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	43db      	mvns	r3, r3
 8005b5a:	401a      	ands	r2, r3
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005b60:	f7fe ff96 	bl	8004a90 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	685a      	ldr	r2, [r3, #4]
 8005b68:	4b07      	ldr	r3, [pc, #28]	; (8005b88 <vPortFree+0xb8>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4413      	add	r3, r2
 8005b6e:	4a06      	ldr	r2, [pc, #24]	; (8005b88 <vPortFree+0xb8>)
 8005b70:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005b72:	6938      	ldr	r0, [r7, #16]
 8005b74:	f000 f86c 	bl	8005c50 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005b78:	f7fe ff98 	bl	8004aac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005b7c:	bf00      	nop
 8005b7e:	3718      	adds	r7, #24
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}
 8005b84:	20004430 	.word	0x20004430
 8005b88:	20004428 	.word	0x20004428

08005b8c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b085      	sub	sp, #20
 8005b90:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005b92:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005b96:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005b98:	4b27      	ldr	r3, [pc, #156]	; (8005c38 <prvHeapInit+0xac>)
 8005b9a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f003 0307 	and.w	r3, r3, #7
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d00c      	beq.n	8005bc0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	3307      	adds	r3, #7
 8005baa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f023 0307 	bic.w	r3, r3, #7
 8005bb2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005bb4:	68ba      	ldr	r2, [r7, #8]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	1ad3      	subs	r3, r2, r3
 8005bba:	4a1f      	ldr	r2, [pc, #124]	; (8005c38 <prvHeapInit+0xac>)
 8005bbc:	4413      	add	r3, r2
 8005bbe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005bc4:	4a1d      	ldr	r2, [pc, #116]	; (8005c3c <prvHeapInit+0xb0>)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005bca:	4b1c      	ldr	r3, [pc, #112]	; (8005c3c <prvHeapInit+0xb0>)
 8005bcc:	2200      	movs	r2, #0
 8005bce:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	68ba      	ldr	r2, [r7, #8]
 8005bd4:	4413      	add	r3, r2
 8005bd6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005bd8:	2208      	movs	r2, #8
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	1a9b      	subs	r3, r3, r2
 8005bde:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f023 0307 	bic.w	r3, r3, #7
 8005be6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	4a15      	ldr	r2, [pc, #84]	; (8005c40 <prvHeapInit+0xb4>)
 8005bec:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005bee:	4b14      	ldr	r3, [pc, #80]	; (8005c40 <prvHeapInit+0xb4>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005bf6:	4b12      	ldr	r3, [pc, #72]	; (8005c40 <prvHeapInit+0xb4>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	68fa      	ldr	r2, [r7, #12]
 8005c06:	1ad2      	subs	r2, r2, r3
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005c0c:	4b0c      	ldr	r3, [pc, #48]	; (8005c40 <prvHeapInit+0xb4>)
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	4a0a      	ldr	r2, [pc, #40]	; (8005c44 <prvHeapInit+0xb8>)
 8005c1a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	4a09      	ldr	r2, [pc, #36]	; (8005c48 <prvHeapInit+0xbc>)
 8005c22:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005c24:	4b09      	ldr	r3, [pc, #36]	; (8005c4c <prvHeapInit+0xc0>)
 8005c26:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005c2a:	601a      	str	r2, [r3, #0]
}
 8005c2c:	bf00      	nop
 8005c2e:	3714      	adds	r7, #20
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr
 8005c38:	2000081c 	.word	0x2000081c
 8005c3c:	2000441c 	.word	0x2000441c
 8005c40:	20004424 	.word	0x20004424
 8005c44:	2000442c 	.word	0x2000442c
 8005c48:	20004428 	.word	0x20004428
 8005c4c:	20004430 	.word	0x20004430

08005c50 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005c50:	b480      	push	{r7}
 8005c52:	b085      	sub	sp, #20
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005c58:	4b28      	ldr	r3, [pc, #160]	; (8005cfc <prvInsertBlockIntoFreeList+0xac>)
 8005c5a:	60fb      	str	r3, [r7, #12]
 8005c5c:	e002      	b.n	8005c64 <prvInsertBlockIntoFreeList+0x14>
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	60fb      	str	r3, [r7, #12]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d8f7      	bhi.n	8005c5e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	68ba      	ldr	r2, [r7, #8]
 8005c78:	4413      	add	r3, r2
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d108      	bne.n	8005c92 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	685a      	ldr	r2, [r3, #4]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	441a      	add	r2, r3
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	68ba      	ldr	r2, [r7, #8]
 8005c9c:	441a      	add	r2, r3
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d118      	bne.n	8005cd8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	4b15      	ldr	r3, [pc, #84]	; (8005d00 <prvInsertBlockIntoFreeList+0xb0>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d00d      	beq.n	8005cce <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	685a      	ldr	r2, [r3, #4]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	441a      	add	r2, r3
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	601a      	str	r2, [r3, #0]
 8005ccc:	e008      	b.n	8005ce0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005cce:	4b0c      	ldr	r3, [pc, #48]	; (8005d00 <prvInsertBlockIntoFreeList+0xb0>)
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	601a      	str	r2, [r3, #0]
 8005cd6:	e003      	b.n	8005ce0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005ce0:	68fa      	ldr	r2, [r7, #12]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d002      	beq.n	8005cee <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005cee:	bf00      	nop
 8005cf0:	3714      	adds	r7, #20
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr
 8005cfa:	bf00      	nop
 8005cfc:	2000441c 	.word	0x2000441c
 8005d00:	20004424 	.word	0x20004424

08005d04 <__errno>:
 8005d04:	4b01      	ldr	r3, [pc, #4]	; (8005d0c <__errno+0x8>)
 8005d06:	6818      	ldr	r0, [r3, #0]
 8005d08:	4770      	bx	lr
 8005d0a:	bf00      	nop
 8005d0c:	20000018 	.word	0x20000018

08005d10 <__libc_init_array>:
 8005d10:	b570      	push	{r4, r5, r6, lr}
 8005d12:	4d0d      	ldr	r5, [pc, #52]	; (8005d48 <__libc_init_array+0x38>)
 8005d14:	4c0d      	ldr	r4, [pc, #52]	; (8005d4c <__libc_init_array+0x3c>)
 8005d16:	1b64      	subs	r4, r4, r5
 8005d18:	10a4      	asrs	r4, r4, #2
 8005d1a:	2600      	movs	r6, #0
 8005d1c:	42a6      	cmp	r6, r4
 8005d1e:	d109      	bne.n	8005d34 <__libc_init_array+0x24>
 8005d20:	4d0b      	ldr	r5, [pc, #44]	; (8005d50 <__libc_init_array+0x40>)
 8005d22:	4c0c      	ldr	r4, [pc, #48]	; (8005d54 <__libc_init_array+0x44>)
 8005d24:	f001 f99e 	bl	8007064 <_init>
 8005d28:	1b64      	subs	r4, r4, r5
 8005d2a:	10a4      	asrs	r4, r4, #2
 8005d2c:	2600      	movs	r6, #0
 8005d2e:	42a6      	cmp	r6, r4
 8005d30:	d105      	bne.n	8005d3e <__libc_init_array+0x2e>
 8005d32:	bd70      	pop	{r4, r5, r6, pc}
 8005d34:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d38:	4798      	blx	r3
 8005d3a:	3601      	adds	r6, #1
 8005d3c:	e7ee      	b.n	8005d1c <__libc_init_array+0xc>
 8005d3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d42:	4798      	blx	r3
 8005d44:	3601      	adds	r6, #1
 8005d46:	e7f2      	b.n	8005d2e <__libc_init_array+0x1e>
 8005d48:	08007248 	.word	0x08007248
 8005d4c:	08007248 	.word	0x08007248
 8005d50:	08007248 	.word	0x08007248
 8005d54:	0800724c 	.word	0x0800724c

08005d58 <memcpy>:
 8005d58:	440a      	add	r2, r1
 8005d5a:	4291      	cmp	r1, r2
 8005d5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005d60:	d100      	bne.n	8005d64 <memcpy+0xc>
 8005d62:	4770      	bx	lr
 8005d64:	b510      	push	{r4, lr}
 8005d66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d6e:	4291      	cmp	r1, r2
 8005d70:	d1f9      	bne.n	8005d66 <memcpy+0xe>
 8005d72:	bd10      	pop	{r4, pc}

08005d74 <memset>:
 8005d74:	4402      	add	r2, r0
 8005d76:	4603      	mov	r3, r0
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d100      	bne.n	8005d7e <memset+0xa>
 8005d7c:	4770      	bx	lr
 8005d7e:	f803 1b01 	strb.w	r1, [r3], #1
 8005d82:	e7f9      	b.n	8005d78 <memset+0x4>

08005d84 <iprintf>:
 8005d84:	b40f      	push	{r0, r1, r2, r3}
 8005d86:	4b0a      	ldr	r3, [pc, #40]	; (8005db0 <iprintf+0x2c>)
 8005d88:	b513      	push	{r0, r1, r4, lr}
 8005d8a:	681c      	ldr	r4, [r3, #0]
 8005d8c:	b124      	cbz	r4, 8005d98 <iprintf+0x14>
 8005d8e:	69a3      	ldr	r3, [r4, #24]
 8005d90:	b913      	cbnz	r3, 8005d98 <iprintf+0x14>
 8005d92:	4620      	mov	r0, r4
 8005d94:	f000 fa1c 	bl	80061d0 <__sinit>
 8005d98:	ab05      	add	r3, sp, #20
 8005d9a:	9a04      	ldr	r2, [sp, #16]
 8005d9c:	68a1      	ldr	r1, [r4, #8]
 8005d9e:	9301      	str	r3, [sp, #4]
 8005da0:	4620      	mov	r0, r4
 8005da2:	f000 fd81 	bl	80068a8 <_vfiprintf_r>
 8005da6:	b002      	add	sp, #8
 8005da8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dac:	b004      	add	sp, #16
 8005dae:	4770      	bx	lr
 8005db0:	20000018 	.word	0x20000018

08005db4 <sniprintf>:
 8005db4:	b40c      	push	{r2, r3}
 8005db6:	b530      	push	{r4, r5, lr}
 8005db8:	4b17      	ldr	r3, [pc, #92]	; (8005e18 <sniprintf+0x64>)
 8005dba:	1e0c      	subs	r4, r1, #0
 8005dbc:	681d      	ldr	r5, [r3, #0]
 8005dbe:	b09d      	sub	sp, #116	; 0x74
 8005dc0:	da08      	bge.n	8005dd4 <sniprintf+0x20>
 8005dc2:	238b      	movs	r3, #139	; 0x8b
 8005dc4:	602b      	str	r3, [r5, #0]
 8005dc6:	f04f 30ff 	mov.w	r0, #4294967295
 8005dca:	b01d      	add	sp, #116	; 0x74
 8005dcc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005dd0:	b002      	add	sp, #8
 8005dd2:	4770      	bx	lr
 8005dd4:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005dd8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005ddc:	bf14      	ite	ne
 8005dde:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005de2:	4623      	moveq	r3, r4
 8005de4:	9304      	str	r3, [sp, #16]
 8005de6:	9307      	str	r3, [sp, #28]
 8005de8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005dec:	9002      	str	r0, [sp, #8]
 8005dee:	9006      	str	r0, [sp, #24]
 8005df0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005df4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005df6:	ab21      	add	r3, sp, #132	; 0x84
 8005df8:	a902      	add	r1, sp, #8
 8005dfa:	4628      	mov	r0, r5
 8005dfc:	9301      	str	r3, [sp, #4]
 8005dfe:	f000 fc29 	bl	8006654 <_svfiprintf_r>
 8005e02:	1c43      	adds	r3, r0, #1
 8005e04:	bfbc      	itt	lt
 8005e06:	238b      	movlt	r3, #139	; 0x8b
 8005e08:	602b      	strlt	r3, [r5, #0]
 8005e0a:	2c00      	cmp	r4, #0
 8005e0c:	d0dd      	beq.n	8005dca <sniprintf+0x16>
 8005e0e:	9b02      	ldr	r3, [sp, #8]
 8005e10:	2200      	movs	r2, #0
 8005e12:	701a      	strb	r2, [r3, #0]
 8005e14:	e7d9      	b.n	8005dca <sniprintf+0x16>
 8005e16:	bf00      	nop
 8005e18:	20000018 	.word	0x20000018

08005e1c <__swbuf_r>:
 8005e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e1e:	460e      	mov	r6, r1
 8005e20:	4614      	mov	r4, r2
 8005e22:	4605      	mov	r5, r0
 8005e24:	b118      	cbz	r0, 8005e2e <__swbuf_r+0x12>
 8005e26:	6983      	ldr	r3, [r0, #24]
 8005e28:	b90b      	cbnz	r3, 8005e2e <__swbuf_r+0x12>
 8005e2a:	f000 f9d1 	bl	80061d0 <__sinit>
 8005e2e:	4b21      	ldr	r3, [pc, #132]	; (8005eb4 <__swbuf_r+0x98>)
 8005e30:	429c      	cmp	r4, r3
 8005e32:	d12b      	bne.n	8005e8c <__swbuf_r+0x70>
 8005e34:	686c      	ldr	r4, [r5, #4]
 8005e36:	69a3      	ldr	r3, [r4, #24]
 8005e38:	60a3      	str	r3, [r4, #8]
 8005e3a:	89a3      	ldrh	r3, [r4, #12]
 8005e3c:	071a      	lsls	r2, r3, #28
 8005e3e:	d52f      	bpl.n	8005ea0 <__swbuf_r+0x84>
 8005e40:	6923      	ldr	r3, [r4, #16]
 8005e42:	b36b      	cbz	r3, 8005ea0 <__swbuf_r+0x84>
 8005e44:	6923      	ldr	r3, [r4, #16]
 8005e46:	6820      	ldr	r0, [r4, #0]
 8005e48:	1ac0      	subs	r0, r0, r3
 8005e4a:	6963      	ldr	r3, [r4, #20]
 8005e4c:	b2f6      	uxtb	r6, r6
 8005e4e:	4283      	cmp	r3, r0
 8005e50:	4637      	mov	r7, r6
 8005e52:	dc04      	bgt.n	8005e5e <__swbuf_r+0x42>
 8005e54:	4621      	mov	r1, r4
 8005e56:	4628      	mov	r0, r5
 8005e58:	f000 f926 	bl	80060a8 <_fflush_r>
 8005e5c:	bb30      	cbnz	r0, 8005eac <__swbuf_r+0x90>
 8005e5e:	68a3      	ldr	r3, [r4, #8]
 8005e60:	3b01      	subs	r3, #1
 8005e62:	60a3      	str	r3, [r4, #8]
 8005e64:	6823      	ldr	r3, [r4, #0]
 8005e66:	1c5a      	adds	r2, r3, #1
 8005e68:	6022      	str	r2, [r4, #0]
 8005e6a:	701e      	strb	r6, [r3, #0]
 8005e6c:	6963      	ldr	r3, [r4, #20]
 8005e6e:	3001      	adds	r0, #1
 8005e70:	4283      	cmp	r3, r0
 8005e72:	d004      	beq.n	8005e7e <__swbuf_r+0x62>
 8005e74:	89a3      	ldrh	r3, [r4, #12]
 8005e76:	07db      	lsls	r3, r3, #31
 8005e78:	d506      	bpl.n	8005e88 <__swbuf_r+0x6c>
 8005e7a:	2e0a      	cmp	r6, #10
 8005e7c:	d104      	bne.n	8005e88 <__swbuf_r+0x6c>
 8005e7e:	4621      	mov	r1, r4
 8005e80:	4628      	mov	r0, r5
 8005e82:	f000 f911 	bl	80060a8 <_fflush_r>
 8005e86:	b988      	cbnz	r0, 8005eac <__swbuf_r+0x90>
 8005e88:	4638      	mov	r0, r7
 8005e8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e8c:	4b0a      	ldr	r3, [pc, #40]	; (8005eb8 <__swbuf_r+0x9c>)
 8005e8e:	429c      	cmp	r4, r3
 8005e90:	d101      	bne.n	8005e96 <__swbuf_r+0x7a>
 8005e92:	68ac      	ldr	r4, [r5, #8]
 8005e94:	e7cf      	b.n	8005e36 <__swbuf_r+0x1a>
 8005e96:	4b09      	ldr	r3, [pc, #36]	; (8005ebc <__swbuf_r+0xa0>)
 8005e98:	429c      	cmp	r4, r3
 8005e9a:	bf08      	it	eq
 8005e9c:	68ec      	ldreq	r4, [r5, #12]
 8005e9e:	e7ca      	b.n	8005e36 <__swbuf_r+0x1a>
 8005ea0:	4621      	mov	r1, r4
 8005ea2:	4628      	mov	r0, r5
 8005ea4:	f000 f80c 	bl	8005ec0 <__swsetup_r>
 8005ea8:	2800      	cmp	r0, #0
 8005eaa:	d0cb      	beq.n	8005e44 <__swbuf_r+0x28>
 8005eac:	f04f 37ff 	mov.w	r7, #4294967295
 8005eb0:	e7ea      	b.n	8005e88 <__swbuf_r+0x6c>
 8005eb2:	bf00      	nop
 8005eb4:	080071cc 	.word	0x080071cc
 8005eb8:	080071ec 	.word	0x080071ec
 8005ebc:	080071ac 	.word	0x080071ac

08005ec0 <__swsetup_r>:
 8005ec0:	4b32      	ldr	r3, [pc, #200]	; (8005f8c <__swsetup_r+0xcc>)
 8005ec2:	b570      	push	{r4, r5, r6, lr}
 8005ec4:	681d      	ldr	r5, [r3, #0]
 8005ec6:	4606      	mov	r6, r0
 8005ec8:	460c      	mov	r4, r1
 8005eca:	b125      	cbz	r5, 8005ed6 <__swsetup_r+0x16>
 8005ecc:	69ab      	ldr	r3, [r5, #24]
 8005ece:	b913      	cbnz	r3, 8005ed6 <__swsetup_r+0x16>
 8005ed0:	4628      	mov	r0, r5
 8005ed2:	f000 f97d 	bl	80061d0 <__sinit>
 8005ed6:	4b2e      	ldr	r3, [pc, #184]	; (8005f90 <__swsetup_r+0xd0>)
 8005ed8:	429c      	cmp	r4, r3
 8005eda:	d10f      	bne.n	8005efc <__swsetup_r+0x3c>
 8005edc:	686c      	ldr	r4, [r5, #4]
 8005ede:	89a3      	ldrh	r3, [r4, #12]
 8005ee0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ee4:	0719      	lsls	r1, r3, #28
 8005ee6:	d42c      	bmi.n	8005f42 <__swsetup_r+0x82>
 8005ee8:	06dd      	lsls	r5, r3, #27
 8005eea:	d411      	bmi.n	8005f10 <__swsetup_r+0x50>
 8005eec:	2309      	movs	r3, #9
 8005eee:	6033      	str	r3, [r6, #0]
 8005ef0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005ef4:	81a3      	strh	r3, [r4, #12]
 8005ef6:	f04f 30ff 	mov.w	r0, #4294967295
 8005efa:	e03e      	b.n	8005f7a <__swsetup_r+0xba>
 8005efc:	4b25      	ldr	r3, [pc, #148]	; (8005f94 <__swsetup_r+0xd4>)
 8005efe:	429c      	cmp	r4, r3
 8005f00:	d101      	bne.n	8005f06 <__swsetup_r+0x46>
 8005f02:	68ac      	ldr	r4, [r5, #8]
 8005f04:	e7eb      	b.n	8005ede <__swsetup_r+0x1e>
 8005f06:	4b24      	ldr	r3, [pc, #144]	; (8005f98 <__swsetup_r+0xd8>)
 8005f08:	429c      	cmp	r4, r3
 8005f0a:	bf08      	it	eq
 8005f0c:	68ec      	ldreq	r4, [r5, #12]
 8005f0e:	e7e6      	b.n	8005ede <__swsetup_r+0x1e>
 8005f10:	0758      	lsls	r0, r3, #29
 8005f12:	d512      	bpl.n	8005f3a <__swsetup_r+0x7a>
 8005f14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f16:	b141      	cbz	r1, 8005f2a <__swsetup_r+0x6a>
 8005f18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f1c:	4299      	cmp	r1, r3
 8005f1e:	d002      	beq.n	8005f26 <__swsetup_r+0x66>
 8005f20:	4630      	mov	r0, r6
 8005f22:	f000 fa5b 	bl	80063dc <_free_r>
 8005f26:	2300      	movs	r3, #0
 8005f28:	6363      	str	r3, [r4, #52]	; 0x34
 8005f2a:	89a3      	ldrh	r3, [r4, #12]
 8005f2c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005f30:	81a3      	strh	r3, [r4, #12]
 8005f32:	2300      	movs	r3, #0
 8005f34:	6063      	str	r3, [r4, #4]
 8005f36:	6923      	ldr	r3, [r4, #16]
 8005f38:	6023      	str	r3, [r4, #0]
 8005f3a:	89a3      	ldrh	r3, [r4, #12]
 8005f3c:	f043 0308 	orr.w	r3, r3, #8
 8005f40:	81a3      	strh	r3, [r4, #12]
 8005f42:	6923      	ldr	r3, [r4, #16]
 8005f44:	b94b      	cbnz	r3, 8005f5a <__swsetup_r+0x9a>
 8005f46:	89a3      	ldrh	r3, [r4, #12]
 8005f48:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005f4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f50:	d003      	beq.n	8005f5a <__swsetup_r+0x9a>
 8005f52:	4621      	mov	r1, r4
 8005f54:	4630      	mov	r0, r6
 8005f56:	f000 fa01 	bl	800635c <__smakebuf_r>
 8005f5a:	89a0      	ldrh	r0, [r4, #12]
 8005f5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f60:	f010 0301 	ands.w	r3, r0, #1
 8005f64:	d00a      	beq.n	8005f7c <__swsetup_r+0xbc>
 8005f66:	2300      	movs	r3, #0
 8005f68:	60a3      	str	r3, [r4, #8]
 8005f6a:	6963      	ldr	r3, [r4, #20]
 8005f6c:	425b      	negs	r3, r3
 8005f6e:	61a3      	str	r3, [r4, #24]
 8005f70:	6923      	ldr	r3, [r4, #16]
 8005f72:	b943      	cbnz	r3, 8005f86 <__swsetup_r+0xc6>
 8005f74:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005f78:	d1ba      	bne.n	8005ef0 <__swsetup_r+0x30>
 8005f7a:	bd70      	pop	{r4, r5, r6, pc}
 8005f7c:	0781      	lsls	r1, r0, #30
 8005f7e:	bf58      	it	pl
 8005f80:	6963      	ldrpl	r3, [r4, #20]
 8005f82:	60a3      	str	r3, [r4, #8]
 8005f84:	e7f4      	b.n	8005f70 <__swsetup_r+0xb0>
 8005f86:	2000      	movs	r0, #0
 8005f88:	e7f7      	b.n	8005f7a <__swsetup_r+0xba>
 8005f8a:	bf00      	nop
 8005f8c:	20000018 	.word	0x20000018
 8005f90:	080071cc 	.word	0x080071cc
 8005f94:	080071ec 	.word	0x080071ec
 8005f98:	080071ac 	.word	0x080071ac

08005f9c <__sflush_r>:
 8005f9c:	898a      	ldrh	r2, [r1, #12]
 8005f9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fa2:	4605      	mov	r5, r0
 8005fa4:	0710      	lsls	r0, r2, #28
 8005fa6:	460c      	mov	r4, r1
 8005fa8:	d458      	bmi.n	800605c <__sflush_r+0xc0>
 8005faa:	684b      	ldr	r3, [r1, #4]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	dc05      	bgt.n	8005fbc <__sflush_r+0x20>
 8005fb0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	dc02      	bgt.n	8005fbc <__sflush_r+0x20>
 8005fb6:	2000      	movs	r0, #0
 8005fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005fbe:	2e00      	cmp	r6, #0
 8005fc0:	d0f9      	beq.n	8005fb6 <__sflush_r+0x1a>
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005fc8:	682f      	ldr	r7, [r5, #0]
 8005fca:	602b      	str	r3, [r5, #0]
 8005fcc:	d032      	beq.n	8006034 <__sflush_r+0x98>
 8005fce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005fd0:	89a3      	ldrh	r3, [r4, #12]
 8005fd2:	075a      	lsls	r2, r3, #29
 8005fd4:	d505      	bpl.n	8005fe2 <__sflush_r+0x46>
 8005fd6:	6863      	ldr	r3, [r4, #4]
 8005fd8:	1ac0      	subs	r0, r0, r3
 8005fda:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005fdc:	b10b      	cbz	r3, 8005fe2 <__sflush_r+0x46>
 8005fde:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005fe0:	1ac0      	subs	r0, r0, r3
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005fe8:	6a21      	ldr	r1, [r4, #32]
 8005fea:	4628      	mov	r0, r5
 8005fec:	47b0      	blx	r6
 8005fee:	1c43      	adds	r3, r0, #1
 8005ff0:	89a3      	ldrh	r3, [r4, #12]
 8005ff2:	d106      	bne.n	8006002 <__sflush_r+0x66>
 8005ff4:	6829      	ldr	r1, [r5, #0]
 8005ff6:	291d      	cmp	r1, #29
 8005ff8:	d82c      	bhi.n	8006054 <__sflush_r+0xb8>
 8005ffa:	4a2a      	ldr	r2, [pc, #168]	; (80060a4 <__sflush_r+0x108>)
 8005ffc:	40ca      	lsrs	r2, r1
 8005ffe:	07d6      	lsls	r6, r2, #31
 8006000:	d528      	bpl.n	8006054 <__sflush_r+0xb8>
 8006002:	2200      	movs	r2, #0
 8006004:	6062      	str	r2, [r4, #4]
 8006006:	04d9      	lsls	r1, r3, #19
 8006008:	6922      	ldr	r2, [r4, #16]
 800600a:	6022      	str	r2, [r4, #0]
 800600c:	d504      	bpl.n	8006018 <__sflush_r+0x7c>
 800600e:	1c42      	adds	r2, r0, #1
 8006010:	d101      	bne.n	8006016 <__sflush_r+0x7a>
 8006012:	682b      	ldr	r3, [r5, #0]
 8006014:	b903      	cbnz	r3, 8006018 <__sflush_r+0x7c>
 8006016:	6560      	str	r0, [r4, #84]	; 0x54
 8006018:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800601a:	602f      	str	r7, [r5, #0]
 800601c:	2900      	cmp	r1, #0
 800601e:	d0ca      	beq.n	8005fb6 <__sflush_r+0x1a>
 8006020:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006024:	4299      	cmp	r1, r3
 8006026:	d002      	beq.n	800602e <__sflush_r+0x92>
 8006028:	4628      	mov	r0, r5
 800602a:	f000 f9d7 	bl	80063dc <_free_r>
 800602e:	2000      	movs	r0, #0
 8006030:	6360      	str	r0, [r4, #52]	; 0x34
 8006032:	e7c1      	b.n	8005fb8 <__sflush_r+0x1c>
 8006034:	6a21      	ldr	r1, [r4, #32]
 8006036:	2301      	movs	r3, #1
 8006038:	4628      	mov	r0, r5
 800603a:	47b0      	blx	r6
 800603c:	1c41      	adds	r1, r0, #1
 800603e:	d1c7      	bne.n	8005fd0 <__sflush_r+0x34>
 8006040:	682b      	ldr	r3, [r5, #0]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d0c4      	beq.n	8005fd0 <__sflush_r+0x34>
 8006046:	2b1d      	cmp	r3, #29
 8006048:	d001      	beq.n	800604e <__sflush_r+0xb2>
 800604a:	2b16      	cmp	r3, #22
 800604c:	d101      	bne.n	8006052 <__sflush_r+0xb6>
 800604e:	602f      	str	r7, [r5, #0]
 8006050:	e7b1      	b.n	8005fb6 <__sflush_r+0x1a>
 8006052:	89a3      	ldrh	r3, [r4, #12]
 8006054:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006058:	81a3      	strh	r3, [r4, #12]
 800605a:	e7ad      	b.n	8005fb8 <__sflush_r+0x1c>
 800605c:	690f      	ldr	r7, [r1, #16]
 800605e:	2f00      	cmp	r7, #0
 8006060:	d0a9      	beq.n	8005fb6 <__sflush_r+0x1a>
 8006062:	0793      	lsls	r3, r2, #30
 8006064:	680e      	ldr	r6, [r1, #0]
 8006066:	bf08      	it	eq
 8006068:	694b      	ldreq	r3, [r1, #20]
 800606a:	600f      	str	r7, [r1, #0]
 800606c:	bf18      	it	ne
 800606e:	2300      	movne	r3, #0
 8006070:	eba6 0807 	sub.w	r8, r6, r7
 8006074:	608b      	str	r3, [r1, #8]
 8006076:	f1b8 0f00 	cmp.w	r8, #0
 800607a:	dd9c      	ble.n	8005fb6 <__sflush_r+0x1a>
 800607c:	6a21      	ldr	r1, [r4, #32]
 800607e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006080:	4643      	mov	r3, r8
 8006082:	463a      	mov	r2, r7
 8006084:	4628      	mov	r0, r5
 8006086:	47b0      	blx	r6
 8006088:	2800      	cmp	r0, #0
 800608a:	dc06      	bgt.n	800609a <__sflush_r+0xfe>
 800608c:	89a3      	ldrh	r3, [r4, #12]
 800608e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006092:	81a3      	strh	r3, [r4, #12]
 8006094:	f04f 30ff 	mov.w	r0, #4294967295
 8006098:	e78e      	b.n	8005fb8 <__sflush_r+0x1c>
 800609a:	4407      	add	r7, r0
 800609c:	eba8 0800 	sub.w	r8, r8, r0
 80060a0:	e7e9      	b.n	8006076 <__sflush_r+0xda>
 80060a2:	bf00      	nop
 80060a4:	20400001 	.word	0x20400001

080060a8 <_fflush_r>:
 80060a8:	b538      	push	{r3, r4, r5, lr}
 80060aa:	690b      	ldr	r3, [r1, #16]
 80060ac:	4605      	mov	r5, r0
 80060ae:	460c      	mov	r4, r1
 80060b0:	b913      	cbnz	r3, 80060b8 <_fflush_r+0x10>
 80060b2:	2500      	movs	r5, #0
 80060b4:	4628      	mov	r0, r5
 80060b6:	bd38      	pop	{r3, r4, r5, pc}
 80060b8:	b118      	cbz	r0, 80060c2 <_fflush_r+0x1a>
 80060ba:	6983      	ldr	r3, [r0, #24]
 80060bc:	b90b      	cbnz	r3, 80060c2 <_fflush_r+0x1a>
 80060be:	f000 f887 	bl	80061d0 <__sinit>
 80060c2:	4b14      	ldr	r3, [pc, #80]	; (8006114 <_fflush_r+0x6c>)
 80060c4:	429c      	cmp	r4, r3
 80060c6:	d11b      	bne.n	8006100 <_fflush_r+0x58>
 80060c8:	686c      	ldr	r4, [r5, #4]
 80060ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d0ef      	beq.n	80060b2 <_fflush_r+0xa>
 80060d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80060d4:	07d0      	lsls	r0, r2, #31
 80060d6:	d404      	bmi.n	80060e2 <_fflush_r+0x3a>
 80060d8:	0599      	lsls	r1, r3, #22
 80060da:	d402      	bmi.n	80060e2 <_fflush_r+0x3a>
 80060dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060de:	f000 f915 	bl	800630c <__retarget_lock_acquire_recursive>
 80060e2:	4628      	mov	r0, r5
 80060e4:	4621      	mov	r1, r4
 80060e6:	f7ff ff59 	bl	8005f9c <__sflush_r>
 80060ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80060ec:	07da      	lsls	r2, r3, #31
 80060ee:	4605      	mov	r5, r0
 80060f0:	d4e0      	bmi.n	80060b4 <_fflush_r+0xc>
 80060f2:	89a3      	ldrh	r3, [r4, #12]
 80060f4:	059b      	lsls	r3, r3, #22
 80060f6:	d4dd      	bmi.n	80060b4 <_fflush_r+0xc>
 80060f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060fa:	f000 f908 	bl	800630e <__retarget_lock_release_recursive>
 80060fe:	e7d9      	b.n	80060b4 <_fflush_r+0xc>
 8006100:	4b05      	ldr	r3, [pc, #20]	; (8006118 <_fflush_r+0x70>)
 8006102:	429c      	cmp	r4, r3
 8006104:	d101      	bne.n	800610a <_fflush_r+0x62>
 8006106:	68ac      	ldr	r4, [r5, #8]
 8006108:	e7df      	b.n	80060ca <_fflush_r+0x22>
 800610a:	4b04      	ldr	r3, [pc, #16]	; (800611c <_fflush_r+0x74>)
 800610c:	429c      	cmp	r4, r3
 800610e:	bf08      	it	eq
 8006110:	68ec      	ldreq	r4, [r5, #12]
 8006112:	e7da      	b.n	80060ca <_fflush_r+0x22>
 8006114:	080071cc 	.word	0x080071cc
 8006118:	080071ec 	.word	0x080071ec
 800611c:	080071ac 	.word	0x080071ac

08006120 <std>:
 8006120:	2300      	movs	r3, #0
 8006122:	b510      	push	{r4, lr}
 8006124:	4604      	mov	r4, r0
 8006126:	e9c0 3300 	strd	r3, r3, [r0]
 800612a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800612e:	6083      	str	r3, [r0, #8]
 8006130:	8181      	strh	r1, [r0, #12]
 8006132:	6643      	str	r3, [r0, #100]	; 0x64
 8006134:	81c2      	strh	r2, [r0, #14]
 8006136:	6183      	str	r3, [r0, #24]
 8006138:	4619      	mov	r1, r3
 800613a:	2208      	movs	r2, #8
 800613c:	305c      	adds	r0, #92	; 0x5c
 800613e:	f7ff fe19 	bl	8005d74 <memset>
 8006142:	4b05      	ldr	r3, [pc, #20]	; (8006158 <std+0x38>)
 8006144:	6263      	str	r3, [r4, #36]	; 0x24
 8006146:	4b05      	ldr	r3, [pc, #20]	; (800615c <std+0x3c>)
 8006148:	62a3      	str	r3, [r4, #40]	; 0x28
 800614a:	4b05      	ldr	r3, [pc, #20]	; (8006160 <std+0x40>)
 800614c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800614e:	4b05      	ldr	r3, [pc, #20]	; (8006164 <std+0x44>)
 8006150:	6224      	str	r4, [r4, #32]
 8006152:	6323      	str	r3, [r4, #48]	; 0x30
 8006154:	bd10      	pop	{r4, pc}
 8006156:	bf00      	nop
 8006158:	08006e51 	.word	0x08006e51
 800615c:	08006e73 	.word	0x08006e73
 8006160:	08006eab 	.word	0x08006eab
 8006164:	08006ecf 	.word	0x08006ecf

08006168 <_cleanup_r>:
 8006168:	4901      	ldr	r1, [pc, #4]	; (8006170 <_cleanup_r+0x8>)
 800616a:	f000 b8af 	b.w	80062cc <_fwalk_reent>
 800616e:	bf00      	nop
 8006170:	080060a9 	.word	0x080060a9

08006174 <__sfmoreglue>:
 8006174:	b570      	push	{r4, r5, r6, lr}
 8006176:	2268      	movs	r2, #104	; 0x68
 8006178:	1e4d      	subs	r5, r1, #1
 800617a:	4355      	muls	r5, r2
 800617c:	460e      	mov	r6, r1
 800617e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006182:	f000 f997 	bl	80064b4 <_malloc_r>
 8006186:	4604      	mov	r4, r0
 8006188:	b140      	cbz	r0, 800619c <__sfmoreglue+0x28>
 800618a:	2100      	movs	r1, #0
 800618c:	e9c0 1600 	strd	r1, r6, [r0]
 8006190:	300c      	adds	r0, #12
 8006192:	60a0      	str	r0, [r4, #8]
 8006194:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006198:	f7ff fdec 	bl	8005d74 <memset>
 800619c:	4620      	mov	r0, r4
 800619e:	bd70      	pop	{r4, r5, r6, pc}

080061a0 <__sfp_lock_acquire>:
 80061a0:	4801      	ldr	r0, [pc, #4]	; (80061a8 <__sfp_lock_acquire+0x8>)
 80061a2:	f000 b8b3 	b.w	800630c <__retarget_lock_acquire_recursive>
 80061a6:	bf00      	nop
 80061a8:	20004435 	.word	0x20004435

080061ac <__sfp_lock_release>:
 80061ac:	4801      	ldr	r0, [pc, #4]	; (80061b4 <__sfp_lock_release+0x8>)
 80061ae:	f000 b8ae 	b.w	800630e <__retarget_lock_release_recursive>
 80061b2:	bf00      	nop
 80061b4:	20004435 	.word	0x20004435

080061b8 <__sinit_lock_acquire>:
 80061b8:	4801      	ldr	r0, [pc, #4]	; (80061c0 <__sinit_lock_acquire+0x8>)
 80061ba:	f000 b8a7 	b.w	800630c <__retarget_lock_acquire_recursive>
 80061be:	bf00      	nop
 80061c0:	20004436 	.word	0x20004436

080061c4 <__sinit_lock_release>:
 80061c4:	4801      	ldr	r0, [pc, #4]	; (80061cc <__sinit_lock_release+0x8>)
 80061c6:	f000 b8a2 	b.w	800630e <__retarget_lock_release_recursive>
 80061ca:	bf00      	nop
 80061cc:	20004436 	.word	0x20004436

080061d0 <__sinit>:
 80061d0:	b510      	push	{r4, lr}
 80061d2:	4604      	mov	r4, r0
 80061d4:	f7ff fff0 	bl	80061b8 <__sinit_lock_acquire>
 80061d8:	69a3      	ldr	r3, [r4, #24]
 80061da:	b11b      	cbz	r3, 80061e4 <__sinit+0x14>
 80061dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061e0:	f7ff bff0 	b.w	80061c4 <__sinit_lock_release>
 80061e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80061e8:	6523      	str	r3, [r4, #80]	; 0x50
 80061ea:	4b13      	ldr	r3, [pc, #76]	; (8006238 <__sinit+0x68>)
 80061ec:	4a13      	ldr	r2, [pc, #76]	; (800623c <__sinit+0x6c>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	62a2      	str	r2, [r4, #40]	; 0x28
 80061f2:	42a3      	cmp	r3, r4
 80061f4:	bf04      	itt	eq
 80061f6:	2301      	moveq	r3, #1
 80061f8:	61a3      	streq	r3, [r4, #24]
 80061fa:	4620      	mov	r0, r4
 80061fc:	f000 f820 	bl	8006240 <__sfp>
 8006200:	6060      	str	r0, [r4, #4]
 8006202:	4620      	mov	r0, r4
 8006204:	f000 f81c 	bl	8006240 <__sfp>
 8006208:	60a0      	str	r0, [r4, #8]
 800620a:	4620      	mov	r0, r4
 800620c:	f000 f818 	bl	8006240 <__sfp>
 8006210:	2200      	movs	r2, #0
 8006212:	60e0      	str	r0, [r4, #12]
 8006214:	2104      	movs	r1, #4
 8006216:	6860      	ldr	r0, [r4, #4]
 8006218:	f7ff ff82 	bl	8006120 <std>
 800621c:	68a0      	ldr	r0, [r4, #8]
 800621e:	2201      	movs	r2, #1
 8006220:	2109      	movs	r1, #9
 8006222:	f7ff ff7d 	bl	8006120 <std>
 8006226:	68e0      	ldr	r0, [r4, #12]
 8006228:	2202      	movs	r2, #2
 800622a:	2112      	movs	r1, #18
 800622c:	f7ff ff78 	bl	8006120 <std>
 8006230:	2301      	movs	r3, #1
 8006232:	61a3      	str	r3, [r4, #24]
 8006234:	e7d2      	b.n	80061dc <__sinit+0xc>
 8006236:	bf00      	nop
 8006238:	080071a8 	.word	0x080071a8
 800623c:	08006169 	.word	0x08006169

08006240 <__sfp>:
 8006240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006242:	4607      	mov	r7, r0
 8006244:	f7ff ffac 	bl	80061a0 <__sfp_lock_acquire>
 8006248:	4b1e      	ldr	r3, [pc, #120]	; (80062c4 <__sfp+0x84>)
 800624a:	681e      	ldr	r6, [r3, #0]
 800624c:	69b3      	ldr	r3, [r6, #24]
 800624e:	b913      	cbnz	r3, 8006256 <__sfp+0x16>
 8006250:	4630      	mov	r0, r6
 8006252:	f7ff ffbd 	bl	80061d0 <__sinit>
 8006256:	3648      	adds	r6, #72	; 0x48
 8006258:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800625c:	3b01      	subs	r3, #1
 800625e:	d503      	bpl.n	8006268 <__sfp+0x28>
 8006260:	6833      	ldr	r3, [r6, #0]
 8006262:	b30b      	cbz	r3, 80062a8 <__sfp+0x68>
 8006264:	6836      	ldr	r6, [r6, #0]
 8006266:	e7f7      	b.n	8006258 <__sfp+0x18>
 8006268:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800626c:	b9d5      	cbnz	r5, 80062a4 <__sfp+0x64>
 800626e:	4b16      	ldr	r3, [pc, #88]	; (80062c8 <__sfp+0x88>)
 8006270:	60e3      	str	r3, [r4, #12]
 8006272:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006276:	6665      	str	r5, [r4, #100]	; 0x64
 8006278:	f000 f847 	bl	800630a <__retarget_lock_init_recursive>
 800627c:	f7ff ff96 	bl	80061ac <__sfp_lock_release>
 8006280:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006284:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006288:	6025      	str	r5, [r4, #0]
 800628a:	61a5      	str	r5, [r4, #24]
 800628c:	2208      	movs	r2, #8
 800628e:	4629      	mov	r1, r5
 8006290:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006294:	f7ff fd6e 	bl	8005d74 <memset>
 8006298:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800629c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80062a0:	4620      	mov	r0, r4
 80062a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062a4:	3468      	adds	r4, #104	; 0x68
 80062a6:	e7d9      	b.n	800625c <__sfp+0x1c>
 80062a8:	2104      	movs	r1, #4
 80062aa:	4638      	mov	r0, r7
 80062ac:	f7ff ff62 	bl	8006174 <__sfmoreglue>
 80062b0:	4604      	mov	r4, r0
 80062b2:	6030      	str	r0, [r6, #0]
 80062b4:	2800      	cmp	r0, #0
 80062b6:	d1d5      	bne.n	8006264 <__sfp+0x24>
 80062b8:	f7ff ff78 	bl	80061ac <__sfp_lock_release>
 80062bc:	230c      	movs	r3, #12
 80062be:	603b      	str	r3, [r7, #0]
 80062c0:	e7ee      	b.n	80062a0 <__sfp+0x60>
 80062c2:	bf00      	nop
 80062c4:	080071a8 	.word	0x080071a8
 80062c8:	ffff0001 	.word	0xffff0001

080062cc <_fwalk_reent>:
 80062cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062d0:	4606      	mov	r6, r0
 80062d2:	4688      	mov	r8, r1
 80062d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80062d8:	2700      	movs	r7, #0
 80062da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80062de:	f1b9 0901 	subs.w	r9, r9, #1
 80062e2:	d505      	bpl.n	80062f0 <_fwalk_reent+0x24>
 80062e4:	6824      	ldr	r4, [r4, #0]
 80062e6:	2c00      	cmp	r4, #0
 80062e8:	d1f7      	bne.n	80062da <_fwalk_reent+0xe>
 80062ea:	4638      	mov	r0, r7
 80062ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062f0:	89ab      	ldrh	r3, [r5, #12]
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d907      	bls.n	8006306 <_fwalk_reent+0x3a>
 80062f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80062fa:	3301      	adds	r3, #1
 80062fc:	d003      	beq.n	8006306 <_fwalk_reent+0x3a>
 80062fe:	4629      	mov	r1, r5
 8006300:	4630      	mov	r0, r6
 8006302:	47c0      	blx	r8
 8006304:	4307      	orrs	r7, r0
 8006306:	3568      	adds	r5, #104	; 0x68
 8006308:	e7e9      	b.n	80062de <_fwalk_reent+0x12>

0800630a <__retarget_lock_init_recursive>:
 800630a:	4770      	bx	lr

0800630c <__retarget_lock_acquire_recursive>:
 800630c:	4770      	bx	lr

0800630e <__retarget_lock_release_recursive>:
 800630e:	4770      	bx	lr

08006310 <__swhatbuf_r>:
 8006310:	b570      	push	{r4, r5, r6, lr}
 8006312:	460e      	mov	r6, r1
 8006314:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006318:	2900      	cmp	r1, #0
 800631a:	b096      	sub	sp, #88	; 0x58
 800631c:	4614      	mov	r4, r2
 800631e:	461d      	mov	r5, r3
 8006320:	da08      	bge.n	8006334 <__swhatbuf_r+0x24>
 8006322:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006326:	2200      	movs	r2, #0
 8006328:	602a      	str	r2, [r5, #0]
 800632a:	061a      	lsls	r2, r3, #24
 800632c:	d410      	bmi.n	8006350 <__swhatbuf_r+0x40>
 800632e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006332:	e00e      	b.n	8006352 <__swhatbuf_r+0x42>
 8006334:	466a      	mov	r2, sp
 8006336:	f000 fdf1 	bl	8006f1c <_fstat_r>
 800633a:	2800      	cmp	r0, #0
 800633c:	dbf1      	blt.n	8006322 <__swhatbuf_r+0x12>
 800633e:	9a01      	ldr	r2, [sp, #4]
 8006340:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006344:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006348:	425a      	negs	r2, r3
 800634a:	415a      	adcs	r2, r3
 800634c:	602a      	str	r2, [r5, #0]
 800634e:	e7ee      	b.n	800632e <__swhatbuf_r+0x1e>
 8006350:	2340      	movs	r3, #64	; 0x40
 8006352:	2000      	movs	r0, #0
 8006354:	6023      	str	r3, [r4, #0]
 8006356:	b016      	add	sp, #88	; 0x58
 8006358:	bd70      	pop	{r4, r5, r6, pc}
	...

0800635c <__smakebuf_r>:
 800635c:	898b      	ldrh	r3, [r1, #12]
 800635e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006360:	079d      	lsls	r5, r3, #30
 8006362:	4606      	mov	r6, r0
 8006364:	460c      	mov	r4, r1
 8006366:	d507      	bpl.n	8006378 <__smakebuf_r+0x1c>
 8006368:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800636c:	6023      	str	r3, [r4, #0]
 800636e:	6123      	str	r3, [r4, #16]
 8006370:	2301      	movs	r3, #1
 8006372:	6163      	str	r3, [r4, #20]
 8006374:	b002      	add	sp, #8
 8006376:	bd70      	pop	{r4, r5, r6, pc}
 8006378:	ab01      	add	r3, sp, #4
 800637a:	466a      	mov	r2, sp
 800637c:	f7ff ffc8 	bl	8006310 <__swhatbuf_r>
 8006380:	9900      	ldr	r1, [sp, #0]
 8006382:	4605      	mov	r5, r0
 8006384:	4630      	mov	r0, r6
 8006386:	f000 f895 	bl	80064b4 <_malloc_r>
 800638a:	b948      	cbnz	r0, 80063a0 <__smakebuf_r+0x44>
 800638c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006390:	059a      	lsls	r2, r3, #22
 8006392:	d4ef      	bmi.n	8006374 <__smakebuf_r+0x18>
 8006394:	f023 0303 	bic.w	r3, r3, #3
 8006398:	f043 0302 	orr.w	r3, r3, #2
 800639c:	81a3      	strh	r3, [r4, #12]
 800639e:	e7e3      	b.n	8006368 <__smakebuf_r+0xc>
 80063a0:	4b0d      	ldr	r3, [pc, #52]	; (80063d8 <__smakebuf_r+0x7c>)
 80063a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80063a4:	89a3      	ldrh	r3, [r4, #12]
 80063a6:	6020      	str	r0, [r4, #0]
 80063a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063ac:	81a3      	strh	r3, [r4, #12]
 80063ae:	9b00      	ldr	r3, [sp, #0]
 80063b0:	6163      	str	r3, [r4, #20]
 80063b2:	9b01      	ldr	r3, [sp, #4]
 80063b4:	6120      	str	r0, [r4, #16]
 80063b6:	b15b      	cbz	r3, 80063d0 <__smakebuf_r+0x74>
 80063b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063bc:	4630      	mov	r0, r6
 80063be:	f000 fdbf 	bl	8006f40 <_isatty_r>
 80063c2:	b128      	cbz	r0, 80063d0 <__smakebuf_r+0x74>
 80063c4:	89a3      	ldrh	r3, [r4, #12]
 80063c6:	f023 0303 	bic.w	r3, r3, #3
 80063ca:	f043 0301 	orr.w	r3, r3, #1
 80063ce:	81a3      	strh	r3, [r4, #12]
 80063d0:	89a0      	ldrh	r0, [r4, #12]
 80063d2:	4305      	orrs	r5, r0
 80063d4:	81a5      	strh	r5, [r4, #12]
 80063d6:	e7cd      	b.n	8006374 <__smakebuf_r+0x18>
 80063d8:	08006169 	.word	0x08006169

080063dc <_free_r>:
 80063dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80063de:	2900      	cmp	r1, #0
 80063e0:	d044      	beq.n	800646c <_free_r+0x90>
 80063e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063e6:	9001      	str	r0, [sp, #4]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	f1a1 0404 	sub.w	r4, r1, #4
 80063ee:	bfb8      	it	lt
 80063f0:	18e4      	addlt	r4, r4, r3
 80063f2:	f000 fde1 	bl	8006fb8 <__malloc_lock>
 80063f6:	4a1e      	ldr	r2, [pc, #120]	; (8006470 <_free_r+0x94>)
 80063f8:	9801      	ldr	r0, [sp, #4]
 80063fa:	6813      	ldr	r3, [r2, #0]
 80063fc:	b933      	cbnz	r3, 800640c <_free_r+0x30>
 80063fe:	6063      	str	r3, [r4, #4]
 8006400:	6014      	str	r4, [r2, #0]
 8006402:	b003      	add	sp, #12
 8006404:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006408:	f000 bddc 	b.w	8006fc4 <__malloc_unlock>
 800640c:	42a3      	cmp	r3, r4
 800640e:	d908      	bls.n	8006422 <_free_r+0x46>
 8006410:	6825      	ldr	r5, [r4, #0]
 8006412:	1961      	adds	r1, r4, r5
 8006414:	428b      	cmp	r3, r1
 8006416:	bf01      	itttt	eq
 8006418:	6819      	ldreq	r1, [r3, #0]
 800641a:	685b      	ldreq	r3, [r3, #4]
 800641c:	1949      	addeq	r1, r1, r5
 800641e:	6021      	streq	r1, [r4, #0]
 8006420:	e7ed      	b.n	80063fe <_free_r+0x22>
 8006422:	461a      	mov	r2, r3
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	b10b      	cbz	r3, 800642c <_free_r+0x50>
 8006428:	42a3      	cmp	r3, r4
 800642a:	d9fa      	bls.n	8006422 <_free_r+0x46>
 800642c:	6811      	ldr	r1, [r2, #0]
 800642e:	1855      	adds	r5, r2, r1
 8006430:	42a5      	cmp	r5, r4
 8006432:	d10b      	bne.n	800644c <_free_r+0x70>
 8006434:	6824      	ldr	r4, [r4, #0]
 8006436:	4421      	add	r1, r4
 8006438:	1854      	adds	r4, r2, r1
 800643a:	42a3      	cmp	r3, r4
 800643c:	6011      	str	r1, [r2, #0]
 800643e:	d1e0      	bne.n	8006402 <_free_r+0x26>
 8006440:	681c      	ldr	r4, [r3, #0]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	6053      	str	r3, [r2, #4]
 8006446:	4421      	add	r1, r4
 8006448:	6011      	str	r1, [r2, #0]
 800644a:	e7da      	b.n	8006402 <_free_r+0x26>
 800644c:	d902      	bls.n	8006454 <_free_r+0x78>
 800644e:	230c      	movs	r3, #12
 8006450:	6003      	str	r3, [r0, #0]
 8006452:	e7d6      	b.n	8006402 <_free_r+0x26>
 8006454:	6825      	ldr	r5, [r4, #0]
 8006456:	1961      	adds	r1, r4, r5
 8006458:	428b      	cmp	r3, r1
 800645a:	bf04      	itt	eq
 800645c:	6819      	ldreq	r1, [r3, #0]
 800645e:	685b      	ldreq	r3, [r3, #4]
 8006460:	6063      	str	r3, [r4, #4]
 8006462:	bf04      	itt	eq
 8006464:	1949      	addeq	r1, r1, r5
 8006466:	6021      	streq	r1, [r4, #0]
 8006468:	6054      	str	r4, [r2, #4]
 800646a:	e7ca      	b.n	8006402 <_free_r+0x26>
 800646c:	b003      	add	sp, #12
 800646e:	bd30      	pop	{r4, r5, pc}
 8006470:	20004438 	.word	0x20004438

08006474 <sbrk_aligned>:
 8006474:	b570      	push	{r4, r5, r6, lr}
 8006476:	4e0e      	ldr	r6, [pc, #56]	; (80064b0 <sbrk_aligned+0x3c>)
 8006478:	460c      	mov	r4, r1
 800647a:	6831      	ldr	r1, [r6, #0]
 800647c:	4605      	mov	r5, r0
 800647e:	b911      	cbnz	r1, 8006486 <sbrk_aligned+0x12>
 8006480:	f000 fcd6 	bl	8006e30 <_sbrk_r>
 8006484:	6030      	str	r0, [r6, #0]
 8006486:	4621      	mov	r1, r4
 8006488:	4628      	mov	r0, r5
 800648a:	f000 fcd1 	bl	8006e30 <_sbrk_r>
 800648e:	1c43      	adds	r3, r0, #1
 8006490:	d00a      	beq.n	80064a8 <sbrk_aligned+0x34>
 8006492:	1cc4      	adds	r4, r0, #3
 8006494:	f024 0403 	bic.w	r4, r4, #3
 8006498:	42a0      	cmp	r0, r4
 800649a:	d007      	beq.n	80064ac <sbrk_aligned+0x38>
 800649c:	1a21      	subs	r1, r4, r0
 800649e:	4628      	mov	r0, r5
 80064a0:	f000 fcc6 	bl	8006e30 <_sbrk_r>
 80064a4:	3001      	adds	r0, #1
 80064a6:	d101      	bne.n	80064ac <sbrk_aligned+0x38>
 80064a8:	f04f 34ff 	mov.w	r4, #4294967295
 80064ac:	4620      	mov	r0, r4
 80064ae:	bd70      	pop	{r4, r5, r6, pc}
 80064b0:	2000443c 	.word	0x2000443c

080064b4 <_malloc_r>:
 80064b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064b8:	1ccd      	adds	r5, r1, #3
 80064ba:	f025 0503 	bic.w	r5, r5, #3
 80064be:	3508      	adds	r5, #8
 80064c0:	2d0c      	cmp	r5, #12
 80064c2:	bf38      	it	cc
 80064c4:	250c      	movcc	r5, #12
 80064c6:	2d00      	cmp	r5, #0
 80064c8:	4607      	mov	r7, r0
 80064ca:	db01      	blt.n	80064d0 <_malloc_r+0x1c>
 80064cc:	42a9      	cmp	r1, r5
 80064ce:	d905      	bls.n	80064dc <_malloc_r+0x28>
 80064d0:	230c      	movs	r3, #12
 80064d2:	603b      	str	r3, [r7, #0]
 80064d4:	2600      	movs	r6, #0
 80064d6:	4630      	mov	r0, r6
 80064d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064dc:	4e2e      	ldr	r6, [pc, #184]	; (8006598 <_malloc_r+0xe4>)
 80064de:	f000 fd6b 	bl	8006fb8 <__malloc_lock>
 80064e2:	6833      	ldr	r3, [r6, #0]
 80064e4:	461c      	mov	r4, r3
 80064e6:	bb34      	cbnz	r4, 8006536 <_malloc_r+0x82>
 80064e8:	4629      	mov	r1, r5
 80064ea:	4638      	mov	r0, r7
 80064ec:	f7ff ffc2 	bl	8006474 <sbrk_aligned>
 80064f0:	1c43      	adds	r3, r0, #1
 80064f2:	4604      	mov	r4, r0
 80064f4:	d14d      	bne.n	8006592 <_malloc_r+0xde>
 80064f6:	6834      	ldr	r4, [r6, #0]
 80064f8:	4626      	mov	r6, r4
 80064fa:	2e00      	cmp	r6, #0
 80064fc:	d140      	bne.n	8006580 <_malloc_r+0xcc>
 80064fe:	6823      	ldr	r3, [r4, #0]
 8006500:	4631      	mov	r1, r6
 8006502:	4638      	mov	r0, r7
 8006504:	eb04 0803 	add.w	r8, r4, r3
 8006508:	f000 fc92 	bl	8006e30 <_sbrk_r>
 800650c:	4580      	cmp	r8, r0
 800650e:	d13a      	bne.n	8006586 <_malloc_r+0xd2>
 8006510:	6821      	ldr	r1, [r4, #0]
 8006512:	3503      	adds	r5, #3
 8006514:	1a6d      	subs	r5, r5, r1
 8006516:	f025 0503 	bic.w	r5, r5, #3
 800651a:	3508      	adds	r5, #8
 800651c:	2d0c      	cmp	r5, #12
 800651e:	bf38      	it	cc
 8006520:	250c      	movcc	r5, #12
 8006522:	4629      	mov	r1, r5
 8006524:	4638      	mov	r0, r7
 8006526:	f7ff ffa5 	bl	8006474 <sbrk_aligned>
 800652a:	3001      	adds	r0, #1
 800652c:	d02b      	beq.n	8006586 <_malloc_r+0xd2>
 800652e:	6823      	ldr	r3, [r4, #0]
 8006530:	442b      	add	r3, r5
 8006532:	6023      	str	r3, [r4, #0]
 8006534:	e00e      	b.n	8006554 <_malloc_r+0xa0>
 8006536:	6822      	ldr	r2, [r4, #0]
 8006538:	1b52      	subs	r2, r2, r5
 800653a:	d41e      	bmi.n	800657a <_malloc_r+0xc6>
 800653c:	2a0b      	cmp	r2, #11
 800653e:	d916      	bls.n	800656e <_malloc_r+0xba>
 8006540:	1961      	adds	r1, r4, r5
 8006542:	42a3      	cmp	r3, r4
 8006544:	6025      	str	r5, [r4, #0]
 8006546:	bf18      	it	ne
 8006548:	6059      	strne	r1, [r3, #4]
 800654a:	6863      	ldr	r3, [r4, #4]
 800654c:	bf08      	it	eq
 800654e:	6031      	streq	r1, [r6, #0]
 8006550:	5162      	str	r2, [r4, r5]
 8006552:	604b      	str	r3, [r1, #4]
 8006554:	4638      	mov	r0, r7
 8006556:	f104 060b 	add.w	r6, r4, #11
 800655a:	f000 fd33 	bl	8006fc4 <__malloc_unlock>
 800655e:	f026 0607 	bic.w	r6, r6, #7
 8006562:	1d23      	adds	r3, r4, #4
 8006564:	1af2      	subs	r2, r6, r3
 8006566:	d0b6      	beq.n	80064d6 <_malloc_r+0x22>
 8006568:	1b9b      	subs	r3, r3, r6
 800656a:	50a3      	str	r3, [r4, r2]
 800656c:	e7b3      	b.n	80064d6 <_malloc_r+0x22>
 800656e:	6862      	ldr	r2, [r4, #4]
 8006570:	42a3      	cmp	r3, r4
 8006572:	bf0c      	ite	eq
 8006574:	6032      	streq	r2, [r6, #0]
 8006576:	605a      	strne	r2, [r3, #4]
 8006578:	e7ec      	b.n	8006554 <_malloc_r+0xa0>
 800657a:	4623      	mov	r3, r4
 800657c:	6864      	ldr	r4, [r4, #4]
 800657e:	e7b2      	b.n	80064e6 <_malloc_r+0x32>
 8006580:	4634      	mov	r4, r6
 8006582:	6876      	ldr	r6, [r6, #4]
 8006584:	e7b9      	b.n	80064fa <_malloc_r+0x46>
 8006586:	230c      	movs	r3, #12
 8006588:	603b      	str	r3, [r7, #0]
 800658a:	4638      	mov	r0, r7
 800658c:	f000 fd1a 	bl	8006fc4 <__malloc_unlock>
 8006590:	e7a1      	b.n	80064d6 <_malloc_r+0x22>
 8006592:	6025      	str	r5, [r4, #0]
 8006594:	e7de      	b.n	8006554 <_malloc_r+0xa0>
 8006596:	bf00      	nop
 8006598:	20004438 	.word	0x20004438

0800659c <__ssputs_r>:
 800659c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065a0:	688e      	ldr	r6, [r1, #8]
 80065a2:	429e      	cmp	r6, r3
 80065a4:	4682      	mov	sl, r0
 80065a6:	460c      	mov	r4, r1
 80065a8:	4690      	mov	r8, r2
 80065aa:	461f      	mov	r7, r3
 80065ac:	d838      	bhi.n	8006620 <__ssputs_r+0x84>
 80065ae:	898a      	ldrh	r2, [r1, #12]
 80065b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80065b4:	d032      	beq.n	800661c <__ssputs_r+0x80>
 80065b6:	6825      	ldr	r5, [r4, #0]
 80065b8:	6909      	ldr	r1, [r1, #16]
 80065ba:	eba5 0901 	sub.w	r9, r5, r1
 80065be:	6965      	ldr	r5, [r4, #20]
 80065c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80065c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80065c8:	3301      	adds	r3, #1
 80065ca:	444b      	add	r3, r9
 80065cc:	106d      	asrs	r5, r5, #1
 80065ce:	429d      	cmp	r5, r3
 80065d0:	bf38      	it	cc
 80065d2:	461d      	movcc	r5, r3
 80065d4:	0553      	lsls	r3, r2, #21
 80065d6:	d531      	bpl.n	800663c <__ssputs_r+0xa0>
 80065d8:	4629      	mov	r1, r5
 80065da:	f7ff ff6b 	bl	80064b4 <_malloc_r>
 80065de:	4606      	mov	r6, r0
 80065e0:	b950      	cbnz	r0, 80065f8 <__ssputs_r+0x5c>
 80065e2:	230c      	movs	r3, #12
 80065e4:	f8ca 3000 	str.w	r3, [sl]
 80065e8:	89a3      	ldrh	r3, [r4, #12]
 80065ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065ee:	81a3      	strh	r3, [r4, #12]
 80065f0:	f04f 30ff 	mov.w	r0, #4294967295
 80065f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065f8:	6921      	ldr	r1, [r4, #16]
 80065fa:	464a      	mov	r2, r9
 80065fc:	f7ff fbac 	bl	8005d58 <memcpy>
 8006600:	89a3      	ldrh	r3, [r4, #12]
 8006602:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006606:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800660a:	81a3      	strh	r3, [r4, #12]
 800660c:	6126      	str	r6, [r4, #16]
 800660e:	6165      	str	r5, [r4, #20]
 8006610:	444e      	add	r6, r9
 8006612:	eba5 0509 	sub.w	r5, r5, r9
 8006616:	6026      	str	r6, [r4, #0]
 8006618:	60a5      	str	r5, [r4, #8]
 800661a:	463e      	mov	r6, r7
 800661c:	42be      	cmp	r6, r7
 800661e:	d900      	bls.n	8006622 <__ssputs_r+0x86>
 8006620:	463e      	mov	r6, r7
 8006622:	6820      	ldr	r0, [r4, #0]
 8006624:	4632      	mov	r2, r6
 8006626:	4641      	mov	r1, r8
 8006628:	f000 fcac 	bl	8006f84 <memmove>
 800662c:	68a3      	ldr	r3, [r4, #8]
 800662e:	1b9b      	subs	r3, r3, r6
 8006630:	60a3      	str	r3, [r4, #8]
 8006632:	6823      	ldr	r3, [r4, #0]
 8006634:	4433      	add	r3, r6
 8006636:	6023      	str	r3, [r4, #0]
 8006638:	2000      	movs	r0, #0
 800663a:	e7db      	b.n	80065f4 <__ssputs_r+0x58>
 800663c:	462a      	mov	r2, r5
 800663e:	f000 fcc7 	bl	8006fd0 <_realloc_r>
 8006642:	4606      	mov	r6, r0
 8006644:	2800      	cmp	r0, #0
 8006646:	d1e1      	bne.n	800660c <__ssputs_r+0x70>
 8006648:	6921      	ldr	r1, [r4, #16]
 800664a:	4650      	mov	r0, sl
 800664c:	f7ff fec6 	bl	80063dc <_free_r>
 8006650:	e7c7      	b.n	80065e2 <__ssputs_r+0x46>
	...

08006654 <_svfiprintf_r>:
 8006654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006658:	4698      	mov	r8, r3
 800665a:	898b      	ldrh	r3, [r1, #12]
 800665c:	061b      	lsls	r3, r3, #24
 800665e:	b09d      	sub	sp, #116	; 0x74
 8006660:	4607      	mov	r7, r0
 8006662:	460d      	mov	r5, r1
 8006664:	4614      	mov	r4, r2
 8006666:	d50e      	bpl.n	8006686 <_svfiprintf_r+0x32>
 8006668:	690b      	ldr	r3, [r1, #16]
 800666a:	b963      	cbnz	r3, 8006686 <_svfiprintf_r+0x32>
 800666c:	2140      	movs	r1, #64	; 0x40
 800666e:	f7ff ff21 	bl	80064b4 <_malloc_r>
 8006672:	6028      	str	r0, [r5, #0]
 8006674:	6128      	str	r0, [r5, #16]
 8006676:	b920      	cbnz	r0, 8006682 <_svfiprintf_r+0x2e>
 8006678:	230c      	movs	r3, #12
 800667a:	603b      	str	r3, [r7, #0]
 800667c:	f04f 30ff 	mov.w	r0, #4294967295
 8006680:	e0d1      	b.n	8006826 <_svfiprintf_r+0x1d2>
 8006682:	2340      	movs	r3, #64	; 0x40
 8006684:	616b      	str	r3, [r5, #20]
 8006686:	2300      	movs	r3, #0
 8006688:	9309      	str	r3, [sp, #36]	; 0x24
 800668a:	2320      	movs	r3, #32
 800668c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006690:	f8cd 800c 	str.w	r8, [sp, #12]
 8006694:	2330      	movs	r3, #48	; 0x30
 8006696:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006840 <_svfiprintf_r+0x1ec>
 800669a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800669e:	f04f 0901 	mov.w	r9, #1
 80066a2:	4623      	mov	r3, r4
 80066a4:	469a      	mov	sl, r3
 80066a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80066aa:	b10a      	cbz	r2, 80066b0 <_svfiprintf_r+0x5c>
 80066ac:	2a25      	cmp	r2, #37	; 0x25
 80066ae:	d1f9      	bne.n	80066a4 <_svfiprintf_r+0x50>
 80066b0:	ebba 0b04 	subs.w	fp, sl, r4
 80066b4:	d00b      	beq.n	80066ce <_svfiprintf_r+0x7a>
 80066b6:	465b      	mov	r3, fp
 80066b8:	4622      	mov	r2, r4
 80066ba:	4629      	mov	r1, r5
 80066bc:	4638      	mov	r0, r7
 80066be:	f7ff ff6d 	bl	800659c <__ssputs_r>
 80066c2:	3001      	adds	r0, #1
 80066c4:	f000 80aa 	beq.w	800681c <_svfiprintf_r+0x1c8>
 80066c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066ca:	445a      	add	r2, fp
 80066cc:	9209      	str	r2, [sp, #36]	; 0x24
 80066ce:	f89a 3000 	ldrb.w	r3, [sl]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	f000 80a2 	beq.w	800681c <_svfiprintf_r+0x1c8>
 80066d8:	2300      	movs	r3, #0
 80066da:	f04f 32ff 	mov.w	r2, #4294967295
 80066de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80066e2:	f10a 0a01 	add.w	sl, sl, #1
 80066e6:	9304      	str	r3, [sp, #16]
 80066e8:	9307      	str	r3, [sp, #28]
 80066ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80066ee:	931a      	str	r3, [sp, #104]	; 0x68
 80066f0:	4654      	mov	r4, sl
 80066f2:	2205      	movs	r2, #5
 80066f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066f8:	4851      	ldr	r0, [pc, #324]	; (8006840 <_svfiprintf_r+0x1ec>)
 80066fa:	f7f9 fd89 	bl	8000210 <memchr>
 80066fe:	9a04      	ldr	r2, [sp, #16]
 8006700:	b9d8      	cbnz	r0, 800673a <_svfiprintf_r+0xe6>
 8006702:	06d0      	lsls	r0, r2, #27
 8006704:	bf44      	itt	mi
 8006706:	2320      	movmi	r3, #32
 8006708:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800670c:	0711      	lsls	r1, r2, #28
 800670e:	bf44      	itt	mi
 8006710:	232b      	movmi	r3, #43	; 0x2b
 8006712:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006716:	f89a 3000 	ldrb.w	r3, [sl]
 800671a:	2b2a      	cmp	r3, #42	; 0x2a
 800671c:	d015      	beq.n	800674a <_svfiprintf_r+0xf6>
 800671e:	9a07      	ldr	r2, [sp, #28]
 8006720:	4654      	mov	r4, sl
 8006722:	2000      	movs	r0, #0
 8006724:	f04f 0c0a 	mov.w	ip, #10
 8006728:	4621      	mov	r1, r4
 800672a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800672e:	3b30      	subs	r3, #48	; 0x30
 8006730:	2b09      	cmp	r3, #9
 8006732:	d94e      	bls.n	80067d2 <_svfiprintf_r+0x17e>
 8006734:	b1b0      	cbz	r0, 8006764 <_svfiprintf_r+0x110>
 8006736:	9207      	str	r2, [sp, #28]
 8006738:	e014      	b.n	8006764 <_svfiprintf_r+0x110>
 800673a:	eba0 0308 	sub.w	r3, r0, r8
 800673e:	fa09 f303 	lsl.w	r3, r9, r3
 8006742:	4313      	orrs	r3, r2
 8006744:	9304      	str	r3, [sp, #16]
 8006746:	46a2      	mov	sl, r4
 8006748:	e7d2      	b.n	80066f0 <_svfiprintf_r+0x9c>
 800674a:	9b03      	ldr	r3, [sp, #12]
 800674c:	1d19      	adds	r1, r3, #4
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	9103      	str	r1, [sp, #12]
 8006752:	2b00      	cmp	r3, #0
 8006754:	bfbb      	ittet	lt
 8006756:	425b      	neglt	r3, r3
 8006758:	f042 0202 	orrlt.w	r2, r2, #2
 800675c:	9307      	strge	r3, [sp, #28]
 800675e:	9307      	strlt	r3, [sp, #28]
 8006760:	bfb8      	it	lt
 8006762:	9204      	strlt	r2, [sp, #16]
 8006764:	7823      	ldrb	r3, [r4, #0]
 8006766:	2b2e      	cmp	r3, #46	; 0x2e
 8006768:	d10c      	bne.n	8006784 <_svfiprintf_r+0x130>
 800676a:	7863      	ldrb	r3, [r4, #1]
 800676c:	2b2a      	cmp	r3, #42	; 0x2a
 800676e:	d135      	bne.n	80067dc <_svfiprintf_r+0x188>
 8006770:	9b03      	ldr	r3, [sp, #12]
 8006772:	1d1a      	adds	r2, r3, #4
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	9203      	str	r2, [sp, #12]
 8006778:	2b00      	cmp	r3, #0
 800677a:	bfb8      	it	lt
 800677c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006780:	3402      	adds	r4, #2
 8006782:	9305      	str	r3, [sp, #20]
 8006784:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006850 <_svfiprintf_r+0x1fc>
 8006788:	7821      	ldrb	r1, [r4, #0]
 800678a:	2203      	movs	r2, #3
 800678c:	4650      	mov	r0, sl
 800678e:	f7f9 fd3f 	bl	8000210 <memchr>
 8006792:	b140      	cbz	r0, 80067a6 <_svfiprintf_r+0x152>
 8006794:	2340      	movs	r3, #64	; 0x40
 8006796:	eba0 000a 	sub.w	r0, r0, sl
 800679a:	fa03 f000 	lsl.w	r0, r3, r0
 800679e:	9b04      	ldr	r3, [sp, #16]
 80067a0:	4303      	orrs	r3, r0
 80067a2:	3401      	adds	r4, #1
 80067a4:	9304      	str	r3, [sp, #16]
 80067a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067aa:	4826      	ldr	r0, [pc, #152]	; (8006844 <_svfiprintf_r+0x1f0>)
 80067ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80067b0:	2206      	movs	r2, #6
 80067b2:	f7f9 fd2d 	bl	8000210 <memchr>
 80067b6:	2800      	cmp	r0, #0
 80067b8:	d038      	beq.n	800682c <_svfiprintf_r+0x1d8>
 80067ba:	4b23      	ldr	r3, [pc, #140]	; (8006848 <_svfiprintf_r+0x1f4>)
 80067bc:	bb1b      	cbnz	r3, 8006806 <_svfiprintf_r+0x1b2>
 80067be:	9b03      	ldr	r3, [sp, #12]
 80067c0:	3307      	adds	r3, #7
 80067c2:	f023 0307 	bic.w	r3, r3, #7
 80067c6:	3308      	adds	r3, #8
 80067c8:	9303      	str	r3, [sp, #12]
 80067ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067cc:	4433      	add	r3, r6
 80067ce:	9309      	str	r3, [sp, #36]	; 0x24
 80067d0:	e767      	b.n	80066a2 <_svfiprintf_r+0x4e>
 80067d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80067d6:	460c      	mov	r4, r1
 80067d8:	2001      	movs	r0, #1
 80067da:	e7a5      	b.n	8006728 <_svfiprintf_r+0xd4>
 80067dc:	2300      	movs	r3, #0
 80067de:	3401      	adds	r4, #1
 80067e0:	9305      	str	r3, [sp, #20]
 80067e2:	4619      	mov	r1, r3
 80067e4:	f04f 0c0a 	mov.w	ip, #10
 80067e8:	4620      	mov	r0, r4
 80067ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80067ee:	3a30      	subs	r2, #48	; 0x30
 80067f0:	2a09      	cmp	r2, #9
 80067f2:	d903      	bls.n	80067fc <_svfiprintf_r+0x1a8>
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d0c5      	beq.n	8006784 <_svfiprintf_r+0x130>
 80067f8:	9105      	str	r1, [sp, #20]
 80067fa:	e7c3      	b.n	8006784 <_svfiprintf_r+0x130>
 80067fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8006800:	4604      	mov	r4, r0
 8006802:	2301      	movs	r3, #1
 8006804:	e7f0      	b.n	80067e8 <_svfiprintf_r+0x194>
 8006806:	ab03      	add	r3, sp, #12
 8006808:	9300      	str	r3, [sp, #0]
 800680a:	462a      	mov	r2, r5
 800680c:	4b0f      	ldr	r3, [pc, #60]	; (800684c <_svfiprintf_r+0x1f8>)
 800680e:	a904      	add	r1, sp, #16
 8006810:	4638      	mov	r0, r7
 8006812:	f3af 8000 	nop.w
 8006816:	1c42      	adds	r2, r0, #1
 8006818:	4606      	mov	r6, r0
 800681a:	d1d6      	bne.n	80067ca <_svfiprintf_r+0x176>
 800681c:	89ab      	ldrh	r3, [r5, #12]
 800681e:	065b      	lsls	r3, r3, #25
 8006820:	f53f af2c 	bmi.w	800667c <_svfiprintf_r+0x28>
 8006824:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006826:	b01d      	add	sp, #116	; 0x74
 8006828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800682c:	ab03      	add	r3, sp, #12
 800682e:	9300      	str	r3, [sp, #0]
 8006830:	462a      	mov	r2, r5
 8006832:	4b06      	ldr	r3, [pc, #24]	; (800684c <_svfiprintf_r+0x1f8>)
 8006834:	a904      	add	r1, sp, #16
 8006836:	4638      	mov	r0, r7
 8006838:	f000 f9d4 	bl	8006be4 <_printf_i>
 800683c:	e7eb      	b.n	8006816 <_svfiprintf_r+0x1c2>
 800683e:	bf00      	nop
 8006840:	0800720c 	.word	0x0800720c
 8006844:	08007216 	.word	0x08007216
 8006848:	00000000 	.word	0x00000000
 800684c:	0800659d 	.word	0x0800659d
 8006850:	08007212 	.word	0x08007212

08006854 <__sfputc_r>:
 8006854:	6893      	ldr	r3, [r2, #8]
 8006856:	3b01      	subs	r3, #1
 8006858:	2b00      	cmp	r3, #0
 800685a:	b410      	push	{r4}
 800685c:	6093      	str	r3, [r2, #8]
 800685e:	da08      	bge.n	8006872 <__sfputc_r+0x1e>
 8006860:	6994      	ldr	r4, [r2, #24]
 8006862:	42a3      	cmp	r3, r4
 8006864:	db01      	blt.n	800686a <__sfputc_r+0x16>
 8006866:	290a      	cmp	r1, #10
 8006868:	d103      	bne.n	8006872 <__sfputc_r+0x1e>
 800686a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800686e:	f7ff bad5 	b.w	8005e1c <__swbuf_r>
 8006872:	6813      	ldr	r3, [r2, #0]
 8006874:	1c58      	adds	r0, r3, #1
 8006876:	6010      	str	r0, [r2, #0]
 8006878:	7019      	strb	r1, [r3, #0]
 800687a:	4608      	mov	r0, r1
 800687c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006880:	4770      	bx	lr

08006882 <__sfputs_r>:
 8006882:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006884:	4606      	mov	r6, r0
 8006886:	460f      	mov	r7, r1
 8006888:	4614      	mov	r4, r2
 800688a:	18d5      	adds	r5, r2, r3
 800688c:	42ac      	cmp	r4, r5
 800688e:	d101      	bne.n	8006894 <__sfputs_r+0x12>
 8006890:	2000      	movs	r0, #0
 8006892:	e007      	b.n	80068a4 <__sfputs_r+0x22>
 8006894:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006898:	463a      	mov	r2, r7
 800689a:	4630      	mov	r0, r6
 800689c:	f7ff ffda 	bl	8006854 <__sfputc_r>
 80068a0:	1c43      	adds	r3, r0, #1
 80068a2:	d1f3      	bne.n	800688c <__sfputs_r+0xa>
 80068a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080068a8 <_vfiprintf_r>:
 80068a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068ac:	460d      	mov	r5, r1
 80068ae:	b09d      	sub	sp, #116	; 0x74
 80068b0:	4614      	mov	r4, r2
 80068b2:	4698      	mov	r8, r3
 80068b4:	4606      	mov	r6, r0
 80068b6:	b118      	cbz	r0, 80068c0 <_vfiprintf_r+0x18>
 80068b8:	6983      	ldr	r3, [r0, #24]
 80068ba:	b90b      	cbnz	r3, 80068c0 <_vfiprintf_r+0x18>
 80068bc:	f7ff fc88 	bl	80061d0 <__sinit>
 80068c0:	4b89      	ldr	r3, [pc, #548]	; (8006ae8 <_vfiprintf_r+0x240>)
 80068c2:	429d      	cmp	r5, r3
 80068c4:	d11b      	bne.n	80068fe <_vfiprintf_r+0x56>
 80068c6:	6875      	ldr	r5, [r6, #4]
 80068c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80068ca:	07d9      	lsls	r1, r3, #31
 80068cc:	d405      	bmi.n	80068da <_vfiprintf_r+0x32>
 80068ce:	89ab      	ldrh	r3, [r5, #12]
 80068d0:	059a      	lsls	r2, r3, #22
 80068d2:	d402      	bmi.n	80068da <_vfiprintf_r+0x32>
 80068d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80068d6:	f7ff fd19 	bl	800630c <__retarget_lock_acquire_recursive>
 80068da:	89ab      	ldrh	r3, [r5, #12]
 80068dc:	071b      	lsls	r3, r3, #28
 80068de:	d501      	bpl.n	80068e4 <_vfiprintf_r+0x3c>
 80068e0:	692b      	ldr	r3, [r5, #16]
 80068e2:	b9eb      	cbnz	r3, 8006920 <_vfiprintf_r+0x78>
 80068e4:	4629      	mov	r1, r5
 80068e6:	4630      	mov	r0, r6
 80068e8:	f7ff faea 	bl	8005ec0 <__swsetup_r>
 80068ec:	b1c0      	cbz	r0, 8006920 <_vfiprintf_r+0x78>
 80068ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80068f0:	07dc      	lsls	r4, r3, #31
 80068f2:	d50e      	bpl.n	8006912 <_vfiprintf_r+0x6a>
 80068f4:	f04f 30ff 	mov.w	r0, #4294967295
 80068f8:	b01d      	add	sp, #116	; 0x74
 80068fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068fe:	4b7b      	ldr	r3, [pc, #492]	; (8006aec <_vfiprintf_r+0x244>)
 8006900:	429d      	cmp	r5, r3
 8006902:	d101      	bne.n	8006908 <_vfiprintf_r+0x60>
 8006904:	68b5      	ldr	r5, [r6, #8]
 8006906:	e7df      	b.n	80068c8 <_vfiprintf_r+0x20>
 8006908:	4b79      	ldr	r3, [pc, #484]	; (8006af0 <_vfiprintf_r+0x248>)
 800690a:	429d      	cmp	r5, r3
 800690c:	bf08      	it	eq
 800690e:	68f5      	ldreq	r5, [r6, #12]
 8006910:	e7da      	b.n	80068c8 <_vfiprintf_r+0x20>
 8006912:	89ab      	ldrh	r3, [r5, #12]
 8006914:	0598      	lsls	r0, r3, #22
 8006916:	d4ed      	bmi.n	80068f4 <_vfiprintf_r+0x4c>
 8006918:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800691a:	f7ff fcf8 	bl	800630e <__retarget_lock_release_recursive>
 800691e:	e7e9      	b.n	80068f4 <_vfiprintf_r+0x4c>
 8006920:	2300      	movs	r3, #0
 8006922:	9309      	str	r3, [sp, #36]	; 0x24
 8006924:	2320      	movs	r3, #32
 8006926:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800692a:	f8cd 800c 	str.w	r8, [sp, #12]
 800692e:	2330      	movs	r3, #48	; 0x30
 8006930:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006af4 <_vfiprintf_r+0x24c>
 8006934:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006938:	f04f 0901 	mov.w	r9, #1
 800693c:	4623      	mov	r3, r4
 800693e:	469a      	mov	sl, r3
 8006940:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006944:	b10a      	cbz	r2, 800694a <_vfiprintf_r+0xa2>
 8006946:	2a25      	cmp	r2, #37	; 0x25
 8006948:	d1f9      	bne.n	800693e <_vfiprintf_r+0x96>
 800694a:	ebba 0b04 	subs.w	fp, sl, r4
 800694e:	d00b      	beq.n	8006968 <_vfiprintf_r+0xc0>
 8006950:	465b      	mov	r3, fp
 8006952:	4622      	mov	r2, r4
 8006954:	4629      	mov	r1, r5
 8006956:	4630      	mov	r0, r6
 8006958:	f7ff ff93 	bl	8006882 <__sfputs_r>
 800695c:	3001      	adds	r0, #1
 800695e:	f000 80aa 	beq.w	8006ab6 <_vfiprintf_r+0x20e>
 8006962:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006964:	445a      	add	r2, fp
 8006966:	9209      	str	r2, [sp, #36]	; 0x24
 8006968:	f89a 3000 	ldrb.w	r3, [sl]
 800696c:	2b00      	cmp	r3, #0
 800696e:	f000 80a2 	beq.w	8006ab6 <_vfiprintf_r+0x20e>
 8006972:	2300      	movs	r3, #0
 8006974:	f04f 32ff 	mov.w	r2, #4294967295
 8006978:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800697c:	f10a 0a01 	add.w	sl, sl, #1
 8006980:	9304      	str	r3, [sp, #16]
 8006982:	9307      	str	r3, [sp, #28]
 8006984:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006988:	931a      	str	r3, [sp, #104]	; 0x68
 800698a:	4654      	mov	r4, sl
 800698c:	2205      	movs	r2, #5
 800698e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006992:	4858      	ldr	r0, [pc, #352]	; (8006af4 <_vfiprintf_r+0x24c>)
 8006994:	f7f9 fc3c 	bl	8000210 <memchr>
 8006998:	9a04      	ldr	r2, [sp, #16]
 800699a:	b9d8      	cbnz	r0, 80069d4 <_vfiprintf_r+0x12c>
 800699c:	06d1      	lsls	r1, r2, #27
 800699e:	bf44      	itt	mi
 80069a0:	2320      	movmi	r3, #32
 80069a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069a6:	0713      	lsls	r3, r2, #28
 80069a8:	bf44      	itt	mi
 80069aa:	232b      	movmi	r3, #43	; 0x2b
 80069ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069b0:	f89a 3000 	ldrb.w	r3, [sl]
 80069b4:	2b2a      	cmp	r3, #42	; 0x2a
 80069b6:	d015      	beq.n	80069e4 <_vfiprintf_r+0x13c>
 80069b8:	9a07      	ldr	r2, [sp, #28]
 80069ba:	4654      	mov	r4, sl
 80069bc:	2000      	movs	r0, #0
 80069be:	f04f 0c0a 	mov.w	ip, #10
 80069c2:	4621      	mov	r1, r4
 80069c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80069c8:	3b30      	subs	r3, #48	; 0x30
 80069ca:	2b09      	cmp	r3, #9
 80069cc:	d94e      	bls.n	8006a6c <_vfiprintf_r+0x1c4>
 80069ce:	b1b0      	cbz	r0, 80069fe <_vfiprintf_r+0x156>
 80069d0:	9207      	str	r2, [sp, #28]
 80069d2:	e014      	b.n	80069fe <_vfiprintf_r+0x156>
 80069d4:	eba0 0308 	sub.w	r3, r0, r8
 80069d8:	fa09 f303 	lsl.w	r3, r9, r3
 80069dc:	4313      	orrs	r3, r2
 80069de:	9304      	str	r3, [sp, #16]
 80069e0:	46a2      	mov	sl, r4
 80069e2:	e7d2      	b.n	800698a <_vfiprintf_r+0xe2>
 80069e4:	9b03      	ldr	r3, [sp, #12]
 80069e6:	1d19      	adds	r1, r3, #4
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	9103      	str	r1, [sp, #12]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	bfbb      	ittet	lt
 80069f0:	425b      	neglt	r3, r3
 80069f2:	f042 0202 	orrlt.w	r2, r2, #2
 80069f6:	9307      	strge	r3, [sp, #28]
 80069f8:	9307      	strlt	r3, [sp, #28]
 80069fa:	bfb8      	it	lt
 80069fc:	9204      	strlt	r2, [sp, #16]
 80069fe:	7823      	ldrb	r3, [r4, #0]
 8006a00:	2b2e      	cmp	r3, #46	; 0x2e
 8006a02:	d10c      	bne.n	8006a1e <_vfiprintf_r+0x176>
 8006a04:	7863      	ldrb	r3, [r4, #1]
 8006a06:	2b2a      	cmp	r3, #42	; 0x2a
 8006a08:	d135      	bne.n	8006a76 <_vfiprintf_r+0x1ce>
 8006a0a:	9b03      	ldr	r3, [sp, #12]
 8006a0c:	1d1a      	adds	r2, r3, #4
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	9203      	str	r2, [sp, #12]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	bfb8      	it	lt
 8006a16:	f04f 33ff 	movlt.w	r3, #4294967295
 8006a1a:	3402      	adds	r4, #2
 8006a1c:	9305      	str	r3, [sp, #20]
 8006a1e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006b04 <_vfiprintf_r+0x25c>
 8006a22:	7821      	ldrb	r1, [r4, #0]
 8006a24:	2203      	movs	r2, #3
 8006a26:	4650      	mov	r0, sl
 8006a28:	f7f9 fbf2 	bl	8000210 <memchr>
 8006a2c:	b140      	cbz	r0, 8006a40 <_vfiprintf_r+0x198>
 8006a2e:	2340      	movs	r3, #64	; 0x40
 8006a30:	eba0 000a 	sub.w	r0, r0, sl
 8006a34:	fa03 f000 	lsl.w	r0, r3, r0
 8006a38:	9b04      	ldr	r3, [sp, #16]
 8006a3a:	4303      	orrs	r3, r0
 8006a3c:	3401      	adds	r4, #1
 8006a3e:	9304      	str	r3, [sp, #16]
 8006a40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a44:	482c      	ldr	r0, [pc, #176]	; (8006af8 <_vfiprintf_r+0x250>)
 8006a46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006a4a:	2206      	movs	r2, #6
 8006a4c:	f7f9 fbe0 	bl	8000210 <memchr>
 8006a50:	2800      	cmp	r0, #0
 8006a52:	d03f      	beq.n	8006ad4 <_vfiprintf_r+0x22c>
 8006a54:	4b29      	ldr	r3, [pc, #164]	; (8006afc <_vfiprintf_r+0x254>)
 8006a56:	bb1b      	cbnz	r3, 8006aa0 <_vfiprintf_r+0x1f8>
 8006a58:	9b03      	ldr	r3, [sp, #12]
 8006a5a:	3307      	adds	r3, #7
 8006a5c:	f023 0307 	bic.w	r3, r3, #7
 8006a60:	3308      	adds	r3, #8
 8006a62:	9303      	str	r3, [sp, #12]
 8006a64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a66:	443b      	add	r3, r7
 8006a68:	9309      	str	r3, [sp, #36]	; 0x24
 8006a6a:	e767      	b.n	800693c <_vfiprintf_r+0x94>
 8006a6c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a70:	460c      	mov	r4, r1
 8006a72:	2001      	movs	r0, #1
 8006a74:	e7a5      	b.n	80069c2 <_vfiprintf_r+0x11a>
 8006a76:	2300      	movs	r3, #0
 8006a78:	3401      	adds	r4, #1
 8006a7a:	9305      	str	r3, [sp, #20]
 8006a7c:	4619      	mov	r1, r3
 8006a7e:	f04f 0c0a 	mov.w	ip, #10
 8006a82:	4620      	mov	r0, r4
 8006a84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a88:	3a30      	subs	r2, #48	; 0x30
 8006a8a:	2a09      	cmp	r2, #9
 8006a8c:	d903      	bls.n	8006a96 <_vfiprintf_r+0x1ee>
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d0c5      	beq.n	8006a1e <_vfiprintf_r+0x176>
 8006a92:	9105      	str	r1, [sp, #20]
 8006a94:	e7c3      	b.n	8006a1e <_vfiprintf_r+0x176>
 8006a96:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a9a:	4604      	mov	r4, r0
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	e7f0      	b.n	8006a82 <_vfiprintf_r+0x1da>
 8006aa0:	ab03      	add	r3, sp, #12
 8006aa2:	9300      	str	r3, [sp, #0]
 8006aa4:	462a      	mov	r2, r5
 8006aa6:	4b16      	ldr	r3, [pc, #88]	; (8006b00 <_vfiprintf_r+0x258>)
 8006aa8:	a904      	add	r1, sp, #16
 8006aaa:	4630      	mov	r0, r6
 8006aac:	f3af 8000 	nop.w
 8006ab0:	4607      	mov	r7, r0
 8006ab2:	1c78      	adds	r0, r7, #1
 8006ab4:	d1d6      	bne.n	8006a64 <_vfiprintf_r+0x1bc>
 8006ab6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ab8:	07d9      	lsls	r1, r3, #31
 8006aba:	d405      	bmi.n	8006ac8 <_vfiprintf_r+0x220>
 8006abc:	89ab      	ldrh	r3, [r5, #12]
 8006abe:	059a      	lsls	r2, r3, #22
 8006ac0:	d402      	bmi.n	8006ac8 <_vfiprintf_r+0x220>
 8006ac2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ac4:	f7ff fc23 	bl	800630e <__retarget_lock_release_recursive>
 8006ac8:	89ab      	ldrh	r3, [r5, #12]
 8006aca:	065b      	lsls	r3, r3, #25
 8006acc:	f53f af12 	bmi.w	80068f4 <_vfiprintf_r+0x4c>
 8006ad0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ad2:	e711      	b.n	80068f8 <_vfiprintf_r+0x50>
 8006ad4:	ab03      	add	r3, sp, #12
 8006ad6:	9300      	str	r3, [sp, #0]
 8006ad8:	462a      	mov	r2, r5
 8006ada:	4b09      	ldr	r3, [pc, #36]	; (8006b00 <_vfiprintf_r+0x258>)
 8006adc:	a904      	add	r1, sp, #16
 8006ade:	4630      	mov	r0, r6
 8006ae0:	f000 f880 	bl	8006be4 <_printf_i>
 8006ae4:	e7e4      	b.n	8006ab0 <_vfiprintf_r+0x208>
 8006ae6:	bf00      	nop
 8006ae8:	080071cc 	.word	0x080071cc
 8006aec:	080071ec 	.word	0x080071ec
 8006af0:	080071ac 	.word	0x080071ac
 8006af4:	0800720c 	.word	0x0800720c
 8006af8:	08007216 	.word	0x08007216
 8006afc:	00000000 	.word	0x00000000
 8006b00:	08006883 	.word	0x08006883
 8006b04:	08007212 	.word	0x08007212

08006b08 <_printf_common>:
 8006b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b0c:	4616      	mov	r6, r2
 8006b0e:	4699      	mov	r9, r3
 8006b10:	688a      	ldr	r2, [r1, #8]
 8006b12:	690b      	ldr	r3, [r1, #16]
 8006b14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	bfb8      	it	lt
 8006b1c:	4613      	movlt	r3, r2
 8006b1e:	6033      	str	r3, [r6, #0]
 8006b20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006b24:	4607      	mov	r7, r0
 8006b26:	460c      	mov	r4, r1
 8006b28:	b10a      	cbz	r2, 8006b2e <_printf_common+0x26>
 8006b2a:	3301      	adds	r3, #1
 8006b2c:	6033      	str	r3, [r6, #0]
 8006b2e:	6823      	ldr	r3, [r4, #0]
 8006b30:	0699      	lsls	r1, r3, #26
 8006b32:	bf42      	ittt	mi
 8006b34:	6833      	ldrmi	r3, [r6, #0]
 8006b36:	3302      	addmi	r3, #2
 8006b38:	6033      	strmi	r3, [r6, #0]
 8006b3a:	6825      	ldr	r5, [r4, #0]
 8006b3c:	f015 0506 	ands.w	r5, r5, #6
 8006b40:	d106      	bne.n	8006b50 <_printf_common+0x48>
 8006b42:	f104 0a19 	add.w	sl, r4, #25
 8006b46:	68e3      	ldr	r3, [r4, #12]
 8006b48:	6832      	ldr	r2, [r6, #0]
 8006b4a:	1a9b      	subs	r3, r3, r2
 8006b4c:	42ab      	cmp	r3, r5
 8006b4e:	dc26      	bgt.n	8006b9e <_printf_common+0x96>
 8006b50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006b54:	1e13      	subs	r3, r2, #0
 8006b56:	6822      	ldr	r2, [r4, #0]
 8006b58:	bf18      	it	ne
 8006b5a:	2301      	movne	r3, #1
 8006b5c:	0692      	lsls	r2, r2, #26
 8006b5e:	d42b      	bmi.n	8006bb8 <_printf_common+0xb0>
 8006b60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b64:	4649      	mov	r1, r9
 8006b66:	4638      	mov	r0, r7
 8006b68:	47c0      	blx	r8
 8006b6a:	3001      	adds	r0, #1
 8006b6c:	d01e      	beq.n	8006bac <_printf_common+0xa4>
 8006b6e:	6823      	ldr	r3, [r4, #0]
 8006b70:	68e5      	ldr	r5, [r4, #12]
 8006b72:	6832      	ldr	r2, [r6, #0]
 8006b74:	f003 0306 	and.w	r3, r3, #6
 8006b78:	2b04      	cmp	r3, #4
 8006b7a:	bf08      	it	eq
 8006b7c:	1aad      	subeq	r5, r5, r2
 8006b7e:	68a3      	ldr	r3, [r4, #8]
 8006b80:	6922      	ldr	r2, [r4, #16]
 8006b82:	bf0c      	ite	eq
 8006b84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b88:	2500      	movne	r5, #0
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	bfc4      	itt	gt
 8006b8e:	1a9b      	subgt	r3, r3, r2
 8006b90:	18ed      	addgt	r5, r5, r3
 8006b92:	2600      	movs	r6, #0
 8006b94:	341a      	adds	r4, #26
 8006b96:	42b5      	cmp	r5, r6
 8006b98:	d11a      	bne.n	8006bd0 <_printf_common+0xc8>
 8006b9a:	2000      	movs	r0, #0
 8006b9c:	e008      	b.n	8006bb0 <_printf_common+0xa8>
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	4652      	mov	r2, sl
 8006ba2:	4649      	mov	r1, r9
 8006ba4:	4638      	mov	r0, r7
 8006ba6:	47c0      	blx	r8
 8006ba8:	3001      	adds	r0, #1
 8006baa:	d103      	bne.n	8006bb4 <_printf_common+0xac>
 8006bac:	f04f 30ff 	mov.w	r0, #4294967295
 8006bb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bb4:	3501      	adds	r5, #1
 8006bb6:	e7c6      	b.n	8006b46 <_printf_common+0x3e>
 8006bb8:	18e1      	adds	r1, r4, r3
 8006bba:	1c5a      	adds	r2, r3, #1
 8006bbc:	2030      	movs	r0, #48	; 0x30
 8006bbe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006bc2:	4422      	add	r2, r4
 8006bc4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006bc8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006bcc:	3302      	adds	r3, #2
 8006bce:	e7c7      	b.n	8006b60 <_printf_common+0x58>
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	4622      	mov	r2, r4
 8006bd4:	4649      	mov	r1, r9
 8006bd6:	4638      	mov	r0, r7
 8006bd8:	47c0      	blx	r8
 8006bda:	3001      	adds	r0, #1
 8006bdc:	d0e6      	beq.n	8006bac <_printf_common+0xa4>
 8006bde:	3601      	adds	r6, #1
 8006be0:	e7d9      	b.n	8006b96 <_printf_common+0x8e>
	...

08006be4 <_printf_i>:
 8006be4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006be8:	7e0f      	ldrb	r7, [r1, #24]
 8006bea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006bec:	2f78      	cmp	r7, #120	; 0x78
 8006bee:	4691      	mov	r9, r2
 8006bf0:	4680      	mov	r8, r0
 8006bf2:	460c      	mov	r4, r1
 8006bf4:	469a      	mov	sl, r3
 8006bf6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006bfa:	d807      	bhi.n	8006c0c <_printf_i+0x28>
 8006bfc:	2f62      	cmp	r7, #98	; 0x62
 8006bfe:	d80a      	bhi.n	8006c16 <_printf_i+0x32>
 8006c00:	2f00      	cmp	r7, #0
 8006c02:	f000 80d8 	beq.w	8006db6 <_printf_i+0x1d2>
 8006c06:	2f58      	cmp	r7, #88	; 0x58
 8006c08:	f000 80a3 	beq.w	8006d52 <_printf_i+0x16e>
 8006c0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006c14:	e03a      	b.n	8006c8c <_printf_i+0xa8>
 8006c16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006c1a:	2b15      	cmp	r3, #21
 8006c1c:	d8f6      	bhi.n	8006c0c <_printf_i+0x28>
 8006c1e:	a101      	add	r1, pc, #4	; (adr r1, 8006c24 <_printf_i+0x40>)
 8006c20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006c24:	08006c7d 	.word	0x08006c7d
 8006c28:	08006c91 	.word	0x08006c91
 8006c2c:	08006c0d 	.word	0x08006c0d
 8006c30:	08006c0d 	.word	0x08006c0d
 8006c34:	08006c0d 	.word	0x08006c0d
 8006c38:	08006c0d 	.word	0x08006c0d
 8006c3c:	08006c91 	.word	0x08006c91
 8006c40:	08006c0d 	.word	0x08006c0d
 8006c44:	08006c0d 	.word	0x08006c0d
 8006c48:	08006c0d 	.word	0x08006c0d
 8006c4c:	08006c0d 	.word	0x08006c0d
 8006c50:	08006d9d 	.word	0x08006d9d
 8006c54:	08006cc1 	.word	0x08006cc1
 8006c58:	08006d7f 	.word	0x08006d7f
 8006c5c:	08006c0d 	.word	0x08006c0d
 8006c60:	08006c0d 	.word	0x08006c0d
 8006c64:	08006dbf 	.word	0x08006dbf
 8006c68:	08006c0d 	.word	0x08006c0d
 8006c6c:	08006cc1 	.word	0x08006cc1
 8006c70:	08006c0d 	.word	0x08006c0d
 8006c74:	08006c0d 	.word	0x08006c0d
 8006c78:	08006d87 	.word	0x08006d87
 8006c7c:	682b      	ldr	r3, [r5, #0]
 8006c7e:	1d1a      	adds	r2, r3, #4
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	602a      	str	r2, [r5, #0]
 8006c84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	e0a3      	b.n	8006dd8 <_printf_i+0x1f4>
 8006c90:	6820      	ldr	r0, [r4, #0]
 8006c92:	6829      	ldr	r1, [r5, #0]
 8006c94:	0606      	lsls	r6, r0, #24
 8006c96:	f101 0304 	add.w	r3, r1, #4
 8006c9a:	d50a      	bpl.n	8006cb2 <_printf_i+0xce>
 8006c9c:	680e      	ldr	r6, [r1, #0]
 8006c9e:	602b      	str	r3, [r5, #0]
 8006ca0:	2e00      	cmp	r6, #0
 8006ca2:	da03      	bge.n	8006cac <_printf_i+0xc8>
 8006ca4:	232d      	movs	r3, #45	; 0x2d
 8006ca6:	4276      	negs	r6, r6
 8006ca8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cac:	485e      	ldr	r0, [pc, #376]	; (8006e28 <_printf_i+0x244>)
 8006cae:	230a      	movs	r3, #10
 8006cb0:	e019      	b.n	8006ce6 <_printf_i+0x102>
 8006cb2:	680e      	ldr	r6, [r1, #0]
 8006cb4:	602b      	str	r3, [r5, #0]
 8006cb6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006cba:	bf18      	it	ne
 8006cbc:	b236      	sxthne	r6, r6
 8006cbe:	e7ef      	b.n	8006ca0 <_printf_i+0xbc>
 8006cc0:	682b      	ldr	r3, [r5, #0]
 8006cc2:	6820      	ldr	r0, [r4, #0]
 8006cc4:	1d19      	adds	r1, r3, #4
 8006cc6:	6029      	str	r1, [r5, #0]
 8006cc8:	0601      	lsls	r1, r0, #24
 8006cca:	d501      	bpl.n	8006cd0 <_printf_i+0xec>
 8006ccc:	681e      	ldr	r6, [r3, #0]
 8006cce:	e002      	b.n	8006cd6 <_printf_i+0xf2>
 8006cd0:	0646      	lsls	r6, r0, #25
 8006cd2:	d5fb      	bpl.n	8006ccc <_printf_i+0xe8>
 8006cd4:	881e      	ldrh	r6, [r3, #0]
 8006cd6:	4854      	ldr	r0, [pc, #336]	; (8006e28 <_printf_i+0x244>)
 8006cd8:	2f6f      	cmp	r7, #111	; 0x6f
 8006cda:	bf0c      	ite	eq
 8006cdc:	2308      	moveq	r3, #8
 8006cde:	230a      	movne	r3, #10
 8006ce0:	2100      	movs	r1, #0
 8006ce2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006ce6:	6865      	ldr	r5, [r4, #4]
 8006ce8:	60a5      	str	r5, [r4, #8]
 8006cea:	2d00      	cmp	r5, #0
 8006cec:	bfa2      	ittt	ge
 8006cee:	6821      	ldrge	r1, [r4, #0]
 8006cf0:	f021 0104 	bicge.w	r1, r1, #4
 8006cf4:	6021      	strge	r1, [r4, #0]
 8006cf6:	b90e      	cbnz	r6, 8006cfc <_printf_i+0x118>
 8006cf8:	2d00      	cmp	r5, #0
 8006cfa:	d04d      	beq.n	8006d98 <_printf_i+0x1b4>
 8006cfc:	4615      	mov	r5, r2
 8006cfe:	fbb6 f1f3 	udiv	r1, r6, r3
 8006d02:	fb03 6711 	mls	r7, r3, r1, r6
 8006d06:	5dc7      	ldrb	r7, [r0, r7]
 8006d08:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006d0c:	4637      	mov	r7, r6
 8006d0e:	42bb      	cmp	r3, r7
 8006d10:	460e      	mov	r6, r1
 8006d12:	d9f4      	bls.n	8006cfe <_printf_i+0x11a>
 8006d14:	2b08      	cmp	r3, #8
 8006d16:	d10b      	bne.n	8006d30 <_printf_i+0x14c>
 8006d18:	6823      	ldr	r3, [r4, #0]
 8006d1a:	07de      	lsls	r6, r3, #31
 8006d1c:	d508      	bpl.n	8006d30 <_printf_i+0x14c>
 8006d1e:	6923      	ldr	r3, [r4, #16]
 8006d20:	6861      	ldr	r1, [r4, #4]
 8006d22:	4299      	cmp	r1, r3
 8006d24:	bfde      	ittt	le
 8006d26:	2330      	movle	r3, #48	; 0x30
 8006d28:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006d2c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006d30:	1b52      	subs	r2, r2, r5
 8006d32:	6122      	str	r2, [r4, #16]
 8006d34:	f8cd a000 	str.w	sl, [sp]
 8006d38:	464b      	mov	r3, r9
 8006d3a:	aa03      	add	r2, sp, #12
 8006d3c:	4621      	mov	r1, r4
 8006d3e:	4640      	mov	r0, r8
 8006d40:	f7ff fee2 	bl	8006b08 <_printf_common>
 8006d44:	3001      	adds	r0, #1
 8006d46:	d14c      	bne.n	8006de2 <_printf_i+0x1fe>
 8006d48:	f04f 30ff 	mov.w	r0, #4294967295
 8006d4c:	b004      	add	sp, #16
 8006d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d52:	4835      	ldr	r0, [pc, #212]	; (8006e28 <_printf_i+0x244>)
 8006d54:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006d58:	6829      	ldr	r1, [r5, #0]
 8006d5a:	6823      	ldr	r3, [r4, #0]
 8006d5c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006d60:	6029      	str	r1, [r5, #0]
 8006d62:	061d      	lsls	r5, r3, #24
 8006d64:	d514      	bpl.n	8006d90 <_printf_i+0x1ac>
 8006d66:	07df      	lsls	r7, r3, #31
 8006d68:	bf44      	itt	mi
 8006d6a:	f043 0320 	orrmi.w	r3, r3, #32
 8006d6e:	6023      	strmi	r3, [r4, #0]
 8006d70:	b91e      	cbnz	r6, 8006d7a <_printf_i+0x196>
 8006d72:	6823      	ldr	r3, [r4, #0]
 8006d74:	f023 0320 	bic.w	r3, r3, #32
 8006d78:	6023      	str	r3, [r4, #0]
 8006d7a:	2310      	movs	r3, #16
 8006d7c:	e7b0      	b.n	8006ce0 <_printf_i+0xfc>
 8006d7e:	6823      	ldr	r3, [r4, #0]
 8006d80:	f043 0320 	orr.w	r3, r3, #32
 8006d84:	6023      	str	r3, [r4, #0]
 8006d86:	2378      	movs	r3, #120	; 0x78
 8006d88:	4828      	ldr	r0, [pc, #160]	; (8006e2c <_printf_i+0x248>)
 8006d8a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006d8e:	e7e3      	b.n	8006d58 <_printf_i+0x174>
 8006d90:	0659      	lsls	r1, r3, #25
 8006d92:	bf48      	it	mi
 8006d94:	b2b6      	uxthmi	r6, r6
 8006d96:	e7e6      	b.n	8006d66 <_printf_i+0x182>
 8006d98:	4615      	mov	r5, r2
 8006d9a:	e7bb      	b.n	8006d14 <_printf_i+0x130>
 8006d9c:	682b      	ldr	r3, [r5, #0]
 8006d9e:	6826      	ldr	r6, [r4, #0]
 8006da0:	6961      	ldr	r1, [r4, #20]
 8006da2:	1d18      	adds	r0, r3, #4
 8006da4:	6028      	str	r0, [r5, #0]
 8006da6:	0635      	lsls	r5, r6, #24
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	d501      	bpl.n	8006db0 <_printf_i+0x1cc>
 8006dac:	6019      	str	r1, [r3, #0]
 8006dae:	e002      	b.n	8006db6 <_printf_i+0x1d2>
 8006db0:	0670      	lsls	r0, r6, #25
 8006db2:	d5fb      	bpl.n	8006dac <_printf_i+0x1c8>
 8006db4:	8019      	strh	r1, [r3, #0]
 8006db6:	2300      	movs	r3, #0
 8006db8:	6123      	str	r3, [r4, #16]
 8006dba:	4615      	mov	r5, r2
 8006dbc:	e7ba      	b.n	8006d34 <_printf_i+0x150>
 8006dbe:	682b      	ldr	r3, [r5, #0]
 8006dc0:	1d1a      	adds	r2, r3, #4
 8006dc2:	602a      	str	r2, [r5, #0]
 8006dc4:	681d      	ldr	r5, [r3, #0]
 8006dc6:	6862      	ldr	r2, [r4, #4]
 8006dc8:	2100      	movs	r1, #0
 8006dca:	4628      	mov	r0, r5
 8006dcc:	f7f9 fa20 	bl	8000210 <memchr>
 8006dd0:	b108      	cbz	r0, 8006dd6 <_printf_i+0x1f2>
 8006dd2:	1b40      	subs	r0, r0, r5
 8006dd4:	6060      	str	r0, [r4, #4]
 8006dd6:	6863      	ldr	r3, [r4, #4]
 8006dd8:	6123      	str	r3, [r4, #16]
 8006dda:	2300      	movs	r3, #0
 8006ddc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006de0:	e7a8      	b.n	8006d34 <_printf_i+0x150>
 8006de2:	6923      	ldr	r3, [r4, #16]
 8006de4:	462a      	mov	r2, r5
 8006de6:	4649      	mov	r1, r9
 8006de8:	4640      	mov	r0, r8
 8006dea:	47d0      	blx	sl
 8006dec:	3001      	adds	r0, #1
 8006dee:	d0ab      	beq.n	8006d48 <_printf_i+0x164>
 8006df0:	6823      	ldr	r3, [r4, #0]
 8006df2:	079b      	lsls	r3, r3, #30
 8006df4:	d413      	bmi.n	8006e1e <_printf_i+0x23a>
 8006df6:	68e0      	ldr	r0, [r4, #12]
 8006df8:	9b03      	ldr	r3, [sp, #12]
 8006dfa:	4298      	cmp	r0, r3
 8006dfc:	bfb8      	it	lt
 8006dfe:	4618      	movlt	r0, r3
 8006e00:	e7a4      	b.n	8006d4c <_printf_i+0x168>
 8006e02:	2301      	movs	r3, #1
 8006e04:	4632      	mov	r2, r6
 8006e06:	4649      	mov	r1, r9
 8006e08:	4640      	mov	r0, r8
 8006e0a:	47d0      	blx	sl
 8006e0c:	3001      	adds	r0, #1
 8006e0e:	d09b      	beq.n	8006d48 <_printf_i+0x164>
 8006e10:	3501      	adds	r5, #1
 8006e12:	68e3      	ldr	r3, [r4, #12]
 8006e14:	9903      	ldr	r1, [sp, #12]
 8006e16:	1a5b      	subs	r3, r3, r1
 8006e18:	42ab      	cmp	r3, r5
 8006e1a:	dcf2      	bgt.n	8006e02 <_printf_i+0x21e>
 8006e1c:	e7eb      	b.n	8006df6 <_printf_i+0x212>
 8006e1e:	2500      	movs	r5, #0
 8006e20:	f104 0619 	add.w	r6, r4, #25
 8006e24:	e7f5      	b.n	8006e12 <_printf_i+0x22e>
 8006e26:	bf00      	nop
 8006e28:	0800721d 	.word	0x0800721d
 8006e2c:	0800722e 	.word	0x0800722e

08006e30 <_sbrk_r>:
 8006e30:	b538      	push	{r3, r4, r5, lr}
 8006e32:	4d06      	ldr	r5, [pc, #24]	; (8006e4c <_sbrk_r+0x1c>)
 8006e34:	2300      	movs	r3, #0
 8006e36:	4604      	mov	r4, r0
 8006e38:	4608      	mov	r0, r1
 8006e3a:	602b      	str	r3, [r5, #0]
 8006e3c:	f7fa fbf2 	bl	8001624 <_sbrk>
 8006e40:	1c43      	adds	r3, r0, #1
 8006e42:	d102      	bne.n	8006e4a <_sbrk_r+0x1a>
 8006e44:	682b      	ldr	r3, [r5, #0]
 8006e46:	b103      	cbz	r3, 8006e4a <_sbrk_r+0x1a>
 8006e48:	6023      	str	r3, [r4, #0]
 8006e4a:	bd38      	pop	{r3, r4, r5, pc}
 8006e4c:	20004440 	.word	0x20004440

08006e50 <__sread>:
 8006e50:	b510      	push	{r4, lr}
 8006e52:	460c      	mov	r4, r1
 8006e54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e58:	f000 f8ea 	bl	8007030 <_read_r>
 8006e5c:	2800      	cmp	r0, #0
 8006e5e:	bfab      	itete	ge
 8006e60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006e62:	89a3      	ldrhlt	r3, [r4, #12]
 8006e64:	181b      	addge	r3, r3, r0
 8006e66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006e6a:	bfac      	ite	ge
 8006e6c:	6563      	strge	r3, [r4, #84]	; 0x54
 8006e6e:	81a3      	strhlt	r3, [r4, #12]
 8006e70:	bd10      	pop	{r4, pc}

08006e72 <__swrite>:
 8006e72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e76:	461f      	mov	r7, r3
 8006e78:	898b      	ldrh	r3, [r1, #12]
 8006e7a:	05db      	lsls	r3, r3, #23
 8006e7c:	4605      	mov	r5, r0
 8006e7e:	460c      	mov	r4, r1
 8006e80:	4616      	mov	r6, r2
 8006e82:	d505      	bpl.n	8006e90 <__swrite+0x1e>
 8006e84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e88:	2302      	movs	r3, #2
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	f000 f868 	bl	8006f60 <_lseek_r>
 8006e90:	89a3      	ldrh	r3, [r4, #12]
 8006e92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e9a:	81a3      	strh	r3, [r4, #12]
 8006e9c:	4632      	mov	r2, r6
 8006e9e:	463b      	mov	r3, r7
 8006ea0:	4628      	mov	r0, r5
 8006ea2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ea6:	f000 b817 	b.w	8006ed8 <_write_r>

08006eaa <__sseek>:
 8006eaa:	b510      	push	{r4, lr}
 8006eac:	460c      	mov	r4, r1
 8006eae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006eb2:	f000 f855 	bl	8006f60 <_lseek_r>
 8006eb6:	1c43      	adds	r3, r0, #1
 8006eb8:	89a3      	ldrh	r3, [r4, #12]
 8006eba:	bf15      	itete	ne
 8006ebc:	6560      	strne	r0, [r4, #84]	; 0x54
 8006ebe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006ec2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006ec6:	81a3      	strheq	r3, [r4, #12]
 8006ec8:	bf18      	it	ne
 8006eca:	81a3      	strhne	r3, [r4, #12]
 8006ecc:	bd10      	pop	{r4, pc}

08006ece <__sclose>:
 8006ece:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ed2:	f000 b813 	b.w	8006efc <_close_r>
	...

08006ed8 <_write_r>:
 8006ed8:	b538      	push	{r3, r4, r5, lr}
 8006eda:	4d07      	ldr	r5, [pc, #28]	; (8006ef8 <_write_r+0x20>)
 8006edc:	4604      	mov	r4, r0
 8006ede:	4608      	mov	r0, r1
 8006ee0:	4611      	mov	r1, r2
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	602a      	str	r2, [r5, #0]
 8006ee6:	461a      	mov	r2, r3
 8006ee8:	f7fa fb4c 	bl	8001584 <_write>
 8006eec:	1c43      	adds	r3, r0, #1
 8006eee:	d102      	bne.n	8006ef6 <_write_r+0x1e>
 8006ef0:	682b      	ldr	r3, [r5, #0]
 8006ef2:	b103      	cbz	r3, 8006ef6 <_write_r+0x1e>
 8006ef4:	6023      	str	r3, [r4, #0]
 8006ef6:	bd38      	pop	{r3, r4, r5, pc}
 8006ef8:	20004440 	.word	0x20004440

08006efc <_close_r>:
 8006efc:	b538      	push	{r3, r4, r5, lr}
 8006efe:	4d06      	ldr	r5, [pc, #24]	; (8006f18 <_close_r+0x1c>)
 8006f00:	2300      	movs	r3, #0
 8006f02:	4604      	mov	r4, r0
 8006f04:	4608      	mov	r0, r1
 8006f06:	602b      	str	r3, [r5, #0]
 8006f08:	f7fa fb58 	bl	80015bc <_close>
 8006f0c:	1c43      	adds	r3, r0, #1
 8006f0e:	d102      	bne.n	8006f16 <_close_r+0x1a>
 8006f10:	682b      	ldr	r3, [r5, #0]
 8006f12:	b103      	cbz	r3, 8006f16 <_close_r+0x1a>
 8006f14:	6023      	str	r3, [r4, #0]
 8006f16:	bd38      	pop	{r3, r4, r5, pc}
 8006f18:	20004440 	.word	0x20004440

08006f1c <_fstat_r>:
 8006f1c:	b538      	push	{r3, r4, r5, lr}
 8006f1e:	4d07      	ldr	r5, [pc, #28]	; (8006f3c <_fstat_r+0x20>)
 8006f20:	2300      	movs	r3, #0
 8006f22:	4604      	mov	r4, r0
 8006f24:	4608      	mov	r0, r1
 8006f26:	4611      	mov	r1, r2
 8006f28:	602b      	str	r3, [r5, #0]
 8006f2a:	f7fa fb53 	bl	80015d4 <_fstat>
 8006f2e:	1c43      	adds	r3, r0, #1
 8006f30:	d102      	bne.n	8006f38 <_fstat_r+0x1c>
 8006f32:	682b      	ldr	r3, [r5, #0]
 8006f34:	b103      	cbz	r3, 8006f38 <_fstat_r+0x1c>
 8006f36:	6023      	str	r3, [r4, #0]
 8006f38:	bd38      	pop	{r3, r4, r5, pc}
 8006f3a:	bf00      	nop
 8006f3c:	20004440 	.word	0x20004440

08006f40 <_isatty_r>:
 8006f40:	b538      	push	{r3, r4, r5, lr}
 8006f42:	4d06      	ldr	r5, [pc, #24]	; (8006f5c <_isatty_r+0x1c>)
 8006f44:	2300      	movs	r3, #0
 8006f46:	4604      	mov	r4, r0
 8006f48:	4608      	mov	r0, r1
 8006f4a:	602b      	str	r3, [r5, #0]
 8006f4c:	f7fa fb52 	bl	80015f4 <_isatty>
 8006f50:	1c43      	adds	r3, r0, #1
 8006f52:	d102      	bne.n	8006f5a <_isatty_r+0x1a>
 8006f54:	682b      	ldr	r3, [r5, #0]
 8006f56:	b103      	cbz	r3, 8006f5a <_isatty_r+0x1a>
 8006f58:	6023      	str	r3, [r4, #0]
 8006f5a:	bd38      	pop	{r3, r4, r5, pc}
 8006f5c:	20004440 	.word	0x20004440

08006f60 <_lseek_r>:
 8006f60:	b538      	push	{r3, r4, r5, lr}
 8006f62:	4d07      	ldr	r5, [pc, #28]	; (8006f80 <_lseek_r+0x20>)
 8006f64:	4604      	mov	r4, r0
 8006f66:	4608      	mov	r0, r1
 8006f68:	4611      	mov	r1, r2
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	602a      	str	r2, [r5, #0]
 8006f6e:	461a      	mov	r2, r3
 8006f70:	f7fa fb4b 	bl	800160a <_lseek>
 8006f74:	1c43      	adds	r3, r0, #1
 8006f76:	d102      	bne.n	8006f7e <_lseek_r+0x1e>
 8006f78:	682b      	ldr	r3, [r5, #0]
 8006f7a:	b103      	cbz	r3, 8006f7e <_lseek_r+0x1e>
 8006f7c:	6023      	str	r3, [r4, #0]
 8006f7e:	bd38      	pop	{r3, r4, r5, pc}
 8006f80:	20004440 	.word	0x20004440

08006f84 <memmove>:
 8006f84:	4288      	cmp	r0, r1
 8006f86:	b510      	push	{r4, lr}
 8006f88:	eb01 0402 	add.w	r4, r1, r2
 8006f8c:	d902      	bls.n	8006f94 <memmove+0x10>
 8006f8e:	4284      	cmp	r4, r0
 8006f90:	4623      	mov	r3, r4
 8006f92:	d807      	bhi.n	8006fa4 <memmove+0x20>
 8006f94:	1e43      	subs	r3, r0, #1
 8006f96:	42a1      	cmp	r1, r4
 8006f98:	d008      	beq.n	8006fac <memmove+0x28>
 8006f9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006fa2:	e7f8      	b.n	8006f96 <memmove+0x12>
 8006fa4:	4402      	add	r2, r0
 8006fa6:	4601      	mov	r1, r0
 8006fa8:	428a      	cmp	r2, r1
 8006faa:	d100      	bne.n	8006fae <memmove+0x2a>
 8006fac:	bd10      	pop	{r4, pc}
 8006fae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006fb2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006fb6:	e7f7      	b.n	8006fa8 <memmove+0x24>

08006fb8 <__malloc_lock>:
 8006fb8:	4801      	ldr	r0, [pc, #4]	; (8006fc0 <__malloc_lock+0x8>)
 8006fba:	f7ff b9a7 	b.w	800630c <__retarget_lock_acquire_recursive>
 8006fbe:	bf00      	nop
 8006fc0:	20004434 	.word	0x20004434

08006fc4 <__malloc_unlock>:
 8006fc4:	4801      	ldr	r0, [pc, #4]	; (8006fcc <__malloc_unlock+0x8>)
 8006fc6:	f7ff b9a2 	b.w	800630e <__retarget_lock_release_recursive>
 8006fca:	bf00      	nop
 8006fcc:	20004434 	.word	0x20004434

08006fd0 <_realloc_r>:
 8006fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fd4:	4680      	mov	r8, r0
 8006fd6:	4614      	mov	r4, r2
 8006fd8:	460e      	mov	r6, r1
 8006fda:	b921      	cbnz	r1, 8006fe6 <_realloc_r+0x16>
 8006fdc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006fe0:	4611      	mov	r1, r2
 8006fe2:	f7ff ba67 	b.w	80064b4 <_malloc_r>
 8006fe6:	b92a      	cbnz	r2, 8006ff4 <_realloc_r+0x24>
 8006fe8:	f7ff f9f8 	bl	80063dc <_free_r>
 8006fec:	4625      	mov	r5, r4
 8006fee:	4628      	mov	r0, r5
 8006ff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ff4:	f000 f82e 	bl	8007054 <_malloc_usable_size_r>
 8006ff8:	4284      	cmp	r4, r0
 8006ffa:	4607      	mov	r7, r0
 8006ffc:	d802      	bhi.n	8007004 <_realloc_r+0x34>
 8006ffe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007002:	d812      	bhi.n	800702a <_realloc_r+0x5a>
 8007004:	4621      	mov	r1, r4
 8007006:	4640      	mov	r0, r8
 8007008:	f7ff fa54 	bl	80064b4 <_malloc_r>
 800700c:	4605      	mov	r5, r0
 800700e:	2800      	cmp	r0, #0
 8007010:	d0ed      	beq.n	8006fee <_realloc_r+0x1e>
 8007012:	42bc      	cmp	r4, r7
 8007014:	4622      	mov	r2, r4
 8007016:	4631      	mov	r1, r6
 8007018:	bf28      	it	cs
 800701a:	463a      	movcs	r2, r7
 800701c:	f7fe fe9c 	bl	8005d58 <memcpy>
 8007020:	4631      	mov	r1, r6
 8007022:	4640      	mov	r0, r8
 8007024:	f7ff f9da 	bl	80063dc <_free_r>
 8007028:	e7e1      	b.n	8006fee <_realloc_r+0x1e>
 800702a:	4635      	mov	r5, r6
 800702c:	e7df      	b.n	8006fee <_realloc_r+0x1e>
	...

08007030 <_read_r>:
 8007030:	b538      	push	{r3, r4, r5, lr}
 8007032:	4d07      	ldr	r5, [pc, #28]	; (8007050 <_read_r+0x20>)
 8007034:	4604      	mov	r4, r0
 8007036:	4608      	mov	r0, r1
 8007038:	4611      	mov	r1, r2
 800703a:	2200      	movs	r2, #0
 800703c:	602a      	str	r2, [r5, #0]
 800703e:	461a      	mov	r2, r3
 8007040:	f7fa fa83 	bl	800154a <_read>
 8007044:	1c43      	adds	r3, r0, #1
 8007046:	d102      	bne.n	800704e <_read_r+0x1e>
 8007048:	682b      	ldr	r3, [r5, #0]
 800704a:	b103      	cbz	r3, 800704e <_read_r+0x1e>
 800704c:	6023      	str	r3, [r4, #0]
 800704e:	bd38      	pop	{r3, r4, r5, pc}
 8007050:	20004440 	.word	0x20004440

08007054 <_malloc_usable_size_r>:
 8007054:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007058:	1f18      	subs	r0, r3, #4
 800705a:	2b00      	cmp	r3, #0
 800705c:	bfbc      	itt	lt
 800705e:	580b      	ldrlt	r3, [r1, r0]
 8007060:	18c0      	addlt	r0, r0, r3
 8007062:	4770      	bx	lr

08007064 <_init>:
 8007064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007066:	bf00      	nop
 8007068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800706a:	bc08      	pop	{r3}
 800706c:	469e      	mov	lr, r3
 800706e:	4770      	bx	lr

08007070 <_fini>:
 8007070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007072:	bf00      	nop
 8007074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007076:	bc08      	pop	{r3}
 8007078:	469e      	mov	lr, r3
 800707a:	4770      	bx	lr

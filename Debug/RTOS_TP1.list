
RTOS_TP1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060d8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  080062a8  080062a8  000162a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063a4  080063a4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080063a4  080063a4  000163a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080063ac  080063ac  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063ac  080063ac  000163ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063b0  080063b0  000163b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080063b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004070  20000074  08006428  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200040e4  08006428  000240e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000117cb  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ca5  00000000  00000000  0003186f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df0  00000000  00000000  00034518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cb8  00000000  00000000  00035308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028508  00000000  00000000  00035fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000116c9  00000000  00000000  0005e4c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2076  00000000  00000000  0006fb91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00161c07  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d7c  00000000  00000000  00161c58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006290 	.word	0x08006290

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08006290 	.word	0x08006290

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b974 	b.w	8000510 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468e      	mov	lr, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14d      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024e:	428a      	cmp	r2, r1
 8000250:	4694      	mov	ip, r2
 8000252:	d969      	bls.n	8000328 <__udivmoddi4+0xe8>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b152      	cbz	r2, 8000270 <__udivmoddi4+0x30>
 800025a:	fa01 f302 	lsl.w	r3, r1, r2
 800025e:	f1c2 0120 	rsb	r1, r2, #32
 8000262:	fa20 f101 	lsr.w	r1, r0, r1
 8000266:	fa0c fc02 	lsl.w	ip, ip, r2
 800026a:	ea41 0e03 	orr.w	lr, r1, r3
 800026e:	4094      	lsls	r4, r2
 8000270:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000274:	0c21      	lsrs	r1, r4, #16
 8000276:	fbbe f6f8 	udiv	r6, lr, r8
 800027a:	fa1f f78c 	uxth.w	r7, ip
 800027e:	fb08 e316 	mls	r3, r8, r6, lr
 8000282:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000286:	fb06 f107 	mul.w	r1, r6, r7
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295
 8000296:	f080 811f 	bcs.w	80004d8 <__udivmoddi4+0x298>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 811c 	bls.w	80004d8 <__udivmoddi4+0x298>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 f707 	mul.w	r7, r0, r7
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x92>
 80002bc:	eb1c 0404 	adds.w	r4, ip, r4
 80002c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c4:	f080 810a 	bcs.w	80004dc <__udivmoddi4+0x29c>
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	f240 8107 	bls.w	80004dc <__udivmoddi4+0x29c>
 80002ce:	4464      	add	r4, ip
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d6:	1be4      	subs	r4, r4, r7
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa4>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xc2>
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	f000 80ef 	beq.w	80004d2 <__udivmoddi4+0x292>
 80002f4:	2600      	movs	r6, #0
 80002f6:	e9c5 0100 	strd	r0, r1, [r5]
 80002fa:	4630      	mov	r0, r6
 80002fc:	4631      	mov	r1, r6
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f683 	clz	r6, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d14a      	bne.n	80003a0 <__udivmoddi4+0x160>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd4>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80f9 	bhi.w	8000506 <__udivmoddi4+0x2c6>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	469e      	mov	lr, r3
 800031e:	2d00      	cmp	r5, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa4>
 8000322:	e9c5 4e00 	strd	r4, lr, [r5]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa4>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xec>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 8092 	bne.w	800045a <__udivmoddi4+0x21a>
 8000336:	eba1 010c 	sub.w	r1, r1, ip
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2601      	movs	r6, #1
 8000344:	0c20      	lsrs	r0, r4, #16
 8000346:	fbb1 f3f7 	udiv	r3, r1, r7
 800034a:	fb07 1113 	mls	r1, r7, r3, r1
 800034e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000352:	fb0e f003 	mul.w	r0, lr, r3
 8000356:	4288      	cmp	r0, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x12c>
 800035a:	eb1c 0101 	adds.w	r1, ip, r1
 800035e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x12a>
 8000364:	4288      	cmp	r0, r1
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2c0>
 800036a:	4643      	mov	r3, r8
 800036c:	1a09      	subs	r1, r1, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb1 f0f7 	udiv	r0, r1, r7
 8000374:	fb07 1110 	mls	r1, r7, r0, r1
 8000378:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x156>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 31ff 	add.w	r1, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x154>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2ca>
 8000394:	4608      	mov	r0, r1
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800039e:	e79c      	b.n	80002da <__udivmoddi4+0x9a>
 80003a0:	f1c6 0720 	rsb	r7, r6, #32
 80003a4:	40b3      	lsls	r3, r6
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa20 f407 	lsr.w	r4, r0, r7
 80003b2:	fa01 f306 	lsl.w	r3, r1, r6
 80003b6:	431c      	orrs	r4, r3
 80003b8:	40f9      	lsrs	r1, r7
 80003ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003be:	fa00 f306 	lsl.w	r3, r0, r6
 80003c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003c6:	0c20      	lsrs	r0, r4, #16
 80003c8:	fa1f fe8c 	uxth.w	lr, ip
 80003cc:	fb09 1118 	mls	r1, r9, r8, r1
 80003d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d4:	fb08 f00e 	mul.w	r0, r8, lr
 80003d8:	4288      	cmp	r0, r1
 80003da:	fa02 f206 	lsl.w	r2, r2, r6
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b8>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2bc>
 80003ec:	4288      	cmp	r0, r1
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2bc>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4461      	add	r1, ip
 80003f8:	1a09      	subs	r1, r1, r0
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000400:	fb09 1110 	mls	r1, r9, r0, r1
 8000404:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000408:	fb00 fe0e 	mul.w	lr, r0, lr
 800040c:	458e      	cmp	lr, r1
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1e2>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f100 34ff 	add.w	r4, r0, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2b4>
 800041a:	458e      	cmp	lr, r1
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2b4>
 800041e:	3802      	subs	r0, #2
 8000420:	4461      	add	r1, ip
 8000422:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000426:	fba0 9402 	umull	r9, r4, r0, r2
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	42a1      	cmp	r1, r4
 8000430:	46c8      	mov	r8, r9
 8000432:	46a6      	mov	lr, r4
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x2a4>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x2a0>
 8000438:	b15d      	cbz	r5, 8000452 <__udivmoddi4+0x212>
 800043a:	ebb3 0208 	subs.w	r2, r3, r8
 800043e:	eb61 010e 	sbc.w	r1, r1, lr
 8000442:	fa01 f707 	lsl.w	r7, r1, r7
 8000446:	fa22 f306 	lsr.w	r3, r2, r6
 800044a:	40f1      	lsrs	r1, r6
 800044c:	431f      	orrs	r7, r3
 800044e:	e9c5 7100 	strd	r7, r1, [r5]
 8000452:	2600      	movs	r6, #0
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d8      	lsrs	r0, r3
 8000460:	fa0c fc02 	lsl.w	ip, ip, r2
 8000464:	fa21 f303 	lsr.w	r3, r1, r3
 8000468:	4091      	lsls	r1, r2
 800046a:	4301      	orrs	r1, r0
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb3 f0f7 	udiv	r0, r3, r7
 8000478:	fb07 3610 	mls	r6, r7, r0, r3
 800047c:	0c0b      	lsrs	r3, r1, #16
 800047e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000482:	fb00 f60e 	mul.w	r6, r0, lr
 8000486:	429e      	cmp	r6, r3
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x260>
 800048e:	eb1c 0303 	adds.w	r3, ip, r3
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b8>
 8000498:	429e      	cmp	r6, r3
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b8>
 800049c:	3802      	subs	r0, #2
 800049e:	4463      	add	r3, ip
 80004a0:	1b9b      	subs	r3, r3, r6
 80004a2:	b289      	uxth	r1, r1
 80004a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b0:	fb06 f30e 	mul.w	r3, r6, lr
 80004b4:	428b      	cmp	r3, r1
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x28a>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 80004c2:	428b      	cmp	r3, r1
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 80004c6:	3e02      	subs	r6, #2
 80004c8:	4461      	add	r1, ip
 80004ca:	1ac9      	subs	r1, r1, r3
 80004cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0x104>
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e705      	b.n	80002e4 <__udivmoddi4+0xa4>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e3      	b.n	80002a4 <__udivmoddi4+0x64>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6f8      	b.n	80002d2 <__udivmoddi4+0x92>
 80004e0:	454b      	cmp	r3, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f8>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f8>
 80004f0:	4646      	mov	r6, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x28a>
 80004f4:	4620      	mov	r0, r4
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1e2>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x260>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b8>
 8000500:	3b02      	subs	r3, #2
 8000502:	4461      	add	r1, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x12c>
 8000506:	4630      	mov	r0, r6
 8000508:	e709      	b.n	800031e <__udivmoddi4+0xde>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x156>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000514:	b480      	push	{r7}
 8000516:	b085      	sub	sp, #20
 8000518:	af00      	add	r7, sp, #0
 800051a:	60f8      	str	r0, [r7, #12]
 800051c:	60b9      	str	r1, [r7, #8]
 800051e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	4a07      	ldr	r2, [pc, #28]	; (8000540 <vApplicationGetIdleTaskMemory+0x2c>)
 8000524:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000526:	68bb      	ldr	r3, [r7, #8]
 8000528:	4a06      	ldr	r2, [pc, #24]	; (8000544 <vApplicationGetIdleTaskMemory+0x30>)
 800052a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	2280      	movs	r2, #128	; 0x80
 8000530:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000532:	bf00      	nop
 8000534:	3714      	adds	r7, #20
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	20000094 	.word	0x20000094
 8000544:	200000e8 	.word	0x200000e8

08000548 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000548:	b5b0      	push	{r4, r5, r7, lr}
 800054a:	b088      	sub	sp, #32
 800054c:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800054e:	4b0a      	ldr	r3, [pc, #40]	; (8000578 <MX_FREERTOS_Init+0x30>)
 8000550:	1d3c      	adds	r4, r7, #4
 8000552:	461d      	mov	r5, r3
 8000554:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000556:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000558:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800055c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000560:	1d3b      	adds	r3, r7, #4
 8000562:	2100      	movs	r1, #0
 8000564:	4618      	mov	r0, r3
 8000566:	f003 f85d 	bl	8003624 <osThreadCreate>
 800056a:	4603      	mov	r3, r0
 800056c:	4a03      	ldr	r2, [pc, #12]	; (800057c <MX_FREERTOS_Init+0x34>)
 800056e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000570:	bf00      	nop
 8000572:	3720      	adds	r7, #32
 8000574:	46bd      	mov	sp, r7
 8000576:	bdb0      	pop	{r4, r5, r7, pc}
 8000578:	080062b4 	.word	0x080062b4
 800057c:	20000090 	.word	0x20000090

08000580 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000588:	2001      	movs	r0, #1
 800058a:	f003 f897 	bl	80036bc <osDelay>
 800058e:	e7fb      	b.n	8000588 <StartDefaultTask+0x8>

08000590 <MX_GPIO_Init>:
     PB11   ------> USB_OTG_HS_ULPI_D4
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
void MX_GPIO_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b090      	sub	sp, #64	; 0x40
 8000594:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000596:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
 800059e:	605a      	str	r2, [r3, #4]
 80005a0:	609a      	str	r2, [r3, #8]
 80005a2:	60da      	str	r2, [r3, #12]
 80005a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005a6:	4bad      	ldr	r3, [pc, #692]	; (800085c <MX_GPIO_Init+0x2cc>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	4aac      	ldr	r2, [pc, #688]	; (800085c <MX_GPIO_Init+0x2cc>)
 80005ac:	f043 0310 	orr.w	r3, r3, #16
 80005b0:	6313      	str	r3, [r2, #48]	; 0x30
 80005b2:	4baa      	ldr	r3, [pc, #680]	; (800085c <MX_GPIO_Init+0x2cc>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	f003 0310 	and.w	r3, r3, #16
 80005ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80005bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80005be:	4ba7      	ldr	r3, [pc, #668]	; (800085c <MX_GPIO_Init+0x2cc>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	4aa6      	ldr	r2, [pc, #664]	; (800085c <MX_GPIO_Init+0x2cc>)
 80005c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005c8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ca:	4ba4      	ldr	r3, [pc, #656]	; (800085c <MX_GPIO_Init+0x2cc>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005d2:	627b      	str	r3, [r7, #36]	; 0x24
 80005d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d6:	4ba1      	ldr	r3, [pc, #644]	; (800085c <MX_GPIO_Init+0x2cc>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	4aa0      	ldr	r2, [pc, #640]	; (800085c <MX_GPIO_Init+0x2cc>)
 80005dc:	f043 0302 	orr.w	r3, r3, #2
 80005e0:	6313      	str	r3, [r2, #48]	; 0x30
 80005e2:	4b9e      	ldr	r3, [pc, #632]	; (800085c <MX_GPIO_Init+0x2cc>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	f003 0302 	and.w	r3, r3, #2
 80005ea:	623b      	str	r3, [r7, #32]
 80005ec:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005ee:	4b9b      	ldr	r3, [pc, #620]	; (800085c <MX_GPIO_Init+0x2cc>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	4a9a      	ldr	r2, [pc, #616]	; (800085c <MX_GPIO_Init+0x2cc>)
 80005f4:	f043 0308 	orr.w	r3, r3, #8
 80005f8:	6313      	str	r3, [r2, #48]	; 0x30
 80005fa:	4b98      	ldr	r3, [pc, #608]	; (800085c <MX_GPIO_Init+0x2cc>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	f003 0308 	and.w	r3, r3, #8
 8000602:	61fb      	str	r3, [r7, #28]
 8000604:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000606:	4b95      	ldr	r3, [pc, #596]	; (800085c <MX_GPIO_Init+0x2cc>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	4a94      	ldr	r2, [pc, #592]	; (800085c <MX_GPIO_Init+0x2cc>)
 800060c:	f043 0304 	orr.w	r3, r3, #4
 8000610:	6313      	str	r3, [r2, #48]	; 0x30
 8000612:	4b92      	ldr	r3, [pc, #584]	; (800085c <MX_GPIO_Init+0x2cc>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	f003 0304 	and.w	r3, r3, #4
 800061a:	61bb      	str	r3, [r7, #24]
 800061c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800061e:	4b8f      	ldr	r3, [pc, #572]	; (800085c <MX_GPIO_Init+0x2cc>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	4a8e      	ldr	r2, [pc, #568]	; (800085c <MX_GPIO_Init+0x2cc>)
 8000624:	f043 0301 	orr.w	r3, r3, #1
 8000628:	6313      	str	r3, [r2, #48]	; 0x30
 800062a:	4b8c      	ldr	r3, [pc, #560]	; (800085c <MX_GPIO_Init+0x2cc>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	f003 0301 	and.w	r3, r3, #1
 8000632:	617b      	str	r3, [r7, #20]
 8000634:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000636:	4b89      	ldr	r3, [pc, #548]	; (800085c <MX_GPIO_Init+0x2cc>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	4a88      	ldr	r2, [pc, #544]	; (800085c <MX_GPIO_Init+0x2cc>)
 800063c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000640:	6313      	str	r3, [r2, #48]	; 0x30
 8000642:	4b86      	ldr	r3, [pc, #536]	; (800085c <MX_GPIO_Init+0x2cc>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800064a:	613b      	str	r3, [r7, #16]
 800064c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800064e:	4b83      	ldr	r3, [pc, #524]	; (800085c <MX_GPIO_Init+0x2cc>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	4a82      	ldr	r2, [pc, #520]	; (800085c <MX_GPIO_Init+0x2cc>)
 8000654:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000658:	6313      	str	r3, [r2, #48]	; 0x30
 800065a:	4b80      	ldr	r3, [pc, #512]	; (800085c <MX_GPIO_Init+0x2cc>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000662:	60fb      	str	r3, [r7, #12]
 8000664:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000666:	4b7d      	ldr	r3, [pc, #500]	; (800085c <MX_GPIO_Init+0x2cc>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	4a7c      	ldr	r2, [pc, #496]	; (800085c <MX_GPIO_Init+0x2cc>)
 800066c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000670:	6313      	str	r3, [r2, #48]	; 0x30
 8000672:	4b7a      	ldr	r3, [pc, #488]	; (800085c <MX_GPIO_Init+0x2cc>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800067a:	60bb      	str	r3, [r7, #8]
 800067c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800067e:	4b77      	ldr	r3, [pc, #476]	; (800085c <MX_GPIO_Init+0x2cc>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	4a76      	ldr	r2, [pc, #472]	; (800085c <MX_GPIO_Init+0x2cc>)
 8000684:	f043 0320 	orr.w	r3, r3, #32
 8000688:	6313      	str	r3, [r2, #48]	; 0x30
 800068a:	4b74      	ldr	r3, [pc, #464]	; (800085c <MX_GPIO_Init+0x2cc>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	f003 0320 	and.w	r3, r3, #32
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000696:	4b71      	ldr	r3, [pc, #452]	; (800085c <MX_GPIO_Init+0x2cc>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	4a70      	ldr	r2, [pc, #448]	; (800085c <MX_GPIO_Init+0x2cc>)
 800069c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006a0:	6313      	str	r3, [r2, #48]	; 0x30
 80006a2:	4b6e      	ldr	r3, [pc, #440]	; (800085c <MX_GPIO_Init+0x2cc>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006aa:	603b      	str	r3, [r7, #0]
 80006ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80006ae:	2201      	movs	r2, #1
 80006b0:	2120      	movs	r1, #32
 80006b2:	486b      	ldr	r0, [pc, #428]	; (8000860 <MX_GPIO_Init+0x2d0>)
 80006b4:	f001 f9de 	bl	8001a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LED_Green_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 80006b8:	2200      	movs	r2, #0
 80006ba:	f241 010e 	movw	r1, #4110	; 0x100e
 80006be:	4869      	ldr	r0, [pc, #420]	; (8000864 <MX_GPIO_Init+0x2d4>)
 80006c0:	f001 f9d8 	bl	8001a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 80006c4:	2200      	movs	r2, #0
 80006c6:	2108      	movs	r1, #8
 80006c8:	4867      	ldr	r0, [pc, #412]	; (8000868 <MX_GPIO_Init+0x2d8>)
 80006ca:	f001 f9d3 	bl	8001a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80006ce:	2200      	movs	r2, #0
 80006d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006d4:	4865      	ldr	r0, [pc, #404]	; (800086c <MX_GPIO_Init+0x2dc>)
 80006d6:	f001 f9cd 	bl	8001a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80006da:	2200      	movs	r2, #0
 80006dc:	21c8      	movs	r1, #200	; 0xc8
 80006de:	4864      	ldr	r0, [pc, #400]	; (8000870 <MX_GPIO_Init+0x2e0>)
 80006e0:	f001 f9c8 	bl	8001a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 80006e4:	2310      	movs	r3, #16
 80006e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e8:	2302      	movs	r3, #2
 80006ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ec:	2300      	movs	r3, #0
 80006ee:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f0:	2300      	movs	r3, #0
 80006f2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80006f4:	230e      	movs	r3, #14
 80006f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80006f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006fc:	4619      	mov	r1, r3
 80006fe:	485d      	ldr	r0, [pc, #372]	; (8000874 <MX_GPIO_Init+0x2e4>)
 8000700:	f001 f80c 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8000704:	2308      	movs	r3, #8
 8000706:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000708:	2300      	movs	r3, #0
 800070a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070c:	2300      	movs	r3, #0
 800070e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000710:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000714:	4619      	mov	r1, r3
 8000716:	4857      	ldr	r0, [pc, #348]	; (8000874 <MX_GPIO_Init+0x2e4>)
 8000718:	f001 f800 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800071c:	2304      	movs	r3, #4
 800071e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000720:	2302      	movs	r3, #2
 8000722:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	2300      	movs	r3, #0
 8000726:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000728:	2303      	movs	r3, #3
 800072a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800072c:	2309      	movs	r3, #9
 800072e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8000730:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000734:	4619      	mov	r1, r3
 8000736:	484f      	ldr	r0, [pc, #316]	; (8000874 <MX_GPIO_Init+0x2e4>)
 8000738:	f000 fff0 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 800073c:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8000740:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000742:	2302      	movs	r3, #2
 8000744:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	2300      	movs	r3, #0
 8000748:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800074a:	2303      	movs	r3, #3
 800074c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800074e:	230b      	movs	r3, #11
 8000750:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000752:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000756:	4619      	mov	r1, r3
 8000758:	4845      	ldr	r0, [pc, #276]	; (8000870 <MX_GPIO_Init+0x2e0>)
 800075a:	f000 ffdf 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 800075e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000762:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000764:	2302      	movs	r3, #2
 8000766:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000768:	2300      	movs	r3, #0
 800076a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800076c:	2303      	movs	r3, #3
 800076e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000770:	230c      	movs	r3, #12
 8000772:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000774:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000778:	4619      	mov	r1, r3
 800077a:	483e      	ldr	r0, [pc, #248]	; (8000874 <MX_GPIO_Init+0x2e4>)
 800077c:	f000 ffce 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8000780:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000784:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000786:	2312      	movs	r3, #18
 8000788:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078e:	2300      	movs	r3, #0
 8000790:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000792:	2304      	movs	r3, #4
 8000794:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000796:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800079a:	4619      	mov	r1, r3
 800079c:	4836      	ldr	r0, [pc, #216]	; (8000878 <MX_GPIO_Init+0x2e8>)
 800079e:	f000 ffbd 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80007a2:	f643 4321 	movw	r3, #15393	; 0x3c21
 80007a6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a8:	2302      	movs	r3, #2
 80007aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007b0:	2303      	movs	r3, #3
 80007b2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80007b4:	230a      	movs	r3, #10
 80007b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007bc:	4619      	mov	r1, r3
 80007be:	482e      	ldr	r0, [pc, #184]	; (8000878 <MX_GPIO_Init+0x2e8>)
 80007c0:	f000 ffac 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80007c4:	2310      	movs	r3, #16
 80007c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c8:	2302      	movs	r3, #2
 80007ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d0:	2300      	movs	r3, #0
 80007d2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80007d4:	2302      	movs	r3, #2
 80007d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80007d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007dc:	4619      	mov	r1, r3
 80007de:	4826      	ldr	r0, [pc, #152]	; (8000878 <MX_GPIO_Init+0x2e8>)
 80007e0:	f000 ff9c 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80007e4:	2380      	movs	r3, #128	; 0x80
 80007e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e8:	2302      	movs	r3, #2
 80007ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f0:	2300      	movs	r3, #0
 80007f2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80007f4:	2308      	movs	r3, #8
 80007f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80007f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007fc:	4619      	mov	r1, r3
 80007fe:	4818      	ldr	r0, [pc, #96]	; (8000860 <MX_GPIO_Init+0x2d0>)
 8000800:	f000 ff8c 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8000804:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000808:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080a:	2302      	movs	r3, #2
 800080c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000812:	2303      	movs	r3, #3
 8000814:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000816:	230c      	movs	r3, #12
 8000818:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800081a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800081e:	4619      	mov	r1, r3
 8000820:	4816      	ldr	r0, [pc, #88]	; (800087c <MX_GPIO_Init+0x2ec>)
 8000822:	f000 ff7b 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8000826:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800082a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082c:	2302      	movs	r3, #2
 800082e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000834:	2300      	movs	r3, #0
 8000836:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000838:	2301      	movs	r3, #1
 800083a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 800083c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000840:	4619      	mov	r1, r3
 8000842:	480f      	ldr	r0, [pc, #60]	; (8000880 <MX_GPIO_Init+0x2f0>)
 8000844:	f000 ff6a 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8000848:	2360      	movs	r3, #96	; 0x60
 800084a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084c:	2302      	movs	r3, #2
 800084e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000854:	2300      	movs	r3, #0
 8000856:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000858:	230d      	movs	r3, #13
 800085a:	e013      	b.n	8000884 <MX_GPIO_Init+0x2f4>
 800085c:	40023800 	.word	0x40023800
 8000860:	40020c00 	.word	0x40020c00
 8000864:	40022000 	.word	0x40022000
 8000868:	40022800 	.word	0x40022800
 800086c:	40021c00 	.word	0x40021c00
 8000870:	40021800 	.word	0x40021800
 8000874:	40021000 	.word	0x40021000
 8000878:	40020400 	.word	0x40020400
 800087c:	40020800 	.word	0x40020800
 8000880:	40020000 	.word	0x40020000
 8000884:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000886:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800088a:	4619      	mov	r1, r3
 800088c:	48bc      	ldr	r0, [pc, #752]	; (8000b80 <MX_GPIO_Init+0x5f0>)
 800088e:	f000 ff45 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8000892:	2340      	movs	r3, #64	; 0x40
 8000894:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000896:	2302      	movs	r3, #2
 8000898:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800089e:	2303      	movs	r3, #3
 80008a0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80008a2:	230a      	movs	r3, #10
 80008a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 80008a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008aa:	4619      	mov	r1, r3
 80008ac:	48b5      	ldr	r0, [pc, #724]	; (8000b84 <MX_GPIO_Init+0x5f4>)
 80008ae:	f000 ff35 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80008b2:	f248 1333 	movw	r3, #33075	; 0x8133
 80008b6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b8:	2302      	movs	r3, #2
 80008ba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c0:	2303      	movs	r3, #3
 80008c2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008c4:	230c      	movs	r3, #12
 80008c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008cc:	4619      	mov	r1, r3
 80008ce:	48ae      	ldr	r0, [pc, #696]	; (8000b88 <MX_GPIO_Init+0x5f8>)
 80008d0:	f000 ff24 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80008d4:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80008d8:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008da:	2302      	movs	r3, #2
 80008dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e2:	2300      	movs	r3, #0
 80008e4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80008e6:	230e      	movs	r3, #14
 80008e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80008ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008ee:	4619      	mov	r1, r3
 80008f0:	48a6      	ldr	r0, [pc, #664]	; (8000b8c <MX_GPIO_Init+0x5fc>)
 80008f2:	f000 ff13 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80008f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008fc:	2300      	movs	r3, #0
 80008fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000904:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000908:	4619      	mov	r1, r3
 800090a:	48a0      	ldr	r0, [pc, #640]	; (8000b8c <MX_GPIO_Init+0x5fc>)
 800090c:	f000 ff06 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000910:	2340      	movs	r3, #64	; 0x40
 8000912:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000914:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000918:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800091e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000922:	4619      	mov	r1, r3
 8000924:	489a      	ldr	r0, [pc, #616]	; (8000b90 <MX_GPIO_Init+0x600>)
 8000926:	f000 fef9 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 800092a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800092e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000930:	2302      	movs	r3, #2
 8000932:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000938:	2303      	movs	r3, #3
 800093a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800093c:	230c      	movs	r3, #12
 800093e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000940:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000944:	4619      	mov	r1, r3
 8000946:	4892      	ldr	r0, [pc, #584]	; (8000b90 <MX_GPIO_Init+0x600>)
 8000948:	f000 fee8 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 800094c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000950:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000952:	2302      	movs	r3, #2
 8000954:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800095a:	2303      	movs	r3, #3
 800095c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800095e:	230a      	movs	r3, #10
 8000960:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000962:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000966:	4619      	mov	r1, r3
 8000968:	488a      	ldr	r0, [pc, #552]	; (8000b94 <MX_GPIO_Init+0x604>)
 800096a:	f000 fed7 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 800096e:	23f0      	movs	r3, #240	; 0xf0
 8000970:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000972:	2302      	movs	r3, #2
 8000974:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097a:	2300      	movs	r3, #0
 800097c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800097e:	230a      	movs	r3, #10
 8000980:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000982:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000986:	4619      	mov	r1, r3
 8000988:	4883      	ldr	r0, [pc, #524]	; (8000b98 <MX_GPIO_Init+0x608>)
 800098a:	f000 fec7 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pins : PKPin PKPin PKPin PKPin
                           PKPin PKPin PKPin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 800098e:	23f7      	movs	r3, #247	; 0xf7
 8000990:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000992:	2302      	movs	r3, #2
 8000994:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099a:	2300      	movs	r3, #0
 800099c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800099e:	230e      	movs	r3, #14
 80009a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80009a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009a6:	4619      	mov	r1, r3
 80009a8:	487c      	ldr	r0, [pc, #496]	; (8000b9c <MX_GPIO_Init+0x60c>)
 80009aa:	f000 feb7 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 80009ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b4:	2302      	movs	r3, #2
 80009b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009bc:	2300      	movs	r3, #0
 80009be:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80009c0:	2309      	movs	r3, #9
 80009c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80009c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009c8:	4619      	mov	r1, r3
 80009ca:	486f      	ldr	r0, [pc, #444]	; (8000b88 <MX_GPIO_Init+0x5f8>)
 80009cc:	f000 fea6 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80009d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d6:	2302      	movs	r3, #2
 80009d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009de:	2300      	movs	r3, #0
 80009e0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80009e2:	230a      	movs	r3, #10
 80009e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80009e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009ea:	4619      	mov	r1, r3
 80009ec:	4866      	ldr	r0, [pc, #408]	; (8000b88 <MX_GPIO_Init+0x5f8>)
 80009ee:	f000 fe95 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80009f2:	2320      	movs	r3, #32
 80009f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f6:	2301      	movs	r3, #1
 80009f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fe:	2300      	movs	r3, #0
 8000a00:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a06:	4619      	mov	r1, r3
 8000a08:	4861      	ldr	r0, [pc, #388]	; (8000b90 <MX_GPIO_Init+0x600>)
 8000a0a:	f000 fe87 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000a0e:	2308      	movs	r3, #8
 8000a10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a12:	2302      	movs	r3, #2
 8000a14:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000a1e:	230d      	movs	r3, #13
 8000a20:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000a22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a26:	4619      	mov	r1, r3
 8000a28:	4859      	ldr	r0, [pc, #356]	; (8000b90 <MX_GPIO_Init+0x600>)
 8000a2a:	f000 fe77 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LED_Green_Pin|LCD_DISP_Pin;
 8000a2e:	f241 030e 	movw	r3, #4110	; 0x100e
 8000a32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a34:	2301      	movs	r3, #1
 8000a36:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a44:	4619      	mov	r1, r3
 8000a46:	4854      	ldr	r0, [pc, #336]	; (8000b98 <MX_GPIO_Init+0x608>)
 8000a48:	f000 fe68 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000a4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a50:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a52:	2300      	movs	r3, #0
 8000a54:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000a5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a5e:	4619      	mov	r1, r3
 8000a60:	484f      	ldr	r0, [pc, #316]	; (8000ba0 <MX_GPIO_Init+0x610>)
 8000a62:	f000 fe5b 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000a66:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a74:	2303      	movs	r3, #3
 8000a76:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a78:	230c      	movs	r3, #12
 8000a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a80:	4619      	mov	r1, r3
 8000a82:	4848      	ldr	r0, [pc, #288]	; (8000ba4 <MX_GPIO_Init+0x614>)
 8000a84:	f000 fe4a 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8000a88:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8000a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a96:	2300      	movs	r3, #0
 8000a98:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a9a:	230e      	movs	r3, #14
 8000a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	483c      	ldr	r0, [pc, #240]	; (8000b98 <MX_GPIO_Init+0x608>)
 8000aa6:	f000 fe39 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000aaa:	2308      	movs	r3, #8
 8000aac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000aba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4836      	ldr	r0, [pc, #216]	; (8000b9c <MX_GPIO_Init+0x60c>)
 8000ac2:	f000 fe2b 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000ac6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000aca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000acc:	2302      	movs	r3, #2
 8000ace:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000ad8:	230d      	movs	r3, #13
 8000ada:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000adc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4829      	ldr	r0, [pc, #164]	; (8000b88 <MX_GPIO_Init+0x5f8>)
 8000ae4:	f000 fe1a 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000ae8:	2310      	movs	r3, #16
 8000aea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aec:	2300      	movs	r3, #0
 8000aee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000af4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000af8:	4619      	mov	r1, r3
 8000afa:	4825      	ldr	r0, [pc, #148]	; (8000b90 <MX_GPIO_Init+0x600>)
 8000afc:	f000 fe0e 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8000b00:	2304      	movs	r3, #4
 8000b02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b04:	2302      	movs	r3, #2
 8000b06:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0c:	2303      	movs	r3, #3
 8000b0e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000b10:	230c      	movs	r3, #12
 8000b12:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8000b14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b18:	4619      	mov	r1, r3
 8000b1a:	481d      	ldr	r0, [pc, #116]	; (8000b90 <MX_GPIO_Init+0x600>)
 8000b1c:	f000 fdfe 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000b20:	f248 0304 	movw	r3, #32772	; 0x8004
 8000b24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b26:	2300      	movs	r3, #0
 8000b28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000b2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b32:	4619      	mov	r1, r3
 8000b34:	481c      	ldr	r0, [pc, #112]	; (8000ba8 <MX_GPIO_Init+0x618>)
 8000b36:	f000 fdf1 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000b3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b40:	2301      	movs	r3, #1
 8000b42:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000b4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b50:	4619      	mov	r1, r3
 8000b52:	4815      	ldr	r0, [pc, #84]	; (8000ba8 <MX_GPIO_Init+0x618>)
 8000b54:	f000 fde2 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin
                           PHPin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000b58:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8000b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b66:	2300      	movs	r3, #0
 8000b68:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000b6a:	230d      	movs	r3, #13
 8000b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000b6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b72:	4619      	mov	r1, r3
 8000b74:	480c      	ldr	r0, [pc, #48]	; (8000ba8 <MX_GPIO_Init+0x618>)
 8000b76:	f000 fdd1 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e016      	b.n	8000bac <MX_GPIO_Init+0x61c>
 8000b7e:	bf00      	nop
 8000b80:	40021000 	.word	0x40021000
 8000b84:	40020400 	.word	0x40020400
 8000b88:	40021800 	.word	0x40021800
 8000b8c:	40022400 	.word	0x40022400
 8000b90:	40020c00 	.word	0x40020c00
 8000b94:	40020000 	.word	0x40020000
 8000b98:	40022000 	.word	0x40022000
 8000b9c:	40022800 	.word	0x40022800
 8000ba0:	40020800 	.word	0x40020800
 8000ba4:	40021400 	.word	0x40021400
 8000ba8:	40021c00 	.word	0x40021c00
 8000bac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8000bbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	48a4      	ldr	r0, [pc, #656]	; (8000e58 <MX_GPIO_Init+0x8c8>)
 8000bc6:	f000 fda9 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PUSH_Pin;
 8000bca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000bce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(PUSH_GPIO_Port, &GPIO_InitStruct);
 8000bd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bdc:	4619      	mov	r1, r3
 8000bde:	489e      	ldr	r0, [pc, #632]	; (8000e58 <MX_GPIO_Init+0x8c8>)
 8000be0:	f000 fd9c 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8000be4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000be8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bea:	2302      	movs	r3, #2
 8000bec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8000bfa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4896      	ldr	r0, [pc, #600]	; (8000e5c <MX_GPIO_Init+0x8cc>)
 8000c02:	f000 fd8b 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000c06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c0c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c10:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000c16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	488e      	ldr	r0, [pc, #568]	; (8000e58 <MX_GPIO_Init+0x8c8>)
 8000c1e:	f000 fd7d 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8000c22:	23c0      	movs	r3, #192	; 0xc0
 8000c24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c26:	2302      	movs	r3, #2
 8000c28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c2e:	2303      	movs	r3, #3
 8000c30:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000c32:	2308      	movs	r3, #8
 8000c34:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4888      	ldr	r0, [pc, #544]	; (8000e60 <MX_GPIO_Init+0x8d0>)
 8000c3e:	f000 fd6d 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000c42:	2310      	movs	r3, #16
 8000c44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c46:	2302      	movs	r3, #2
 8000c48:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c4e:	2303      	movs	r3, #3
 8000c50:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000c52:	230a      	movs	r3, #10
 8000c54:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000c56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4881      	ldr	r0, [pc, #516]	; (8000e64 <MX_GPIO_Init+0x8d4>)
 8000c5e:	f000 fd5d 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000c62:	2328      	movs	r3, #40	; 0x28
 8000c64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c66:	2302      	movs	r3, #2
 8000c68:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6e:	2303      	movs	r3, #3
 8000c70:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c72:	230c      	movs	r3, #12
 8000c74:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4879      	ldr	r0, [pc, #484]	; (8000e64 <MX_GPIO_Init+0x8d4>)
 8000c7e:	f000 fd4d 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8000c82:	23c8      	movs	r3, #200	; 0xc8
 8000c84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c86:	2301      	movs	r3, #1
 8000c88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c96:	4619      	mov	r1, r3
 8000c98:	4873      	ldr	r0, [pc, #460]	; (8000e68 <MX_GPIO_Init+0x8d8>)
 8000c9a:	f000 fd3f 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8000c9e:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8000ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ca4:	2303      	movs	r3, #3
 8000ca6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000cac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	486e      	ldr	r0, [pc, #440]	; (8000e6c <MX_GPIO_Init+0x8dc>)
 8000cb4:	f000 fd32 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000cb8:	2308      	movs	r3, #8
 8000cba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000cc8:	230c      	movs	r3, #12
 8000cca:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000ccc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4863      	ldr	r0, [pc, #396]	; (8000e60 <MX_GPIO_Init+0x8d0>)
 8000cd4:	f000 fd22 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8000cd8:	2305      	movs	r3, #5
 8000cda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce4:	2303      	movs	r3, #3
 8000ce6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000ce8:	230a      	movs	r3, #10
 8000cea:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	485b      	ldr	r0, [pc, #364]	; (8000e60 <MX_GPIO_Init+0x8d0>)
 8000cf4:	f000 fd12 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000cf8:	2332      	movs	r3, #50	; 0x32
 8000cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d04:	2303      	movs	r3, #3
 8000d06:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d08:	230b      	movs	r3, #11
 8000d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d10:	4619      	mov	r1, r3
 8000d12:	4853      	ldr	r0, [pc, #332]	; (8000e60 <MX_GPIO_Init+0x8d0>)
 8000d14:	f000 fd02 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d18:	2304      	movs	r3, #4
 8000d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d24:	2303      	movs	r3, #3
 8000d26:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000d28:	2309      	movs	r3, #9
 8000d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d30:	4619      	mov	r1, r3
 8000d32:	484f      	ldr	r0, [pc, #316]	; (8000e70 <MX_GPIO_Init+0x8e0>)
 8000d34:	f000 fcf2 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8000d38:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d46:	2303      	movs	r3, #3
 8000d48:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000d4a:	2309      	movs	r3, #9
 8000d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d52:	4619      	mov	r1, r3
 8000d54:	4847      	ldr	r0, [pc, #284]	; (8000e74 <MX_GPIO_Init+0x8e4>)
 8000d56:	f000 fce1 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8000d5a:	2304      	movs	r3, #4
 8000d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8000d66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	483e      	ldr	r0, [pc, #248]	; (8000e68 <MX_GPIO_Init+0x8d8>)
 8000d6e:	f000 fcd5 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000d72:	2386      	movs	r3, #134	; 0x86
 8000d74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d76:	2302      	movs	r3, #2
 8000d78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d7e:	2303      	movs	r3, #3
 8000d80:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d82:	230b      	movs	r3, #11
 8000d84:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4833      	ldr	r0, [pc, #204]	; (8000e5c <MX_GPIO_Init+0x8cc>)
 8000d8e:	f000 fcc5 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8000d92:	2301      	movs	r3, #1
 8000d94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d96:	2303      	movs	r3, #3
 8000d98:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8000d9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000da2:	4619      	mov	r1, r3
 8000da4:	482d      	ldr	r0, [pc, #180]	; (8000e5c <MX_GPIO_Init+0x8cc>)
 8000da6:	f000 fcb9 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8000daa:	2350      	movs	r3, #80	; 0x50
 8000dac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dae:	2302      	movs	r3, #2
 8000db0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db6:	2300      	movs	r3, #0
 8000db8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000dba:	230d      	movs	r3, #13
 8000dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4825      	ldr	r0, [pc, #148]	; (8000e5c <MX_GPIO_Init+0x8cc>)
 8000dc6:	f000 fca9 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8000dca:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000dce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dd0:	2312      	movs	r3, #18
 8000dd2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd8:	2303      	movs	r3, #3
 8000dda:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000ddc:	2304      	movs	r3, #4
 8000dde:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000de0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000de4:	4619      	mov	r1, r3
 8000de6:	481f      	ldr	r0, [pc, #124]	; (8000e64 <MX_GPIO_Init+0x8d4>)
 8000de8:	f000 fc98 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8000dec:	2328      	movs	r3, #40	; 0x28
 8000dee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df0:	2302      	movs	r3, #2
 8000df2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df8:	2303      	movs	r3, #3
 8000dfa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000dfc:	230a      	movs	r3, #10
 8000dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e04:	4619      	mov	r1, r3
 8000e06:	4815      	ldr	r0, [pc, #84]	; (8000e5c <MX_GPIO_Init+0x8cc>)
 8000e08:	f000 fc88 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8000e0c:	2340      	movs	r3, #64	; 0x40
 8000e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e10:	2302      	movs	r3, #2
 8000e12:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8000e1c:	2309      	movs	r3, #9
 8000e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8000e20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e24:	4619      	mov	r1, r3
 8000e26:	480f      	ldr	r0, [pc, #60]	; (8000e64 <MX_GPIO_Init+0x8d4>)
 8000e28:	f000 fc78 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8000e2c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000e30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e32:	2302      	movs	r3, #2
 8000e34:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e3e:	2305      	movs	r3, #5
 8000e40:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e46:	4619      	mov	r1, r3
 8000e48:	4809      	ldr	r0, [pc, #36]	; (8000e70 <MX_GPIO_Init+0x8e0>)
 8000e4a:	f000 fc67 	bl	800171c <HAL_GPIO_Init>

}
 8000e4e:	bf00      	nop
 8000e50:	3740      	adds	r7, #64	; 0x40
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40022000 	.word	0x40022000
 8000e5c:	40020000 	.word	0x40020000
 8000e60:	40020800 	.word	0x40020800
 8000e64:	40021c00 	.word	0x40021c00
 8000e68:	40021800 	.word	0x40021800
 8000e6c:	40021400 	.word	0x40021400
 8000e70:	40020400 	.word	0x40020400
 8000e74:	40020c00 	.word	0x40020c00

08000e78 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000e7c:	f3bf 8f4f 	dsb	sy
}
 8000e80:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000e82:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <__NVIC_SystemReset+0x24>)
 8000e84:	68db      	ldr	r3, [r3, #12]
 8000e86:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000e8a:	4904      	ldr	r1, [pc, #16]	; (8000e9c <__NVIC_SystemReset+0x24>)
 8000e8c:	4b04      	ldr	r3, [pc, #16]	; (8000ea0 <__NVIC_SystemReset+0x28>)
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000e92:	f3bf 8f4f 	dsb	sy
}
 8000e96:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000e98:	bf00      	nop
 8000e9a:	e7fd      	b.n	8000e98 <__NVIC_SystemReset+0x20>
 8000e9c:	e000ed00 	.word	0xe000ed00
 8000ea0:	05fa0004 	.word	0x05fa0004

08000ea4 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000eac:	1d39      	adds	r1, r7, #4
 8000eae:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	4803      	ldr	r0, [pc, #12]	; (8000ec4 <__io_putchar+0x20>)
 8000eb6:	f001 ff0f 	bl	8002cd8 <HAL_UART_Transmit>
	return ch;
 8000eba:	687b      	ldr	r3, [r7, #4]
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	200002fc 	.word	0x200002fc

08000ec8 <taskGive>:
		vTaskDelay(1000);
	}
}

void taskGive(void * unused)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
	uint8_t Pass = 1;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	73fb      	strb	r3, [r7, #15]
	for(;;)
	{
		//xTaskCreate(taskBidon, "taskBidon", 1000, NULL, 1, &xHandle2);
		xSemaphoreGive(sem1);
 8000ed4:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <taskGive+0x40>)
 8000ed6:	6818      	ldr	r0, [r3, #0]
 8000ed8:	2300      	movs	r3, #0
 8000eda:	2200      	movs	r2, #0
 8000edc:	2100      	movs	r1, #0
 8000ede:	f002 fd81 	bl	80039e4 <xQueueGenericSend>
		xQueueSend(xQueue1, (void*) &Pass, 1000);
 8000ee2:	4b0a      	ldr	r3, [pc, #40]	; (8000f0c <taskGive+0x44>)
 8000ee4:	6818      	ldr	r0, [r3, #0]
 8000ee6:	f107 010f 	add.w	r1, r7, #15
 8000eea:	2300      	movs	r3, #0
 8000eec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ef0:	f002 fd78 	bl	80039e4 <xQueueGenericSend>
		printf("Va donner\r\n");
 8000ef4:	4806      	ldr	r0, [pc, #24]	; (8000f10 <taskGive+0x48>)
 8000ef6:	f004 fd3b 	bl	8005970 <puts>
		vTaskDelay(100);
 8000efa:	2064      	movs	r0, #100	; 0x64
 8000efc:	f003 fa2a 	bl	8004354 <vTaskDelay>
		printf("Donnee\r\n");
 8000f00:	4804      	ldr	r0, [pc, #16]	; (8000f14 <taskGive+0x4c>)
 8000f02:	f004 fd35 	bl	8005970 <puts>
		xSemaphoreGive(sem1);
 8000f06:	e7e5      	b.n	8000ed4 <taskGive+0xc>
 8000f08:	200002f4 	.word	0x200002f4
 8000f0c:	200002f0 	.word	0x200002f0
 8000f10:	080062d8 	.word	0x080062d8
 8000f14:	080062e4 	.word	0x080062e4

08000f18 <taskTake>:
		//Pass++;
	}
}

void taskTake(void * unused)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
	uint8_t RxBuffer = 0;
 8000f20:	2300      	movs	r3, #0
 8000f22:	73fb      	strb	r3, [r7, #15]
	for(;;)
	{
		printf("Va prendre\r\n");
 8000f24:	480c      	ldr	r0, [pc, #48]	; (8000f58 <taskTake+0x40>)
 8000f26:	f004 fd23 	bl	8005970 <puts>
		if(xSemaphoreTake(sem1, 1000) == pdFALSE)
 8000f2a:	4b0c      	ldr	r3, [pc, #48]	; (8000f5c <taskTake+0x44>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f32:	4618      	mov	r0, r3
 8000f34:	f002 fe5c 	bl	8003bf0 <xQueueSemaphoreTake>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d104      	bne.n	8000f48 <taskTake+0x30>
		{
			printf("ERROR\r\n");
 8000f3e:	4808      	ldr	r0, [pc, #32]	; (8000f60 <taskTake+0x48>)
 8000f40:	f004 fd16 	bl	8005970 <puts>
			NVIC_SystemReset();
 8000f44:	f7ff ff98 	bl	8000e78 <__NVIC_SystemReset>
		}
		printf("a pris\r\n");
 8000f48:	4806      	ldr	r0, [pc, #24]	; (8000f64 <taskTake+0x4c>)
 8000f4a:	f004 fd11 	bl	8005970 <puts>
		vTaskDelay(100);
 8000f4e:	2064      	movs	r0, #100	; 0x64
 8000f50:	f003 fa00 	bl	8004354 <vTaskDelay>
		printf("Va prendre\r\n");
 8000f54:	e7e6      	b.n	8000f24 <taskTake+0xc>
 8000f56:	bf00      	nop
 8000f58:	080062ec 	.word	0x080062ec
 8000f5c:	200002f4 	.word	0x200002f4
 8000f60:	080062f8 	.word	0x080062f8
 8000f64:	08006300 	.word	0x08006300

08000f68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f6e:	f000 fa92 	bl	8001496 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f72:	f000 f841 	bl	8000ff8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f76:	f7ff fb0b 	bl	8000590 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000f7a:	f000 f9b1 	bl	80012e0 <MX_USART1_UART_Init>

	/*
	//Q1.2
	--Code
	*/
    sem1 = xSemaphoreCreateBinary();
 8000f7e:	2203      	movs	r2, #3
 8000f80:	2100      	movs	r1, #0
 8000f82:	2001      	movs	r0, #1
 8000f84:	f002 fccc 	bl	8003920 <xQueueGenericCreate>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	4a13      	ldr	r2, [pc, #76]	; (8000fd8 <main+0x70>)
 8000f8c:	6013      	str	r3, [r2, #0]
    xQueue1 = xQueueCreate(1, sizeof( uint8_t));
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2101      	movs	r1, #1
 8000f92:	2001      	movs	r0, #1
 8000f94:	f002 fcc4 	bl	8003920 <xQueueGenericCreate>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	4a10      	ldr	r2, [pc, #64]	; (8000fdc <main+0x74>)
 8000f9c:	6013      	str	r3, [r2, #0]
	xTaskCreate(taskGive, "taskGive", 1000, NULL, 1, &xHandle1);
 8000f9e:	4b10      	ldr	r3, [pc, #64]	; (8000fe0 <main+0x78>)
 8000fa0:	9301      	str	r3, [sp, #4]
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	9300      	str	r3, [sp, #0]
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fac:	490d      	ldr	r1, [pc, #52]	; (8000fe4 <main+0x7c>)
 8000fae:	480e      	ldr	r0, [pc, #56]	; (8000fe8 <main+0x80>)
 8000fb0:	f003 f897 	bl	80040e2 <xTaskCreate>
	xTaskCreate(taskTake, "taskTake", 1000, NULL, 2, &xHandle2);
 8000fb4:	4b0d      	ldr	r3, [pc, #52]	; (8000fec <main+0x84>)
 8000fb6:	9301      	str	r3, [sp, #4]
 8000fb8:	2302      	movs	r3, #2
 8000fba:	9300      	str	r3, [sp, #0]
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fc2:	490b      	ldr	r1, [pc, #44]	; (8000ff0 <main+0x88>)
 8000fc4:	480b      	ldr	r0, [pc, #44]	; (8000ff4 <main+0x8c>)
 8000fc6:	f003 f88c 	bl	80040e2 <xTaskCreate>
	//configASSERT(pdTRUE==xReturned);

	vTaskStartScheduler();
 8000fca:	f003 f9f9 	bl	80043c0 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000fce:	f7ff fabb 	bl	8000548 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000fd2:	f002 fb20 	bl	8003616 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000fd6:	e7fe      	b.n	8000fd6 <main+0x6e>
 8000fd8:	200002f4 	.word	0x200002f4
 8000fdc:	200002f0 	.word	0x200002f0
 8000fe0:	200002e8 	.word	0x200002e8
 8000fe4:	08006308 	.word	0x08006308
 8000fe8:	08000ec9 	.word	0x08000ec9
 8000fec:	200002ec 	.word	0x200002ec
 8000ff0:	08006314 	.word	0x08006314
 8000ff4:	08000f19 	.word	0x08000f19

08000ff8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b094      	sub	sp, #80	; 0x50
 8000ffc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ffe:	f107 0320 	add.w	r3, r7, #32
 8001002:	2230      	movs	r2, #48	; 0x30
 8001004:	2100      	movs	r1, #0
 8001006:	4618      	mov	r0, r3
 8001008:	f004 fc3c 	bl	8005884 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800100c:	f107 030c 	add.w	r3, r7, #12
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]
 800101a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800101c:	4b2b      	ldr	r3, [pc, #172]	; (80010cc <SystemClock_Config+0xd4>)
 800101e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001020:	4a2a      	ldr	r2, [pc, #168]	; (80010cc <SystemClock_Config+0xd4>)
 8001022:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001026:	6413      	str	r3, [r2, #64]	; 0x40
 8001028:	4b28      	ldr	r3, [pc, #160]	; (80010cc <SystemClock_Config+0xd4>)
 800102a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001030:	60bb      	str	r3, [r7, #8]
 8001032:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001034:	4b26      	ldr	r3, [pc, #152]	; (80010d0 <SystemClock_Config+0xd8>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a25      	ldr	r2, [pc, #148]	; (80010d0 <SystemClock_Config+0xd8>)
 800103a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800103e:	6013      	str	r3, [r2, #0]
 8001040:	4b23      	ldr	r3, [pc, #140]	; (80010d0 <SystemClock_Config+0xd8>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001048:	607b      	str	r3, [r7, #4]
 800104a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800104c:	2301      	movs	r3, #1
 800104e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001050:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001054:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001056:	2302      	movs	r3, #2
 8001058:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800105a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800105e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001060:	2319      	movs	r3, #25
 8001062:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8001064:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8001068:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800106a:	2302      	movs	r3, #2
 800106c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800106e:	2302      	movs	r3, #2
 8001070:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001072:	f107 0320 	add.w	r3, r7, #32
 8001076:	4618      	mov	r0, r3
 8001078:	f000 fd66 	bl	8001b48 <HAL_RCC_OscConfig>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001082:	f000 f827 	bl	80010d4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001086:	f000 fd0f 	bl	8001aa8 <HAL_PWREx_EnableOverDrive>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001090:	f000 f820 	bl	80010d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001094:	230f      	movs	r3, #15
 8001096:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001098:	2302      	movs	r3, #2
 800109a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800109c:	2300      	movs	r3, #0
 800109e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010a0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80010ac:	f107 030c 	add.w	r3, r7, #12
 80010b0:	2107      	movs	r1, #7
 80010b2:	4618      	mov	r0, r3
 80010b4:	f000 ffec 	bl	8002090 <HAL_RCC_ClockConfig>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80010be:	f000 f809 	bl	80010d4 <Error_Handler>
  }
}
 80010c2:	bf00      	nop
 80010c4:	3750      	adds	r7, #80	; 0x50
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40023800 	.word	0x40023800
 80010d0:	40007000 	.word	0x40007000

080010d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80010d8:	b672      	cpsid	i
}
 80010da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80010dc:	e7fe      	b.n	80010dc <Error_Handler+0x8>
	...

080010e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80010e6:	4b11      	ldr	r3, [pc, #68]	; (800112c <HAL_MspInit+0x4c>)
 80010e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ea:	4a10      	ldr	r2, [pc, #64]	; (800112c <HAL_MspInit+0x4c>)
 80010ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010f0:	6413      	str	r3, [r2, #64]	; 0x40
 80010f2:	4b0e      	ldr	r3, [pc, #56]	; (800112c <HAL_MspInit+0x4c>)
 80010f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010fa:	607b      	str	r3, [r7, #4]
 80010fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010fe:	4b0b      	ldr	r3, [pc, #44]	; (800112c <HAL_MspInit+0x4c>)
 8001100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001102:	4a0a      	ldr	r2, [pc, #40]	; (800112c <HAL_MspInit+0x4c>)
 8001104:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001108:	6453      	str	r3, [r2, #68]	; 0x44
 800110a:	4b08      	ldr	r3, [pc, #32]	; (800112c <HAL_MspInit+0x4c>)
 800110c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001112:	603b      	str	r3, [r7, #0]
 8001114:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001116:	2200      	movs	r2, #0
 8001118:	210f      	movs	r1, #15
 800111a:	f06f 0001 	mvn.w	r0, #1
 800111e:	f000 fad4 	bl	80016ca <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40023800 	.word	0x40023800

08001130 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001134:	e7fe      	b.n	8001134 <NMI_Handler+0x4>

08001136 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001136:	b480      	push	{r7}
 8001138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800113a:	e7fe      	b.n	800113a <HardFault_Handler+0x4>

0800113c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001140:	e7fe      	b.n	8001140 <MemManage_Handler+0x4>

08001142 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001142:	b480      	push	{r7}
 8001144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001146:	e7fe      	b.n	8001146 <BusFault_Handler+0x4>

08001148 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800114c:	e7fe      	b.n	800114c <UsageFault_Handler+0x4>

0800114e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800114e:	b480      	push	{r7}
 8001150:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001160:	f000 f9d6 	bl	8001510 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001164:	f003 fd3e 	bl	8004be4 <xTaskGetSchedulerState>
 8001168:	4603      	mov	r3, r0
 800116a:	2b01      	cmp	r3, #1
 800116c:	d001      	beq.n	8001172 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800116e:	f004 f91b 	bl	80053a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}

08001176 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b086      	sub	sp, #24
 800117a:	af00      	add	r7, sp, #0
 800117c:	60f8      	str	r0, [r7, #12]
 800117e:	60b9      	str	r1, [r7, #8]
 8001180:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001182:	2300      	movs	r3, #0
 8001184:	617b      	str	r3, [r7, #20]
 8001186:	e00a      	b.n	800119e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001188:	f3af 8000 	nop.w
 800118c:	4601      	mov	r1, r0
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	1c5a      	adds	r2, r3, #1
 8001192:	60ba      	str	r2, [r7, #8]
 8001194:	b2ca      	uxtb	r2, r1
 8001196:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	3301      	adds	r3, #1
 800119c:	617b      	str	r3, [r7, #20]
 800119e:	697a      	ldr	r2, [r7, #20]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	429a      	cmp	r2, r3
 80011a4:	dbf0      	blt.n	8001188 <_read+0x12>
	}

return len;
 80011a6:	687b      	ldr	r3, [r7, #4]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3718      	adds	r7, #24
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011bc:	2300      	movs	r3, #0
 80011be:	617b      	str	r3, [r7, #20]
 80011c0:	e009      	b.n	80011d6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	1c5a      	adds	r2, r3, #1
 80011c6:	60ba      	str	r2, [r7, #8]
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff fe6a 	bl	8000ea4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	3301      	adds	r3, #1
 80011d4:	617b      	str	r3, [r7, #20]
 80011d6:	697a      	ldr	r2, [r7, #20]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	429a      	cmp	r2, r3
 80011dc:	dbf1      	blt.n	80011c2 <_write+0x12>
	}
	return len;
 80011de:	687b      	ldr	r3, [r7, #4]
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3718      	adds	r7, #24
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <_close>:

int _close(int file)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
	return -1;
 80011f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001210:	605a      	str	r2, [r3, #4]
	return 0;
 8001212:	2300      	movs	r3, #0
}
 8001214:	4618      	mov	r0, r3
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <_isatty>:

int _isatty(int file)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
	return 1;
 8001228:	2301      	movs	r3, #1
}
 800122a:	4618      	mov	r0, r3
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr

08001236 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001236:	b480      	push	{r7}
 8001238:	b085      	sub	sp, #20
 800123a:	af00      	add	r7, sp, #0
 800123c:	60f8      	str	r0, [r7, #12]
 800123e:	60b9      	str	r1, [r7, #8]
 8001240:	607a      	str	r2, [r7, #4]
	return 0;
 8001242:	2300      	movs	r3, #0
}
 8001244:	4618      	mov	r0, r3
 8001246:	3714      	adds	r7, #20
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001258:	4a14      	ldr	r2, [pc, #80]	; (80012ac <_sbrk+0x5c>)
 800125a:	4b15      	ldr	r3, [pc, #84]	; (80012b0 <_sbrk+0x60>)
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001264:	4b13      	ldr	r3, [pc, #76]	; (80012b4 <_sbrk+0x64>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d102      	bne.n	8001272 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800126c:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <_sbrk+0x64>)
 800126e:	4a12      	ldr	r2, [pc, #72]	; (80012b8 <_sbrk+0x68>)
 8001270:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001272:	4b10      	ldr	r3, [pc, #64]	; (80012b4 <_sbrk+0x64>)
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4413      	add	r3, r2
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	429a      	cmp	r2, r3
 800127e:	d207      	bcs.n	8001290 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001280:	f004 fac8 	bl	8005814 <__errno>
 8001284:	4603      	mov	r3, r0
 8001286:	220c      	movs	r2, #12
 8001288:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800128a:	f04f 33ff 	mov.w	r3, #4294967295
 800128e:	e009      	b.n	80012a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001290:	4b08      	ldr	r3, [pc, #32]	; (80012b4 <_sbrk+0x64>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001296:	4b07      	ldr	r3, [pc, #28]	; (80012b4 <_sbrk+0x64>)
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4413      	add	r3, r2
 800129e:	4a05      	ldr	r2, [pc, #20]	; (80012b4 <_sbrk+0x64>)
 80012a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012a2:	68fb      	ldr	r3, [r7, #12]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3718      	adds	r7, #24
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	20050000 	.word	0x20050000
 80012b0:	00000400 	.word	0x00000400
 80012b4:	200002f8 	.word	0x200002f8
 80012b8:	200040e8 	.word	0x200040e8

080012bc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012c0:	4b06      	ldr	r3, [pc, #24]	; (80012dc <SystemInit+0x20>)
 80012c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012c6:	4a05      	ldr	r2, [pc, #20]	; (80012dc <SystemInit+0x20>)
 80012c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012d0:	bf00      	nop
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	e000ed00 	.word	0xe000ed00

080012e0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012e4:	4b14      	ldr	r3, [pc, #80]	; (8001338 <MX_USART1_UART_Init+0x58>)
 80012e6:	4a15      	ldr	r2, [pc, #84]	; (800133c <MX_USART1_UART_Init+0x5c>)
 80012e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012ea:	4b13      	ldr	r3, [pc, #76]	; (8001338 <MX_USART1_UART_Init+0x58>)
 80012ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012f2:	4b11      	ldr	r3, [pc, #68]	; (8001338 <MX_USART1_UART_Init+0x58>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012f8:	4b0f      	ldr	r3, [pc, #60]	; (8001338 <MX_USART1_UART_Init+0x58>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012fe:	4b0e      	ldr	r3, [pc, #56]	; (8001338 <MX_USART1_UART_Init+0x58>)
 8001300:	2200      	movs	r2, #0
 8001302:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001304:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <MX_USART1_UART_Init+0x58>)
 8001306:	220c      	movs	r2, #12
 8001308:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800130a:	4b0b      	ldr	r3, [pc, #44]	; (8001338 <MX_USART1_UART_Init+0x58>)
 800130c:	2200      	movs	r2, #0
 800130e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001310:	4b09      	ldr	r3, [pc, #36]	; (8001338 <MX_USART1_UART_Init+0x58>)
 8001312:	2200      	movs	r2, #0
 8001314:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001316:	4b08      	ldr	r3, [pc, #32]	; (8001338 <MX_USART1_UART_Init+0x58>)
 8001318:	2200      	movs	r2, #0
 800131a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800131c:	4b06      	ldr	r3, [pc, #24]	; (8001338 <MX_USART1_UART_Init+0x58>)
 800131e:	2200      	movs	r2, #0
 8001320:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001322:	4805      	ldr	r0, [pc, #20]	; (8001338 <MX_USART1_UART_Init+0x58>)
 8001324:	f001 fc8a 	bl	8002c3c <HAL_UART_Init>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800132e:	f7ff fed1 	bl	80010d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	200002fc 	.word	0x200002fc
 800133c:	40011000 	.word	0x40011000

08001340 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b0ac      	sub	sp, #176	; 0xb0
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001348:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
 8001356:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001358:	f107 0318 	add.w	r3, r7, #24
 800135c:	2284      	movs	r2, #132	; 0x84
 800135e:	2100      	movs	r1, #0
 8001360:	4618      	mov	r0, r3
 8001362:	f004 fa8f 	bl	8005884 <memset>
  if(uartHandle->Instance==USART1)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a32      	ldr	r2, [pc, #200]	; (8001434 <HAL_UART_MspInit+0xf4>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d15c      	bne.n	800142a <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001370:	2340      	movs	r3, #64	; 0x40
 8001372:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001374:	2300      	movs	r3, #0
 8001376:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001378:	f107 0318 	add.w	r3, r7, #24
 800137c:	4618      	mov	r0, r3
 800137e:	f001 f86d 	bl	800245c <HAL_RCCEx_PeriphCLKConfig>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001388:	f7ff fea4 	bl	80010d4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800138c:	4b2a      	ldr	r3, [pc, #168]	; (8001438 <HAL_UART_MspInit+0xf8>)
 800138e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001390:	4a29      	ldr	r2, [pc, #164]	; (8001438 <HAL_UART_MspInit+0xf8>)
 8001392:	f043 0310 	orr.w	r3, r3, #16
 8001396:	6453      	str	r3, [r2, #68]	; 0x44
 8001398:	4b27      	ldr	r3, [pc, #156]	; (8001438 <HAL_UART_MspInit+0xf8>)
 800139a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139c:	f003 0310 	and.w	r3, r3, #16
 80013a0:	617b      	str	r3, [r7, #20]
 80013a2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a4:	4b24      	ldr	r3, [pc, #144]	; (8001438 <HAL_UART_MspInit+0xf8>)
 80013a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a8:	4a23      	ldr	r2, [pc, #140]	; (8001438 <HAL_UART_MspInit+0xf8>)
 80013aa:	f043 0302 	orr.w	r3, r3, #2
 80013ae:	6313      	str	r3, [r2, #48]	; 0x30
 80013b0:	4b21      	ldr	r3, [pc, #132]	; (8001438 <HAL_UART_MspInit+0xf8>)
 80013b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b4:	f003 0302 	and.w	r3, r3, #2
 80013b8:	613b      	str	r3, [r7, #16]
 80013ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013bc:	4b1e      	ldr	r3, [pc, #120]	; (8001438 <HAL_UART_MspInit+0xf8>)
 80013be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c0:	4a1d      	ldr	r2, [pc, #116]	; (8001438 <HAL_UART_MspInit+0xf8>)
 80013c2:	f043 0301 	orr.w	r3, r3, #1
 80013c6:	6313      	str	r3, [r2, #48]	; 0x30
 80013c8:	4b1b      	ldr	r3, [pc, #108]	; (8001438 <HAL_UART_MspInit+0xf8>)
 80013ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013cc:	f003 0301 	and.w	r3, r3, #1
 80013d0:	60fb      	str	r3, [r7, #12]
 80013d2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80013d4:	2380      	movs	r3, #128	; 0x80
 80013d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013da:	2302      	movs	r3, #2
 80013dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e0:	2300      	movs	r3, #0
 80013e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e6:	2300      	movs	r3, #0
 80013e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013ec:	2307      	movs	r3, #7
 80013ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80013f2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013f6:	4619      	mov	r1, r3
 80013f8:	4810      	ldr	r0, [pc, #64]	; (800143c <HAL_UART_MspInit+0xfc>)
 80013fa:	f000 f98f 	bl	800171c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80013fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001402:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001406:	2302      	movs	r3, #2
 8001408:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	2300      	movs	r3, #0
 800140e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001412:	2300      	movs	r3, #0
 8001414:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001418:	2307      	movs	r3, #7
 800141a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800141e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001422:	4619      	mov	r1, r3
 8001424:	4806      	ldr	r0, [pc, #24]	; (8001440 <HAL_UART_MspInit+0x100>)
 8001426:	f000 f979 	bl	800171c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800142a:	bf00      	nop
 800142c:	37b0      	adds	r7, #176	; 0xb0
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	40011000 	.word	0x40011000
 8001438:	40023800 	.word	0x40023800
 800143c:	40020400 	.word	0x40020400
 8001440:	40020000 	.word	0x40020000

08001444 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001444:	f8df d034 	ldr.w	sp, [pc, #52]	; 800147c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001448:	480d      	ldr	r0, [pc, #52]	; (8001480 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800144a:	490e      	ldr	r1, [pc, #56]	; (8001484 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800144c:	4a0e      	ldr	r2, [pc, #56]	; (8001488 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800144e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001450:	e002      	b.n	8001458 <LoopCopyDataInit>

08001452 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001452:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001454:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001456:	3304      	adds	r3, #4

08001458 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001458:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800145a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800145c:	d3f9      	bcc.n	8001452 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800145e:	4a0b      	ldr	r2, [pc, #44]	; (800148c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001460:	4c0b      	ldr	r4, [pc, #44]	; (8001490 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001462:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001464:	e001      	b.n	800146a <LoopFillZerobss>

08001466 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001466:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001468:	3204      	adds	r2, #4

0800146a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800146a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800146c:	d3fb      	bcc.n	8001466 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800146e:	f7ff ff25 	bl	80012bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001472:	f004 f9d5 	bl	8005820 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001476:	f7ff fd77 	bl	8000f68 <main>
  bx  lr    
 800147a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800147c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001480:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001484:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001488:	080063b4 	.word	0x080063b4
  ldr r2, =_sbss
 800148c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001490:	200040e4 	.word	0x200040e4

08001494 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001494:	e7fe      	b.n	8001494 <ADC_IRQHandler>

08001496 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800149a:	2003      	movs	r0, #3
 800149c:	f000 f90a 	bl	80016b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014a0:	200f      	movs	r0, #15
 80014a2:	f000 f805 	bl	80014b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014a6:	f7ff fe1b 	bl	80010e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014aa:	2300      	movs	r3, #0
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014b8:	4b12      	ldr	r3, [pc, #72]	; (8001504 <HAL_InitTick+0x54>)
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	4b12      	ldr	r3, [pc, #72]	; (8001508 <HAL_InitTick+0x58>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	4619      	mov	r1, r3
 80014c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80014ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ce:	4618      	mov	r0, r3
 80014d0:	f000 f917 	bl	8001702 <HAL_SYSTICK_Config>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e00e      	b.n	80014fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2b0f      	cmp	r3, #15
 80014e2:	d80a      	bhi.n	80014fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014e4:	2200      	movs	r2, #0
 80014e6:	6879      	ldr	r1, [r7, #4]
 80014e8:	f04f 30ff 	mov.w	r0, #4294967295
 80014ec:	f000 f8ed 	bl	80016ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014f0:	4a06      	ldr	r2, [pc, #24]	; (800150c <HAL_InitTick+0x5c>)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014f6:	2300      	movs	r3, #0
 80014f8:	e000      	b.n	80014fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	20000000 	.word	0x20000000
 8001508:	20000008 	.word	0x20000008
 800150c:	20000004 	.word	0x20000004

08001510 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001514:	4b06      	ldr	r3, [pc, #24]	; (8001530 <HAL_IncTick+0x20>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	461a      	mov	r2, r3
 800151a:	4b06      	ldr	r3, [pc, #24]	; (8001534 <HAL_IncTick+0x24>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4413      	add	r3, r2
 8001520:	4a04      	ldr	r2, [pc, #16]	; (8001534 <HAL_IncTick+0x24>)
 8001522:	6013      	str	r3, [r2, #0]
}
 8001524:	bf00      	nop
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	20000008 	.word	0x20000008
 8001534:	20000384 	.word	0x20000384

08001538 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  return uwTick;
 800153c:	4b03      	ldr	r3, [pc, #12]	; (800154c <HAL_GetTick+0x14>)
 800153e:	681b      	ldr	r3, [r3, #0]
}
 8001540:	4618      	mov	r0, r3
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	20000384 	.word	0x20000384

08001550 <__NVIC_SetPriorityGrouping>:
{
 8001550:	b480      	push	{r7}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f003 0307 	and.w	r3, r3, #7
 800155e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001560:	4b0b      	ldr	r3, [pc, #44]	; (8001590 <__NVIC_SetPriorityGrouping+0x40>)
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001566:	68ba      	ldr	r2, [r7, #8]
 8001568:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800156c:	4013      	ands	r3, r2
 800156e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001578:	4b06      	ldr	r3, [pc, #24]	; (8001594 <__NVIC_SetPriorityGrouping+0x44>)
 800157a:	4313      	orrs	r3, r2
 800157c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800157e:	4a04      	ldr	r2, [pc, #16]	; (8001590 <__NVIC_SetPriorityGrouping+0x40>)
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	60d3      	str	r3, [r2, #12]
}
 8001584:	bf00      	nop
 8001586:	3714      	adds	r7, #20
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	e000ed00 	.word	0xe000ed00
 8001594:	05fa0000 	.word	0x05fa0000

08001598 <__NVIC_GetPriorityGrouping>:
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800159c:	4b04      	ldr	r3, [pc, #16]	; (80015b0 <__NVIC_GetPriorityGrouping+0x18>)
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	0a1b      	lsrs	r3, r3, #8
 80015a2:	f003 0307 	and.w	r3, r3, #7
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	e000ed00 	.word	0xe000ed00

080015b4 <__NVIC_SetPriority>:
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	6039      	str	r1, [r7, #0]
 80015be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	db0a      	blt.n	80015de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	b2da      	uxtb	r2, r3
 80015cc:	490c      	ldr	r1, [pc, #48]	; (8001600 <__NVIC_SetPriority+0x4c>)
 80015ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d2:	0112      	lsls	r2, r2, #4
 80015d4:	b2d2      	uxtb	r2, r2
 80015d6:	440b      	add	r3, r1
 80015d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80015dc:	e00a      	b.n	80015f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	b2da      	uxtb	r2, r3
 80015e2:	4908      	ldr	r1, [pc, #32]	; (8001604 <__NVIC_SetPriority+0x50>)
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	f003 030f 	and.w	r3, r3, #15
 80015ea:	3b04      	subs	r3, #4
 80015ec:	0112      	lsls	r2, r2, #4
 80015ee:	b2d2      	uxtb	r2, r2
 80015f0:	440b      	add	r3, r1
 80015f2:	761a      	strb	r2, [r3, #24]
}
 80015f4:	bf00      	nop
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	e000e100 	.word	0xe000e100
 8001604:	e000ed00 	.word	0xe000ed00

08001608 <NVIC_EncodePriority>:
{
 8001608:	b480      	push	{r7}
 800160a:	b089      	sub	sp, #36	; 0x24
 800160c:	af00      	add	r7, sp, #0
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	60b9      	str	r1, [r7, #8]
 8001612:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	f003 0307 	and.w	r3, r3, #7
 800161a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	f1c3 0307 	rsb	r3, r3, #7
 8001622:	2b04      	cmp	r3, #4
 8001624:	bf28      	it	cs
 8001626:	2304      	movcs	r3, #4
 8001628:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	3304      	adds	r3, #4
 800162e:	2b06      	cmp	r3, #6
 8001630:	d902      	bls.n	8001638 <NVIC_EncodePriority+0x30>
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	3b03      	subs	r3, #3
 8001636:	e000      	b.n	800163a <NVIC_EncodePriority+0x32>
 8001638:	2300      	movs	r3, #0
 800163a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800163c:	f04f 32ff 	mov.w	r2, #4294967295
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	fa02 f303 	lsl.w	r3, r2, r3
 8001646:	43da      	mvns	r2, r3
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	401a      	ands	r2, r3
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001650:	f04f 31ff 	mov.w	r1, #4294967295
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	fa01 f303 	lsl.w	r3, r1, r3
 800165a:	43d9      	mvns	r1, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001660:	4313      	orrs	r3, r2
}
 8001662:	4618      	mov	r0, r3
 8001664:	3724      	adds	r7, #36	; 0x24
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
	...

08001670 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	3b01      	subs	r3, #1
 800167c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001680:	d301      	bcc.n	8001686 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001682:	2301      	movs	r3, #1
 8001684:	e00f      	b.n	80016a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001686:	4a0a      	ldr	r2, [pc, #40]	; (80016b0 <SysTick_Config+0x40>)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	3b01      	subs	r3, #1
 800168c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800168e:	210f      	movs	r1, #15
 8001690:	f04f 30ff 	mov.w	r0, #4294967295
 8001694:	f7ff ff8e 	bl	80015b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001698:	4b05      	ldr	r3, [pc, #20]	; (80016b0 <SysTick_Config+0x40>)
 800169a:	2200      	movs	r2, #0
 800169c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800169e:	4b04      	ldr	r3, [pc, #16]	; (80016b0 <SysTick_Config+0x40>)
 80016a0:	2207      	movs	r2, #7
 80016a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	e000e010 	.word	0xe000e010

080016b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f7ff ff47 	bl	8001550 <__NVIC_SetPriorityGrouping>
}
 80016c2:	bf00      	nop
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b086      	sub	sp, #24
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	4603      	mov	r3, r0
 80016d2:	60b9      	str	r1, [r7, #8]
 80016d4:	607a      	str	r2, [r7, #4]
 80016d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016d8:	2300      	movs	r3, #0
 80016da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016dc:	f7ff ff5c 	bl	8001598 <__NVIC_GetPriorityGrouping>
 80016e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	68b9      	ldr	r1, [r7, #8]
 80016e6:	6978      	ldr	r0, [r7, #20]
 80016e8:	f7ff ff8e 	bl	8001608 <NVIC_EncodePriority>
 80016ec:	4602      	mov	r2, r0
 80016ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016f2:	4611      	mov	r1, r2
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff ff5d 	bl	80015b4 <__NVIC_SetPriority>
}
 80016fa:	bf00      	nop
 80016fc:	3718      	adds	r7, #24
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b082      	sub	sp, #8
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f7ff ffb0 	bl	8001670 <SysTick_Config>
 8001710:	4603      	mov	r3, r0
}
 8001712:	4618      	mov	r0, r3
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
	...

0800171c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800171c:	b480      	push	{r7}
 800171e:	b089      	sub	sp, #36	; 0x24
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001726:	2300      	movs	r3, #0
 8001728:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800172a:	2300      	movs	r3, #0
 800172c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800172e:	2300      	movs	r3, #0
 8001730:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001732:	2300      	movs	r3, #0
 8001734:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001736:	2300      	movs	r3, #0
 8001738:	61fb      	str	r3, [r7, #28]
 800173a:	e175      	b.n	8001a28 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800173c:	2201      	movs	r2, #1
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	697a      	ldr	r2, [r7, #20]
 800174c:	4013      	ands	r3, r2
 800174e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	429a      	cmp	r2, r3
 8001756:	f040 8164 	bne.w	8001a22 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f003 0303 	and.w	r3, r3, #3
 8001762:	2b01      	cmp	r3, #1
 8001764:	d005      	beq.n	8001772 <HAL_GPIO_Init+0x56>
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f003 0303 	and.w	r3, r3, #3
 800176e:	2b02      	cmp	r3, #2
 8001770:	d130      	bne.n	80017d4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	2203      	movs	r2, #3
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	43db      	mvns	r3, r3
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	4013      	ands	r3, r2
 8001788:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	68da      	ldr	r2, [r3, #12]
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	fa02 f303 	lsl.w	r3, r2, r3
 8001796:	69ba      	ldr	r2, [r7, #24]
 8001798:	4313      	orrs	r3, r2
 800179a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017a8:	2201      	movs	r2, #1
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	43db      	mvns	r3, r3
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	4013      	ands	r3, r2
 80017b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	091b      	lsrs	r3, r3, #4
 80017be:	f003 0201 	and.w	r2, r3, #1
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f003 0303 	and.w	r3, r3, #3
 80017dc:	2b03      	cmp	r3, #3
 80017de:	d017      	beq.n	8001810 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	2203      	movs	r2, #3
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	43db      	mvns	r3, r3
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	4013      	ands	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	689a      	ldr	r2, [r3, #8]
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	4313      	orrs	r3, r2
 8001808:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f003 0303 	and.w	r3, r3, #3
 8001818:	2b02      	cmp	r3, #2
 800181a:	d123      	bne.n	8001864 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	08da      	lsrs	r2, r3, #3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	3208      	adds	r2, #8
 8001824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001828:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	f003 0307 	and.w	r3, r3, #7
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	220f      	movs	r2, #15
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	43db      	mvns	r3, r3
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	4013      	ands	r3, r2
 800183e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	691a      	ldr	r2, [r3, #16]
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	f003 0307 	and.w	r3, r3, #7
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	4313      	orrs	r3, r2
 8001854:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	08da      	lsrs	r2, r3, #3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	3208      	adds	r2, #8
 800185e:	69b9      	ldr	r1, [r7, #24]
 8001860:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	2203      	movs	r2, #3
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	43db      	mvns	r3, r3
 8001876:	69ba      	ldr	r2, [r7, #24]
 8001878:	4013      	ands	r3, r2
 800187a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f003 0203 	and.w	r2, r3, #3
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	4313      	orrs	r3, r2
 8001890:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	f000 80be 	beq.w	8001a22 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018a6:	4b66      	ldr	r3, [pc, #408]	; (8001a40 <HAL_GPIO_Init+0x324>)
 80018a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018aa:	4a65      	ldr	r2, [pc, #404]	; (8001a40 <HAL_GPIO_Init+0x324>)
 80018ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018b0:	6453      	str	r3, [r2, #68]	; 0x44
 80018b2:	4b63      	ldr	r3, [pc, #396]	; (8001a40 <HAL_GPIO_Init+0x324>)
 80018b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80018be:	4a61      	ldr	r2, [pc, #388]	; (8001a44 <HAL_GPIO_Init+0x328>)
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	089b      	lsrs	r3, r3, #2
 80018c4:	3302      	adds	r3, #2
 80018c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	f003 0303 	and.w	r3, r3, #3
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	220f      	movs	r2, #15
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	43db      	mvns	r3, r3
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	4013      	ands	r3, r2
 80018e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a58      	ldr	r2, [pc, #352]	; (8001a48 <HAL_GPIO_Init+0x32c>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d037      	beq.n	800195a <HAL_GPIO_Init+0x23e>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a57      	ldr	r2, [pc, #348]	; (8001a4c <HAL_GPIO_Init+0x330>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d031      	beq.n	8001956 <HAL_GPIO_Init+0x23a>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a56      	ldr	r2, [pc, #344]	; (8001a50 <HAL_GPIO_Init+0x334>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d02b      	beq.n	8001952 <HAL_GPIO_Init+0x236>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a55      	ldr	r2, [pc, #340]	; (8001a54 <HAL_GPIO_Init+0x338>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d025      	beq.n	800194e <HAL_GPIO_Init+0x232>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a54      	ldr	r2, [pc, #336]	; (8001a58 <HAL_GPIO_Init+0x33c>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d01f      	beq.n	800194a <HAL_GPIO_Init+0x22e>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a53      	ldr	r2, [pc, #332]	; (8001a5c <HAL_GPIO_Init+0x340>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d019      	beq.n	8001946 <HAL_GPIO_Init+0x22a>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a52      	ldr	r2, [pc, #328]	; (8001a60 <HAL_GPIO_Init+0x344>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d013      	beq.n	8001942 <HAL_GPIO_Init+0x226>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a51      	ldr	r2, [pc, #324]	; (8001a64 <HAL_GPIO_Init+0x348>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d00d      	beq.n	800193e <HAL_GPIO_Init+0x222>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a50      	ldr	r2, [pc, #320]	; (8001a68 <HAL_GPIO_Init+0x34c>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d007      	beq.n	800193a <HAL_GPIO_Init+0x21e>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a4f      	ldr	r2, [pc, #316]	; (8001a6c <HAL_GPIO_Init+0x350>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d101      	bne.n	8001936 <HAL_GPIO_Init+0x21a>
 8001932:	2309      	movs	r3, #9
 8001934:	e012      	b.n	800195c <HAL_GPIO_Init+0x240>
 8001936:	230a      	movs	r3, #10
 8001938:	e010      	b.n	800195c <HAL_GPIO_Init+0x240>
 800193a:	2308      	movs	r3, #8
 800193c:	e00e      	b.n	800195c <HAL_GPIO_Init+0x240>
 800193e:	2307      	movs	r3, #7
 8001940:	e00c      	b.n	800195c <HAL_GPIO_Init+0x240>
 8001942:	2306      	movs	r3, #6
 8001944:	e00a      	b.n	800195c <HAL_GPIO_Init+0x240>
 8001946:	2305      	movs	r3, #5
 8001948:	e008      	b.n	800195c <HAL_GPIO_Init+0x240>
 800194a:	2304      	movs	r3, #4
 800194c:	e006      	b.n	800195c <HAL_GPIO_Init+0x240>
 800194e:	2303      	movs	r3, #3
 8001950:	e004      	b.n	800195c <HAL_GPIO_Init+0x240>
 8001952:	2302      	movs	r3, #2
 8001954:	e002      	b.n	800195c <HAL_GPIO_Init+0x240>
 8001956:	2301      	movs	r3, #1
 8001958:	e000      	b.n	800195c <HAL_GPIO_Init+0x240>
 800195a:	2300      	movs	r3, #0
 800195c:	69fa      	ldr	r2, [r7, #28]
 800195e:	f002 0203 	and.w	r2, r2, #3
 8001962:	0092      	lsls	r2, r2, #2
 8001964:	4093      	lsls	r3, r2
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	4313      	orrs	r3, r2
 800196a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800196c:	4935      	ldr	r1, [pc, #212]	; (8001a44 <HAL_GPIO_Init+0x328>)
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	089b      	lsrs	r3, r3, #2
 8001972:	3302      	adds	r3, #2
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800197a:	4b3d      	ldr	r3, [pc, #244]	; (8001a70 <HAL_GPIO_Init+0x354>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	43db      	mvns	r3, r3
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	4013      	ands	r3, r2
 8001988:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d003      	beq.n	800199e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	4313      	orrs	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800199e:	4a34      	ldr	r2, [pc, #208]	; (8001a70 <HAL_GPIO_Init+0x354>)
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019a4:	4b32      	ldr	r3, [pc, #200]	; (8001a70 <HAL_GPIO_Init+0x354>)
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	43db      	mvns	r3, r3
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	4013      	ands	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d003      	beq.n	80019c8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019c8:	4a29      	ldr	r2, [pc, #164]	; (8001a70 <HAL_GPIO_Init+0x354>)
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019ce:	4b28      	ldr	r3, [pc, #160]	; (8001a70 <HAL_GPIO_Init+0x354>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	43db      	mvns	r3, r3
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	4013      	ands	r3, r2
 80019dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d003      	beq.n	80019f2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019f2:	4a1f      	ldr	r2, [pc, #124]	; (8001a70 <HAL_GPIO_Init+0x354>)
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019f8:	4b1d      	ldr	r3, [pc, #116]	; (8001a70 <HAL_GPIO_Init+0x354>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	43db      	mvns	r3, r3
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	4013      	ands	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d003      	beq.n	8001a1c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a1c:	4a14      	ldr	r2, [pc, #80]	; (8001a70 <HAL_GPIO_Init+0x354>)
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	3301      	adds	r3, #1
 8001a26:	61fb      	str	r3, [r7, #28]
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	2b0f      	cmp	r3, #15
 8001a2c:	f67f ae86 	bls.w	800173c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001a30:	bf00      	nop
 8001a32:	bf00      	nop
 8001a34:	3724      	adds	r7, #36	; 0x24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	40023800 	.word	0x40023800
 8001a44:	40013800 	.word	0x40013800
 8001a48:	40020000 	.word	0x40020000
 8001a4c:	40020400 	.word	0x40020400
 8001a50:	40020800 	.word	0x40020800
 8001a54:	40020c00 	.word	0x40020c00
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	40021400 	.word	0x40021400
 8001a60:	40021800 	.word	0x40021800
 8001a64:	40021c00 	.word	0x40021c00
 8001a68:	40022000 	.word	0x40022000
 8001a6c:	40022400 	.word	0x40022400
 8001a70:	40013c00 	.word	0x40013c00

08001a74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	807b      	strh	r3, [r7, #2]
 8001a80:	4613      	mov	r3, r2
 8001a82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a84:	787b      	ldrb	r3, [r7, #1]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d003      	beq.n	8001a92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a8a:	887a      	ldrh	r2, [r7, #2]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001a90:	e003      	b.n	8001a9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001a92:	887b      	ldrh	r3, [r7, #2]
 8001a94:	041a      	lsls	r2, r3, #16
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	619a      	str	r2, [r3, #24]
}
 8001a9a:	bf00      	nop
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
	...

08001aa8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001ab2:	4b23      	ldr	r3, [pc, #140]	; (8001b40 <HAL_PWREx_EnableOverDrive+0x98>)
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab6:	4a22      	ldr	r2, [pc, #136]	; (8001b40 <HAL_PWREx_EnableOverDrive+0x98>)
 8001ab8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001abc:	6413      	str	r3, [r2, #64]	; 0x40
 8001abe:	4b20      	ldr	r3, [pc, #128]	; (8001b40 <HAL_PWREx_EnableOverDrive+0x98>)
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac6:	603b      	str	r3, [r7, #0]
 8001ac8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001aca:	4b1e      	ldr	r3, [pc, #120]	; (8001b44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a1d      	ldr	r2, [pc, #116]	; (8001b44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ad0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ad4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ad6:	f7ff fd2f 	bl	8001538 <HAL_GetTick>
 8001ada:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001adc:	e009      	b.n	8001af2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001ade:	f7ff fd2b 	bl	8001538 <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001aec:	d901      	bls.n	8001af2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e022      	b.n	8001b38 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001af2:	4b14      	ldr	r3, [pc, #80]	; (8001b44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001afa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001afe:	d1ee      	bne.n	8001ade <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001b00:	4b10      	ldr	r3, [pc, #64]	; (8001b44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a0f      	ldr	r2, [pc, #60]	; (8001b44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b0a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b0c:	f7ff fd14 	bl	8001538 <HAL_GetTick>
 8001b10:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001b12:	e009      	b.n	8001b28 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001b14:	f7ff fd10 	bl	8001538 <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b22:	d901      	bls.n	8001b28 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e007      	b.n	8001b38 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001b28:	4b06      	ldr	r3, [pc, #24]	; (8001b44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001b34:	d1ee      	bne.n	8001b14 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001b36:	2300      	movs	r3, #0
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3708      	adds	r7, #8
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	40023800 	.word	0x40023800
 8001b44:	40007000 	.word	0x40007000

08001b48 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001b50:	2300      	movs	r3, #0
 8001b52:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d101      	bne.n	8001b5e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e291      	b.n	8002082 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0301 	and.w	r3, r3, #1
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	f000 8087 	beq.w	8001c7a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b6c:	4b96      	ldr	r3, [pc, #600]	; (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f003 030c 	and.w	r3, r3, #12
 8001b74:	2b04      	cmp	r3, #4
 8001b76:	d00c      	beq.n	8001b92 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b78:	4b93      	ldr	r3, [pc, #588]	; (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f003 030c 	and.w	r3, r3, #12
 8001b80:	2b08      	cmp	r3, #8
 8001b82:	d112      	bne.n	8001baa <HAL_RCC_OscConfig+0x62>
 8001b84:	4b90      	ldr	r3, [pc, #576]	; (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b90:	d10b      	bne.n	8001baa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b92:	4b8d      	ldr	r3, [pc, #564]	; (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d06c      	beq.n	8001c78 <HAL_RCC_OscConfig+0x130>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d168      	bne.n	8001c78 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e26b      	b.n	8002082 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bb2:	d106      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x7a>
 8001bb4:	4b84      	ldr	r3, [pc, #528]	; (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a83      	ldr	r2, [pc, #524]	; (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001bba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bbe:	6013      	str	r3, [r2, #0]
 8001bc0:	e02e      	b.n	8001c20 <HAL_RCC_OscConfig+0xd8>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d10c      	bne.n	8001be4 <HAL_RCC_OscConfig+0x9c>
 8001bca:	4b7f      	ldr	r3, [pc, #508]	; (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a7e      	ldr	r2, [pc, #504]	; (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001bd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bd4:	6013      	str	r3, [r2, #0]
 8001bd6:	4b7c      	ldr	r3, [pc, #496]	; (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a7b      	ldr	r2, [pc, #492]	; (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001bdc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001be0:	6013      	str	r3, [r2, #0]
 8001be2:	e01d      	b.n	8001c20 <HAL_RCC_OscConfig+0xd8>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bec:	d10c      	bne.n	8001c08 <HAL_RCC_OscConfig+0xc0>
 8001bee:	4b76      	ldr	r3, [pc, #472]	; (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a75      	ldr	r2, [pc, #468]	; (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001bf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bf8:	6013      	str	r3, [r2, #0]
 8001bfa:	4b73      	ldr	r3, [pc, #460]	; (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a72      	ldr	r2, [pc, #456]	; (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c04:	6013      	str	r3, [r2, #0]
 8001c06:	e00b      	b.n	8001c20 <HAL_RCC_OscConfig+0xd8>
 8001c08:	4b6f      	ldr	r3, [pc, #444]	; (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a6e      	ldr	r2, [pc, #440]	; (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001c0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c12:	6013      	str	r3, [r2, #0]
 8001c14:	4b6c      	ldr	r3, [pc, #432]	; (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a6b      	ldr	r2, [pc, #428]	; (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001c1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d013      	beq.n	8001c50 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c28:	f7ff fc86 	bl	8001538 <HAL_GetTick>
 8001c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c2e:	e008      	b.n	8001c42 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c30:	f7ff fc82 	bl	8001538 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b64      	cmp	r3, #100	; 0x64
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e21f      	b.n	8002082 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c42:	4b61      	ldr	r3, [pc, #388]	; (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d0f0      	beq.n	8001c30 <HAL_RCC_OscConfig+0xe8>
 8001c4e:	e014      	b.n	8001c7a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c50:	f7ff fc72 	bl	8001538 <HAL_GetTick>
 8001c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c56:	e008      	b.n	8001c6a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c58:	f7ff fc6e 	bl	8001538 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b64      	cmp	r3, #100	; 0x64
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e20b      	b.n	8002082 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c6a:	4b57      	ldr	r3, [pc, #348]	; (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d1f0      	bne.n	8001c58 <HAL_RCC_OscConfig+0x110>
 8001c76:	e000      	b.n	8001c7a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d069      	beq.n	8001d5a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c86:	4b50      	ldr	r3, [pc, #320]	; (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f003 030c 	and.w	r3, r3, #12
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d00b      	beq.n	8001caa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c92:	4b4d      	ldr	r3, [pc, #308]	; (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f003 030c 	and.w	r3, r3, #12
 8001c9a:	2b08      	cmp	r3, #8
 8001c9c:	d11c      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x190>
 8001c9e:	4b4a      	ldr	r3, [pc, #296]	; (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d116      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001caa:	4b47      	ldr	r3, [pc, #284]	; (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d005      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x17a>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d001      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e1df      	b.n	8002082 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cc2:	4b41      	ldr	r3, [pc, #260]	; (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	00db      	lsls	r3, r3, #3
 8001cd0:	493d      	ldr	r1, [pc, #244]	; (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cd6:	e040      	b.n	8001d5a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d023      	beq.n	8001d28 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ce0:	4b39      	ldr	r3, [pc, #228]	; (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a38      	ldr	r2, [pc, #224]	; (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001ce6:	f043 0301 	orr.w	r3, r3, #1
 8001cea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cec:	f7ff fc24 	bl	8001538 <HAL_GetTick>
 8001cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cf2:	e008      	b.n	8001d06 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cf4:	f7ff fc20 	bl	8001538 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e1bd      	b.n	8002082 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d06:	4b30      	ldr	r3, [pc, #192]	; (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d0f0      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d12:	4b2d      	ldr	r3, [pc, #180]	; (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	691b      	ldr	r3, [r3, #16]
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	4929      	ldr	r1, [pc, #164]	; (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	600b      	str	r3, [r1, #0]
 8001d26:	e018      	b.n	8001d5a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d28:	4b27      	ldr	r3, [pc, #156]	; (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a26      	ldr	r2, [pc, #152]	; (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001d2e:	f023 0301 	bic.w	r3, r3, #1
 8001d32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d34:	f7ff fc00 	bl	8001538 <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d3a:	e008      	b.n	8001d4e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d3c:	f7ff fbfc 	bl	8001538 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e199      	b.n	8002082 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d4e:	4b1e      	ldr	r3, [pc, #120]	; (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1f0      	bne.n	8001d3c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0308 	and.w	r3, r3, #8
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d038      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	695b      	ldr	r3, [r3, #20]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d019      	beq.n	8001da2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d6e:	4b16      	ldr	r3, [pc, #88]	; (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001d70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d72:	4a15      	ldr	r2, [pc, #84]	; (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001d74:	f043 0301 	orr.w	r3, r3, #1
 8001d78:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d7a:	f7ff fbdd 	bl	8001538 <HAL_GetTick>
 8001d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d80:	e008      	b.n	8001d94 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d82:	f7ff fbd9 	bl	8001538 <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d901      	bls.n	8001d94 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e176      	b.n	8002082 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d94:	4b0c      	ldr	r3, [pc, #48]	; (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001d96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d0f0      	beq.n	8001d82 <HAL_RCC_OscConfig+0x23a>
 8001da0:	e01a      	b.n	8001dd8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001da2:	4b09      	ldr	r3, [pc, #36]	; (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001da4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001da6:	4a08      	ldr	r2, [pc, #32]	; (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001da8:	f023 0301 	bic.w	r3, r3, #1
 8001dac:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dae:	f7ff fbc3 	bl	8001538 <HAL_GetTick>
 8001db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001db4:	e00a      	b.n	8001dcc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001db6:	f7ff fbbf 	bl	8001538 <HAL_GetTick>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d903      	bls.n	8001dcc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e15c      	b.n	8002082 <HAL_RCC_OscConfig+0x53a>
 8001dc8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dcc:	4b91      	ldr	r3, [pc, #580]	; (8002014 <HAL_RCC_OscConfig+0x4cc>)
 8001dce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dd0:	f003 0302 	and.w	r3, r3, #2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d1ee      	bne.n	8001db6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0304 	and.w	r3, r3, #4
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	f000 80a4 	beq.w	8001f2e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001de6:	4b8b      	ldr	r3, [pc, #556]	; (8002014 <HAL_RCC_OscConfig+0x4cc>)
 8001de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d10d      	bne.n	8001e0e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001df2:	4b88      	ldr	r3, [pc, #544]	; (8002014 <HAL_RCC_OscConfig+0x4cc>)
 8001df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df6:	4a87      	ldr	r2, [pc, #540]	; (8002014 <HAL_RCC_OscConfig+0x4cc>)
 8001df8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dfc:	6413      	str	r3, [r2, #64]	; 0x40
 8001dfe:	4b85      	ldr	r3, [pc, #532]	; (8002014 <HAL_RCC_OscConfig+0x4cc>)
 8001e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e06:	60bb      	str	r3, [r7, #8]
 8001e08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e0e:	4b82      	ldr	r3, [pc, #520]	; (8002018 <HAL_RCC_OscConfig+0x4d0>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d118      	bne.n	8001e4c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001e1a:	4b7f      	ldr	r3, [pc, #508]	; (8002018 <HAL_RCC_OscConfig+0x4d0>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a7e      	ldr	r2, [pc, #504]	; (8002018 <HAL_RCC_OscConfig+0x4d0>)
 8001e20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e26:	f7ff fb87 	bl	8001538 <HAL_GetTick>
 8001e2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e2c:	e008      	b.n	8001e40 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e2e:	f7ff fb83 	bl	8001538 <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	2b64      	cmp	r3, #100	; 0x64
 8001e3a:	d901      	bls.n	8001e40 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e120      	b.n	8002082 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e40:	4b75      	ldr	r3, [pc, #468]	; (8002018 <HAL_RCC_OscConfig+0x4d0>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d0f0      	beq.n	8001e2e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d106      	bne.n	8001e62 <HAL_RCC_OscConfig+0x31a>
 8001e54:	4b6f      	ldr	r3, [pc, #444]	; (8002014 <HAL_RCC_OscConfig+0x4cc>)
 8001e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e58:	4a6e      	ldr	r2, [pc, #440]	; (8002014 <HAL_RCC_OscConfig+0x4cc>)
 8001e5a:	f043 0301 	orr.w	r3, r3, #1
 8001e5e:	6713      	str	r3, [r2, #112]	; 0x70
 8001e60:	e02d      	b.n	8001ebe <HAL_RCC_OscConfig+0x376>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d10c      	bne.n	8001e84 <HAL_RCC_OscConfig+0x33c>
 8001e6a:	4b6a      	ldr	r3, [pc, #424]	; (8002014 <HAL_RCC_OscConfig+0x4cc>)
 8001e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e6e:	4a69      	ldr	r2, [pc, #420]	; (8002014 <HAL_RCC_OscConfig+0x4cc>)
 8001e70:	f023 0301 	bic.w	r3, r3, #1
 8001e74:	6713      	str	r3, [r2, #112]	; 0x70
 8001e76:	4b67      	ldr	r3, [pc, #412]	; (8002014 <HAL_RCC_OscConfig+0x4cc>)
 8001e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e7a:	4a66      	ldr	r2, [pc, #408]	; (8002014 <HAL_RCC_OscConfig+0x4cc>)
 8001e7c:	f023 0304 	bic.w	r3, r3, #4
 8001e80:	6713      	str	r3, [r2, #112]	; 0x70
 8001e82:	e01c      	b.n	8001ebe <HAL_RCC_OscConfig+0x376>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	2b05      	cmp	r3, #5
 8001e8a:	d10c      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x35e>
 8001e8c:	4b61      	ldr	r3, [pc, #388]	; (8002014 <HAL_RCC_OscConfig+0x4cc>)
 8001e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e90:	4a60      	ldr	r2, [pc, #384]	; (8002014 <HAL_RCC_OscConfig+0x4cc>)
 8001e92:	f043 0304 	orr.w	r3, r3, #4
 8001e96:	6713      	str	r3, [r2, #112]	; 0x70
 8001e98:	4b5e      	ldr	r3, [pc, #376]	; (8002014 <HAL_RCC_OscConfig+0x4cc>)
 8001e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e9c:	4a5d      	ldr	r2, [pc, #372]	; (8002014 <HAL_RCC_OscConfig+0x4cc>)
 8001e9e:	f043 0301 	orr.w	r3, r3, #1
 8001ea2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ea4:	e00b      	b.n	8001ebe <HAL_RCC_OscConfig+0x376>
 8001ea6:	4b5b      	ldr	r3, [pc, #364]	; (8002014 <HAL_RCC_OscConfig+0x4cc>)
 8001ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eaa:	4a5a      	ldr	r2, [pc, #360]	; (8002014 <HAL_RCC_OscConfig+0x4cc>)
 8001eac:	f023 0301 	bic.w	r3, r3, #1
 8001eb0:	6713      	str	r3, [r2, #112]	; 0x70
 8001eb2:	4b58      	ldr	r3, [pc, #352]	; (8002014 <HAL_RCC_OscConfig+0x4cc>)
 8001eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eb6:	4a57      	ldr	r2, [pc, #348]	; (8002014 <HAL_RCC_OscConfig+0x4cc>)
 8001eb8:	f023 0304 	bic.w	r3, r3, #4
 8001ebc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d015      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ec6:	f7ff fb37 	bl	8001538 <HAL_GetTick>
 8001eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ecc:	e00a      	b.n	8001ee4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ece:	f7ff fb33 	bl	8001538 <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d901      	bls.n	8001ee4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	e0ce      	b.n	8002082 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ee4:	4b4b      	ldr	r3, [pc, #300]	; (8002014 <HAL_RCC_OscConfig+0x4cc>)
 8001ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ee8:	f003 0302 	and.w	r3, r3, #2
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d0ee      	beq.n	8001ece <HAL_RCC_OscConfig+0x386>
 8001ef0:	e014      	b.n	8001f1c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ef2:	f7ff fb21 	bl	8001538 <HAL_GetTick>
 8001ef6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ef8:	e00a      	b.n	8001f10 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001efa:	f7ff fb1d 	bl	8001538 <HAL_GetTick>
 8001efe:	4602      	mov	r2, r0
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d901      	bls.n	8001f10 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e0b8      	b.n	8002082 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f10:	4b40      	ldr	r3, [pc, #256]	; (8002014 <HAL_RCC_OscConfig+0x4cc>)
 8001f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f14:	f003 0302 	and.w	r3, r3, #2
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d1ee      	bne.n	8001efa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f1c:	7dfb      	ldrb	r3, [r7, #23]
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d105      	bne.n	8001f2e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f22:	4b3c      	ldr	r3, [pc, #240]	; (8002014 <HAL_RCC_OscConfig+0x4cc>)
 8001f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f26:	4a3b      	ldr	r2, [pc, #236]	; (8002014 <HAL_RCC_OscConfig+0x4cc>)
 8001f28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f2c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	f000 80a4 	beq.w	8002080 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f38:	4b36      	ldr	r3, [pc, #216]	; (8002014 <HAL_RCC_OscConfig+0x4cc>)
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f003 030c 	and.w	r3, r3, #12
 8001f40:	2b08      	cmp	r3, #8
 8001f42:	d06b      	beq.n	800201c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d149      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f4c:	4b31      	ldr	r3, [pc, #196]	; (8002014 <HAL_RCC_OscConfig+0x4cc>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a30      	ldr	r2, [pc, #192]	; (8002014 <HAL_RCC_OscConfig+0x4cc>)
 8001f52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f58:	f7ff faee 	bl	8001538 <HAL_GetTick>
 8001f5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f5e:	e008      	b.n	8001f72 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f60:	f7ff faea 	bl	8001538 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e087      	b.n	8002082 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f72:	4b28      	ldr	r3, [pc, #160]	; (8002014 <HAL_RCC_OscConfig+0x4cc>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d1f0      	bne.n	8001f60 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	69da      	ldr	r2, [r3, #28]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a1b      	ldr	r3, [r3, #32]
 8001f86:	431a      	orrs	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8c:	019b      	lsls	r3, r3, #6
 8001f8e:	431a      	orrs	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f94:	085b      	lsrs	r3, r3, #1
 8001f96:	3b01      	subs	r3, #1
 8001f98:	041b      	lsls	r3, r3, #16
 8001f9a:	431a      	orrs	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa0:	061b      	lsls	r3, r3, #24
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	4a1b      	ldr	r2, [pc, #108]	; (8002014 <HAL_RCC_OscConfig+0x4cc>)
 8001fa6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001faa:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fac:	4b19      	ldr	r3, [pc, #100]	; (8002014 <HAL_RCC_OscConfig+0x4cc>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a18      	ldr	r2, [pc, #96]	; (8002014 <HAL_RCC_OscConfig+0x4cc>)
 8001fb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb8:	f7ff fabe 	bl	8001538 <HAL_GetTick>
 8001fbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fbe:	e008      	b.n	8001fd2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fc0:	f7ff faba 	bl	8001538 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e057      	b.n	8002082 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fd2:	4b10      	ldr	r3, [pc, #64]	; (8002014 <HAL_RCC_OscConfig+0x4cc>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d0f0      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x478>
 8001fde:	e04f      	b.n	8002080 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fe0:	4b0c      	ldr	r3, [pc, #48]	; (8002014 <HAL_RCC_OscConfig+0x4cc>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a0b      	ldr	r2, [pc, #44]	; (8002014 <HAL_RCC_OscConfig+0x4cc>)
 8001fe6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fec:	f7ff faa4 	bl	8001538 <HAL_GetTick>
 8001ff0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ff2:	e008      	b.n	8002006 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ff4:	f7ff faa0 	bl	8001538 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d901      	bls.n	8002006 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e03d      	b.n	8002082 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002006:	4b03      	ldr	r3, [pc, #12]	; (8002014 <HAL_RCC_OscConfig+0x4cc>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1f0      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x4ac>
 8002012:	e035      	b.n	8002080 <HAL_RCC_OscConfig+0x538>
 8002014:	40023800 	.word	0x40023800
 8002018:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800201c:	4b1b      	ldr	r3, [pc, #108]	; (800208c <HAL_RCC_OscConfig+0x544>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	699b      	ldr	r3, [r3, #24]
 8002026:	2b01      	cmp	r3, #1
 8002028:	d028      	beq.n	800207c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002034:	429a      	cmp	r2, r3
 8002036:	d121      	bne.n	800207c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002042:	429a      	cmp	r2, r3
 8002044:	d11a      	bne.n	800207c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002046:	68fa      	ldr	r2, [r7, #12]
 8002048:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800204c:	4013      	ands	r3, r2
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002052:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002054:	4293      	cmp	r3, r2
 8002056:	d111      	bne.n	800207c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002062:	085b      	lsrs	r3, r3, #1
 8002064:	3b01      	subs	r3, #1
 8002066:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002068:	429a      	cmp	r2, r3
 800206a:	d107      	bne.n	800207c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002076:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002078:	429a      	cmp	r2, r3
 800207a:	d001      	beq.n	8002080 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e000      	b.n	8002082 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3718      	adds	r7, #24
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	40023800 	.word	0x40023800

08002090 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800209a:	2300      	movs	r3, #0
 800209c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d101      	bne.n	80020a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e0d0      	b.n	800224a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020a8:	4b6a      	ldr	r3, [pc, #424]	; (8002254 <HAL_RCC_ClockConfig+0x1c4>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 030f 	and.w	r3, r3, #15
 80020b0:	683a      	ldr	r2, [r7, #0]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d910      	bls.n	80020d8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020b6:	4b67      	ldr	r3, [pc, #412]	; (8002254 <HAL_RCC_ClockConfig+0x1c4>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f023 020f 	bic.w	r2, r3, #15
 80020be:	4965      	ldr	r1, [pc, #404]	; (8002254 <HAL_RCC_ClockConfig+0x1c4>)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020c6:	4b63      	ldr	r3, [pc, #396]	; (8002254 <HAL_RCC_ClockConfig+0x1c4>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 030f 	and.w	r3, r3, #15
 80020ce:	683a      	ldr	r2, [r7, #0]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d001      	beq.n	80020d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e0b8      	b.n	800224a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0302 	and.w	r3, r3, #2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d020      	beq.n	8002126 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0304 	and.w	r3, r3, #4
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d005      	beq.n	80020fc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020f0:	4b59      	ldr	r3, [pc, #356]	; (8002258 <HAL_RCC_ClockConfig+0x1c8>)
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	4a58      	ldr	r2, [pc, #352]	; (8002258 <HAL_RCC_ClockConfig+0x1c8>)
 80020f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80020fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0308 	and.w	r3, r3, #8
 8002104:	2b00      	cmp	r3, #0
 8002106:	d005      	beq.n	8002114 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002108:	4b53      	ldr	r3, [pc, #332]	; (8002258 <HAL_RCC_ClockConfig+0x1c8>)
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	4a52      	ldr	r2, [pc, #328]	; (8002258 <HAL_RCC_ClockConfig+0x1c8>)
 800210e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002112:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002114:	4b50      	ldr	r3, [pc, #320]	; (8002258 <HAL_RCC_ClockConfig+0x1c8>)
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	494d      	ldr	r1, [pc, #308]	; (8002258 <HAL_RCC_ClockConfig+0x1c8>)
 8002122:	4313      	orrs	r3, r2
 8002124:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	2b00      	cmp	r3, #0
 8002130:	d040      	beq.n	80021b4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	2b01      	cmp	r3, #1
 8002138:	d107      	bne.n	800214a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800213a:	4b47      	ldr	r3, [pc, #284]	; (8002258 <HAL_RCC_ClockConfig+0x1c8>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d115      	bne.n	8002172 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e07f      	b.n	800224a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	2b02      	cmp	r3, #2
 8002150:	d107      	bne.n	8002162 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002152:	4b41      	ldr	r3, [pc, #260]	; (8002258 <HAL_RCC_ClockConfig+0x1c8>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d109      	bne.n	8002172 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e073      	b.n	800224a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002162:	4b3d      	ldr	r3, [pc, #244]	; (8002258 <HAL_RCC_ClockConfig+0x1c8>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e06b      	b.n	800224a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002172:	4b39      	ldr	r3, [pc, #228]	; (8002258 <HAL_RCC_ClockConfig+0x1c8>)
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	f023 0203 	bic.w	r2, r3, #3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	4936      	ldr	r1, [pc, #216]	; (8002258 <HAL_RCC_ClockConfig+0x1c8>)
 8002180:	4313      	orrs	r3, r2
 8002182:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002184:	f7ff f9d8 	bl	8001538 <HAL_GetTick>
 8002188:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800218a:	e00a      	b.n	80021a2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800218c:	f7ff f9d4 	bl	8001538 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	f241 3288 	movw	r2, #5000	; 0x1388
 800219a:	4293      	cmp	r3, r2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e053      	b.n	800224a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021a2:	4b2d      	ldr	r3, [pc, #180]	; (8002258 <HAL_RCC_ClockConfig+0x1c8>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f003 020c 	and.w	r2, r3, #12
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d1eb      	bne.n	800218c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021b4:	4b27      	ldr	r3, [pc, #156]	; (8002254 <HAL_RCC_ClockConfig+0x1c4>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 030f 	and.w	r3, r3, #15
 80021bc:	683a      	ldr	r2, [r7, #0]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d210      	bcs.n	80021e4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021c2:	4b24      	ldr	r3, [pc, #144]	; (8002254 <HAL_RCC_ClockConfig+0x1c4>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f023 020f 	bic.w	r2, r3, #15
 80021ca:	4922      	ldr	r1, [pc, #136]	; (8002254 <HAL_RCC_ClockConfig+0x1c4>)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021d2:	4b20      	ldr	r3, [pc, #128]	; (8002254 <HAL_RCC_ClockConfig+0x1c4>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 030f 	and.w	r3, r3, #15
 80021da:	683a      	ldr	r2, [r7, #0]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d001      	beq.n	80021e4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e032      	b.n	800224a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0304 	and.w	r3, r3, #4
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d008      	beq.n	8002202 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021f0:	4b19      	ldr	r3, [pc, #100]	; (8002258 <HAL_RCC_ClockConfig+0x1c8>)
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	4916      	ldr	r1, [pc, #88]	; (8002258 <HAL_RCC_ClockConfig+0x1c8>)
 80021fe:	4313      	orrs	r3, r2
 8002200:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0308 	and.w	r3, r3, #8
 800220a:	2b00      	cmp	r3, #0
 800220c:	d009      	beq.n	8002222 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800220e:	4b12      	ldr	r3, [pc, #72]	; (8002258 <HAL_RCC_ClockConfig+0x1c8>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	00db      	lsls	r3, r3, #3
 800221c:	490e      	ldr	r1, [pc, #56]	; (8002258 <HAL_RCC_ClockConfig+0x1c8>)
 800221e:	4313      	orrs	r3, r2
 8002220:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002222:	f000 f821 	bl	8002268 <HAL_RCC_GetSysClockFreq>
 8002226:	4602      	mov	r2, r0
 8002228:	4b0b      	ldr	r3, [pc, #44]	; (8002258 <HAL_RCC_ClockConfig+0x1c8>)
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	091b      	lsrs	r3, r3, #4
 800222e:	f003 030f 	and.w	r3, r3, #15
 8002232:	490a      	ldr	r1, [pc, #40]	; (800225c <HAL_RCC_ClockConfig+0x1cc>)
 8002234:	5ccb      	ldrb	r3, [r1, r3]
 8002236:	fa22 f303 	lsr.w	r3, r2, r3
 800223a:	4a09      	ldr	r2, [pc, #36]	; (8002260 <HAL_RCC_ClockConfig+0x1d0>)
 800223c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800223e:	4b09      	ldr	r3, [pc, #36]	; (8002264 <HAL_RCC_ClockConfig+0x1d4>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4618      	mov	r0, r3
 8002244:	f7ff f934 	bl	80014b0 <HAL_InitTick>

  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3710      	adds	r7, #16
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	40023c00 	.word	0x40023c00
 8002258:	40023800 	.word	0x40023800
 800225c:	08006328 	.word	0x08006328
 8002260:	20000000 	.word	0x20000000
 8002264:	20000004 	.word	0x20000004

08002268 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002268:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800226c:	b090      	sub	sp, #64	; 0x40
 800226e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002270:	2300      	movs	r3, #0
 8002272:	637b      	str	r3, [r7, #52]	; 0x34
 8002274:	2300      	movs	r3, #0
 8002276:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002278:	2300      	movs	r3, #0
 800227a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 800227c:	2300      	movs	r3, #0
 800227e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002280:	4b59      	ldr	r3, [pc, #356]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f003 030c 	and.w	r3, r3, #12
 8002288:	2b08      	cmp	r3, #8
 800228a:	d00d      	beq.n	80022a8 <HAL_RCC_GetSysClockFreq+0x40>
 800228c:	2b08      	cmp	r3, #8
 800228e:	f200 80a1 	bhi.w	80023d4 <HAL_RCC_GetSysClockFreq+0x16c>
 8002292:	2b00      	cmp	r3, #0
 8002294:	d002      	beq.n	800229c <HAL_RCC_GetSysClockFreq+0x34>
 8002296:	2b04      	cmp	r3, #4
 8002298:	d003      	beq.n	80022a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800229a:	e09b      	b.n	80023d4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800229c:	4b53      	ldr	r3, [pc, #332]	; (80023ec <HAL_RCC_GetSysClockFreq+0x184>)
 800229e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80022a0:	e09b      	b.n	80023da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022a2:	4b53      	ldr	r3, [pc, #332]	; (80023f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80022a4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80022a6:	e098      	b.n	80023da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022a8:	4b4f      	ldr	r3, [pc, #316]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022b0:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80022b2:	4b4d      	ldr	r3, [pc, #308]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d028      	beq.n	8002310 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022be:	4b4a      	ldr	r3, [pc, #296]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	099b      	lsrs	r3, r3, #6
 80022c4:	2200      	movs	r2, #0
 80022c6:	623b      	str	r3, [r7, #32]
 80022c8:	627a      	str	r2, [r7, #36]	; 0x24
 80022ca:	6a3b      	ldr	r3, [r7, #32]
 80022cc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80022d0:	2100      	movs	r1, #0
 80022d2:	4b47      	ldr	r3, [pc, #284]	; (80023f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80022d4:	fb03 f201 	mul.w	r2, r3, r1
 80022d8:	2300      	movs	r3, #0
 80022da:	fb00 f303 	mul.w	r3, r0, r3
 80022de:	4413      	add	r3, r2
 80022e0:	4a43      	ldr	r2, [pc, #268]	; (80023f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80022e2:	fba0 1202 	umull	r1, r2, r0, r2
 80022e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80022e8:	460a      	mov	r2, r1
 80022ea:	62ba      	str	r2, [r7, #40]	; 0x28
 80022ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022ee:	4413      	add	r3, r2
 80022f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022f4:	2200      	movs	r2, #0
 80022f6:	61bb      	str	r3, [r7, #24]
 80022f8:	61fa      	str	r2, [r7, #28]
 80022fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022fe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002302:	f7fd ff85 	bl	8000210 <__aeabi_uldivmod>
 8002306:	4602      	mov	r2, r0
 8002308:	460b      	mov	r3, r1
 800230a:	4613      	mov	r3, r2
 800230c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800230e:	e053      	b.n	80023b8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002310:	4b35      	ldr	r3, [pc, #212]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	099b      	lsrs	r3, r3, #6
 8002316:	2200      	movs	r2, #0
 8002318:	613b      	str	r3, [r7, #16]
 800231a:	617a      	str	r2, [r7, #20]
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002322:	f04f 0b00 	mov.w	fp, #0
 8002326:	4652      	mov	r2, sl
 8002328:	465b      	mov	r3, fp
 800232a:	f04f 0000 	mov.w	r0, #0
 800232e:	f04f 0100 	mov.w	r1, #0
 8002332:	0159      	lsls	r1, r3, #5
 8002334:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002338:	0150      	lsls	r0, r2, #5
 800233a:	4602      	mov	r2, r0
 800233c:	460b      	mov	r3, r1
 800233e:	ebb2 080a 	subs.w	r8, r2, sl
 8002342:	eb63 090b 	sbc.w	r9, r3, fp
 8002346:	f04f 0200 	mov.w	r2, #0
 800234a:	f04f 0300 	mov.w	r3, #0
 800234e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002352:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002356:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800235a:	ebb2 0408 	subs.w	r4, r2, r8
 800235e:	eb63 0509 	sbc.w	r5, r3, r9
 8002362:	f04f 0200 	mov.w	r2, #0
 8002366:	f04f 0300 	mov.w	r3, #0
 800236a:	00eb      	lsls	r3, r5, #3
 800236c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002370:	00e2      	lsls	r2, r4, #3
 8002372:	4614      	mov	r4, r2
 8002374:	461d      	mov	r5, r3
 8002376:	eb14 030a 	adds.w	r3, r4, sl
 800237a:	603b      	str	r3, [r7, #0]
 800237c:	eb45 030b 	adc.w	r3, r5, fp
 8002380:	607b      	str	r3, [r7, #4]
 8002382:	f04f 0200 	mov.w	r2, #0
 8002386:	f04f 0300 	mov.w	r3, #0
 800238a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800238e:	4629      	mov	r1, r5
 8002390:	028b      	lsls	r3, r1, #10
 8002392:	4621      	mov	r1, r4
 8002394:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002398:	4621      	mov	r1, r4
 800239a:	028a      	lsls	r2, r1, #10
 800239c:	4610      	mov	r0, r2
 800239e:	4619      	mov	r1, r3
 80023a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023a2:	2200      	movs	r2, #0
 80023a4:	60bb      	str	r3, [r7, #8]
 80023a6:	60fa      	str	r2, [r7, #12]
 80023a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023ac:	f7fd ff30 	bl	8000210 <__aeabi_uldivmod>
 80023b0:	4602      	mov	r2, r0
 80023b2:	460b      	mov	r3, r1
 80023b4:	4613      	mov	r3, r2
 80023b6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80023b8:	4b0b      	ldr	r3, [pc, #44]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	0c1b      	lsrs	r3, r3, #16
 80023be:	f003 0303 	and.w	r3, r3, #3
 80023c2:	3301      	adds	r3, #1
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80023c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80023ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80023d0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80023d2:	e002      	b.n	80023da <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023d4:	4b05      	ldr	r3, [pc, #20]	; (80023ec <HAL_RCC_GetSysClockFreq+0x184>)
 80023d6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80023d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3740      	adds	r7, #64	; 0x40
 80023e0:	46bd      	mov	sp, r7
 80023e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023e6:	bf00      	nop
 80023e8:	40023800 	.word	0x40023800
 80023ec:	00f42400 	.word	0x00f42400
 80023f0:	017d7840 	.word	0x017d7840

080023f4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023f8:	4b03      	ldr	r3, [pc, #12]	; (8002408 <HAL_RCC_GetHCLKFreq+0x14>)
 80023fa:	681b      	ldr	r3, [r3, #0]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	20000000 	.word	0x20000000

0800240c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002410:	f7ff fff0 	bl	80023f4 <HAL_RCC_GetHCLKFreq>
 8002414:	4602      	mov	r2, r0
 8002416:	4b05      	ldr	r3, [pc, #20]	; (800242c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	0a9b      	lsrs	r3, r3, #10
 800241c:	f003 0307 	and.w	r3, r3, #7
 8002420:	4903      	ldr	r1, [pc, #12]	; (8002430 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002422:	5ccb      	ldrb	r3, [r1, r3]
 8002424:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002428:	4618      	mov	r0, r3
 800242a:	bd80      	pop	{r7, pc}
 800242c:	40023800 	.word	0x40023800
 8002430:	08006338 	.word	0x08006338

08002434 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002438:	f7ff ffdc 	bl	80023f4 <HAL_RCC_GetHCLKFreq>
 800243c:	4602      	mov	r2, r0
 800243e:	4b05      	ldr	r3, [pc, #20]	; (8002454 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	0b5b      	lsrs	r3, r3, #13
 8002444:	f003 0307 	and.w	r3, r3, #7
 8002448:	4903      	ldr	r1, [pc, #12]	; (8002458 <HAL_RCC_GetPCLK2Freq+0x24>)
 800244a:	5ccb      	ldrb	r3, [r1, r3]
 800244c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002450:	4618      	mov	r0, r3
 8002452:	bd80      	pop	{r7, pc}
 8002454:	40023800 	.word	0x40023800
 8002458:	08006338 	.word	0x08006338

0800245c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b088      	sub	sp, #32
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002464:	2300      	movs	r3, #0
 8002466:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002468:	2300      	movs	r3, #0
 800246a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800246c:	2300      	movs	r3, #0
 800246e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002470:	2300      	movs	r3, #0
 8002472:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002474:	2300      	movs	r3, #0
 8002476:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0301 	and.w	r3, r3, #1
 8002480:	2b00      	cmp	r3, #0
 8002482:	d012      	beq.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002484:	4b69      	ldr	r3, [pc, #420]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	4a68      	ldr	r2, [pc, #416]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800248a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800248e:	6093      	str	r3, [r2, #8]
 8002490:	4b66      	ldr	r3, [pc, #408]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002492:	689a      	ldr	r2, [r3, #8]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002498:	4964      	ldr	r1, [pc, #400]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800249a:	4313      	orrs	r3, r2
 800249c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80024a6:	2301      	movs	r3, #1
 80024a8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d017      	beq.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024b6:	4b5d      	ldr	r3, [pc, #372]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024c4:	4959      	ldr	r1, [pc, #356]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024d4:	d101      	bne.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80024d6:	2301      	movs	r3, #1
 80024d8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d101      	bne.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80024e2:	2301      	movs	r3, #1
 80024e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d017      	beq.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80024f2:	4b4e      	ldr	r3, [pc, #312]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024f8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002500:	494a      	ldr	r1, [pc, #296]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002502:	4313      	orrs	r3, r2
 8002504:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002510:	d101      	bne.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002512:	2301      	movs	r3, #1
 8002514:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251a:	2b00      	cmp	r3, #0
 800251c:	d101      	bne.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800251e:	2301      	movs	r3, #1
 8002520:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800252e:	2301      	movs	r3, #1
 8002530:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0320 	and.w	r3, r3, #32
 800253a:	2b00      	cmp	r3, #0
 800253c:	f000 808b 	beq.w	8002656 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002540:	4b3a      	ldr	r3, [pc, #232]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002544:	4a39      	ldr	r2, [pc, #228]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002546:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800254a:	6413      	str	r3, [r2, #64]	; 0x40
 800254c:	4b37      	ldr	r3, [pc, #220]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800254e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002550:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002554:	60bb      	str	r3, [r7, #8]
 8002556:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002558:	4b35      	ldr	r3, [pc, #212]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a34      	ldr	r2, [pc, #208]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800255e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002562:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002564:	f7fe ffe8 	bl	8001538 <HAL_GetTick>
 8002568:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800256a:	e008      	b.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800256c:	f7fe ffe4 	bl	8001538 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b64      	cmp	r3, #100	; 0x64
 8002578:	d901      	bls.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e357      	b.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800257e:	4b2c      	ldr	r3, [pc, #176]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002586:	2b00      	cmp	r3, #0
 8002588:	d0f0      	beq.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800258a:	4b28      	ldr	r3, [pc, #160]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800258c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800258e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002592:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d035      	beq.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d02e      	beq.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80025a8:	4b20      	ldr	r3, [pc, #128]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025b0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80025b2:	4b1e      	ldr	r3, [pc, #120]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025b6:	4a1d      	ldr	r2, [pc, #116]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025bc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80025be:	4b1b      	ldr	r3, [pc, #108]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c2:	4a1a      	ldr	r2, [pc, #104]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025c8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80025ca:	4a18      	ldr	r2, [pc, #96]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80025d0:	4b16      	ldr	r3, [pc, #88]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d4:	f003 0301 	and.w	r3, r3, #1
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d114      	bne.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025dc:	f7fe ffac 	bl	8001538 <HAL_GetTick>
 80025e0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025e2:	e00a      	b.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025e4:	f7fe ffa8 	bl	8001538 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d901      	bls.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e319      	b.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025fa:	4b0c      	ldr	r3, [pc, #48]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d0ee      	beq.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800260e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002612:	d111      	bne.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002614:	4b05      	ldr	r3, [pc, #20]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002620:	4b04      	ldr	r3, [pc, #16]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002622:	400b      	ands	r3, r1
 8002624:	4901      	ldr	r1, [pc, #4]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002626:	4313      	orrs	r3, r2
 8002628:	608b      	str	r3, [r1, #8]
 800262a:	e00b      	b.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800262c:	40023800 	.word	0x40023800
 8002630:	40007000 	.word	0x40007000
 8002634:	0ffffcff 	.word	0x0ffffcff
 8002638:	4baa      	ldr	r3, [pc, #680]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	4aa9      	ldr	r2, [pc, #676]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800263e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002642:	6093      	str	r3, [r2, #8]
 8002644:	4ba7      	ldr	r3, [pc, #668]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002646:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002650:	49a4      	ldr	r1, [pc, #656]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002652:	4313      	orrs	r3, r2
 8002654:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0310 	and.w	r3, r3, #16
 800265e:	2b00      	cmp	r3, #0
 8002660:	d010      	beq.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002662:	4ba0      	ldr	r3, [pc, #640]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002664:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002668:	4a9e      	ldr	r2, [pc, #632]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800266a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800266e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002672:	4b9c      	ldr	r3, [pc, #624]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002674:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800267c:	4999      	ldr	r1, [pc, #612]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800267e:	4313      	orrs	r3, r2
 8002680:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d00a      	beq.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002690:	4b94      	ldr	r3, [pc, #592]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002696:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800269e:	4991      	ldr	r1, [pc, #580]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00a      	beq.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80026b2:	4b8c      	ldr	r3, [pc, #560]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026c0:	4988      	ldr	r1, [pc, #544]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d00a      	beq.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80026d4:	4b83      	ldr	r3, [pc, #524]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026e2:	4980      	ldr	r1, [pc, #512]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d00a      	beq.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80026f6:	4b7b      	ldr	r3, [pc, #492]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026fc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002704:	4977      	ldr	r1, [pc, #476]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002706:	4313      	orrs	r3, r2
 8002708:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002714:	2b00      	cmp	r3, #0
 8002716:	d00a      	beq.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002718:	4b72      	ldr	r3, [pc, #456]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800271a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800271e:	f023 0203 	bic.w	r2, r3, #3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002726:	496f      	ldr	r1, [pc, #444]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002728:	4313      	orrs	r3, r2
 800272a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002736:	2b00      	cmp	r3, #0
 8002738:	d00a      	beq.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800273a:	4b6a      	ldr	r3, [pc, #424]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800273c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002740:	f023 020c 	bic.w	r2, r3, #12
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002748:	4966      	ldr	r1, [pc, #408]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800274a:	4313      	orrs	r3, r2
 800274c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002758:	2b00      	cmp	r3, #0
 800275a:	d00a      	beq.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800275c:	4b61      	ldr	r3, [pc, #388]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800275e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002762:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800276a:	495e      	ldr	r1, [pc, #376]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800276c:	4313      	orrs	r3, r2
 800276e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800277a:	2b00      	cmp	r3, #0
 800277c:	d00a      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800277e:	4b59      	ldr	r3, [pc, #356]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002784:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800278c:	4955      	ldr	r1, [pc, #340]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800278e:	4313      	orrs	r3, r2
 8002790:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800279c:	2b00      	cmp	r3, #0
 800279e:	d00a      	beq.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80027a0:	4b50      	ldr	r3, [pc, #320]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ae:	494d      	ldr	r1, [pc, #308]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d00a      	beq.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80027c2:	4b48      	ldr	r3, [pc, #288]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027c8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d0:	4944      	ldr	r1, [pc, #272]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d00a      	beq.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80027e4:	4b3f      	ldr	r3, [pc, #252]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027f2:	493c      	ldr	r1, [pc, #240]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d00a      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002806:	4b37      	ldr	r3, [pc, #220]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800280c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002814:	4933      	ldr	r1, [pc, #204]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002816:	4313      	orrs	r3, r2
 8002818:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d00a      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002828:	4b2e      	ldr	r3, [pc, #184]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800282a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800282e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002836:	492b      	ldr	r1, [pc, #172]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002838:	4313      	orrs	r3, r2
 800283a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d011      	beq.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800284a:	4b26      	ldr	r3, [pc, #152]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800284c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002850:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002858:	4922      	ldr	r1, [pc, #136]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800285a:	4313      	orrs	r3, r2
 800285c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002864:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002868:	d101      	bne.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800286a:	2301      	movs	r3, #1
 800286c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0308 	and.w	r3, r3, #8
 8002876:	2b00      	cmp	r3, #0
 8002878:	d001      	beq.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800287a:	2301      	movs	r3, #1
 800287c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d00a      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800288a:	4b16      	ldr	r3, [pc, #88]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800288c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002890:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002898:	4912      	ldr	r1, [pc, #72]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800289a:	4313      	orrs	r3, r2
 800289c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d00b      	beq.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80028ac:	4b0d      	ldr	r3, [pc, #52]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028bc:	4909      	ldr	r1, [pc, #36]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d006      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f000 80d9 	beq.w	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80028d8:	4b02      	ldr	r3, [pc, #8]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a01      	ldr	r2, [pc, #4]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80028e2:	e001      	b.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80028e4:	40023800 	.word	0x40023800
 80028e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028ea:	f7fe fe25 	bl	8001538 <HAL_GetTick>
 80028ee:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80028f0:	e008      	b.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80028f2:	f7fe fe21 	bl	8001538 <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	2b64      	cmp	r3, #100	; 0x64
 80028fe:	d901      	bls.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e194      	b.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002904:	4b6c      	ldr	r3, [pc, #432]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d1f0      	bne.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0301 	and.w	r3, r3, #1
 8002918:	2b00      	cmp	r3, #0
 800291a:	d021      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002920:	2b00      	cmp	r3, #0
 8002922:	d11d      	bne.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002924:	4b64      	ldr	r3, [pc, #400]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002926:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800292a:	0c1b      	lsrs	r3, r3, #16
 800292c:	f003 0303 	and.w	r3, r3, #3
 8002930:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002932:	4b61      	ldr	r3, [pc, #388]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002934:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002938:	0e1b      	lsrs	r3, r3, #24
 800293a:	f003 030f 	and.w	r3, r3, #15
 800293e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	019a      	lsls	r2, r3, #6
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	041b      	lsls	r3, r3, #16
 800294a:	431a      	orrs	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	061b      	lsls	r3, r3, #24
 8002950:	431a      	orrs	r2, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	071b      	lsls	r3, r3, #28
 8002958:	4957      	ldr	r1, [pc, #348]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800295a:	4313      	orrs	r3, r2
 800295c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d004      	beq.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002970:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002974:	d00a      	beq.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800297e:	2b00      	cmp	r3, #0
 8002980:	d02e      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002986:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800298a:	d129      	bne.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800298c:	4b4a      	ldr	r3, [pc, #296]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800298e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002992:	0c1b      	lsrs	r3, r3, #16
 8002994:	f003 0303 	and.w	r3, r3, #3
 8002998:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800299a:	4b47      	ldr	r3, [pc, #284]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800299c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029a0:	0f1b      	lsrs	r3, r3, #28
 80029a2:	f003 0307 	and.w	r3, r3, #7
 80029a6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	019a      	lsls	r2, r3, #6
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	041b      	lsls	r3, r3, #16
 80029b2:	431a      	orrs	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	061b      	lsls	r3, r3, #24
 80029ba:	431a      	orrs	r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	071b      	lsls	r3, r3, #28
 80029c0:	493d      	ldr	r1, [pc, #244]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80029c8:	4b3b      	ldr	r3, [pc, #236]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029ce:	f023 021f 	bic.w	r2, r3, #31
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d6:	3b01      	subs	r3, #1
 80029d8:	4937      	ldr	r1, [pc, #220]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d01d      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80029ec:	4b32      	ldr	r3, [pc, #200]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029f2:	0e1b      	lsrs	r3, r3, #24
 80029f4:	f003 030f 	and.w	r3, r3, #15
 80029f8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80029fa:	4b2f      	ldr	r3, [pc, #188]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a00:	0f1b      	lsrs	r3, r3, #28
 8002a02:	f003 0307 	and.w	r3, r3, #7
 8002a06:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	019a      	lsls	r2, r3, #6
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	691b      	ldr	r3, [r3, #16]
 8002a12:	041b      	lsls	r3, r3, #16
 8002a14:	431a      	orrs	r2, r3
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	061b      	lsls	r3, r3, #24
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	071b      	lsls	r3, r3, #28
 8002a20:	4925      	ldr	r1, [pc, #148]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d011      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	019a      	lsls	r2, r3, #6
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	041b      	lsls	r3, r3, #16
 8002a40:	431a      	orrs	r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	061b      	lsls	r3, r3, #24
 8002a48:	431a      	orrs	r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	071b      	lsls	r3, r3, #28
 8002a50:	4919      	ldr	r1, [pc, #100]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002a58:	4b17      	ldr	r3, [pc, #92]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a16      	ldr	r2, [pc, #88]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a5e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a64:	f7fe fd68 	bl	8001538 <HAL_GetTick>
 8002a68:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a6a:	e008      	b.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002a6c:	f7fe fd64 	bl	8001538 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b64      	cmp	r3, #100	; 0x64
 8002a78:	d901      	bls.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e0d7      	b.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a7e:	4b0e      	ldr	r3, [pc, #56]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d0f0      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	f040 80cd 	bne.w	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002a92:	4b09      	ldr	r3, [pc, #36]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a08      	ldr	r2, [pc, #32]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a9e:	f7fe fd4b 	bl	8001538 <HAL_GetTick>
 8002aa2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002aa4:	e00a      	b.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002aa6:	f7fe fd47 	bl	8001538 <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	2b64      	cmp	r3, #100	; 0x64
 8002ab2:	d903      	bls.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e0ba      	b.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002ab8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002abc:	4b5e      	ldr	r3, [pc, #376]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ac4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ac8:	d0ed      	beq.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d003      	beq.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d009      	beq.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d02e      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d12a      	bne.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002af2:	4b51      	ldr	r3, [pc, #324]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002af8:	0c1b      	lsrs	r3, r3, #16
 8002afa:	f003 0303 	and.w	r3, r3, #3
 8002afe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002b00:	4b4d      	ldr	r3, [pc, #308]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b06:	0f1b      	lsrs	r3, r3, #28
 8002b08:	f003 0307 	and.w	r3, r3, #7
 8002b0c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	019a      	lsls	r2, r3, #6
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	041b      	lsls	r3, r3, #16
 8002b18:	431a      	orrs	r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	699b      	ldr	r3, [r3, #24]
 8002b1e:	061b      	lsls	r3, r3, #24
 8002b20:	431a      	orrs	r2, r3
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	071b      	lsls	r3, r3, #28
 8002b26:	4944      	ldr	r1, [pc, #272]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002b2e:	4b42      	ldr	r3, [pc, #264]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b34:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	021b      	lsls	r3, r3, #8
 8002b40:	493d      	ldr	r1, [pc, #244]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d022      	beq.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b5c:	d11d      	bne.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002b5e:	4b36      	ldr	r3, [pc, #216]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b64:	0e1b      	lsrs	r3, r3, #24
 8002b66:	f003 030f 	and.w	r3, r3, #15
 8002b6a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002b6c:	4b32      	ldr	r3, [pc, #200]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b72:	0f1b      	lsrs	r3, r3, #28
 8002b74:	f003 0307 	and.w	r3, r3, #7
 8002b78:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	695b      	ldr	r3, [r3, #20]
 8002b7e:	019a      	lsls	r2, r3, #6
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a1b      	ldr	r3, [r3, #32]
 8002b84:	041b      	lsls	r3, r3, #16
 8002b86:	431a      	orrs	r2, r3
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	061b      	lsls	r3, r3, #24
 8002b8c:	431a      	orrs	r2, r3
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	071b      	lsls	r3, r3, #28
 8002b92:	4929      	ldr	r1, [pc, #164]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0308 	and.w	r3, r3, #8
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d028      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002ba6:	4b24      	ldr	r3, [pc, #144]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bac:	0e1b      	lsrs	r3, r3, #24
 8002bae:	f003 030f 	and.w	r3, r3, #15
 8002bb2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002bb4:	4b20      	ldr	r3, [pc, #128]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bba:	0c1b      	lsrs	r3, r3, #16
 8002bbc:	f003 0303 	and.w	r3, r3, #3
 8002bc0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	695b      	ldr	r3, [r3, #20]
 8002bc6:	019a      	lsls	r2, r3, #6
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	041b      	lsls	r3, r3, #16
 8002bcc:	431a      	orrs	r2, r3
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	061b      	lsls	r3, r3, #24
 8002bd2:	431a      	orrs	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	69db      	ldr	r3, [r3, #28]
 8002bd8:	071b      	lsls	r3, r3, #28
 8002bda:	4917      	ldr	r1, [pc, #92]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002be2:	4b15      	ldr	r3, [pc, #84]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002be4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002be8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf0:	4911      	ldr	r1, [pc, #68]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002bf8:	4b0f      	ldr	r3, [pc, #60]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a0e      	ldr	r2, [pc, #56]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002bfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c04:	f7fe fc98 	bl	8001538 <HAL_GetTick>
 8002c08:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002c0a:	e008      	b.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002c0c:	f7fe fc94 	bl	8001538 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b64      	cmp	r3, #100	; 0x64
 8002c18:	d901      	bls.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e007      	b.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002c1e:	4b06      	ldr	r3, [pc, #24]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c2a:	d1ef      	bne.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3720      	adds	r7, #32
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	40023800 	.word	0x40023800

08002c3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e040      	b.n	8002cd0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d106      	bne.n	8002c64 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f7fe fb6e 	bl	8001340 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2224      	movs	r2, #36	; 0x24
 8002c68:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f022 0201 	bic.w	r2, r2, #1
 8002c78:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 f8b0 	bl	8002de0 <UART_SetConfig>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d101      	bne.n	8002c8a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e022      	b.n	8002cd0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d002      	beq.n	8002c98 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 fb08 	bl	80032a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	685a      	ldr	r2, [r3, #4]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ca6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	689a      	ldr	r2, [r3, #8]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002cb6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f042 0201 	orr.w	r2, r2, #1
 8002cc6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f000 fb8f 	bl	80033ec <UART_CheckIdleState>
 8002cce:	4603      	mov	r3, r0
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3708      	adds	r7, #8
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b08a      	sub	sp, #40	; 0x28
 8002cdc:	af02      	add	r7, sp, #8
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	603b      	str	r3, [r7, #0]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cec:	2b20      	cmp	r3, #32
 8002cee:	d171      	bne.n	8002dd4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d002      	beq.n	8002cfc <HAL_UART_Transmit+0x24>
 8002cf6:	88fb      	ldrh	r3, [r7, #6]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d101      	bne.n	8002d00 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e06a      	b.n	8002dd6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2221      	movs	r2, #33	; 0x21
 8002d0c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d0e:	f7fe fc13 	bl	8001538 <HAL_GetTick>
 8002d12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	88fa      	ldrh	r2, [r7, #6]
 8002d18:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	88fa      	ldrh	r2, [r7, #6]
 8002d20:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d2c:	d108      	bne.n	8002d40 <HAL_UART_Transmit+0x68>
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d104      	bne.n	8002d40 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002d36:	2300      	movs	r3, #0
 8002d38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	61bb      	str	r3, [r7, #24]
 8002d3e:	e003      	b.n	8002d48 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d44:	2300      	movs	r3, #0
 8002d46:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d48:	e02c      	b.n	8002da4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	9300      	str	r3, [sp, #0]
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	2200      	movs	r2, #0
 8002d52:	2180      	movs	r1, #128	; 0x80
 8002d54:	68f8      	ldr	r0, [r7, #12]
 8002d56:	f000 fb80 	bl	800345a <UART_WaitOnFlagUntilTimeout>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d001      	beq.n	8002d64 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e038      	b.n	8002dd6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d10b      	bne.n	8002d82 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	881b      	ldrh	r3, [r3, #0]
 8002d6e:	461a      	mov	r2, r3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d78:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	3302      	adds	r3, #2
 8002d7e:	61bb      	str	r3, [r7, #24]
 8002d80:	e007      	b.n	8002d92 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	781a      	ldrb	r2, [r3, #0]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	3301      	adds	r3, #1
 8002d90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	b29a      	uxth	r2, r3
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d1cc      	bne.n	8002d4a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	9300      	str	r3, [sp, #0]
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	2200      	movs	r2, #0
 8002db8:	2140      	movs	r1, #64	; 0x40
 8002dba:	68f8      	ldr	r0, [r7, #12]
 8002dbc:	f000 fb4d 	bl	800345a <UART_WaitOnFlagUntilTimeout>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e005      	b.n	8002dd6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2220      	movs	r2, #32
 8002dce:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	e000      	b.n	8002dd6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002dd4:	2302      	movs	r3, #2
  }
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3720      	adds	r7, #32
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
	...

08002de0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b088      	sub	sp, #32
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002de8:	2300      	movs	r3, #0
 8002dea:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	689a      	ldr	r2, [r3, #8]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	691b      	ldr	r3, [r3, #16]
 8002df4:	431a      	orrs	r2, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	695b      	ldr	r3, [r3, #20]
 8002dfa:	431a      	orrs	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	69db      	ldr	r3, [r3, #28]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	4ba6      	ldr	r3, [pc, #664]	; (80030a4 <UART_SetConfig+0x2c4>)
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	6812      	ldr	r2, [r2, #0]
 8002e12:	6979      	ldr	r1, [r7, #20]
 8002e14:	430b      	orrs	r3, r1
 8002e16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	68da      	ldr	r2, [r3, #12]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a1b      	ldr	r3, [r3, #32]
 8002e38:	697a      	ldr	r2, [r7, #20]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	697a      	ldr	r2, [r7, #20]
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a94      	ldr	r2, [pc, #592]	; (80030a8 <UART_SetConfig+0x2c8>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d120      	bne.n	8002e9e <UART_SetConfig+0xbe>
 8002e5c:	4b93      	ldr	r3, [pc, #588]	; (80030ac <UART_SetConfig+0x2cc>)
 8002e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e62:	f003 0303 	and.w	r3, r3, #3
 8002e66:	2b03      	cmp	r3, #3
 8002e68:	d816      	bhi.n	8002e98 <UART_SetConfig+0xb8>
 8002e6a:	a201      	add	r2, pc, #4	; (adr r2, 8002e70 <UART_SetConfig+0x90>)
 8002e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e70:	08002e81 	.word	0x08002e81
 8002e74:	08002e8d 	.word	0x08002e8d
 8002e78:	08002e87 	.word	0x08002e87
 8002e7c:	08002e93 	.word	0x08002e93
 8002e80:	2301      	movs	r3, #1
 8002e82:	77fb      	strb	r3, [r7, #31]
 8002e84:	e150      	b.n	8003128 <UART_SetConfig+0x348>
 8002e86:	2302      	movs	r3, #2
 8002e88:	77fb      	strb	r3, [r7, #31]
 8002e8a:	e14d      	b.n	8003128 <UART_SetConfig+0x348>
 8002e8c:	2304      	movs	r3, #4
 8002e8e:	77fb      	strb	r3, [r7, #31]
 8002e90:	e14a      	b.n	8003128 <UART_SetConfig+0x348>
 8002e92:	2308      	movs	r3, #8
 8002e94:	77fb      	strb	r3, [r7, #31]
 8002e96:	e147      	b.n	8003128 <UART_SetConfig+0x348>
 8002e98:	2310      	movs	r3, #16
 8002e9a:	77fb      	strb	r3, [r7, #31]
 8002e9c:	e144      	b.n	8003128 <UART_SetConfig+0x348>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a83      	ldr	r2, [pc, #524]	; (80030b0 <UART_SetConfig+0x2d0>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d132      	bne.n	8002f0e <UART_SetConfig+0x12e>
 8002ea8:	4b80      	ldr	r3, [pc, #512]	; (80030ac <UART_SetConfig+0x2cc>)
 8002eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eae:	f003 030c 	and.w	r3, r3, #12
 8002eb2:	2b0c      	cmp	r3, #12
 8002eb4:	d828      	bhi.n	8002f08 <UART_SetConfig+0x128>
 8002eb6:	a201      	add	r2, pc, #4	; (adr r2, 8002ebc <UART_SetConfig+0xdc>)
 8002eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ebc:	08002ef1 	.word	0x08002ef1
 8002ec0:	08002f09 	.word	0x08002f09
 8002ec4:	08002f09 	.word	0x08002f09
 8002ec8:	08002f09 	.word	0x08002f09
 8002ecc:	08002efd 	.word	0x08002efd
 8002ed0:	08002f09 	.word	0x08002f09
 8002ed4:	08002f09 	.word	0x08002f09
 8002ed8:	08002f09 	.word	0x08002f09
 8002edc:	08002ef7 	.word	0x08002ef7
 8002ee0:	08002f09 	.word	0x08002f09
 8002ee4:	08002f09 	.word	0x08002f09
 8002ee8:	08002f09 	.word	0x08002f09
 8002eec:	08002f03 	.word	0x08002f03
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	77fb      	strb	r3, [r7, #31]
 8002ef4:	e118      	b.n	8003128 <UART_SetConfig+0x348>
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	77fb      	strb	r3, [r7, #31]
 8002efa:	e115      	b.n	8003128 <UART_SetConfig+0x348>
 8002efc:	2304      	movs	r3, #4
 8002efe:	77fb      	strb	r3, [r7, #31]
 8002f00:	e112      	b.n	8003128 <UART_SetConfig+0x348>
 8002f02:	2308      	movs	r3, #8
 8002f04:	77fb      	strb	r3, [r7, #31]
 8002f06:	e10f      	b.n	8003128 <UART_SetConfig+0x348>
 8002f08:	2310      	movs	r3, #16
 8002f0a:	77fb      	strb	r3, [r7, #31]
 8002f0c:	e10c      	b.n	8003128 <UART_SetConfig+0x348>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a68      	ldr	r2, [pc, #416]	; (80030b4 <UART_SetConfig+0x2d4>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d120      	bne.n	8002f5a <UART_SetConfig+0x17a>
 8002f18:	4b64      	ldr	r3, [pc, #400]	; (80030ac <UART_SetConfig+0x2cc>)
 8002f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f1e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002f22:	2b30      	cmp	r3, #48	; 0x30
 8002f24:	d013      	beq.n	8002f4e <UART_SetConfig+0x16e>
 8002f26:	2b30      	cmp	r3, #48	; 0x30
 8002f28:	d814      	bhi.n	8002f54 <UART_SetConfig+0x174>
 8002f2a:	2b20      	cmp	r3, #32
 8002f2c:	d009      	beq.n	8002f42 <UART_SetConfig+0x162>
 8002f2e:	2b20      	cmp	r3, #32
 8002f30:	d810      	bhi.n	8002f54 <UART_SetConfig+0x174>
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d002      	beq.n	8002f3c <UART_SetConfig+0x15c>
 8002f36:	2b10      	cmp	r3, #16
 8002f38:	d006      	beq.n	8002f48 <UART_SetConfig+0x168>
 8002f3a:	e00b      	b.n	8002f54 <UART_SetConfig+0x174>
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	77fb      	strb	r3, [r7, #31]
 8002f40:	e0f2      	b.n	8003128 <UART_SetConfig+0x348>
 8002f42:	2302      	movs	r3, #2
 8002f44:	77fb      	strb	r3, [r7, #31]
 8002f46:	e0ef      	b.n	8003128 <UART_SetConfig+0x348>
 8002f48:	2304      	movs	r3, #4
 8002f4a:	77fb      	strb	r3, [r7, #31]
 8002f4c:	e0ec      	b.n	8003128 <UART_SetConfig+0x348>
 8002f4e:	2308      	movs	r3, #8
 8002f50:	77fb      	strb	r3, [r7, #31]
 8002f52:	e0e9      	b.n	8003128 <UART_SetConfig+0x348>
 8002f54:	2310      	movs	r3, #16
 8002f56:	77fb      	strb	r3, [r7, #31]
 8002f58:	e0e6      	b.n	8003128 <UART_SetConfig+0x348>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a56      	ldr	r2, [pc, #344]	; (80030b8 <UART_SetConfig+0x2d8>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d120      	bne.n	8002fa6 <UART_SetConfig+0x1c6>
 8002f64:	4b51      	ldr	r3, [pc, #324]	; (80030ac <UART_SetConfig+0x2cc>)
 8002f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f6a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002f6e:	2bc0      	cmp	r3, #192	; 0xc0
 8002f70:	d013      	beq.n	8002f9a <UART_SetConfig+0x1ba>
 8002f72:	2bc0      	cmp	r3, #192	; 0xc0
 8002f74:	d814      	bhi.n	8002fa0 <UART_SetConfig+0x1c0>
 8002f76:	2b80      	cmp	r3, #128	; 0x80
 8002f78:	d009      	beq.n	8002f8e <UART_SetConfig+0x1ae>
 8002f7a:	2b80      	cmp	r3, #128	; 0x80
 8002f7c:	d810      	bhi.n	8002fa0 <UART_SetConfig+0x1c0>
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d002      	beq.n	8002f88 <UART_SetConfig+0x1a8>
 8002f82:	2b40      	cmp	r3, #64	; 0x40
 8002f84:	d006      	beq.n	8002f94 <UART_SetConfig+0x1b4>
 8002f86:	e00b      	b.n	8002fa0 <UART_SetConfig+0x1c0>
 8002f88:	2300      	movs	r3, #0
 8002f8a:	77fb      	strb	r3, [r7, #31]
 8002f8c:	e0cc      	b.n	8003128 <UART_SetConfig+0x348>
 8002f8e:	2302      	movs	r3, #2
 8002f90:	77fb      	strb	r3, [r7, #31]
 8002f92:	e0c9      	b.n	8003128 <UART_SetConfig+0x348>
 8002f94:	2304      	movs	r3, #4
 8002f96:	77fb      	strb	r3, [r7, #31]
 8002f98:	e0c6      	b.n	8003128 <UART_SetConfig+0x348>
 8002f9a:	2308      	movs	r3, #8
 8002f9c:	77fb      	strb	r3, [r7, #31]
 8002f9e:	e0c3      	b.n	8003128 <UART_SetConfig+0x348>
 8002fa0:	2310      	movs	r3, #16
 8002fa2:	77fb      	strb	r3, [r7, #31]
 8002fa4:	e0c0      	b.n	8003128 <UART_SetConfig+0x348>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a44      	ldr	r2, [pc, #272]	; (80030bc <UART_SetConfig+0x2dc>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d125      	bne.n	8002ffc <UART_SetConfig+0x21c>
 8002fb0:	4b3e      	ldr	r3, [pc, #248]	; (80030ac <UART_SetConfig+0x2cc>)
 8002fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002fbe:	d017      	beq.n	8002ff0 <UART_SetConfig+0x210>
 8002fc0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002fc4:	d817      	bhi.n	8002ff6 <UART_SetConfig+0x216>
 8002fc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fca:	d00b      	beq.n	8002fe4 <UART_SetConfig+0x204>
 8002fcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fd0:	d811      	bhi.n	8002ff6 <UART_SetConfig+0x216>
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <UART_SetConfig+0x1fe>
 8002fd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fda:	d006      	beq.n	8002fea <UART_SetConfig+0x20a>
 8002fdc:	e00b      	b.n	8002ff6 <UART_SetConfig+0x216>
 8002fde:	2300      	movs	r3, #0
 8002fe0:	77fb      	strb	r3, [r7, #31]
 8002fe2:	e0a1      	b.n	8003128 <UART_SetConfig+0x348>
 8002fe4:	2302      	movs	r3, #2
 8002fe6:	77fb      	strb	r3, [r7, #31]
 8002fe8:	e09e      	b.n	8003128 <UART_SetConfig+0x348>
 8002fea:	2304      	movs	r3, #4
 8002fec:	77fb      	strb	r3, [r7, #31]
 8002fee:	e09b      	b.n	8003128 <UART_SetConfig+0x348>
 8002ff0:	2308      	movs	r3, #8
 8002ff2:	77fb      	strb	r3, [r7, #31]
 8002ff4:	e098      	b.n	8003128 <UART_SetConfig+0x348>
 8002ff6:	2310      	movs	r3, #16
 8002ff8:	77fb      	strb	r3, [r7, #31]
 8002ffa:	e095      	b.n	8003128 <UART_SetConfig+0x348>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a2f      	ldr	r2, [pc, #188]	; (80030c0 <UART_SetConfig+0x2e0>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d125      	bne.n	8003052 <UART_SetConfig+0x272>
 8003006:	4b29      	ldr	r3, [pc, #164]	; (80030ac <UART_SetConfig+0x2cc>)
 8003008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800300c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003010:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003014:	d017      	beq.n	8003046 <UART_SetConfig+0x266>
 8003016:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800301a:	d817      	bhi.n	800304c <UART_SetConfig+0x26c>
 800301c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003020:	d00b      	beq.n	800303a <UART_SetConfig+0x25a>
 8003022:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003026:	d811      	bhi.n	800304c <UART_SetConfig+0x26c>
 8003028:	2b00      	cmp	r3, #0
 800302a:	d003      	beq.n	8003034 <UART_SetConfig+0x254>
 800302c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003030:	d006      	beq.n	8003040 <UART_SetConfig+0x260>
 8003032:	e00b      	b.n	800304c <UART_SetConfig+0x26c>
 8003034:	2301      	movs	r3, #1
 8003036:	77fb      	strb	r3, [r7, #31]
 8003038:	e076      	b.n	8003128 <UART_SetConfig+0x348>
 800303a:	2302      	movs	r3, #2
 800303c:	77fb      	strb	r3, [r7, #31]
 800303e:	e073      	b.n	8003128 <UART_SetConfig+0x348>
 8003040:	2304      	movs	r3, #4
 8003042:	77fb      	strb	r3, [r7, #31]
 8003044:	e070      	b.n	8003128 <UART_SetConfig+0x348>
 8003046:	2308      	movs	r3, #8
 8003048:	77fb      	strb	r3, [r7, #31]
 800304a:	e06d      	b.n	8003128 <UART_SetConfig+0x348>
 800304c:	2310      	movs	r3, #16
 800304e:	77fb      	strb	r3, [r7, #31]
 8003050:	e06a      	b.n	8003128 <UART_SetConfig+0x348>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a1b      	ldr	r2, [pc, #108]	; (80030c4 <UART_SetConfig+0x2e4>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d138      	bne.n	80030ce <UART_SetConfig+0x2ee>
 800305c:	4b13      	ldr	r3, [pc, #76]	; (80030ac <UART_SetConfig+0x2cc>)
 800305e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003062:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003066:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800306a:	d017      	beq.n	800309c <UART_SetConfig+0x2bc>
 800306c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003070:	d82a      	bhi.n	80030c8 <UART_SetConfig+0x2e8>
 8003072:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003076:	d00b      	beq.n	8003090 <UART_SetConfig+0x2b0>
 8003078:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800307c:	d824      	bhi.n	80030c8 <UART_SetConfig+0x2e8>
 800307e:	2b00      	cmp	r3, #0
 8003080:	d003      	beq.n	800308a <UART_SetConfig+0x2aa>
 8003082:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003086:	d006      	beq.n	8003096 <UART_SetConfig+0x2b6>
 8003088:	e01e      	b.n	80030c8 <UART_SetConfig+0x2e8>
 800308a:	2300      	movs	r3, #0
 800308c:	77fb      	strb	r3, [r7, #31]
 800308e:	e04b      	b.n	8003128 <UART_SetConfig+0x348>
 8003090:	2302      	movs	r3, #2
 8003092:	77fb      	strb	r3, [r7, #31]
 8003094:	e048      	b.n	8003128 <UART_SetConfig+0x348>
 8003096:	2304      	movs	r3, #4
 8003098:	77fb      	strb	r3, [r7, #31]
 800309a:	e045      	b.n	8003128 <UART_SetConfig+0x348>
 800309c:	2308      	movs	r3, #8
 800309e:	77fb      	strb	r3, [r7, #31]
 80030a0:	e042      	b.n	8003128 <UART_SetConfig+0x348>
 80030a2:	bf00      	nop
 80030a4:	efff69f3 	.word	0xefff69f3
 80030a8:	40011000 	.word	0x40011000
 80030ac:	40023800 	.word	0x40023800
 80030b0:	40004400 	.word	0x40004400
 80030b4:	40004800 	.word	0x40004800
 80030b8:	40004c00 	.word	0x40004c00
 80030bc:	40005000 	.word	0x40005000
 80030c0:	40011400 	.word	0x40011400
 80030c4:	40007800 	.word	0x40007800
 80030c8:	2310      	movs	r3, #16
 80030ca:	77fb      	strb	r3, [r7, #31]
 80030cc:	e02c      	b.n	8003128 <UART_SetConfig+0x348>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a72      	ldr	r2, [pc, #456]	; (800329c <UART_SetConfig+0x4bc>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d125      	bne.n	8003124 <UART_SetConfig+0x344>
 80030d8:	4b71      	ldr	r3, [pc, #452]	; (80032a0 <UART_SetConfig+0x4c0>)
 80030da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030de:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80030e2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80030e6:	d017      	beq.n	8003118 <UART_SetConfig+0x338>
 80030e8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80030ec:	d817      	bhi.n	800311e <UART_SetConfig+0x33e>
 80030ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030f2:	d00b      	beq.n	800310c <UART_SetConfig+0x32c>
 80030f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030f8:	d811      	bhi.n	800311e <UART_SetConfig+0x33e>
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d003      	beq.n	8003106 <UART_SetConfig+0x326>
 80030fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003102:	d006      	beq.n	8003112 <UART_SetConfig+0x332>
 8003104:	e00b      	b.n	800311e <UART_SetConfig+0x33e>
 8003106:	2300      	movs	r3, #0
 8003108:	77fb      	strb	r3, [r7, #31]
 800310a:	e00d      	b.n	8003128 <UART_SetConfig+0x348>
 800310c:	2302      	movs	r3, #2
 800310e:	77fb      	strb	r3, [r7, #31]
 8003110:	e00a      	b.n	8003128 <UART_SetConfig+0x348>
 8003112:	2304      	movs	r3, #4
 8003114:	77fb      	strb	r3, [r7, #31]
 8003116:	e007      	b.n	8003128 <UART_SetConfig+0x348>
 8003118:	2308      	movs	r3, #8
 800311a:	77fb      	strb	r3, [r7, #31]
 800311c:	e004      	b.n	8003128 <UART_SetConfig+0x348>
 800311e:	2310      	movs	r3, #16
 8003120:	77fb      	strb	r3, [r7, #31]
 8003122:	e001      	b.n	8003128 <UART_SetConfig+0x348>
 8003124:	2310      	movs	r3, #16
 8003126:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	69db      	ldr	r3, [r3, #28]
 800312c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003130:	d15b      	bne.n	80031ea <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003132:	7ffb      	ldrb	r3, [r7, #31]
 8003134:	2b08      	cmp	r3, #8
 8003136:	d828      	bhi.n	800318a <UART_SetConfig+0x3aa>
 8003138:	a201      	add	r2, pc, #4	; (adr r2, 8003140 <UART_SetConfig+0x360>)
 800313a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800313e:	bf00      	nop
 8003140:	08003165 	.word	0x08003165
 8003144:	0800316d 	.word	0x0800316d
 8003148:	08003175 	.word	0x08003175
 800314c:	0800318b 	.word	0x0800318b
 8003150:	0800317b 	.word	0x0800317b
 8003154:	0800318b 	.word	0x0800318b
 8003158:	0800318b 	.word	0x0800318b
 800315c:	0800318b 	.word	0x0800318b
 8003160:	08003183 	.word	0x08003183
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003164:	f7ff f952 	bl	800240c <HAL_RCC_GetPCLK1Freq>
 8003168:	61b8      	str	r0, [r7, #24]
        break;
 800316a:	e013      	b.n	8003194 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800316c:	f7ff f962 	bl	8002434 <HAL_RCC_GetPCLK2Freq>
 8003170:	61b8      	str	r0, [r7, #24]
        break;
 8003172:	e00f      	b.n	8003194 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003174:	4b4b      	ldr	r3, [pc, #300]	; (80032a4 <UART_SetConfig+0x4c4>)
 8003176:	61bb      	str	r3, [r7, #24]
        break;
 8003178:	e00c      	b.n	8003194 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800317a:	f7ff f875 	bl	8002268 <HAL_RCC_GetSysClockFreq>
 800317e:	61b8      	str	r0, [r7, #24]
        break;
 8003180:	e008      	b.n	8003194 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003182:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003186:	61bb      	str	r3, [r7, #24]
        break;
 8003188:	e004      	b.n	8003194 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800318a:	2300      	movs	r3, #0
 800318c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	77bb      	strb	r3, [r7, #30]
        break;
 8003192:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d074      	beq.n	8003284 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	005a      	lsls	r2, r3, #1
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	085b      	lsrs	r3, r3, #1
 80031a4:	441a      	add	r2, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	2b0f      	cmp	r3, #15
 80031b4:	d916      	bls.n	80031e4 <UART_SetConfig+0x404>
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031bc:	d212      	bcs.n	80031e4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	f023 030f 	bic.w	r3, r3, #15
 80031c6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	085b      	lsrs	r3, r3, #1
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	f003 0307 	and.w	r3, r3, #7
 80031d2:	b29a      	uxth	r2, r3
 80031d4:	89fb      	ldrh	r3, [r7, #14]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	89fa      	ldrh	r2, [r7, #14]
 80031e0:	60da      	str	r2, [r3, #12]
 80031e2:	e04f      	b.n	8003284 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	77bb      	strb	r3, [r7, #30]
 80031e8:	e04c      	b.n	8003284 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80031ea:	7ffb      	ldrb	r3, [r7, #31]
 80031ec:	2b08      	cmp	r3, #8
 80031ee:	d828      	bhi.n	8003242 <UART_SetConfig+0x462>
 80031f0:	a201      	add	r2, pc, #4	; (adr r2, 80031f8 <UART_SetConfig+0x418>)
 80031f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031f6:	bf00      	nop
 80031f8:	0800321d 	.word	0x0800321d
 80031fc:	08003225 	.word	0x08003225
 8003200:	0800322d 	.word	0x0800322d
 8003204:	08003243 	.word	0x08003243
 8003208:	08003233 	.word	0x08003233
 800320c:	08003243 	.word	0x08003243
 8003210:	08003243 	.word	0x08003243
 8003214:	08003243 	.word	0x08003243
 8003218:	0800323b 	.word	0x0800323b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800321c:	f7ff f8f6 	bl	800240c <HAL_RCC_GetPCLK1Freq>
 8003220:	61b8      	str	r0, [r7, #24]
        break;
 8003222:	e013      	b.n	800324c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003224:	f7ff f906 	bl	8002434 <HAL_RCC_GetPCLK2Freq>
 8003228:	61b8      	str	r0, [r7, #24]
        break;
 800322a:	e00f      	b.n	800324c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800322c:	4b1d      	ldr	r3, [pc, #116]	; (80032a4 <UART_SetConfig+0x4c4>)
 800322e:	61bb      	str	r3, [r7, #24]
        break;
 8003230:	e00c      	b.n	800324c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003232:	f7ff f819 	bl	8002268 <HAL_RCC_GetSysClockFreq>
 8003236:	61b8      	str	r0, [r7, #24]
        break;
 8003238:	e008      	b.n	800324c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800323a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800323e:	61bb      	str	r3, [r7, #24]
        break;
 8003240:	e004      	b.n	800324c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003242:	2300      	movs	r3, #0
 8003244:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	77bb      	strb	r3, [r7, #30]
        break;
 800324a:	bf00      	nop
    }

    if (pclk != 0U)
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d018      	beq.n	8003284 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	085a      	lsrs	r2, r3, #1
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	441a      	add	r2, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	fbb2 f3f3 	udiv	r3, r2, r3
 8003264:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	2b0f      	cmp	r3, #15
 800326a:	d909      	bls.n	8003280 <UART_SetConfig+0x4a0>
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003272:	d205      	bcs.n	8003280 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	b29a      	uxth	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	60da      	str	r2, [r3, #12]
 800327e:	e001      	b.n	8003284 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003290:	7fbb      	ldrb	r3, [r7, #30]
}
 8003292:	4618      	mov	r0, r3
 8003294:	3720      	adds	r7, #32
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	40007c00 	.word	0x40007c00
 80032a0:	40023800 	.word	0x40023800
 80032a4:	00f42400 	.word	0x00f42400

080032a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b4:	f003 0301 	and.w	r3, r3, #1
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d00a      	beq.n	80032d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	430a      	orrs	r2, r1
 80032d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d6:	f003 0302 	and.w	r3, r3, #2
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d00a      	beq.n	80032f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	430a      	orrs	r2, r1
 80032f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f8:	f003 0304 	and.w	r3, r3, #4
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d00a      	beq.n	8003316 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	430a      	orrs	r2, r1
 8003314:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331a:	f003 0308 	and.w	r3, r3, #8
 800331e:	2b00      	cmp	r3, #0
 8003320:	d00a      	beq.n	8003338 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	430a      	orrs	r2, r1
 8003336:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333c:	f003 0310 	and.w	r3, r3, #16
 8003340:	2b00      	cmp	r3, #0
 8003342:	d00a      	beq.n	800335a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	430a      	orrs	r2, r1
 8003358:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335e:	f003 0320 	and.w	r3, r3, #32
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00a      	beq.n	800337c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	430a      	orrs	r2, r1
 800337a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003384:	2b00      	cmp	r3, #0
 8003386:	d01a      	beq.n	80033be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	430a      	orrs	r2, r1
 800339c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033a6:	d10a      	bne.n	80033be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	430a      	orrs	r2, r1
 80033bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00a      	beq.n	80033e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	430a      	orrs	r2, r1
 80033de:	605a      	str	r2, [r3, #4]
  }
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b086      	sub	sp, #24
 80033f0:	af02      	add	r7, sp, #8
 80033f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80033fc:	f7fe f89c 	bl	8001538 <HAL_GetTick>
 8003400:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0308 	and.w	r3, r3, #8
 800340c:	2b08      	cmp	r3, #8
 800340e:	d10e      	bne.n	800342e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003410:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003414:	9300      	str	r3, [sp, #0]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2200      	movs	r2, #0
 800341a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 f81b 	bl	800345a <UART_WaitOnFlagUntilTimeout>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d001      	beq.n	800342e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e011      	b.n	8003452 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2220      	movs	r2, #32
 8003432:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2220      	movs	r2, #32
 8003438:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	3710      	adds	r7, #16
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}

0800345a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800345a:	b580      	push	{r7, lr}
 800345c:	b09c      	sub	sp, #112	; 0x70
 800345e:	af00      	add	r7, sp, #0
 8003460:	60f8      	str	r0, [r7, #12]
 8003462:	60b9      	str	r1, [r7, #8]
 8003464:	603b      	str	r3, [r7, #0]
 8003466:	4613      	mov	r3, r2
 8003468:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800346a:	e0a7      	b.n	80035bc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800346c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800346e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003472:	f000 80a3 	beq.w	80035bc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003476:	f7fe f85f 	bl	8001538 <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003482:	429a      	cmp	r2, r3
 8003484:	d302      	bcc.n	800348c <UART_WaitOnFlagUntilTimeout+0x32>
 8003486:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003488:	2b00      	cmp	r3, #0
 800348a:	d13f      	bne.n	800350c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003492:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003494:	e853 3f00 	ldrex	r3, [r3]
 8003498:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800349a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800349c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80034a0:	667b      	str	r3, [r7, #100]	; 0x64
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	461a      	mov	r2, r3
 80034a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034ac:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80034b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80034b2:	e841 2300 	strex	r3, r2, [r1]
 80034b6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80034b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d1e6      	bne.n	800348c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	3308      	adds	r3, #8
 80034c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034c8:	e853 3f00 	ldrex	r3, [r3]
 80034cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80034ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034d0:	f023 0301 	bic.w	r3, r3, #1
 80034d4:	663b      	str	r3, [r7, #96]	; 0x60
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	3308      	adds	r3, #8
 80034dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80034de:	64ba      	str	r2, [r7, #72]	; 0x48
 80034e0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80034e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80034e6:	e841 2300 	strex	r3, r2, [r1]
 80034ea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80034ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d1e5      	bne.n	80034be <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2220      	movs	r2, #32
 80034f6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2220      	movs	r2, #32
 80034fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2200      	movs	r2, #0
 8003504:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e068      	b.n	80035de <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0304 	and.w	r3, r3, #4
 8003516:	2b00      	cmp	r3, #0
 8003518:	d050      	beq.n	80035bc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	69db      	ldr	r3, [r3, #28]
 8003520:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003524:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003528:	d148      	bne.n	80035bc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003532:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800353a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800353c:	e853 3f00 	ldrex	r3, [r3]
 8003540:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003544:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003548:	66fb      	str	r3, [r7, #108]	; 0x6c
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	461a      	mov	r2, r3
 8003550:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003552:	637b      	str	r3, [r7, #52]	; 0x34
 8003554:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003556:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003558:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800355a:	e841 2300 	strex	r3, r2, [r1]
 800355e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003562:	2b00      	cmp	r3, #0
 8003564:	d1e6      	bne.n	8003534 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	3308      	adds	r3, #8
 800356c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	e853 3f00 	ldrex	r3, [r3]
 8003574:	613b      	str	r3, [r7, #16]
   return(result);
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	f023 0301 	bic.w	r3, r3, #1
 800357c:	66bb      	str	r3, [r7, #104]	; 0x68
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	3308      	adds	r3, #8
 8003584:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003586:	623a      	str	r2, [r7, #32]
 8003588:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800358a:	69f9      	ldr	r1, [r7, #28]
 800358c:	6a3a      	ldr	r2, [r7, #32]
 800358e:	e841 2300 	strex	r3, r2, [r1]
 8003592:	61bb      	str	r3, [r7, #24]
   return(result);
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d1e5      	bne.n	8003566 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2220      	movs	r2, #32
 800359e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2220      	movs	r2, #32
 80035a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2220      	movs	r2, #32
 80035ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	e010      	b.n	80035de <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	69da      	ldr	r2, [r3, #28]
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	4013      	ands	r3, r2
 80035c6:	68ba      	ldr	r2, [r7, #8]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	bf0c      	ite	eq
 80035cc:	2301      	moveq	r3, #1
 80035ce:	2300      	movne	r3, #0
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	461a      	mov	r2, r3
 80035d4:	79fb      	ldrb	r3, [r7, #7]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	f43f af48 	beq.w	800346c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3770      	adds	r7, #112	; 0x70
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}

080035e6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80035e6:	b480      	push	{r7}
 80035e8:	b085      	sub	sp, #20
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	4603      	mov	r3, r0
 80035ee:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80035f0:	2300      	movs	r3, #0
 80035f2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80035f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035f8:	2b84      	cmp	r3, #132	; 0x84
 80035fa:	d005      	beq.n	8003608 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80035fc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	4413      	add	r3, r2
 8003604:	3303      	adds	r3, #3
 8003606:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003608:	68fb      	ldr	r3, [r7, #12]
}
 800360a:	4618      	mov	r0, r3
 800360c:	3714      	adds	r7, #20
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr

08003616 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003616:	b580      	push	{r7, lr}
 8003618:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800361a:	f000 fed1 	bl	80043c0 <vTaskStartScheduler>
  
  return osOK;
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	bd80      	pop	{r7, pc}

08003624 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003626:	b089      	sub	sp, #36	; 0x24
 8003628:	af04      	add	r7, sp, #16
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	695b      	ldr	r3, [r3, #20]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d020      	beq.n	8003678 <osThreadCreate+0x54>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d01c      	beq.n	8003678 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685c      	ldr	r4, [r3, #4]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681d      	ldr	r5, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	691e      	ldr	r6, [r3, #16]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003650:	4618      	mov	r0, r3
 8003652:	f7ff ffc8 	bl	80035e6 <makeFreeRtosPriority>
 8003656:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	695b      	ldr	r3, [r3, #20]
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003660:	9202      	str	r2, [sp, #8]
 8003662:	9301      	str	r3, [sp, #4]
 8003664:	9100      	str	r1, [sp, #0]
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	4632      	mov	r2, r6
 800366a:	4629      	mov	r1, r5
 800366c:	4620      	mov	r0, r4
 800366e:	f000 fcd5 	bl	800401c <xTaskCreateStatic>
 8003672:	4603      	mov	r3, r0
 8003674:	60fb      	str	r3, [r7, #12]
 8003676:	e01c      	b.n	80036b2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685c      	ldr	r4, [r3, #4]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003684:	b29e      	uxth	r6, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800368c:	4618      	mov	r0, r3
 800368e:	f7ff ffaa 	bl	80035e6 <makeFreeRtosPriority>
 8003692:	4602      	mov	r2, r0
 8003694:	f107 030c 	add.w	r3, r7, #12
 8003698:	9301      	str	r3, [sp, #4]
 800369a:	9200      	str	r2, [sp, #0]
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	4632      	mov	r2, r6
 80036a0:	4629      	mov	r1, r5
 80036a2:	4620      	mov	r0, r4
 80036a4:	f000 fd1d 	bl	80040e2 <xTaskCreate>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d001      	beq.n	80036b2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80036ae:	2300      	movs	r3, #0
 80036b0:	e000      	b.n	80036b4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80036b2:	68fb      	ldr	r3, [r7, #12]
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3714      	adds	r7, #20
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080036bc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d001      	beq.n	80036d2 <osDelay+0x16>
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	e000      	b.n	80036d4 <osDelay+0x18>
 80036d2:	2301      	movs	r3, #1
 80036d4:	4618      	mov	r0, r3
 80036d6:	f000 fe3d 	bl	8004354 <vTaskDelay>
  
  return osOK;
 80036da:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3710      	adds	r7, #16
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f103 0208 	add.w	r2, r3, #8
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f04f 32ff 	mov.w	r2, #4294967295
 80036fc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f103 0208 	add.w	r2, r3, #8
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f103 0208 	add.w	r2, r3, #8
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003718:	bf00      	nop
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003732:	bf00      	nop
 8003734:	370c      	adds	r7, #12
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr

0800373e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800373e:	b480      	push	{r7}
 8003740:	b085      	sub	sp, #20
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
 8003746:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	68fa      	ldr	r2, [r7, #12]
 8003752:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	689a      	ldr	r2, [r3, #8]
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	683a      	ldr	r2, [r7, #0]
 8003762:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	683a      	ldr	r2, [r7, #0]
 8003768:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	1c5a      	adds	r2, r3, #1
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	601a      	str	r2, [r3, #0]
}
 800377a:	bf00      	nop
 800377c:	3714      	adds	r7, #20
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr

08003786 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003786:	b480      	push	{r7}
 8003788:	b085      	sub	sp, #20
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
 800378e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800379c:	d103      	bne.n	80037a6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	60fb      	str	r3, [r7, #12]
 80037a4:	e00c      	b.n	80037c0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	3308      	adds	r3, #8
 80037aa:	60fb      	str	r3, [r7, #12]
 80037ac:	e002      	b.n	80037b4 <vListInsert+0x2e>
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	60fb      	str	r3, [r7, #12]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	68ba      	ldr	r2, [r7, #8]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d2f6      	bcs.n	80037ae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	685a      	ldr	r2, [r3, #4]
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	683a      	ldr	r2, [r7, #0]
 80037ce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	683a      	ldr	r2, [r7, #0]
 80037da:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	1c5a      	adds	r2, r3, #1
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	601a      	str	r2, [r3, #0]
}
 80037ec:	bf00      	nop
 80037ee:	3714      	adds	r7, #20
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80037f8:	b480      	push	{r7}
 80037fa:	b085      	sub	sp, #20
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	6892      	ldr	r2, [r2, #8]
 800380e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	6852      	ldr	r2, [r2, #4]
 8003818:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	429a      	cmp	r2, r3
 8003822:	d103      	bne.n	800382c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689a      	ldr	r2, [r3, #8]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	1e5a      	subs	r2, r3, #1
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
}
 8003840:	4618      	mov	r0, r3
 8003842:	3714      	adds	r7, #20
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d10c      	bne.n	800387a <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003864:	b672      	cpsid	i
 8003866:	f383 8811 	msr	BASEPRI, r3
 800386a:	f3bf 8f6f 	isb	sy
 800386e:	f3bf 8f4f 	dsb	sy
 8003872:	b662      	cpsie	i
 8003874:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003876:	bf00      	nop
 8003878:	e7fe      	b.n	8003878 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800387a:	f001 fcff 	bl	800527c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003886:	68f9      	ldr	r1, [r7, #12]
 8003888:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800388a:	fb01 f303 	mul.w	r3, r1, r3
 800388e:	441a      	add	r2, r3
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2200      	movs	r2, #0
 8003898:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038aa:	3b01      	subs	r3, #1
 80038ac:	68f9      	ldr	r1, [r7, #12]
 80038ae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80038b0:	fb01 f303 	mul.w	r3, r1, r3
 80038b4:	441a      	add	r2, r3
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	22ff      	movs	r2, #255	; 0xff
 80038be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	22ff      	movs	r2, #255	; 0xff
 80038c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d114      	bne.n	80038fa <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	691b      	ldr	r3, [r3, #16]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d01a      	beq.n	800390e <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	3310      	adds	r3, #16
 80038dc:	4618      	mov	r0, r3
 80038de:	f000 ffbd 	bl	800485c <xTaskRemoveFromEventList>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d012      	beq.n	800390e <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80038e8:	4b0c      	ldr	r3, [pc, #48]	; (800391c <xQueueGenericReset+0xd0>)
 80038ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038ee:	601a      	str	r2, [r3, #0]
 80038f0:	f3bf 8f4f 	dsb	sy
 80038f4:	f3bf 8f6f 	isb	sy
 80038f8:	e009      	b.n	800390e <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	3310      	adds	r3, #16
 80038fe:	4618      	mov	r0, r3
 8003900:	f7ff fef0 	bl	80036e4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	3324      	adds	r3, #36	; 0x24
 8003908:	4618      	mov	r0, r3
 800390a:	f7ff feeb 	bl	80036e4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800390e:	f001 fce9 	bl	80052e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003912:	2301      	movs	r3, #1
}
 8003914:	4618      	mov	r0, r3
 8003916:	3710      	adds	r7, #16
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	e000ed04 	.word	0xe000ed04

08003920 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003920:	b580      	push	{r7, lr}
 8003922:	b08a      	sub	sp, #40	; 0x28
 8003924:	af02      	add	r7, sp, #8
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	4613      	mov	r3, r2
 800392c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d10c      	bne.n	800394e <xQueueGenericCreate+0x2e>
	__asm volatile
 8003934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003938:	b672      	cpsid	i
 800393a:	f383 8811 	msr	BASEPRI, r3
 800393e:	f3bf 8f6f 	isb	sy
 8003942:	f3bf 8f4f 	dsb	sy
 8003946:	b662      	cpsie	i
 8003948:	613b      	str	r3, [r7, #16]
}
 800394a:	bf00      	nop
 800394c:	e7fe      	b.n	800394c <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d102      	bne.n	800395a <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003954:	2300      	movs	r3, #0
 8003956:	61fb      	str	r3, [r7, #28]
 8003958:	e004      	b.n	8003964 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	68ba      	ldr	r2, [r7, #8]
 800395e:	fb02 f303 	mul.w	r3, r2, r3
 8003962:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	3348      	adds	r3, #72	; 0x48
 8003968:	4618      	mov	r0, r3
 800396a:	f001 fd6f 	bl	800544c <pvPortMalloc>
 800396e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d011      	beq.n	800399a <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	3348      	adds	r3, #72	; 0x48
 800397e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003988:	79fa      	ldrb	r2, [r7, #7]
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	9300      	str	r3, [sp, #0]
 800398e:	4613      	mov	r3, r2
 8003990:	697a      	ldr	r2, [r7, #20]
 8003992:	68b9      	ldr	r1, [r7, #8]
 8003994:	68f8      	ldr	r0, [r7, #12]
 8003996:	f000 f805 	bl	80039a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800399a:	69bb      	ldr	r3, [r7, #24]
	}
 800399c:	4618      	mov	r0, r3
 800399e:	3720      	adds	r7, #32
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	607a      	str	r2, [r7, #4]
 80039b0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d103      	bne.n	80039c0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	69ba      	ldr	r2, [r7, #24]
 80039bc:	601a      	str	r2, [r3, #0]
 80039be:	e002      	b.n	80039c6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	68fa      	ldr	r2, [r7, #12]
 80039ca:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	68ba      	ldr	r2, [r7, #8]
 80039d0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80039d2:	2101      	movs	r1, #1
 80039d4:	69b8      	ldr	r0, [r7, #24]
 80039d6:	f7ff ff39 	bl	800384c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80039da:	bf00      	nop
 80039dc:	3710      	adds	r7, #16
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
	...

080039e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b08e      	sub	sp, #56	; 0x38
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	607a      	str	r2, [r7, #4]
 80039f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80039f2:	2300      	movs	r3, #0
 80039f4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80039fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d10c      	bne.n	8003a1a <xQueueGenericSend+0x36>
	__asm volatile
 8003a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a04:	b672      	cpsid	i
 8003a06:	f383 8811 	msr	BASEPRI, r3
 8003a0a:	f3bf 8f6f 	isb	sy
 8003a0e:	f3bf 8f4f 	dsb	sy
 8003a12:	b662      	cpsie	i
 8003a14:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003a16:	bf00      	nop
 8003a18:	e7fe      	b.n	8003a18 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d103      	bne.n	8003a28 <xQueueGenericSend+0x44>
 8003a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d101      	bne.n	8003a2c <xQueueGenericSend+0x48>
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e000      	b.n	8003a2e <xQueueGenericSend+0x4a>
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d10c      	bne.n	8003a4c <xQueueGenericSend+0x68>
	__asm volatile
 8003a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a36:	b672      	cpsid	i
 8003a38:	f383 8811 	msr	BASEPRI, r3
 8003a3c:	f3bf 8f6f 	isb	sy
 8003a40:	f3bf 8f4f 	dsb	sy
 8003a44:	b662      	cpsie	i
 8003a46:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003a48:	bf00      	nop
 8003a4a:	e7fe      	b.n	8003a4a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d103      	bne.n	8003a5a <xQueueGenericSend+0x76>
 8003a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d101      	bne.n	8003a5e <xQueueGenericSend+0x7a>
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e000      	b.n	8003a60 <xQueueGenericSend+0x7c>
 8003a5e:	2300      	movs	r3, #0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d10c      	bne.n	8003a7e <xQueueGenericSend+0x9a>
	__asm volatile
 8003a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a68:	b672      	cpsid	i
 8003a6a:	f383 8811 	msr	BASEPRI, r3
 8003a6e:	f3bf 8f6f 	isb	sy
 8003a72:	f3bf 8f4f 	dsb	sy
 8003a76:	b662      	cpsie	i
 8003a78:	623b      	str	r3, [r7, #32]
}
 8003a7a:	bf00      	nop
 8003a7c:	e7fe      	b.n	8003a7c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a7e:	f001 f8b1 	bl	8004be4 <xTaskGetSchedulerState>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d102      	bne.n	8003a8e <xQueueGenericSend+0xaa>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d101      	bne.n	8003a92 <xQueueGenericSend+0xae>
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e000      	b.n	8003a94 <xQueueGenericSend+0xb0>
 8003a92:	2300      	movs	r3, #0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d10c      	bne.n	8003ab2 <xQueueGenericSend+0xce>
	__asm volatile
 8003a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a9c:	b672      	cpsid	i
 8003a9e:	f383 8811 	msr	BASEPRI, r3
 8003aa2:	f3bf 8f6f 	isb	sy
 8003aa6:	f3bf 8f4f 	dsb	sy
 8003aaa:	b662      	cpsie	i
 8003aac:	61fb      	str	r3, [r7, #28]
}
 8003aae:	bf00      	nop
 8003ab0:	e7fe      	b.n	8003ab0 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003ab2:	f001 fbe3 	bl	800527c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d302      	bcc.n	8003ac8 <xQueueGenericSend+0xe4>
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d129      	bne.n	8003b1c <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003ac8:	683a      	ldr	r2, [r7, #0]
 8003aca:	68b9      	ldr	r1, [r7, #8]
 8003acc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ace:	f000 f9bb 	bl	8003e48 <prvCopyDataToQueue>
 8003ad2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d010      	beq.n	8003afe <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ade:	3324      	adds	r3, #36	; 0x24
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f000 febb 	bl	800485c <xTaskRemoveFromEventList>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d013      	beq.n	8003b14 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003aec:	4b3f      	ldr	r3, [pc, #252]	; (8003bec <xQueueGenericSend+0x208>)
 8003aee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003af2:	601a      	str	r2, [r3, #0]
 8003af4:	f3bf 8f4f 	dsb	sy
 8003af8:	f3bf 8f6f 	isb	sy
 8003afc:	e00a      	b.n	8003b14 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d007      	beq.n	8003b14 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003b04:	4b39      	ldr	r3, [pc, #228]	; (8003bec <xQueueGenericSend+0x208>)
 8003b06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b0a:	601a      	str	r2, [r3, #0]
 8003b0c:	f3bf 8f4f 	dsb	sy
 8003b10:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003b14:	f001 fbe6 	bl	80052e4 <vPortExitCritical>
				return pdPASS;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e063      	b.n	8003be4 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d103      	bne.n	8003b2a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003b22:	f001 fbdf 	bl	80052e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003b26:	2300      	movs	r3, #0
 8003b28:	e05c      	b.n	8003be4 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d106      	bne.n	8003b3e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003b30:	f107 0314 	add.w	r3, r7, #20
 8003b34:	4618      	mov	r0, r3
 8003b36:	f000 fef5 	bl	8004924 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003b3e:	f001 fbd1 	bl	80052e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003b42:	f000 fca1 	bl	8004488 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003b46:	f001 fb99 	bl	800527c <vPortEnterCritical>
 8003b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b50:	b25b      	sxtb	r3, r3
 8003b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b56:	d103      	bne.n	8003b60 <xQueueGenericSend+0x17c>
 8003b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b66:	b25b      	sxtb	r3, r3
 8003b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b6c:	d103      	bne.n	8003b76 <xQueueGenericSend+0x192>
 8003b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b76:	f001 fbb5 	bl	80052e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003b7a:	1d3a      	adds	r2, r7, #4
 8003b7c:	f107 0314 	add.w	r3, r7, #20
 8003b80:	4611      	mov	r1, r2
 8003b82:	4618      	mov	r0, r3
 8003b84:	f000 fee4 	bl	8004950 <xTaskCheckForTimeOut>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d124      	bne.n	8003bd8 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003b8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b90:	f000 fa2c 	bl	8003fec <prvIsQueueFull>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d018      	beq.n	8003bcc <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b9c:	3310      	adds	r3, #16
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	4611      	mov	r1, r2
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f000 fe34 	bl	8004810 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003ba8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003baa:	f000 f9b7 	bl	8003f1c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003bae:	f000 fc79 	bl	80044a4 <xTaskResumeAll>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	f47f af7c 	bne.w	8003ab2 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8003bba:	4b0c      	ldr	r3, [pc, #48]	; (8003bec <xQueueGenericSend+0x208>)
 8003bbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bc0:	601a      	str	r2, [r3, #0]
 8003bc2:	f3bf 8f4f 	dsb	sy
 8003bc6:	f3bf 8f6f 	isb	sy
 8003bca:	e772      	b.n	8003ab2 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003bcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003bce:	f000 f9a5 	bl	8003f1c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003bd2:	f000 fc67 	bl	80044a4 <xTaskResumeAll>
 8003bd6:	e76c      	b.n	8003ab2 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003bd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003bda:	f000 f99f 	bl	8003f1c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003bde:	f000 fc61 	bl	80044a4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003be2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3738      	adds	r7, #56	; 0x38
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	e000ed04 	.word	0xe000ed04

08003bf0 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b08e      	sub	sp, #56	; 0x38
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003c02:	2300      	movs	r3, #0
 8003c04:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d10c      	bne.n	8003c26 <xQueueSemaphoreTake+0x36>
	__asm volatile
 8003c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c10:	b672      	cpsid	i
 8003c12:	f383 8811 	msr	BASEPRI, r3
 8003c16:	f3bf 8f6f 	isb	sy
 8003c1a:	f3bf 8f4f 	dsb	sy
 8003c1e:	b662      	cpsie	i
 8003c20:	623b      	str	r3, [r7, #32]
}
 8003c22:	bf00      	nop
 8003c24:	e7fe      	b.n	8003c24 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00c      	beq.n	8003c48 <xQueueSemaphoreTake+0x58>
	__asm volatile
 8003c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c32:	b672      	cpsid	i
 8003c34:	f383 8811 	msr	BASEPRI, r3
 8003c38:	f3bf 8f6f 	isb	sy
 8003c3c:	f3bf 8f4f 	dsb	sy
 8003c40:	b662      	cpsie	i
 8003c42:	61fb      	str	r3, [r7, #28]
}
 8003c44:	bf00      	nop
 8003c46:	e7fe      	b.n	8003c46 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c48:	f000 ffcc 	bl	8004be4 <xTaskGetSchedulerState>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d102      	bne.n	8003c58 <xQueueSemaphoreTake+0x68>
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d101      	bne.n	8003c5c <xQueueSemaphoreTake+0x6c>
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e000      	b.n	8003c5e <xQueueSemaphoreTake+0x6e>
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d10c      	bne.n	8003c7c <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8003c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c66:	b672      	cpsid	i
 8003c68:	f383 8811 	msr	BASEPRI, r3
 8003c6c:	f3bf 8f6f 	isb	sy
 8003c70:	f3bf 8f4f 	dsb	sy
 8003c74:	b662      	cpsie	i
 8003c76:	61bb      	str	r3, [r7, #24]
}
 8003c78:	bf00      	nop
 8003c7a:	e7fe      	b.n	8003c7a <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c7c:	f001 fafe 	bl	800527c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c84:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d024      	beq.n	8003cd6 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c8e:	1e5a      	subs	r2, r3, #1
 8003c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c92:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d104      	bne.n	8003ca6 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003c9c:	f001 f968 	bl	8004f70 <pvTaskIncrementMutexHeldCount>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00f      	beq.n	8003cce <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cb0:	3310      	adds	r3, #16
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f000 fdd2 	bl	800485c <xTaskRemoveFromEventList>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d007      	beq.n	8003cce <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003cbe:	4b55      	ldr	r3, [pc, #340]	; (8003e14 <xQueueSemaphoreTake+0x224>)
 8003cc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cc4:	601a      	str	r2, [r3, #0]
 8003cc6:	f3bf 8f4f 	dsb	sy
 8003cca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003cce:	f001 fb09 	bl	80052e4 <vPortExitCritical>
				return pdPASS;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e099      	b.n	8003e0a <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d113      	bne.n	8003d04 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00c      	beq.n	8003cfc <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8003ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce6:	b672      	cpsid	i
 8003ce8:	f383 8811 	msr	BASEPRI, r3
 8003cec:	f3bf 8f6f 	isb	sy
 8003cf0:	f3bf 8f4f 	dsb	sy
 8003cf4:	b662      	cpsie	i
 8003cf6:	617b      	str	r3, [r7, #20]
}
 8003cf8:	bf00      	nop
 8003cfa:	e7fe      	b.n	8003cfa <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003cfc:	f001 faf2 	bl	80052e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003d00:	2300      	movs	r3, #0
 8003d02:	e082      	b.n	8003e0a <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d106      	bne.n	8003d18 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003d0a:	f107 030c 	add.w	r3, r7, #12
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f000 fe08 	bl	8004924 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003d14:	2301      	movs	r3, #1
 8003d16:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003d18:	f001 fae4 	bl	80052e4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003d1c:	f000 fbb4 	bl	8004488 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003d20:	f001 faac 	bl	800527c <vPortEnterCritical>
 8003d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d2a:	b25b      	sxtb	r3, r3
 8003d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d30:	d103      	bne.n	8003d3a <xQueueSemaphoreTake+0x14a>
 8003d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d40:	b25b      	sxtb	r3, r3
 8003d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d46:	d103      	bne.n	8003d50 <xQueueSemaphoreTake+0x160>
 8003d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d50:	f001 fac8 	bl	80052e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d54:	463a      	mov	r2, r7
 8003d56:	f107 030c 	add.w	r3, r7, #12
 8003d5a:	4611      	mov	r1, r2
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f000 fdf7 	bl	8004950 <xTaskCheckForTimeOut>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d132      	bne.n	8003dce <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003d6a:	f000 f929 	bl	8003fc0 <prvIsQueueEmpty>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d026      	beq.n	8003dc2 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d109      	bne.n	8003d90 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8003d7c:	f001 fa7e 	bl	800527c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	4618      	mov	r0, r3
 8003d86:	f000 ff4b 	bl	8004c20 <xTaskPriorityInherit>
 8003d8a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003d8c:	f001 faaa 	bl	80052e4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d92:	3324      	adds	r3, #36	; 0x24
 8003d94:	683a      	ldr	r2, [r7, #0]
 8003d96:	4611      	mov	r1, r2
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f000 fd39 	bl	8004810 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003d9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003da0:	f000 f8bc 	bl	8003f1c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003da4:	f000 fb7e 	bl	80044a4 <xTaskResumeAll>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	f47f af66 	bne.w	8003c7c <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8003db0:	4b18      	ldr	r3, [pc, #96]	; (8003e14 <xQueueSemaphoreTake+0x224>)
 8003db2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003db6:	601a      	str	r2, [r3, #0]
 8003db8:	f3bf 8f4f 	dsb	sy
 8003dbc:	f3bf 8f6f 	isb	sy
 8003dc0:	e75c      	b.n	8003c7c <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003dc2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003dc4:	f000 f8aa 	bl	8003f1c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003dc8:	f000 fb6c 	bl	80044a4 <xTaskResumeAll>
 8003dcc:	e756      	b.n	8003c7c <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003dce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003dd0:	f000 f8a4 	bl	8003f1c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003dd4:	f000 fb66 	bl	80044a4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003dd8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003dda:	f000 f8f1 	bl	8003fc0 <prvIsQueueEmpty>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	f43f af4b 	beq.w	8003c7c <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d00d      	beq.n	8003e08 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8003dec:	f001 fa46 	bl	800527c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003df0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003df2:	f000 f811 	bl	8003e18 <prvGetDisinheritPriorityAfterTimeout>
 8003df6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f001 f818 	bl	8004e34 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003e04:	f001 fa6e 	bl	80052e4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003e08:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3738      	adds	r7, #56	; 0x38
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	e000ed04 	.word	0xe000ed04

08003e18 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003e18:	b480      	push	{r7}
 8003e1a:	b085      	sub	sp, #20
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d006      	beq.n	8003e36 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f1c3 0307 	rsb	r3, r3, #7
 8003e32:	60fb      	str	r3, [r7, #12]
 8003e34:	e001      	b.n	8003e3a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003e36:	2300      	movs	r3, #0
 8003e38:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
	}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3714      	adds	r7, #20
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr

08003e48 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b086      	sub	sp, #24
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003e54:	2300      	movs	r3, #0
 8003e56:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e5c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d10d      	bne.n	8003e82 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d14d      	bne.n	8003f0a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	4618      	mov	r0, r3
 8003e74:	f000 ff54 	bl	8004d20 <xTaskPriorityDisinherit>
 8003e78:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	609a      	str	r2, [r3, #8]
 8003e80:	e043      	b.n	8003f0a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d119      	bne.n	8003ebc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6858      	ldr	r0, [r3, #4]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e90:	461a      	mov	r2, r3
 8003e92:	68b9      	ldr	r1, [r7, #8]
 8003e94:	f001 fce8 	bl	8005868 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	685a      	ldr	r2, [r3, #4]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea0:	441a      	add	r2, r3
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	685a      	ldr	r2, [r3, #4]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d32b      	bcc.n	8003f0a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	605a      	str	r2, [r3, #4]
 8003eba:	e026      	b.n	8003f0a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	68d8      	ldr	r0, [r3, #12]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	68b9      	ldr	r1, [r7, #8]
 8003ec8:	f001 fcce 	bl	8005868 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	68da      	ldr	r2, [r3, #12]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed4:	425b      	negs	r3, r3
 8003ed6:	441a      	add	r2, r3
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	68da      	ldr	r2, [r3, #12]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d207      	bcs.n	8003ef8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	689a      	ldr	r2, [r3, #8]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef0:	425b      	negs	r3, r3
 8003ef2:	441a      	add	r2, r3
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d105      	bne.n	8003f0a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d002      	beq.n	8003f0a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	3b01      	subs	r3, #1
 8003f08:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	1c5a      	adds	r2, r3, #1
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003f12:	697b      	ldr	r3, [r7, #20]
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3718      	adds	r7, #24
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003f24:	f001 f9aa 	bl	800527c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f2e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f30:	e011      	b.n	8003f56 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d012      	beq.n	8003f60 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	3324      	adds	r3, #36	; 0x24
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f000 fc8c 	bl	800485c <xTaskRemoveFromEventList>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d001      	beq.n	8003f4e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003f4a:	f000 fd67 	bl	8004a1c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003f4e:	7bfb      	ldrb	r3, [r7, #15]
 8003f50:	3b01      	subs	r3, #1
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	dce9      	bgt.n	8003f32 <prvUnlockQueue+0x16>
 8003f5e:	e000      	b.n	8003f62 <prvUnlockQueue+0x46>
					break;
 8003f60:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	22ff      	movs	r2, #255	; 0xff
 8003f66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003f6a:	f001 f9bb 	bl	80052e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003f6e:	f001 f985 	bl	800527c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f78:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f7a:	e011      	b.n	8003fa0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	691b      	ldr	r3, [r3, #16]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d012      	beq.n	8003faa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	3310      	adds	r3, #16
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f000 fc67 	bl	800485c <xTaskRemoveFromEventList>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d001      	beq.n	8003f98 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003f94:	f000 fd42 	bl	8004a1c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003f98:	7bbb      	ldrb	r3, [r7, #14]
 8003f9a:	3b01      	subs	r3, #1
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003fa0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	dce9      	bgt.n	8003f7c <prvUnlockQueue+0x60>
 8003fa8:	e000      	b.n	8003fac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003faa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	22ff      	movs	r2, #255	; 0xff
 8003fb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003fb4:	f001 f996 	bl	80052e4 <vPortExitCritical>
}
 8003fb8:	bf00      	nop
 8003fba:	3710      	adds	r7, #16
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003fc8:	f001 f958 	bl	800527c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d102      	bne.n	8003fda <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	60fb      	str	r3, [r7, #12]
 8003fd8:	e001      	b.n	8003fde <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003fde:	f001 f981 	bl	80052e4 <vPortExitCritical>

	return xReturn;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3710      	adds	r7, #16
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003ff4:	f001 f942 	bl	800527c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004000:	429a      	cmp	r2, r3
 8004002:	d102      	bne.n	800400a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004004:	2301      	movs	r3, #1
 8004006:	60fb      	str	r3, [r7, #12]
 8004008:	e001      	b.n	800400e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800400a:	2300      	movs	r3, #0
 800400c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800400e:	f001 f969 	bl	80052e4 <vPortExitCritical>

	return xReturn;
 8004012:	68fb      	ldr	r3, [r7, #12]
}
 8004014:	4618      	mov	r0, r3
 8004016:	3710      	adds	r7, #16
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}

0800401c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800401c:	b580      	push	{r7, lr}
 800401e:	b08e      	sub	sp, #56	; 0x38
 8004020:	af04      	add	r7, sp, #16
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	60b9      	str	r1, [r7, #8]
 8004026:	607a      	str	r2, [r7, #4]
 8004028:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800402a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800402c:	2b00      	cmp	r3, #0
 800402e:	d10c      	bne.n	800404a <xTaskCreateStatic+0x2e>
	__asm volatile
 8004030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004034:	b672      	cpsid	i
 8004036:	f383 8811 	msr	BASEPRI, r3
 800403a:	f3bf 8f6f 	isb	sy
 800403e:	f3bf 8f4f 	dsb	sy
 8004042:	b662      	cpsie	i
 8004044:	623b      	str	r3, [r7, #32]
}
 8004046:	bf00      	nop
 8004048:	e7fe      	b.n	8004048 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800404a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800404c:	2b00      	cmp	r3, #0
 800404e:	d10c      	bne.n	800406a <xTaskCreateStatic+0x4e>
	__asm volatile
 8004050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004054:	b672      	cpsid	i
 8004056:	f383 8811 	msr	BASEPRI, r3
 800405a:	f3bf 8f6f 	isb	sy
 800405e:	f3bf 8f4f 	dsb	sy
 8004062:	b662      	cpsie	i
 8004064:	61fb      	str	r3, [r7, #28]
}
 8004066:	bf00      	nop
 8004068:	e7fe      	b.n	8004068 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800406a:	2354      	movs	r3, #84	; 0x54
 800406c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	2b54      	cmp	r3, #84	; 0x54
 8004072:	d00c      	beq.n	800408e <xTaskCreateStatic+0x72>
	__asm volatile
 8004074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004078:	b672      	cpsid	i
 800407a:	f383 8811 	msr	BASEPRI, r3
 800407e:	f3bf 8f6f 	isb	sy
 8004082:	f3bf 8f4f 	dsb	sy
 8004086:	b662      	cpsie	i
 8004088:	61bb      	str	r3, [r7, #24]
}
 800408a:	bf00      	nop
 800408c:	e7fe      	b.n	800408c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800408e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004092:	2b00      	cmp	r3, #0
 8004094:	d01e      	beq.n	80040d4 <xTaskCreateStatic+0xb8>
 8004096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004098:	2b00      	cmp	r3, #0
 800409a:	d01b      	beq.n	80040d4 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800409c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800409e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80040a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040a4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80040a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a8:	2202      	movs	r2, #2
 80040aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80040ae:	2300      	movs	r3, #0
 80040b0:	9303      	str	r3, [sp, #12]
 80040b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b4:	9302      	str	r3, [sp, #8]
 80040b6:	f107 0314 	add.w	r3, r7, #20
 80040ba:	9301      	str	r3, [sp, #4]
 80040bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040be:	9300      	str	r3, [sp, #0]
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	68b9      	ldr	r1, [r7, #8]
 80040c6:	68f8      	ldr	r0, [r7, #12]
 80040c8:	f000 f850 	bl	800416c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80040cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80040ce:	f000 f8d7 	bl	8004280 <prvAddNewTaskToReadyList>
 80040d2:	e001      	b.n	80040d8 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 80040d4:	2300      	movs	r3, #0
 80040d6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80040d8:	697b      	ldr	r3, [r7, #20]
	}
 80040da:	4618      	mov	r0, r3
 80040dc:	3728      	adds	r7, #40	; 0x28
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}

080040e2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80040e2:	b580      	push	{r7, lr}
 80040e4:	b08c      	sub	sp, #48	; 0x30
 80040e6:	af04      	add	r7, sp, #16
 80040e8:	60f8      	str	r0, [r7, #12]
 80040ea:	60b9      	str	r1, [r7, #8]
 80040ec:	603b      	str	r3, [r7, #0]
 80040ee:	4613      	mov	r3, r2
 80040f0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80040f2:	88fb      	ldrh	r3, [r7, #6]
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	4618      	mov	r0, r3
 80040f8:	f001 f9a8 	bl	800544c <pvPortMalloc>
 80040fc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d00e      	beq.n	8004122 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004104:	2054      	movs	r0, #84	; 0x54
 8004106:	f001 f9a1 	bl	800544c <pvPortMalloc>
 800410a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d003      	beq.n	800411a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	697a      	ldr	r2, [r7, #20]
 8004116:	631a      	str	r2, [r3, #48]	; 0x30
 8004118:	e005      	b.n	8004126 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800411a:	6978      	ldr	r0, [r7, #20]
 800411c:	f001 fa60 	bl	80055e0 <vPortFree>
 8004120:	e001      	b.n	8004126 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004122:	2300      	movs	r3, #0
 8004124:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004126:	69fb      	ldr	r3, [r7, #28]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d017      	beq.n	800415c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	2200      	movs	r2, #0
 8004130:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004134:	88fa      	ldrh	r2, [r7, #6]
 8004136:	2300      	movs	r3, #0
 8004138:	9303      	str	r3, [sp, #12]
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	9302      	str	r3, [sp, #8]
 800413e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004140:	9301      	str	r3, [sp, #4]
 8004142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004144:	9300      	str	r3, [sp, #0]
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	68b9      	ldr	r1, [r7, #8]
 800414a:	68f8      	ldr	r0, [r7, #12]
 800414c:	f000 f80e 	bl	800416c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004150:	69f8      	ldr	r0, [r7, #28]
 8004152:	f000 f895 	bl	8004280 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004156:	2301      	movs	r3, #1
 8004158:	61bb      	str	r3, [r7, #24]
 800415a:	e002      	b.n	8004162 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800415c:	f04f 33ff 	mov.w	r3, #4294967295
 8004160:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004162:	69bb      	ldr	r3, [r7, #24]
	}
 8004164:	4618      	mov	r0, r3
 8004166:	3720      	adds	r7, #32
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b088      	sub	sp, #32
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]
 8004178:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800417a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800417c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800417e:	6879      	ldr	r1, [r7, #4]
 8004180:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8004184:	440b      	add	r3, r1
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	4413      	add	r3, r2
 800418a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	f023 0307 	bic.w	r3, r3, #7
 8004192:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	f003 0307 	and.w	r3, r3, #7
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00c      	beq.n	80041b8 <prvInitialiseNewTask+0x4c>
	__asm volatile
 800419e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a2:	b672      	cpsid	i
 80041a4:	f383 8811 	msr	BASEPRI, r3
 80041a8:	f3bf 8f6f 	isb	sy
 80041ac:	f3bf 8f4f 	dsb	sy
 80041b0:	b662      	cpsie	i
 80041b2:	617b      	str	r3, [r7, #20]
}
 80041b4:	bf00      	nop
 80041b6:	e7fe      	b.n	80041b6 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d01f      	beq.n	80041fe <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80041be:	2300      	movs	r3, #0
 80041c0:	61fb      	str	r3, [r7, #28]
 80041c2:	e012      	b.n	80041ea <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80041c4:	68ba      	ldr	r2, [r7, #8]
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	4413      	add	r3, r2
 80041ca:	7819      	ldrb	r1, [r3, #0]
 80041cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	4413      	add	r3, r2
 80041d2:	3334      	adds	r3, #52	; 0x34
 80041d4:	460a      	mov	r2, r1
 80041d6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80041d8:	68ba      	ldr	r2, [r7, #8]
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	4413      	add	r3, r2
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d006      	beq.n	80041f2 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	3301      	adds	r3, #1
 80041e8:	61fb      	str	r3, [r7, #28]
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	2b0f      	cmp	r3, #15
 80041ee:	d9e9      	bls.n	80041c4 <prvInitialiseNewTask+0x58>
 80041f0:	e000      	b.n	80041f4 <prvInitialiseNewTask+0x88>
			{
				break;
 80041f2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80041f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80041fc:	e003      	b.n	8004206 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80041fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004200:	2200      	movs	r2, #0
 8004202:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004208:	2b06      	cmp	r3, #6
 800420a:	d901      	bls.n	8004210 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800420c:	2306      	movs	r3, #6
 800420e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004212:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004214:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004218:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800421a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800421c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800421e:	2200      	movs	r2, #0
 8004220:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004224:	3304      	adds	r3, #4
 8004226:	4618      	mov	r0, r3
 8004228:	f7ff fa7c 	bl	8003724 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800422c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800422e:	3318      	adds	r3, #24
 8004230:	4618      	mov	r0, r3
 8004232:	f7ff fa77 	bl	8003724 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004238:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800423a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800423c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800423e:	f1c3 0207 	rsb	r2, r3, #7
 8004242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004244:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004248:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800424a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800424c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800424e:	2200      	movs	r2, #0
 8004250:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004254:	2200      	movs	r2, #0
 8004256:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800425a:	683a      	ldr	r2, [r7, #0]
 800425c:	68f9      	ldr	r1, [r7, #12]
 800425e:	69b8      	ldr	r0, [r7, #24]
 8004260:	f000 ff00 	bl	8005064 <pxPortInitialiseStack>
 8004264:	4602      	mov	r2, r0
 8004266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004268:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800426a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800426c:	2b00      	cmp	r3, #0
 800426e:	d002      	beq.n	8004276 <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004272:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004274:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004276:	bf00      	nop
 8004278:	3720      	adds	r7, #32
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
	...

08004280 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004288:	f000 fff8 	bl	800527c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800428c:	4b2a      	ldr	r3, [pc, #168]	; (8004338 <prvAddNewTaskToReadyList+0xb8>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	3301      	adds	r3, #1
 8004292:	4a29      	ldr	r2, [pc, #164]	; (8004338 <prvAddNewTaskToReadyList+0xb8>)
 8004294:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004296:	4b29      	ldr	r3, [pc, #164]	; (800433c <prvAddNewTaskToReadyList+0xbc>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d109      	bne.n	80042b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800429e:	4a27      	ldr	r2, [pc, #156]	; (800433c <prvAddNewTaskToReadyList+0xbc>)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80042a4:	4b24      	ldr	r3, [pc, #144]	; (8004338 <prvAddNewTaskToReadyList+0xb8>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d110      	bne.n	80042ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80042ac:	f000 fbda 	bl	8004a64 <prvInitialiseTaskLists>
 80042b0:	e00d      	b.n	80042ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80042b2:	4b23      	ldr	r3, [pc, #140]	; (8004340 <prvAddNewTaskToReadyList+0xc0>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d109      	bne.n	80042ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80042ba:	4b20      	ldr	r3, [pc, #128]	; (800433c <prvAddNewTaskToReadyList+0xbc>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d802      	bhi.n	80042ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80042c8:	4a1c      	ldr	r2, [pc, #112]	; (800433c <prvAddNewTaskToReadyList+0xbc>)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80042ce:	4b1d      	ldr	r3, [pc, #116]	; (8004344 <prvAddNewTaskToReadyList+0xc4>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	3301      	adds	r3, #1
 80042d4:	4a1b      	ldr	r2, [pc, #108]	; (8004344 <prvAddNewTaskToReadyList+0xc4>)
 80042d6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042dc:	2201      	movs	r2, #1
 80042de:	409a      	lsls	r2, r3
 80042e0:	4b19      	ldr	r3, [pc, #100]	; (8004348 <prvAddNewTaskToReadyList+0xc8>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	4a18      	ldr	r2, [pc, #96]	; (8004348 <prvAddNewTaskToReadyList+0xc8>)
 80042e8:	6013      	str	r3, [r2, #0]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042ee:	4613      	mov	r3, r2
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	4413      	add	r3, r2
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	4a15      	ldr	r2, [pc, #84]	; (800434c <prvAddNewTaskToReadyList+0xcc>)
 80042f8:	441a      	add	r2, r3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	3304      	adds	r3, #4
 80042fe:	4619      	mov	r1, r3
 8004300:	4610      	mov	r0, r2
 8004302:	f7ff fa1c 	bl	800373e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004306:	f000 ffed 	bl	80052e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800430a:	4b0d      	ldr	r3, [pc, #52]	; (8004340 <prvAddNewTaskToReadyList+0xc0>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d00e      	beq.n	8004330 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004312:	4b0a      	ldr	r3, [pc, #40]	; (800433c <prvAddNewTaskToReadyList+0xbc>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800431c:	429a      	cmp	r2, r3
 800431e:	d207      	bcs.n	8004330 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004320:	4b0b      	ldr	r3, [pc, #44]	; (8004350 <prvAddNewTaskToReadyList+0xd0>)
 8004322:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004326:	601a      	str	r2, [r3, #0]
 8004328:	f3bf 8f4f 	dsb	sy
 800432c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004330:	bf00      	nop
 8004332:	3708      	adds	r7, #8
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}
 8004338:	20000488 	.word	0x20000488
 800433c:	20000388 	.word	0x20000388
 8004340:	20000494 	.word	0x20000494
 8004344:	200004a4 	.word	0x200004a4
 8004348:	20000490 	.word	0x20000490
 800434c:	2000038c 	.word	0x2000038c
 8004350:	e000ed04 	.word	0xe000ed04

08004354 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800435c:	2300      	movs	r3, #0
 800435e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d019      	beq.n	800439a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004366:	4b14      	ldr	r3, [pc, #80]	; (80043b8 <vTaskDelay+0x64>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d00c      	beq.n	8004388 <vTaskDelay+0x34>
	__asm volatile
 800436e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004372:	b672      	cpsid	i
 8004374:	f383 8811 	msr	BASEPRI, r3
 8004378:	f3bf 8f6f 	isb	sy
 800437c:	f3bf 8f4f 	dsb	sy
 8004380:	b662      	cpsie	i
 8004382:	60bb      	str	r3, [r7, #8]
}
 8004384:	bf00      	nop
 8004386:	e7fe      	b.n	8004386 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8004388:	f000 f87e 	bl	8004488 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800438c:	2100      	movs	r1, #0
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 fe02 	bl	8004f98 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004394:	f000 f886 	bl	80044a4 <xTaskResumeAll>
 8004398:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d107      	bne.n	80043b0 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80043a0:	4b06      	ldr	r3, [pc, #24]	; (80043bc <vTaskDelay+0x68>)
 80043a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043a6:	601a      	str	r2, [r3, #0]
 80043a8:	f3bf 8f4f 	dsb	sy
 80043ac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80043b0:	bf00      	nop
 80043b2:	3710      	adds	r7, #16
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	200004b0 	.word	0x200004b0
 80043bc:	e000ed04 	.word	0xe000ed04

080043c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b08a      	sub	sp, #40	; 0x28
 80043c4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80043c6:	2300      	movs	r3, #0
 80043c8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80043ca:	2300      	movs	r3, #0
 80043cc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80043ce:	463a      	mov	r2, r7
 80043d0:	1d39      	adds	r1, r7, #4
 80043d2:	f107 0308 	add.w	r3, r7, #8
 80043d6:	4618      	mov	r0, r3
 80043d8:	f7fc f89c 	bl	8000514 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80043dc:	6839      	ldr	r1, [r7, #0]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	68ba      	ldr	r2, [r7, #8]
 80043e2:	9202      	str	r2, [sp, #8]
 80043e4:	9301      	str	r3, [sp, #4]
 80043e6:	2300      	movs	r3, #0
 80043e8:	9300      	str	r3, [sp, #0]
 80043ea:	2300      	movs	r3, #0
 80043ec:	460a      	mov	r2, r1
 80043ee:	4920      	ldr	r1, [pc, #128]	; (8004470 <vTaskStartScheduler+0xb0>)
 80043f0:	4820      	ldr	r0, [pc, #128]	; (8004474 <vTaskStartScheduler+0xb4>)
 80043f2:	f7ff fe13 	bl	800401c <xTaskCreateStatic>
 80043f6:	4603      	mov	r3, r0
 80043f8:	4a1f      	ldr	r2, [pc, #124]	; (8004478 <vTaskStartScheduler+0xb8>)
 80043fa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80043fc:	4b1e      	ldr	r3, [pc, #120]	; (8004478 <vTaskStartScheduler+0xb8>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d002      	beq.n	800440a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004404:	2301      	movs	r3, #1
 8004406:	617b      	str	r3, [r7, #20]
 8004408:	e001      	b.n	800440e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800440a:	2300      	movs	r3, #0
 800440c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	2b01      	cmp	r3, #1
 8004412:	d118      	bne.n	8004446 <vTaskStartScheduler+0x86>
	__asm volatile
 8004414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004418:	b672      	cpsid	i
 800441a:	f383 8811 	msr	BASEPRI, r3
 800441e:	f3bf 8f6f 	isb	sy
 8004422:	f3bf 8f4f 	dsb	sy
 8004426:	b662      	cpsie	i
 8004428:	613b      	str	r3, [r7, #16]
}
 800442a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800442c:	4b13      	ldr	r3, [pc, #76]	; (800447c <vTaskStartScheduler+0xbc>)
 800442e:	f04f 32ff 	mov.w	r2, #4294967295
 8004432:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004434:	4b12      	ldr	r3, [pc, #72]	; (8004480 <vTaskStartScheduler+0xc0>)
 8004436:	2201      	movs	r2, #1
 8004438:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800443a:	4b12      	ldr	r3, [pc, #72]	; (8004484 <vTaskStartScheduler+0xc4>)
 800443c:	2200      	movs	r2, #0
 800443e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004440:	f000 fe9e 	bl	8005180 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004444:	e010      	b.n	8004468 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800444c:	d10c      	bne.n	8004468 <vTaskStartScheduler+0xa8>
	__asm volatile
 800444e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004452:	b672      	cpsid	i
 8004454:	f383 8811 	msr	BASEPRI, r3
 8004458:	f3bf 8f6f 	isb	sy
 800445c:	f3bf 8f4f 	dsb	sy
 8004460:	b662      	cpsie	i
 8004462:	60fb      	str	r3, [r7, #12]
}
 8004464:	bf00      	nop
 8004466:	e7fe      	b.n	8004466 <vTaskStartScheduler+0xa6>
}
 8004468:	bf00      	nop
 800446a:	3718      	adds	r7, #24
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}
 8004470:	08006320 	.word	0x08006320
 8004474:	08004a35 	.word	0x08004a35
 8004478:	200004ac 	.word	0x200004ac
 800447c:	200004a8 	.word	0x200004a8
 8004480:	20000494 	.word	0x20000494
 8004484:	2000048c 	.word	0x2000048c

08004488 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004488:	b480      	push	{r7}
 800448a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800448c:	4b04      	ldr	r3, [pc, #16]	; (80044a0 <vTaskSuspendAll+0x18>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	3301      	adds	r3, #1
 8004492:	4a03      	ldr	r2, [pc, #12]	; (80044a0 <vTaskSuspendAll+0x18>)
 8004494:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004496:	bf00      	nop
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr
 80044a0:	200004b0 	.word	0x200004b0

080044a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80044aa:	2300      	movs	r3, #0
 80044ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80044ae:	2300      	movs	r3, #0
 80044b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80044b2:	4b42      	ldr	r3, [pc, #264]	; (80045bc <xTaskResumeAll+0x118>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d10c      	bne.n	80044d4 <xTaskResumeAll+0x30>
	__asm volatile
 80044ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044be:	b672      	cpsid	i
 80044c0:	f383 8811 	msr	BASEPRI, r3
 80044c4:	f3bf 8f6f 	isb	sy
 80044c8:	f3bf 8f4f 	dsb	sy
 80044cc:	b662      	cpsie	i
 80044ce:	603b      	str	r3, [r7, #0]
}
 80044d0:	bf00      	nop
 80044d2:	e7fe      	b.n	80044d2 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80044d4:	f000 fed2 	bl	800527c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80044d8:	4b38      	ldr	r3, [pc, #224]	; (80045bc <xTaskResumeAll+0x118>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	3b01      	subs	r3, #1
 80044de:	4a37      	ldr	r2, [pc, #220]	; (80045bc <xTaskResumeAll+0x118>)
 80044e0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044e2:	4b36      	ldr	r3, [pc, #216]	; (80045bc <xTaskResumeAll+0x118>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d161      	bne.n	80045ae <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80044ea:	4b35      	ldr	r3, [pc, #212]	; (80045c0 <xTaskResumeAll+0x11c>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d05d      	beq.n	80045ae <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80044f2:	e02e      	b.n	8004552 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044f4:	4b33      	ldr	r3, [pc, #204]	; (80045c4 <xTaskResumeAll+0x120>)
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	3318      	adds	r3, #24
 8004500:	4618      	mov	r0, r3
 8004502:	f7ff f979 	bl	80037f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	3304      	adds	r3, #4
 800450a:	4618      	mov	r0, r3
 800450c:	f7ff f974 	bl	80037f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004514:	2201      	movs	r2, #1
 8004516:	409a      	lsls	r2, r3
 8004518:	4b2b      	ldr	r3, [pc, #172]	; (80045c8 <xTaskResumeAll+0x124>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4313      	orrs	r3, r2
 800451e:	4a2a      	ldr	r2, [pc, #168]	; (80045c8 <xTaskResumeAll+0x124>)
 8004520:	6013      	str	r3, [r2, #0]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004526:	4613      	mov	r3, r2
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	4413      	add	r3, r2
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	4a27      	ldr	r2, [pc, #156]	; (80045cc <xTaskResumeAll+0x128>)
 8004530:	441a      	add	r2, r3
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	3304      	adds	r3, #4
 8004536:	4619      	mov	r1, r3
 8004538:	4610      	mov	r0, r2
 800453a:	f7ff f900 	bl	800373e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004542:	4b23      	ldr	r3, [pc, #140]	; (80045d0 <xTaskResumeAll+0x12c>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004548:	429a      	cmp	r2, r3
 800454a:	d302      	bcc.n	8004552 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800454c:	4b21      	ldr	r3, [pc, #132]	; (80045d4 <xTaskResumeAll+0x130>)
 800454e:	2201      	movs	r2, #1
 8004550:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004552:	4b1c      	ldr	r3, [pc, #112]	; (80045c4 <xTaskResumeAll+0x120>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d1cc      	bne.n	80044f4 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d001      	beq.n	8004564 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004560:	f000 fb20 	bl	8004ba4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004564:	4b1c      	ldr	r3, [pc, #112]	; (80045d8 <xTaskResumeAll+0x134>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d010      	beq.n	8004592 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004570:	f000 f836 	bl	80045e0 <xTaskIncrementTick>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d002      	beq.n	8004580 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800457a:	4b16      	ldr	r3, [pc, #88]	; (80045d4 <xTaskResumeAll+0x130>)
 800457c:	2201      	movs	r2, #1
 800457e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	3b01      	subs	r3, #1
 8004584:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d1f1      	bne.n	8004570 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800458c:	4b12      	ldr	r3, [pc, #72]	; (80045d8 <xTaskResumeAll+0x134>)
 800458e:	2200      	movs	r2, #0
 8004590:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004592:	4b10      	ldr	r3, [pc, #64]	; (80045d4 <xTaskResumeAll+0x130>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d009      	beq.n	80045ae <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800459a:	2301      	movs	r3, #1
 800459c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800459e:	4b0f      	ldr	r3, [pc, #60]	; (80045dc <xTaskResumeAll+0x138>)
 80045a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045a4:	601a      	str	r2, [r3, #0]
 80045a6:	f3bf 8f4f 	dsb	sy
 80045aa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80045ae:	f000 fe99 	bl	80052e4 <vPortExitCritical>

	return xAlreadyYielded;
 80045b2:	68bb      	ldr	r3, [r7, #8]
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3710      	adds	r7, #16
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	200004b0 	.word	0x200004b0
 80045c0:	20000488 	.word	0x20000488
 80045c4:	20000448 	.word	0x20000448
 80045c8:	20000490 	.word	0x20000490
 80045cc:	2000038c 	.word	0x2000038c
 80045d0:	20000388 	.word	0x20000388
 80045d4:	2000049c 	.word	0x2000049c
 80045d8:	20000498 	.word	0x20000498
 80045dc:	e000ed04 	.word	0xe000ed04

080045e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b086      	sub	sp, #24
 80045e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80045e6:	2300      	movs	r3, #0
 80045e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045ea:	4b4f      	ldr	r3, [pc, #316]	; (8004728 <xTaskIncrementTick+0x148>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	f040 808a 	bne.w	8004708 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80045f4:	4b4d      	ldr	r3, [pc, #308]	; (800472c <xTaskIncrementTick+0x14c>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	3301      	adds	r3, #1
 80045fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80045fc:	4a4b      	ldr	r2, [pc, #300]	; (800472c <xTaskIncrementTick+0x14c>)
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d122      	bne.n	800464e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8004608:	4b49      	ldr	r3, [pc, #292]	; (8004730 <xTaskIncrementTick+0x150>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00c      	beq.n	800462c <xTaskIncrementTick+0x4c>
	__asm volatile
 8004612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004616:	b672      	cpsid	i
 8004618:	f383 8811 	msr	BASEPRI, r3
 800461c:	f3bf 8f6f 	isb	sy
 8004620:	f3bf 8f4f 	dsb	sy
 8004624:	b662      	cpsie	i
 8004626:	603b      	str	r3, [r7, #0]
}
 8004628:	bf00      	nop
 800462a:	e7fe      	b.n	800462a <xTaskIncrementTick+0x4a>
 800462c:	4b40      	ldr	r3, [pc, #256]	; (8004730 <xTaskIncrementTick+0x150>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	60fb      	str	r3, [r7, #12]
 8004632:	4b40      	ldr	r3, [pc, #256]	; (8004734 <xTaskIncrementTick+0x154>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a3e      	ldr	r2, [pc, #248]	; (8004730 <xTaskIncrementTick+0x150>)
 8004638:	6013      	str	r3, [r2, #0]
 800463a:	4a3e      	ldr	r2, [pc, #248]	; (8004734 <xTaskIncrementTick+0x154>)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6013      	str	r3, [r2, #0]
 8004640:	4b3d      	ldr	r3, [pc, #244]	; (8004738 <xTaskIncrementTick+0x158>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	3301      	adds	r3, #1
 8004646:	4a3c      	ldr	r2, [pc, #240]	; (8004738 <xTaskIncrementTick+0x158>)
 8004648:	6013      	str	r3, [r2, #0]
 800464a:	f000 faab 	bl	8004ba4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800464e:	4b3b      	ldr	r3, [pc, #236]	; (800473c <xTaskIncrementTick+0x15c>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	693a      	ldr	r2, [r7, #16]
 8004654:	429a      	cmp	r2, r3
 8004656:	d348      	bcc.n	80046ea <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004658:	4b35      	ldr	r3, [pc, #212]	; (8004730 <xTaskIncrementTick+0x150>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d104      	bne.n	800466c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004662:	4b36      	ldr	r3, [pc, #216]	; (800473c <xTaskIncrementTick+0x15c>)
 8004664:	f04f 32ff 	mov.w	r2, #4294967295
 8004668:	601a      	str	r2, [r3, #0]
					break;
 800466a:	e03e      	b.n	80046ea <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800466c:	4b30      	ldr	r3, [pc, #192]	; (8004730 <xTaskIncrementTick+0x150>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800467c:	693a      	ldr	r2, [r7, #16]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	429a      	cmp	r2, r3
 8004682:	d203      	bcs.n	800468c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004684:	4a2d      	ldr	r2, [pc, #180]	; (800473c <xTaskIncrementTick+0x15c>)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800468a:	e02e      	b.n	80046ea <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	3304      	adds	r3, #4
 8004690:	4618      	mov	r0, r3
 8004692:	f7ff f8b1 	bl	80037f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800469a:	2b00      	cmp	r3, #0
 800469c:	d004      	beq.n	80046a8 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	3318      	adds	r3, #24
 80046a2:	4618      	mov	r0, r3
 80046a4:	f7ff f8a8 	bl	80037f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ac:	2201      	movs	r2, #1
 80046ae:	409a      	lsls	r2, r3
 80046b0:	4b23      	ldr	r3, [pc, #140]	; (8004740 <xTaskIncrementTick+0x160>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	4a22      	ldr	r2, [pc, #136]	; (8004740 <xTaskIncrementTick+0x160>)
 80046b8:	6013      	str	r3, [r2, #0]
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046be:	4613      	mov	r3, r2
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	4413      	add	r3, r2
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	4a1f      	ldr	r2, [pc, #124]	; (8004744 <xTaskIncrementTick+0x164>)
 80046c8:	441a      	add	r2, r3
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	3304      	adds	r3, #4
 80046ce:	4619      	mov	r1, r3
 80046d0:	4610      	mov	r0, r2
 80046d2:	f7ff f834 	bl	800373e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046da:	4b1b      	ldr	r3, [pc, #108]	; (8004748 <xTaskIncrementTick+0x168>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d3b9      	bcc.n	8004658 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80046e4:	2301      	movs	r3, #1
 80046e6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046e8:	e7b6      	b.n	8004658 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80046ea:	4b17      	ldr	r3, [pc, #92]	; (8004748 <xTaskIncrementTick+0x168>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046f0:	4914      	ldr	r1, [pc, #80]	; (8004744 <xTaskIncrementTick+0x164>)
 80046f2:	4613      	mov	r3, r2
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	4413      	add	r3, r2
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	440b      	add	r3, r1
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d907      	bls.n	8004712 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8004702:	2301      	movs	r3, #1
 8004704:	617b      	str	r3, [r7, #20]
 8004706:	e004      	b.n	8004712 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004708:	4b10      	ldr	r3, [pc, #64]	; (800474c <xTaskIncrementTick+0x16c>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	3301      	adds	r3, #1
 800470e:	4a0f      	ldr	r2, [pc, #60]	; (800474c <xTaskIncrementTick+0x16c>)
 8004710:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004712:	4b0f      	ldr	r3, [pc, #60]	; (8004750 <xTaskIncrementTick+0x170>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d001      	beq.n	800471e <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800471a:	2301      	movs	r3, #1
 800471c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800471e:	697b      	ldr	r3, [r7, #20]
}
 8004720:	4618      	mov	r0, r3
 8004722:	3718      	adds	r7, #24
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}
 8004728:	200004b0 	.word	0x200004b0
 800472c:	2000048c 	.word	0x2000048c
 8004730:	20000440 	.word	0x20000440
 8004734:	20000444 	.word	0x20000444
 8004738:	200004a0 	.word	0x200004a0
 800473c:	200004a8 	.word	0x200004a8
 8004740:	20000490 	.word	0x20000490
 8004744:	2000038c 	.word	0x2000038c
 8004748:	20000388 	.word	0x20000388
 800474c:	20000498 	.word	0x20000498
 8004750:	2000049c 	.word	0x2000049c

08004754 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004754:	b480      	push	{r7}
 8004756:	b087      	sub	sp, #28
 8004758:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800475a:	4b28      	ldr	r3, [pc, #160]	; (80047fc <vTaskSwitchContext+0xa8>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d003      	beq.n	800476a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004762:	4b27      	ldr	r3, [pc, #156]	; (8004800 <vTaskSwitchContext+0xac>)
 8004764:	2201      	movs	r2, #1
 8004766:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004768:	e041      	b.n	80047ee <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800476a:	4b25      	ldr	r3, [pc, #148]	; (8004800 <vTaskSwitchContext+0xac>)
 800476c:	2200      	movs	r2, #0
 800476e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004770:	4b24      	ldr	r3, [pc, #144]	; (8004804 <vTaskSwitchContext+0xb0>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	fab3 f383 	clz	r3, r3
 800477c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800477e:	7afb      	ldrb	r3, [r7, #11]
 8004780:	f1c3 031f 	rsb	r3, r3, #31
 8004784:	617b      	str	r3, [r7, #20]
 8004786:	4920      	ldr	r1, [pc, #128]	; (8004808 <vTaskSwitchContext+0xb4>)
 8004788:	697a      	ldr	r2, [r7, #20]
 800478a:	4613      	mov	r3, r2
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	4413      	add	r3, r2
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	440b      	add	r3, r1
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d10c      	bne.n	80047b4 <vTaskSwitchContext+0x60>
	__asm volatile
 800479a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800479e:	b672      	cpsid	i
 80047a0:	f383 8811 	msr	BASEPRI, r3
 80047a4:	f3bf 8f6f 	isb	sy
 80047a8:	f3bf 8f4f 	dsb	sy
 80047ac:	b662      	cpsie	i
 80047ae:	607b      	str	r3, [r7, #4]
}
 80047b0:	bf00      	nop
 80047b2:	e7fe      	b.n	80047b2 <vTaskSwitchContext+0x5e>
 80047b4:	697a      	ldr	r2, [r7, #20]
 80047b6:	4613      	mov	r3, r2
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	4413      	add	r3, r2
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	4a12      	ldr	r2, [pc, #72]	; (8004808 <vTaskSwitchContext+0xb4>)
 80047c0:	4413      	add	r3, r2
 80047c2:	613b      	str	r3, [r7, #16]
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	685a      	ldr	r2, [r3, #4]
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	605a      	str	r2, [r3, #4]
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	685a      	ldr	r2, [r3, #4]
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	3308      	adds	r3, #8
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d104      	bne.n	80047e4 <vTaskSwitchContext+0x90>
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	685a      	ldr	r2, [r3, #4]
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	605a      	str	r2, [r3, #4]
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	4a08      	ldr	r2, [pc, #32]	; (800480c <vTaskSwitchContext+0xb8>)
 80047ec:	6013      	str	r3, [r2, #0]
}
 80047ee:	bf00      	nop
 80047f0:	371c      	adds	r7, #28
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr
 80047fa:	bf00      	nop
 80047fc:	200004b0 	.word	0x200004b0
 8004800:	2000049c 	.word	0x2000049c
 8004804:	20000490 	.word	0x20000490
 8004808:	2000038c 	.word	0x2000038c
 800480c:	20000388 	.word	0x20000388

08004810 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d10c      	bne.n	800483a <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8004820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004824:	b672      	cpsid	i
 8004826:	f383 8811 	msr	BASEPRI, r3
 800482a:	f3bf 8f6f 	isb	sy
 800482e:	f3bf 8f4f 	dsb	sy
 8004832:	b662      	cpsie	i
 8004834:	60fb      	str	r3, [r7, #12]
}
 8004836:	bf00      	nop
 8004838:	e7fe      	b.n	8004838 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800483a:	4b07      	ldr	r3, [pc, #28]	; (8004858 <vTaskPlaceOnEventList+0x48>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	3318      	adds	r3, #24
 8004840:	4619      	mov	r1, r3
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f7fe ff9f 	bl	8003786 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004848:	2101      	movs	r1, #1
 800484a:	6838      	ldr	r0, [r7, #0]
 800484c:	f000 fba4 	bl	8004f98 <prvAddCurrentTaskToDelayedList>
}
 8004850:	bf00      	nop
 8004852:	3710      	adds	r7, #16
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}
 8004858:	20000388 	.word	0x20000388

0800485c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b086      	sub	sp, #24
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	68db      	ldr	r3, [r3, #12]
 800486a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d10c      	bne.n	800488c <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8004872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004876:	b672      	cpsid	i
 8004878:	f383 8811 	msr	BASEPRI, r3
 800487c:	f3bf 8f6f 	isb	sy
 8004880:	f3bf 8f4f 	dsb	sy
 8004884:	b662      	cpsie	i
 8004886:	60fb      	str	r3, [r7, #12]
}
 8004888:	bf00      	nop
 800488a:	e7fe      	b.n	800488a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	3318      	adds	r3, #24
 8004890:	4618      	mov	r0, r3
 8004892:	f7fe ffb1 	bl	80037f8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004896:	4b1d      	ldr	r3, [pc, #116]	; (800490c <xTaskRemoveFromEventList+0xb0>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d11c      	bne.n	80048d8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	3304      	adds	r3, #4
 80048a2:	4618      	mov	r0, r3
 80048a4:	f7fe ffa8 	bl	80037f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ac:	2201      	movs	r2, #1
 80048ae:	409a      	lsls	r2, r3
 80048b0:	4b17      	ldr	r3, [pc, #92]	; (8004910 <xTaskRemoveFromEventList+0xb4>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	4a16      	ldr	r2, [pc, #88]	; (8004910 <xTaskRemoveFromEventList+0xb4>)
 80048b8:	6013      	str	r3, [r2, #0]
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048be:	4613      	mov	r3, r2
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	4413      	add	r3, r2
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	4a13      	ldr	r2, [pc, #76]	; (8004914 <xTaskRemoveFromEventList+0xb8>)
 80048c8:	441a      	add	r2, r3
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	3304      	adds	r3, #4
 80048ce:	4619      	mov	r1, r3
 80048d0:	4610      	mov	r0, r2
 80048d2:	f7fe ff34 	bl	800373e <vListInsertEnd>
 80048d6:	e005      	b.n	80048e4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	3318      	adds	r3, #24
 80048dc:	4619      	mov	r1, r3
 80048de:	480e      	ldr	r0, [pc, #56]	; (8004918 <xTaskRemoveFromEventList+0xbc>)
 80048e0:	f7fe ff2d 	bl	800373e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048e8:	4b0c      	ldr	r3, [pc, #48]	; (800491c <xTaskRemoveFromEventList+0xc0>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d905      	bls.n	80048fe <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80048f2:	2301      	movs	r3, #1
 80048f4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80048f6:	4b0a      	ldr	r3, [pc, #40]	; (8004920 <xTaskRemoveFromEventList+0xc4>)
 80048f8:	2201      	movs	r2, #1
 80048fa:	601a      	str	r2, [r3, #0]
 80048fc:	e001      	b.n	8004902 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80048fe:	2300      	movs	r3, #0
 8004900:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004902:	697b      	ldr	r3, [r7, #20]
}
 8004904:	4618      	mov	r0, r3
 8004906:	3718      	adds	r7, #24
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}
 800490c:	200004b0 	.word	0x200004b0
 8004910:	20000490 	.word	0x20000490
 8004914:	2000038c 	.word	0x2000038c
 8004918:	20000448 	.word	0x20000448
 800491c:	20000388 	.word	0x20000388
 8004920:	2000049c 	.word	0x2000049c

08004924 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800492c:	4b06      	ldr	r3, [pc, #24]	; (8004948 <vTaskInternalSetTimeOutState+0x24>)
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004934:	4b05      	ldr	r3, [pc, #20]	; (800494c <vTaskInternalSetTimeOutState+0x28>)
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	605a      	str	r2, [r3, #4]
}
 800493c:	bf00      	nop
 800493e:	370c      	adds	r7, #12
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr
 8004948:	200004a0 	.word	0x200004a0
 800494c:	2000048c 	.word	0x2000048c

08004950 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b088      	sub	sp, #32
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d10c      	bne.n	800497a <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8004960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004964:	b672      	cpsid	i
 8004966:	f383 8811 	msr	BASEPRI, r3
 800496a:	f3bf 8f6f 	isb	sy
 800496e:	f3bf 8f4f 	dsb	sy
 8004972:	b662      	cpsie	i
 8004974:	613b      	str	r3, [r7, #16]
}
 8004976:	bf00      	nop
 8004978:	e7fe      	b.n	8004978 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d10c      	bne.n	800499a <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8004980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004984:	b672      	cpsid	i
 8004986:	f383 8811 	msr	BASEPRI, r3
 800498a:	f3bf 8f6f 	isb	sy
 800498e:	f3bf 8f4f 	dsb	sy
 8004992:	b662      	cpsie	i
 8004994:	60fb      	str	r3, [r7, #12]
}
 8004996:	bf00      	nop
 8004998:	e7fe      	b.n	8004998 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800499a:	f000 fc6f 	bl	800527c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800499e:	4b1d      	ldr	r3, [pc, #116]	; (8004a14 <xTaskCheckForTimeOut+0xc4>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	69ba      	ldr	r2, [r7, #24]
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049b6:	d102      	bne.n	80049be <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80049b8:	2300      	movs	r3, #0
 80049ba:	61fb      	str	r3, [r7, #28]
 80049bc:	e023      	b.n	8004a06 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	4b15      	ldr	r3, [pc, #84]	; (8004a18 <xTaskCheckForTimeOut+0xc8>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d007      	beq.n	80049da <xTaskCheckForTimeOut+0x8a>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	69ba      	ldr	r2, [r7, #24]
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d302      	bcc.n	80049da <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80049d4:	2301      	movs	r3, #1
 80049d6:	61fb      	str	r3, [r7, #28]
 80049d8:	e015      	b.n	8004a06 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	697a      	ldr	r2, [r7, #20]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d20b      	bcs.n	80049fc <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	1ad2      	subs	r2, r2, r3
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f7ff ff97 	bl	8004924 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80049f6:	2300      	movs	r3, #0
 80049f8:	61fb      	str	r3, [r7, #28]
 80049fa:	e004      	b.n	8004a06 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	2200      	movs	r2, #0
 8004a00:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004a02:	2301      	movs	r3, #1
 8004a04:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004a06:	f000 fc6d 	bl	80052e4 <vPortExitCritical>

	return xReturn;
 8004a0a:	69fb      	ldr	r3, [r7, #28]
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3720      	adds	r7, #32
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	2000048c 	.word	0x2000048c
 8004a18:	200004a0 	.word	0x200004a0

08004a1c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004a20:	4b03      	ldr	r3, [pc, #12]	; (8004a30 <vTaskMissedYield+0x14>)
 8004a22:	2201      	movs	r2, #1
 8004a24:	601a      	str	r2, [r3, #0]
}
 8004a26:	bf00      	nop
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr
 8004a30:	2000049c 	.word	0x2000049c

08004a34 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b082      	sub	sp, #8
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004a3c:	f000 f852 	bl	8004ae4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004a40:	4b06      	ldr	r3, [pc, #24]	; (8004a5c <prvIdleTask+0x28>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d9f9      	bls.n	8004a3c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004a48:	4b05      	ldr	r3, [pc, #20]	; (8004a60 <prvIdleTask+0x2c>)
 8004a4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a4e:	601a      	str	r2, [r3, #0]
 8004a50:	f3bf 8f4f 	dsb	sy
 8004a54:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004a58:	e7f0      	b.n	8004a3c <prvIdleTask+0x8>
 8004a5a:	bf00      	nop
 8004a5c:	2000038c 	.word	0x2000038c
 8004a60:	e000ed04 	.word	0xe000ed04

08004a64 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b082      	sub	sp, #8
 8004a68:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	607b      	str	r3, [r7, #4]
 8004a6e:	e00c      	b.n	8004a8a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	4613      	mov	r3, r2
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	4413      	add	r3, r2
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	4a12      	ldr	r2, [pc, #72]	; (8004ac4 <prvInitialiseTaskLists+0x60>)
 8004a7c:	4413      	add	r3, r2
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f7fe fe30 	bl	80036e4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	3301      	adds	r3, #1
 8004a88:	607b      	str	r3, [r7, #4]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2b06      	cmp	r3, #6
 8004a8e:	d9ef      	bls.n	8004a70 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004a90:	480d      	ldr	r0, [pc, #52]	; (8004ac8 <prvInitialiseTaskLists+0x64>)
 8004a92:	f7fe fe27 	bl	80036e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004a96:	480d      	ldr	r0, [pc, #52]	; (8004acc <prvInitialiseTaskLists+0x68>)
 8004a98:	f7fe fe24 	bl	80036e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004a9c:	480c      	ldr	r0, [pc, #48]	; (8004ad0 <prvInitialiseTaskLists+0x6c>)
 8004a9e:	f7fe fe21 	bl	80036e4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004aa2:	480c      	ldr	r0, [pc, #48]	; (8004ad4 <prvInitialiseTaskLists+0x70>)
 8004aa4:	f7fe fe1e 	bl	80036e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004aa8:	480b      	ldr	r0, [pc, #44]	; (8004ad8 <prvInitialiseTaskLists+0x74>)
 8004aaa:	f7fe fe1b 	bl	80036e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004aae:	4b0b      	ldr	r3, [pc, #44]	; (8004adc <prvInitialiseTaskLists+0x78>)
 8004ab0:	4a05      	ldr	r2, [pc, #20]	; (8004ac8 <prvInitialiseTaskLists+0x64>)
 8004ab2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004ab4:	4b0a      	ldr	r3, [pc, #40]	; (8004ae0 <prvInitialiseTaskLists+0x7c>)
 8004ab6:	4a05      	ldr	r2, [pc, #20]	; (8004acc <prvInitialiseTaskLists+0x68>)
 8004ab8:	601a      	str	r2, [r3, #0]
}
 8004aba:	bf00      	nop
 8004abc:	3708      	adds	r7, #8
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	2000038c 	.word	0x2000038c
 8004ac8:	20000418 	.word	0x20000418
 8004acc:	2000042c 	.word	0x2000042c
 8004ad0:	20000448 	.word	0x20000448
 8004ad4:	2000045c 	.word	0x2000045c
 8004ad8:	20000474 	.word	0x20000474
 8004adc:	20000440 	.word	0x20000440
 8004ae0:	20000444 	.word	0x20000444

08004ae4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b082      	sub	sp, #8
 8004ae8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004aea:	e019      	b.n	8004b20 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004aec:	f000 fbc6 	bl	800527c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004af0:	4b10      	ldr	r3, [pc, #64]	; (8004b34 <prvCheckTasksWaitingTermination+0x50>)
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	3304      	adds	r3, #4
 8004afc:	4618      	mov	r0, r3
 8004afe:	f7fe fe7b 	bl	80037f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004b02:	4b0d      	ldr	r3, [pc, #52]	; (8004b38 <prvCheckTasksWaitingTermination+0x54>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	3b01      	subs	r3, #1
 8004b08:	4a0b      	ldr	r2, [pc, #44]	; (8004b38 <prvCheckTasksWaitingTermination+0x54>)
 8004b0a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004b0c:	4b0b      	ldr	r3, [pc, #44]	; (8004b3c <prvCheckTasksWaitingTermination+0x58>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	3b01      	subs	r3, #1
 8004b12:	4a0a      	ldr	r2, [pc, #40]	; (8004b3c <prvCheckTasksWaitingTermination+0x58>)
 8004b14:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004b16:	f000 fbe5 	bl	80052e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 f810 	bl	8004b40 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b20:	4b06      	ldr	r3, [pc, #24]	; (8004b3c <prvCheckTasksWaitingTermination+0x58>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d1e1      	bne.n	8004aec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004b28:	bf00      	nop
 8004b2a:	bf00      	nop
 8004b2c:	3708      	adds	r7, #8
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	2000045c 	.word	0x2000045c
 8004b38:	20000488 	.word	0x20000488
 8004b3c:	20000470 	.word	0x20000470

08004b40 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b084      	sub	sp, #16
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d108      	bne.n	8004b64 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b56:	4618      	mov	r0, r3
 8004b58:	f000 fd42 	bl	80055e0 <vPortFree>
				vPortFree( pxTCB );
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f000 fd3f 	bl	80055e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004b62:	e01a      	b.n	8004b9a <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d103      	bne.n	8004b76 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 fd36 	bl	80055e0 <vPortFree>
	}
 8004b74:	e011      	b.n	8004b9a <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d00c      	beq.n	8004b9a <prvDeleteTCB+0x5a>
	__asm volatile
 8004b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b84:	b672      	cpsid	i
 8004b86:	f383 8811 	msr	BASEPRI, r3
 8004b8a:	f3bf 8f6f 	isb	sy
 8004b8e:	f3bf 8f4f 	dsb	sy
 8004b92:	b662      	cpsie	i
 8004b94:	60fb      	str	r3, [r7, #12]
}
 8004b96:	bf00      	nop
 8004b98:	e7fe      	b.n	8004b98 <prvDeleteTCB+0x58>
	}
 8004b9a:	bf00      	nop
 8004b9c:	3710      	adds	r7, #16
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
	...

08004ba4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004baa:	4b0c      	ldr	r3, [pc, #48]	; (8004bdc <prvResetNextTaskUnblockTime+0x38>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d104      	bne.n	8004bbe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004bb4:	4b0a      	ldr	r3, [pc, #40]	; (8004be0 <prvResetNextTaskUnblockTime+0x3c>)
 8004bb6:	f04f 32ff 	mov.w	r2, #4294967295
 8004bba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004bbc:	e008      	b.n	8004bd0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bbe:	4b07      	ldr	r3, [pc, #28]	; (8004bdc <prvResetNextTaskUnblockTime+0x38>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	4a04      	ldr	r2, [pc, #16]	; (8004be0 <prvResetNextTaskUnblockTime+0x3c>)
 8004bce:	6013      	str	r3, [r2, #0]
}
 8004bd0:	bf00      	nop
 8004bd2:	370c      	adds	r7, #12
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr
 8004bdc:	20000440 	.word	0x20000440
 8004be0:	200004a8 	.word	0x200004a8

08004be4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004bea:	4b0b      	ldr	r3, [pc, #44]	; (8004c18 <xTaskGetSchedulerState+0x34>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d102      	bne.n	8004bf8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	607b      	str	r3, [r7, #4]
 8004bf6:	e008      	b.n	8004c0a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bf8:	4b08      	ldr	r3, [pc, #32]	; (8004c1c <xTaskGetSchedulerState+0x38>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d102      	bne.n	8004c06 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004c00:	2302      	movs	r3, #2
 8004c02:	607b      	str	r3, [r7, #4]
 8004c04:	e001      	b.n	8004c0a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004c06:	2300      	movs	r3, #0
 8004c08:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004c0a:	687b      	ldr	r3, [r7, #4]
	}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	370c      	adds	r7, #12
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr
 8004c18:	20000494 	.word	0x20000494
 8004c1c:	200004b0 	.word	0x200004b0

08004c20 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d069      	beq.n	8004d0a <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c3a:	4b36      	ldr	r3, [pc, #216]	; (8004d14 <xTaskPriorityInherit+0xf4>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d259      	bcs.n	8004cf8 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	699b      	ldr	r3, [r3, #24]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	db06      	blt.n	8004c5a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c4c:	4b31      	ldr	r3, [pc, #196]	; (8004d14 <xTaskPriorityInherit+0xf4>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c52:	f1c3 0207 	rsb	r2, r3, #7
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	6959      	ldr	r1, [r3, #20]
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c62:	4613      	mov	r3, r2
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	4413      	add	r3, r2
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	4a2b      	ldr	r2, [pc, #172]	; (8004d18 <xTaskPriorityInherit+0xf8>)
 8004c6c:	4413      	add	r3, r2
 8004c6e:	4299      	cmp	r1, r3
 8004c70:	d13a      	bne.n	8004ce8 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	3304      	adds	r3, #4
 8004c76:	4618      	mov	r0, r3
 8004c78:	f7fe fdbe 	bl	80037f8 <uxListRemove>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d115      	bne.n	8004cae <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c86:	4924      	ldr	r1, [pc, #144]	; (8004d18 <xTaskPriorityInherit+0xf8>)
 8004c88:	4613      	mov	r3, r2
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	4413      	add	r3, r2
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	440b      	add	r3, r1
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d10a      	bne.n	8004cae <xTaskPriorityInherit+0x8e>
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca2:	43da      	mvns	r2, r3
 8004ca4:	4b1d      	ldr	r3, [pc, #116]	; (8004d1c <xTaskPriorityInherit+0xfc>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4013      	ands	r3, r2
 8004caa:	4a1c      	ldr	r2, [pc, #112]	; (8004d1c <xTaskPriorityInherit+0xfc>)
 8004cac:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004cae:	4b19      	ldr	r3, [pc, #100]	; (8004d14 <xTaskPriorityInherit+0xf4>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	409a      	lsls	r2, r3
 8004cc0:	4b16      	ldr	r3, [pc, #88]	; (8004d1c <xTaskPriorityInherit+0xfc>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	4a15      	ldr	r2, [pc, #84]	; (8004d1c <xTaskPriorityInherit+0xfc>)
 8004cc8:	6013      	str	r3, [r2, #0]
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cce:	4613      	mov	r3, r2
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	4413      	add	r3, r2
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	4a10      	ldr	r2, [pc, #64]	; (8004d18 <xTaskPriorityInherit+0xf8>)
 8004cd8:	441a      	add	r2, r3
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	3304      	adds	r3, #4
 8004cde:	4619      	mov	r1, r3
 8004ce0:	4610      	mov	r0, r2
 8004ce2:	f7fe fd2c 	bl	800373e <vListInsertEnd>
 8004ce6:	e004      	b.n	8004cf2 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004ce8:	4b0a      	ldr	r3, [pc, #40]	; (8004d14 <xTaskPriorityInherit+0xf4>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	60fb      	str	r3, [r7, #12]
 8004cf6:	e008      	b.n	8004d0a <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cfc:	4b05      	ldr	r3, [pc, #20]	; (8004d14 <xTaskPriorityInherit+0xf4>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d201      	bcs.n	8004d0a <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004d06:	2301      	movs	r3, #1
 8004d08:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
	}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3710      	adds	r7, #16
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	20000388 	.word	0x20000388
 8004d18:	2000038c 	.word	0x2000038c
 8004d1c:	20000490 	.word	0x20000490

08004d20 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b086      	sub	sp, #24
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d072      	beq.n	8004e1c <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004d36:	4b3c      	ldr	r3, [pc, #240]	; (8004e28 <xTaskPriorityDisinherit+0x108>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	693a      	ldr	r2, [r7, #16]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d00c      	beq.n	8004d5a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8004d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d44:	b672      	cpsid	i
 8004d46:	f383 8811 	msr	BASEPRI, r3
 8004d4a:	f3bf 8f6f 	isb	sy
 8004d4e:	f3bf 8f4f 	dsb	sy
 8004d52:	b662      	cpsie	i
 8004d54:	60fb      	str	r3, [r7, #12]
}
 8004d56:	bf00      	nop
 8004d58:	e7fe      	b.n	8004d58 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d10c      	bne.n	8004d7c <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8004d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d66:	b672      	cpsid	i
 8004d68:	f383 8811 	msr	BASEPRI, r3
 8004d6c:	f3bf 8f6f 	isb	sy
 8004d70:	f3bf 8f4f 	dsb	sy
 8004d74:	b662      	cpsie	i
 8004d76:	60bb      	str	r3, [r7, #8]
}
 8004d78:	bf00      	nop
 8004d7a:	e7fe      	b.n	8004d7a <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d80:	1e5a      	subs	r2, r3, #1
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d044      	beq.n	8004e1c <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d140      	bne.n	8004e1c <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	3304      	adds	r3, #4
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f7fe fd2a 	bl	80037f8 <uxListRemove>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d115      	bne.n	8004dd6 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dae:	491f      	ldr	r1, [pc, #124]	; (8004e2c <xTaskPriorityDisinherit+0x10c>)
 8004db0:	4613      	mov	r3, r2
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	4413      	add	r3, r2
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	440b      	add	r3, r1
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d10a      	bne.n	8004dd6 <xTaskPriorityDisinherit+0xb6>
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dca:	43da      	mvns	r2, r3
 8004dcc:	4b18      	ldr	r3, [pc, #96]	; (8004e30 <xTaskPriorityDisinherit+0x110>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	4a17      	ldr	r2, [pc, #92]	; (8004e30 <xTaskPriorityDisinherit+0x110>)
 8004dd4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de2:	f1c3 0207 	rsb	r2, r3, #7
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dee:	2201      	movs	r2, #1
 8004df0:	409a      	lsls	r2, r3
 8004df2:	4b0f      	ldr	r3, [pc, #60]	; (8004e30 <xTaskPriorityDisinherit+0x110>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	4a0d      	ldr	r2, [pc, #52]	; (8004e30 <xTaskPriorityDisinherit+0x110>)
 8004dfa:	6013      	str	r3, [r2, #0]
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e00:	4613      	mov	r3, r2
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	4413      	add	r3, r2
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	4a08      	ldr	r2, [pc, #32]	; (8004e2c <xTaskPriorityDisinherit+0x10c>)
 8004e0a:	441a      	add	r2, r3
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	3304      	adds	r3, #4
 8004e10:	4619      	mov	r1, r3
 8004e12:	4610      	mov	r0, r2
 8004e14:	f7fe fc93 	bl	800373e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004e1c:	697b      	ldr	r3, [r7, #20]
	}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3718      	adds	r7, #24
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	20000388 	.word	0x20000388
 8004e2c:	2000038c 	.word	0x2000038c
 8004e30:	20000490 	.word	0x20000490

08004e34 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b088      	sub	sp, #32
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004e42:	2301      	movs	r3, #1
 8004e44:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	f000 8087 	beq.w	8004f5c <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d10c      	bne.n	8004e70 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8004e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e5a:	b672      	cpsid	i
 8004e5c:	f383 8811 	msr	BASEPRI, r3
 8004e60:	f3bf 8f6f 	isb	sy
 8004e64:	f3bf 8f4f 	dsb	sy
 8004e68:	b662      	cpsie	i
 8004e6a:	60fb      	str	r3, [r7, #12]
}
 8004e6c:	bf00      	nop
 8004e6e:	e7fe      	b.n	8004e6e <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004e70:	69bb      	ldr	r3, [r7, #24]
 8004e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e74:	683a      	ldr	r2, [r7, #0]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d902      	bls.n	8004e80 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	61fb      	str	r3, [r7, #28]
 8004e7e:	e002      	b.n	8004e86 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e84:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004e86:	69bb      	ldr	r3, [r7, #24]
 8004e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e8a:	69fa      	ldr	r2, [r7, #28]
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d065      	beq.n	8004f5c <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004e90:	69bb      	ldr	r3, [r7, #24]
 8004e92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e94:	697a      	ldr	r2, [r7, #20]
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d160      	bne.n	8004f5c <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004e9a:	4b32      	ldr	r3, [pc, #200]	; (8004f64 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	69ba      	ldr	r2, [r7, #24]
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d10c      	bne.n	8004ebe <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 8004ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea8:	b672      	cpsid	i
 8004eaa:	f383 8811 	msr	BASEPRI, r3
 8004eae:	f3bf 8f6f 	isb	sy
 8004eb2:	f3bf 8f4f 	dsb	sy
 8004eb6:	b662      	cpsie	i
 8004eb8:	60bb      	str	r3, [r7, #8]
}
 8004eba:	bf00      	nop
 8004ebc:	e7fe      	b.n	8004ebc <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec2:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	69fa      	ldr	r2, [r7, #28]
 8004ec8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004eca:	69bb      	ldr	r3, [r7, #24]
 8004ecc:	699b      	ldr	r3, [r3, #24]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	db04      	blt.n	8004edc <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	f1c3 0207 	rsb	r2, r3, #7
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	6959      	ldr	r1, [r3, #20]
 8004ee0:	693a      	ldr	r2, [r7, #16]
 8004ee2:	4613      	mov	r3, r2
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	4413      	add	r3, r2
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	4a1f      	ldr	r2, [pc, #124]	; (8004f68 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8004eec:	4413      	add	r3, r2
 8004eee:	4299      	cmp	r1, r3
 8004ef0:	d134      	bne.n	8004f5c <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ef2:	69bb      	ldr	r3, [r7, #24]
 8004ef4:	3304      	adds	r3, #4
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f7fe fc7e 	bl	80037f8 <uxListRemove>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d115      	bne.n	8004f2e <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f06:	4918      	ldr	r1, [pc, #96]	; (8004f68 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8004f08:	4613      	mov	r3, r2
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	4413      	add	r3, r2
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	440b      	add	r3, r1
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d10a      	bne.n	8004f2e <vTaskPriorityDisinheritAfterTimeout+0xfa>
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f22:	43da      	mvns	r2, r3
 8004f24:	4b11      	ldr	r3, [pc, #68]	; (8004f6c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4013      	ands	r3, r2
 8004f2a:	4a10      	ldr	r2, [pc, #64]	; (8004f6c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8004f2c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004f2e:	69bb      	ldr	r3, [r7, #24]
 8004f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f32:	2201      	movs	r2, #1
 8004f34:	409a      	lsls	r2, r3
 8004f36:	4b0d      	ldr	r3, [pc, #52]	; (8004f6c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	4a0b      	ldr	r2, [pc, #44]	; (8004f6c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8004f3e:	6013      	str	r3, [r2, #0]
 8004f40:	69bb      	ldr	r3, [r7, #24]
 8004f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f44:	4613      	mov	r3, r2
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	4413      	add	r3, r2
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	4a06      	ldr	r2, [pc, #24]	; (8004f68 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8004f4e:	441a      	add	r2, r3
 8004f50:	69bb      	ldr	r3, [r7, #24]
 8004f52:	3304      	adds	r3, #4
 8004f54:	4619      	mov	r1, r3
 8004f56:	4610      	mov	r0, r2
 8004f58:	f7fe fbf1 	bl	800373e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004f5c:	bf00      	nop
 8004f5e:	3720      	adds	r7, #32
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	20000388 	.word	0x20000388
 8004f68:	2000038c 	.word	0x2000038c
 8004f6c:	20000490 	.word	0x20000490

08004f70 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004f70:	b480      	push	{r7}
 8004f72:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004f74:	4b07      	ldr	r3, [pc, #28]	; (8004f94 <pvTaskIncrementMutexHeldCount+0x24>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d004      	beq.n	8004f86 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004f7c:	4b05      	ldr	r3, [pc, #20]	; (8004f94 <pvTaskIncrementMutexHeldCount+0x24>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f82:	3201      	adds	r2, #1
 8004f84:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8004f86:	4b03      	ldr	r3, [pc, #12]	; (8004f94 <pvTaskIncrementMutexHeldCount+0x24>)
 8004f88:	681b      	ldr	r3, [r3, #0]
	}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr
 8004f94:	20000388 	.word	0x20000388

08004f98 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004fa2:	4b29      	ldr	r3, [pc, #164]	; (8005048 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004fa8:	4b28      	ldr	r3, [pc, #160]	; (800504c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	3304      	adds	r3, #4
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f7fe fc22 	bl	80037f8 <uxListRemove>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d10b      	bne.n	8004fd2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004fba:	4b24      	ldr	r3, [pc, #144]	; (800504c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc6:	43da      	mvns	r2, r3
 8004fc8:	4b21      	ldr	r3, [pc, #132]	; (8005050 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4013      	ands	r3, r2
 8004fce:	4a20      	ldr	r2, [pc, #128]	; (8005050 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004fd0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fd8:	d10a      	bne.n	8004ff0 <prvAddCurrentTaskToDelayedList+0x58>
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d007      	beq.n	8004ff0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004fe0:	4b1a      	ldr	r3, [pc, #104]	; (800504c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	3304      	adds	r3, #4
 8004fe6:	4619      	mov	r1, r3
 8004fe8:	481a      	ldr	r0, [pc, #104]	; (8005054 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004fea:	f7fe fba8 	bl	800373e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004fee:	e026      	b.n	800503e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004ff0:	68fa      	ldr	r2, [r7, #12]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4413      	add	r3, r2
 8004ff6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004ff8:	4b14      	ldr	r3, [pc, #80]	; (800504c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68ba      	ldr	r2, [r7, #8]
 8004ffe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005000:	68ba      	ldr	r2, [r7, #8]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	429a      	cmp	r2, r3
 8005006:	d209      	bcs.n	800501c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005008:	4b13      	ldr	r3, [pc, #76]	; (8005058 <prvAddCurrentTaskToDelayedList+0xc0>)
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	4b0f      	ldr	r3, [pc, #60]	; (800504c <prvAddCurrentTaskToDelayedList+0xb4>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	3304      	adds	r3, #4
 8005012:	4619      	mov	r1, r3
 8005014:	4610      	mov	r0, r2
 8005016:	f7fe fbb6 	bl	8003786 <vListInsert>
}
 800501a:	e010      	b.n	800503e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800501c:	4b0f      	ldr	r3, [pc, #60]	; (800505c <prvAddCurrentTaskToDelayedList+0xc4>)
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	4b0a      	ldr	r3, [pc, #40]	; (800504c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	3304      	adds	r3, #4
 8005026:	4619      	mov	r1, r3
 8005028:	4610      	mov	r0, r2
 800502a:	f7fe fbac 	bl	8003786 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800502e:	4b0c      	ldr	r3, [pc, #48]	; (8005060 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	68ba      	ldr	r2, [r7, #8]
 8005034:	429a      	cmp	r2, r3
 8005036:	d202      	bcs.n	800503e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005038:	4a09      	ldr	r2, [pc, #36]	; (8005060 <prvAddCurrentTaskToDelayedList+0xc8>)
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	6013      	str	r3, [r2, #0]
}
 800503e:	bf00      	nop
 8005040:	3710      	adds	r7, #16
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
 8005046:	bf00      	nop
 8005048:	2000048c 	.word	0x2000048c
 800504c:	20000388 	.word	0x20000388
 8005050:	20000490 	.word	0x20000490
 8005054:	20000474 	.word	0x20000474
 8005058:	20000444 	.word	0x20000444
 800505c:	20000440 	.word	0x20000440
 8005060:	200004a8 	.word	0x200004a8

08005064 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005064:	b480      	push	{r7}
 8005066:	b085      	sub	sp, #20
 8005068:	af00      	add	r7, sp, #0
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	3b04      	subs	r3, #4
 8005074:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800507c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	3b04      	subs	r3, #4
 8005082:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	f023 0201 	bic.w	r2, r3, #1
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	3b04      	subs	r3, #4
 8005092:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005094:	4a0c      	ldr	r2, [pc, #48]	; (80050c8 <pxPortInitialiseStack+0x64>)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	3b14      	subs	r3, #20
 800509e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	3b04      	subs	r3, #4
 80050aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f06f 0202 	mvn.w	r2, #2
 80050b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	3b20      	subs	r3, #32
 80050b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80050ba:	68fb      	ldr	r3, [r7, #12]
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3714      	adds	r7, #20
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr
 80050c8:	080050cd 	.word	0x080050cd

080050cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80050cc:	b480      	push	{r7}
 80050ce:	b085      	sub	sp, #20
 80050d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80050d2:	2300      	movs	r3, #0
 80050d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80050d6:	4b14      	ldr	r3, [pc, #80]	; (8005128 <prvTaskExitError+0x5c>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050de:	d00c      	beq.n	80050fa <prvTaskExitError+0x2e>
	__asm volatile
 80050e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e4:	b672      	cpsid	i
 80050e6:	f383 8811 	msr	BASEPRI, r3
 80050ea:	f3bf 8f6f 	isb	sy
 80050ee:	f3bf 8f4f 	dsb	sy
 80050f2:	b662      	cpsie	i
 80050f4:	60fb      	str	r3, [r7, #12]
}
 80050f6:	bf00      	nop
 80050f8:	e7fe      	b.n	80050f8 <prvTaskExitError+0x2c>
	__asm volatile
 80050fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050fe:	b672      	cpsid	i
 8005100:	f383 8811 	msr	BASEPRI, r3
 8005104:	f3bf 8f6f 	isb	sy
 8005108:	f3bf 8f4f 	dsb	sy
 800510c:	b662      	cpsie	i
 800510e:	60bb      	str	r3, [r7, #8]
}
 8005110:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005112:	bf00      	nop
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d0fc      	beq.n	8005114 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800511a:	bf00      	nop
 800511c:	bf00      	nop
 800511e:	3714      	adds	r7, #20
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr
 8005128:	2000000c 	.word	0x2000000c
 800512c:	00000000 	.word	0x00000000

08005130 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005130:	4b07      	ldr	r3, [pc, #28]	; (8005150 <pxCurrentTCBConst2>)
 8005132:	6819      	ldr	r1, [r3, #0]
 8005134:	6808      	ldr	r0, [r1, #0]
 8005136:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800513a:	f380 8809 	msr	PSP, r0
 800513e:	f3bf 8f6f 	isb	sy
 8005142:	f04f 0000 	mov.w	r0, #0
 8005146:	f380 8811 	msr	BASEPRI, r0
 800514a:	4770      	bx	lr
 800514c:	f3af 8000 	nop.w

08005150 <pxCurrentTCBConst2>:
 8005150:	20000388 	.word	0x20000388
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005154:	bf00      	nop
 8005156:	bf00      	nop

08005158 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005158:	4808      	ldr	r0, [pc, #32]	; (800517c <prvPortStartFirstTask+0x24>)
 800515a:	6800      	ldr	r0, [r0, #0]
 800515c:	6800      	ldr	r0, [r0, #0]
 800515e:	f380 8808 	msr	MSP, r0
 8005162:	f04f 0000 	mov.w	r0, #0
 8005166:	f380 8814 	msr	CONTROL, r0
 800516a:	b662      	cpsie	i
 800516c:	b661      	cpsie	f
 800516e:	f3bf 8f4f 	dsb	sy
 8005172:	f3bf 8f6f 	isb	sy
 8005176:	df00      	svc	0
 8005178:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800517a:	bf00      	nop
 800517c:	e000ed08 	.word	0xe000ed08

08005180 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005186:	4b37      	ldr	r3, [pc, #220]	; (8005264 <xPortStartScheduler+0xe4>)
 8005188:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	781b      	ldrb	r3, [r3, #0]
 800518e:	b2db      	uxtb	r3, r3
 8005190:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	22ff      	movs	r2, #255	; 0xff
 8005196:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	b2db      	uxtb	r3, r3
 800519e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80051a0:	78fb      	ldrb	r3, [r7, #3]
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80051a8:	b2da      	uxtb	r2, r3
 80051aa:	4b2f      	ldr	r3, [pc, #188]	; (8005268 <xPortStartScheduler+0xe8>)
 80051ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80051ae:	4b2f      	ldr	r3, [pc, #188]	; (800526c <xPortStartScheduler+0xec>)
 80051b0:	2207      	movs	r2, #7
 80051b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80051b4:	e009      	b.n	80051ca <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80051b6:	4b2d      	ldr	r3, [pc, #180]	; (800526c <xPortStartScheduler+0xec>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	3b01      	subs	r3, #1
 80051bc:	4a2b      	ldr	r2, [pc, #172]	; (800526c <xPortStartScheduler+0xec>)
 80051be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80051c0:	78fb      	ldrb	r3, [r7, #3]
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	005b      	lsls	r3, r3, #1
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80051ca:	78fb      	ldrb	r3, [r7, #3]
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051d2:	2b80      	cmp	r3, #128	; 0x80
 80051d4:	d0ef      	beq.n	80051b6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80051d6:	4b25      	ldr	r3, [pc, #148]	; (800526c <xPortStartScheduler+0xec>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f1c3 0307 	rsb	r3, r3, #7
 80051de:	2b04      	cmp	r3, #4
 80051e0:	d00c      	beq.n	80051fc <xPortStartScheduler+0x7c>
	__asm volatile
 80051e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e6:	b672      	cpsid	i
 80051e8:	f383 8811 	msr	BASEPRI, r3
 80051ec:	f3bf 8f6f 	isb	sy
 80051f0:	f3bf 8f4f 	dsb	sy
 80051f4:	b662      	cpsie	i
 80051f6:	60bb      	str	r3, [r7, #8]
}
 80051f8:	bf00      	nop
 80051fa:	e7fe      	b.n	80051fa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80051fc:	4b1b      	ldr	r3, [pc, #108]	; (800526c <xPortStartScheduler+0xec>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	021b      	lsls	r3, r3, #8
 8005202:	4a1a      	ldr	r2, [pc, #104]	; (800526c <xPortStartScheduler+0xec>)
 8005204:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005206:	4b19      	ldr	r3, [pc, #100]	; (800526c <xPortStartScheduler+0xec>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800520e:	4a17      	ldr	r2, [pc, #92]	; (800526c <xPortStartScheduler+0xec>)
 8005210:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	b2da      	uxtb	r2, r3
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800521a:	4b15      	ldr	r3, [pc, #84]	; (8005270 <xPortStartScheduler+0xf0>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a14      	ldr	r2, [pc, #80]	; (8005270 <xPortStartScheduler+0xf0>)
 8005220:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005224:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005226:	4b12      	ldr	r3, [pc, #72]	; (8005270 <xPortStartScheduler+0xf0>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a11      	ldr	r2, [pc, #68]	; (8005270 <xPortStartScheduler+0xf0>)
 800522c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005230:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005232:	f000 f8dd 	bl	80053f0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005236:	4b0f      	ldr	r3, [pc, #60]	; (8005274 <xPortStartScheduler+0xf4>)
 8005238:	2200      	movs	r2, #0
 800523a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800523c:	f000 f8fc 	bl	8005438 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005240:	4b0d      	ldr	r3, [pc, #52]	; (8005278 <xPortStartScheduler+0xf8>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a0c      	ldr	r2, [pc, #48]	; (8005278 <xPortStartScheduler+0xf8>)
 8005246:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800524a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800524c:	f7ff ff84 	bl	8005158 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005250:	f7ff fa80 	bl	8004754 <vTaskSwitchContext>
	prvTaskExitError();
 8005254:	f7ff ff3a 	bl	80050cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	3710      	adds	r7, #16
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	e000e400 	.word	0xe000e400
 8005268:	200004b4 	.word	0x200004b4
 800526c:	200004b8 	.word	0x200004b8
 8005270:	e000ed20 	.word	0xe000ed20
 8005274:	2000000c 	.word	0x2000000c
 8005278:	e000ef34 	.word	0xe000ef34

0800527c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
	__asm volatile
 8005282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005286:	b672      	cpsid	i
 8005288:	f383 8811 	msr	BASEPRI, r3
 800528c:	f3bf 8f6f 	isb	sy
 8005290:	f3bf 8f4f 	dsb	sy
 8005294:	b662      	cpsie	i
 8005296:	607b      	str	r3, [r7, #4]
}
 8005298:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800529a:	4b10      	ldr	r3, [pc, #64]	; (80052dc <vPortEnterCritical+0x60>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	3301      	adds	r3, #1
 80052a0:	4a0e      	ldr	r2, [pc, #56]	; (80052dc <vPortEnterCritical+0x60>)
 80052a2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80052a4:	4b0d      	ldr	r3, [pc, #52]	; (80052dc <vPortEnterCritical+0x60>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d111      	bne.n	80052d0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80052ac:	4b0c      	ldr	r3, [pc, #48]	; (80052e0 <vPortEnterCritical+0x64>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d00c      	beq.n	80052d0 <vPortEnterCritical+0x54>
	__asm volatile
 80052b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ba:	b672      	cpsid	i
 80052bc:	f383 8811 	msr	BASEPRI, r3
 80052c0:	f3bf 8f6f 	isb	sy
 80052c4:	f3bf 8f4f 	dsb	sy
 80052c8:	b662      	cpsie	i
 80052ca:	603b      	str	r3, [r7, #0]
}
 80052cc:	bf00      	nop
 80052ce:	e7fe      	b.n	80052ce <vPortEnterCritical+0x52>
	}
}
 80052d0:	bf00      	nop
 80052d2:	370c      	adds	r7, #12
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr
 80052dc:	2000000c 	.word	0x2000000c
 80052e0:	e000ed04 	.word	0xe000ed04

080052e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80052ea:	4b13      	ldr	r3, [pc, #76]	; (8005338 <vPortExitCritical+0x54>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d10c      	bne.n	800530c <vPortExitCritical+0x28>
	__asm volatile
 80052f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f6:	b672      	cpsid	i
 80052f8:	f383 8811 	msr	BASEPRI, r3
 80052fc:	f3bf 8f6f 	isb	sy
 8005300:	f3bf 8f4f 	dsb	sy
 8005304:	b662      	cpsie	i
 8005306:	607b      	str	r3, [r7, #4]
}
 8005308:	bf00      	nop
 800530a:	e7fe      	b.n	800530a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800530c:	4b0a      	ldr	r3, [pc, #40]	; (8005338 <vPortExitCritical+0x54>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	3b01      	subs	r3, #1
 8005312:	4a09      	ldr	r2, [pc, #36]	; (8005338 <vPortExitCritical+0x54>)
 8005314:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005316:	4b08      	ldr	r3, [pc, #32]	; (8005338 <vPortExitCritical+0x54>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d105      	bne.n	800532a <vPortExitCritical+0x46>
 800531e:	2300      	movs	r3, #0
 8005320:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005328:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800532a:	bf00      	nop
 800532c:	370c      	adds	r7, #12
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr
 8005336:	bf00      	nop
 8005338:	2000000c 	.word	0x2000000c
 800533c:	00000000 	.word	0x00000000

08005340 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005340:	f3ef 8009 	mrs	r0, PSP
 8005344:	f3bf 8f6f 	isb	sy
 8005348:	4b15      	ldr	r3, [pc, #84]	; (80053a0 <pxCurrentTCBConst>)
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	f01e 0f10 	tst.w	lr, #16
 8005350:	bf08      	it	eq
 8005352:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005356:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800535a:	6010      	str	r0, [r2, #0]
 800535c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005360:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005364:	b672      	cpsid	i
 8005366:	f380 8811 	msr	BASEPRI, r0
 800536a:	f3bf 8f4f 	dsb	sy
 800536e:	f3bf 8f6f 	isb	sy
 8005372:	b662      	cpsie	i
 8005374:	f7ff f9ee 	bl	8004754 <vTaskSwitchContext>
 8005378:	f04f 0000 	mov.w	r0, #0
 800537c:	f380 8811 	msr	BASEPRI, r0
 8005380:	bc09      	pop	{r0, r3}
 8005382:	6819      	ldr	r1, [r3, #0]
 8005384:	6808      	ldr	r0, [r1, #0]
 8005386:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800538a:	f01e 0f10 	tst.w	lr, #16
 800538e:	bf08      	it	eq
 8005390:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005394:	f380 8809 	msr	PSP, r0
 8005398:	f3bf 8f6f 	isb	sy
 800539c:	4770      	bx	lr
 800539e:	bf00      	nop

080053a0 <pxCurrentTCBConst>:
 80053a0:	20000388 	.word	0x20000388
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80053a4:	bf00      	nop
 80053a6:	bf00      	nop

080053a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b082      	sub	sp, #8
 80053ac:	af00      	add	r7, sp, #0
	__asm volatile
 80053ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b2:	b672      	cpsid	i
 80053b4:	f383 8811 	msr	BASEPRI, r3
 80053b8:	f3bf 8f6f 	isb	sy
 80053bc:	f3bf 8f4f 	dsb	sy
 80053c0:	b662      	cpsie	i
 80053c2:	607b      	str	r3, [r7, #4]
}
 80053c4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80053c6:	f7ff f90b 	bl	80045e0 <xTaskIncrementTick>
 80053ca:	4603      	mov	r3, r0
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d003      	beq.n	80053d8 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80053d0:	4b06      	ldr	r3, [pc, #24]	; (80053ec <xPortSysTickHandler+0x44>)
 80053d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053d6:	601a      	str	r2, [r3, #0]
 80053d8:	2300      	movs	r3, #0
 80053da:	603b      	str	r3, [r7, #0]
	__asm volatile
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	f383 8811 	msr	BASEPRI, r3
}
 80053e2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80053e4:	bf00      	nop
 80053e6:	3708      	adds	r7, #8
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}
 80053ec:	e000ed04 	.word	0xe000ed04

080053f0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80053f0:	b480      	push	{r7}
 80053f2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80053f4:	4b0b      	ldr	r3, [pc, #44]	; (8005424 <vPortSetupTimerInterrupt+0x34>)
 80053f6:	2200      	movs	r2, #0
 80053f8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80053fa:	4b0b      	ldr	r3, [pc, #44]	; (8005428 <vPortSetupTimerInterrupt+0x38>)
 80053fc:	2200      	movs	r2, #0
 80053fe:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005400:	4b0a      	ldr	r3, [pc, #40]	; (800542c <vPortSetupTimerInterrupt+0x3c>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a0a      	ldr	r2, [pc, #40]	; (8005430 <vPortSetupTimerInterrupt+0x40>)
 8005406:	fba2 2303 	umull	r2, r3, r2, r3
 800540a:	099b      	lsrs	r3, r3, #6
 800540c:	4a09      	ldr	r2, [pc, #36]	; (8005434 <vPortSetupTimerInterrupt+0x44>)
 800540e:	3b01      	subs	r3, #1
 8005410:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005412:	4b04      	ldr	r3, [pc, #16]	; (8005424 <vPortSetupTimerInterrupt+0x34>)
 8005414:	2207      	movs	r2, #7
 8005416:	601a      	str	r2, [r3, #0]
}
 8005418:	bf00      	nop
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr
 8005422:	bf00      	nop
 8005424:	e000e010 	.word	0xe000e010
 8005428:	e000e018 	.word	0xe000e018
 800542c:	20000000 	.word	0x20000000
 8005430:	10624dd3 	.word	0x10624dd3
 8005434:	e000e014 	.word	0xe000e014

08005438 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005438:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005448 <vPortEnableVFP+0x10>
 800543c:	6801      	ldr	r1, [r0, #0]
 800543e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005442:	6001      	str	r1, [r0, #0]
 8005444:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005446:	bf00      	nop
 8005448:	e000ed88 	.word	0xe000ed88

0800544c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b08a      	sub	sp, #40	; 0x28
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005454:	2300      	movs	r3, #0
 8005456:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005458:	f7ff f816 	bl	8004488 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800545c:	4b5b      	ldr	r3, [pc, #364]	; (80055cc <pvPortMalloc+0x180>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d101      	bne.n	8005468 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005464:	f000 f91a 	bl	800569c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005468:	4b59      	ldr	r3, [pc, #356]	; (80055d0 <pvPortMalloc+0x184>)
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4013      	ands	r3, r2
 8005470:	2b00      	cmp	r3, #0
 8005472:	f040 8092 	bne.w	800559a <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d01f      	beq.n	80054bc <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800547c:	2208      	movs	r2, #8
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4413      	add	r3, r2
 8005482:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f003 0307 	and.w	r3, r3, #7
 800548a:	2b00      	cmp	r3, #0
 800548c:	d016      	beq.n	80054bc <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f023 0307 	bic.w	r3, r3, #7
 8005494:	3308      	adds	r3, #8
 8005496:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f003 0307 	and.w	r3, r3, #7
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d00c      	beq.n	80054bc <pvPortMalloc+0x70>
	__asm volatile
 80054a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a6:	b672      	cpsid	i
 80054a8:	f383 8811 	msr	BASEPRI, r3
 80054ac:	f3bf 8f6f 	isb	sy
 80054b0:	f3bf 8f4f 	dsb	sy
 80054b4:	b662      	cpsie	i
 80054b6:	617b      	str	r3, [r7, #20]
}
 80054b8:	bf00      	nop
 80054ba:	e7fe      	b.n	80054ba <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d06b      	beq.n	800559a <pvPortMalloc+0x14e>
 80054c2:	4b44      	ldr	r3, [pc, #272]	; (80055d4 <pvPortMalloc+0x188>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d866      	bhi.n	800559a <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80054cc:	4b42      	ldr	r3, [pc, #264]	; (80055d8 <pvPortMalloc+0x18c>)
 80054ce:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80054d0:	4b41      	ldr	r3, [pc, #260]	; (80055d8 <pvPortMalloc+0x18c>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80054d6:	e004      	b.n	80054e2 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 80054d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054da:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80054dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80054e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d903      	bls.n	80054f4 <pvPortMalloc+0xa8>
 80054ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d1f1      	bne.n	80054d8 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80054f4:	4b35      	ldr	r3, [pc, #212]	; (80055cc <pvPortMalloc+0x180>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d04d      	beq.n	800559a <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80054fe:	6a3b      	ldr	r3, [r7, #32]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	2208      	movs	r2, #8
 8005504:	4413      	add	r3, r2
 8005506:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	6a3b      	ldr	r3, [r7, #32]
 800550e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005512:	685a      	ldr	r2, [r3, #4]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	1ad2      	subs	r2, r2, r3
 8005518:	2308      	movs	r3, #8
 800551a:	005b      	lsls	r3, r3, #1
 800551c:	429a      	cmp	r2, r3
 800551e:	d921      	bls.n	8005564 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005520:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4413      	add	r3, r2
 8005526:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005528:	69bb      	ldr	r3, [r7, #24]
 800552a:	f003 0307 	and.w	r3, r3, #7
 800552e:	2b00      	cmp	r3, #0
 8005530:	d00c      	beq.n	800554c <pvPortMalloc+0x100>
	__asm volatile
 8005532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005536:	b672      	cpsid	i
 8005538:	f383 8811 	msr	BASEPRI, r3
 800553c:	f3bf 8f6f 	isb	sy
 8005540:	f3bf 8f4f 	dsb	sy
 8005544:	b662      	cpsie	i
 8005546:	613b      	str	r3, [r7, #16]
}
 8005548:	bf00      	nop
 800554a:	e7fe      	b.n	800554a <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800554c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554e:	685a      	ldr	r2, [r3, #4]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	1ad2      	subs	r2, r2, r3
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800555e:	69b8      	ldr	r0, [r7, #24]
 8005560:	f000 f8fe 	bl	8005760 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005564:	4b1b      	ldr	r3, [pc, #108]	; (80055d4 <pvPortMalloc+0x188>)
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	4a19      	ldr	r2, [pc, #100]	; (80055d4 <pvPortMalloc+0x188>)
 8005570:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005572:	4b18      	ldr	r3, [pc, #96]	; (80055d4 <pvPortMalloc+0x188>)
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	4b19      	ldr	r3, [pc, #100]	; (80055dc <pvPortMalloc+0x190>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	429a      	cmp	r2, r3
 800557c:	d203      	bcs.n	8005586 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800557e:	4b15      	ldr	r3, [pc, #84]	; (80055d4 <pvPortMalloc+0x188>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a16      	ldr	r2, [pc, #88]	; (80055dc <pvPortMalloc+0x190>)
 8005584:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005588:	685a      	ldr	r2, [r3, #4]
 800558a:	4b11      	ldr	r3, [pc, #68]	; (80055d0 <pvPortMalloc+0x184>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	431a      	orrs	r2, r3
 8005590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005592:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005596:	2200      	movs	r2, #0
 8005598:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800559a:	f7fe ff83 	bl	80044a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	f003 0307 	and.w	r3, r3, #7
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d00c      	beq.n	80055c2 <pvPortMalloc+0x176>
	__asm volatile
 80055a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ac:	b672      	cpsid	i
 80055ae:	f383 8811 	msr	BASEPRI, r3
 80055b2:	f3bf 8f6f 	isb	sy
 80055b6:	f3bf 8f4f 	dsb	sy
 80055ba:	b662      	cpsie	i
 80055bc:	60fb      	str	r3, [r7, #12]
}
 80055be:	bf00      	nop
 80055c0:	e7fe      	b.n	80055c0 <pvPortMalloc+0x174>
	return pvReturn;
 80055c2:	69fb      	ldr	r3, [r7, #28]
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3728      	adds	r7, #40	; 0x28
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	200040c4 	.word	0x200040c4
 80055d0:	200040d0 	.word	0x200040d0
 80055d4:	200040c8 	.word	0x200040c8
 80055d8:	200040bc 	.word	0x200040bc
 80055dc:	200040cc 	.word	0x200040cc

080055e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b086      	sub	sp, #24
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d04c      	beq.n	800568c <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80055f2:	2308      	movs	r3, #8
 80055f4:	425b      	negs	r3, r3
 80055f6:	697a      	ldr	r2, [r7, #20]
 80055f8:	4413      	add	r3, r2
 80055fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	685a      	ldr	r2, [r3, #4]
 8005604:	4b23      	ldr	r3, [pc, #140]	; (8005694 <vPortFree+0xb4>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4013      	ands	r3, r2
 800560a:	2b00      	cmp	r3, #0
 800560c:	d10c      	bne.n	8005628 <vPortFree+0x48>
	__asm volatile
 800560e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005612:	b672      	cpsid	i
 8005614:	f383 8811 	msr	BASEPRI, r3
 8005618:	f3bf 8f6f 	isb	sy
 800561c:	f3bf 8f4f 	dsb	sy
 8005620:	b662      	cpsie	i
 8005622:	60fb      	str	r3, [r7, #12]
}
 8005624:	bf00      	nop
 8005626:	e7fe      	b.n	8005626 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d00c      	beq.n	800564a <vPortFree+0x6a>
	__asm volatile
 8005630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005634:	b672      	cpsid	i
 8005636:	f383 8811 	msr	BASEPRI, r3
 800563a:	f3bf 8f6f 	isb	sy
 800563e:	f3bf 8f4f 	dsb	sy
 8005642:	b662      	cpsie	i
 8005644:	60bb      	str	r3, [r7, #8]
}
 8005646:	bf00      	nop
 8005648:	e7fe      	b.n	8005648 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	685a      	ldr	r2, [r3, #4]
 800564e:	4b11      	ldr	r3, [pc, #68]	; (8005694 <vPortFree+0xb4>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4013      	ands	r3, r2
 8005654:	2b00      	cmp	r3, #0
 8005656:	d019      	beq.n	800568c <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d115      	bne.n	800568c <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	685a      	ldr	r2, [r3, #4]
 8005664:	4b0b      	ldr	r3, [pc, #44]	; (8005694 <vPortFree+0xb4>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	43db      	mvns	r3, r3
 800566a:	401a      	ands	r2, r3
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005670:	f7fe ff0a 	bl	8004488 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	685a      	ldr	r2, [r3, #4]
 8005678:	4b07      	ldr	r3, [pc, #28]	; (8005698 <vPortFree+0xb8>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4413      	add	r3, r2
 800567e:	4a06      	ldr	r2, [pc, #24]	; (8005698 <vPortFree+0xb8>)
 8005680:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005682:	6938      	ldr	r0, [r7, #16]
 8005684:	f000 f86c 	bl	8005760 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005688:	f7fe ff0c 	bl	80044a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800568c:	bf00      	nop
 800568e:	3718      	adds	r7, #24
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}
 8005694:	200040d0 	.word	0x200040d0
 8005698:	200040c8 	.word	0x200040c8

0800569c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800569c:	b480      	push	{r7}
 800569e:	b085      	sub	sp, #20
 80056a0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80056a2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80056a6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80056a8:	4b27      	ldr	r3, [pc, #156]	; (8005748 <prvHeapInit+0xac>)
 80056aa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f003 0307 	and.w	r3, r3, #7
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d00c      	beq.n	80056d0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	3307      	adds	r3, #7
 80056ba:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f023 0307 	bic.w	r3, r3, #7
 80056c2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80056c4:	68ba      	ldr	r2, [r7, #8]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	1ad3      	subs	r3, r2, r3
 80056ca:	4a1f      	ldr	r2, [pc, #124]	; (8005748 <prvHeapInit+0xac>)
 80056cc:	4413      	add	r3, r2
 80056ce:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80056d4:	4a1d      	ldr	r2, [pc, #116]	; (800574c <prvHeapInit+0xb0>)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80056da:	4b1c      	ldr	r3, [pc, #112]	; (800574c <prvHeapInit+0xb0>)
 80056dc:	2200      	movs	r2, #0
 80056de:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	68ba      	ldr	r2, [r7, #8]
 80056e4:	4413      	add	r3, r2
 80056e6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80056e8:	2208      	movs	r2, #8
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	1a9b      	subs	r3, r3, r2
 80056ee:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f023 0307 	bic.w	r3, r3, #7
 80056f6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	4a15      	ldr	r2, [pc, #84]	; (8005750 <prvHeapInit+0xb4>)
 80056fc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80056fe:	4b14      	ldr	r3, [pc, #80]	; (8005750 <prvHeapInit+0xb4>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	2200      	movs	r2, #0
 8005704:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005706:	4b12      	ldr	r3, [pc, #72]	; (8005750 <prvHeapInit+0xb4>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	2200      	movs	r2, #0
 800570c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	68fa      	ldr	r2, [r7, #12]
 8005716:	1ad2      	subs	r2, r2, r3
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800571c:	4b0c      	ldr	r3, [pc, #48]	; (8005750 <prvHeapInit+0xb4>)
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	4a0a      	ldr	r2, [pc, #40]	; (8005754 <prvHeapInit+0xb8>)
 800572a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	4a09      	ldr	r2, [pc, #36]	; (8005758 <prvHeapInit+0xbc>)
 8005732:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005734:	4b09      	ldr	r3, [pc, #36]	; (800575c <prvHeapInit+0xc0>)
 8005736:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800573a:	601a      	str	r2, [r3, #0]
}
 800573c:	bf00      	nop
 800573e:	3714      	adds	r7, #20
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr
 8005748:	200004bc 	.word	0x200004bc
 800574c:	200040bc 	.word	0x200040bc
 8005750:	200040c4 	.word	0x200040c4
 8005754:	200040cc 	.word	0x200040cc
 8005758:	200040c8 	.word	0x200040c8
 800575c:	200040d0 	.word	0x200040d0

08005760 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005760:	b480      	push	{r7}
 8005762:	b085      	sub	sp, #20
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005768:	4b28      	ldr	r3, [pc, #160]	; (800580c <prvInsertBlockIntoFreeList+0xac>)
 800576a:	60fb      	str	r3, [r7, #12]
 800576c:	e002      	b.n	8005774 <prvInsertBlockIntoFreeList+0x14>
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	60fb      	str	r3, [r7, #12]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	429a      	cmp	r2, r3
 800577c:	d8f7      	bhi.n	800576e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	68ba      	ldr	r2, [r7, #8]
 8005788:	4413      	add	r3, r2
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	429a      	cmp	r2, r3
 800578e:	d108      	bne.n	80057a2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	685a      	ldr	r2, [r3, #4]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	441a      	add	r2, r3
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	68ba      	ldr	r2, [r7, #8]
 80057ac:	441a      	add	r2, r3
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d118      	bne.n	80057e8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	4b15      	ldr	r3, [pc, #84]	; (8005810 <prvInsertBlockIntoFreeList+0xb0>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	429a      	cmp	r2, r3
 80057c0:	d00d      	beq.n	80057de <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	685a      	ldr	r2, [r3, #4]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	441a      	add	r2, r3
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	601a      	str	r2, [r3, #0]
 80057dc:	e008      	b.n	80057f0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80057de:	4b0c      	ldr	r3, [pc, #48]	; (8005810 <prvInsertBlockIntoFreeList+0xb0>)
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	601a      	str	r2, [r3, #0]
 80057e6:	e003      	b.n	80057f0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80057f0:	68fa      	ldr	r2, [r7, #12]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d002      	beq.n	80057fe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80057fe:	bf00      	nop
 8005800:	3714      	adds	r7, #20
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr
 800580a:	bf00      	nop
 800580c:	200040bc 	.word	0x200040bc
 8005810:	200040c4 	.word	0x200040c4

08005814 <__errno>:
 8005814:	4b01      	ldr	r3, [pc, #4]	; (800581c <__errno+0x8>)
 8005816:	6818      	ldr	r0, [r3, #0]
 8005818:	4770      	bx	lr
 800581a:	bf00      	nop
 800581c:	20000010 	.word	0x20000010

08005820 <__libc_init_array>:
 8005820:	b570      	push	{r4, r5, r6, lr}
 8005822:	4d0d      	ldr	r5, [pc, #52]	; (8005858 <__libc_init_array+0x38>)
 8005824:	4c0d      	ldr	r4, [pc, #52]	; (800585c <__libc_init_array+0x3c>)
 8005826:	1b64      	subs	r4, r4, r5
 8005828:	10a4      	asrs	r4, r4, #2
 800582a:	2600      	movs	r6, #0
 800582c:	42a6      	cmp	r6, r4
 800582e:	d109      	bne.n	8005844 <__libc_init_array+0x24>
 8005830:	4d0b      	ldr	r5, [pc, #44]	; (8005860 <__libc_init_array+0x40>)
 8005832:	4c0c      	ldr	r4, [pc, #48]	; (8005864 <__libc_init_array+0x44>)
 8005834:	f000 fd2c 	bl	8006290 <_init>
 8005838:	1b64      	subs	r4, r4, r5
 800583a:	10a4      	asrs	r4, r4, #2
 800583c:	2600      	movs	r6, #0
 800583e:	42a6      	cmp	r6, r4
 8005840:	d105      	bne.n	800584e <__libc_init_array+0x2e>
 8005842:	bd70      	pop	{r4, r5, r6, pc}
 8005844:	f855 3b04 	ldr.w	r3, [r5], #4
 8005848:	4798      	blx	r3
 800584a:	3601      	adds	r6, #1
 800584c:	e7ee      	b.n	800582c <__libc_init_array+0xc>
 800584e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005852:	4798      	blx	r3
 8005854:	3601      	adds	r6, #1
 8005856:	e7f2      	b.n	800583e <__libc_init_array+0x1e>
 8005858:	080063ac 	.word	0x080063ac
 800585c:	080063ac 	.word	0x080063ac
 8005860:	080063ac 	.word	0x080063ac
 8005864:	080063b0 	.word	0x080063b0

08005868 <memcpy>:
 8005868:	440a      	add	r2, r1
 800586a:	4291      	cmp	r1, r2
 800586c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005870:	d100      	bne.n	8005874 <memcpy+0xc>
 8005872:	4770      	bx	lr
 8005874:	b510      	push	{r4, lr}
 8005876:	f811 4b01 	ldrb.w	r4, [r1], #1
 800587a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800587e:	4291      	cmp	r1, r2
 8005880:	d1f9      	bne.n	8005876 <memcpy+0xe>
 8005882:	bd10      	pop	{r4, pc}

08005884 <memset>:
 8005884:	4402      	add	r2, r0
 8005886:	4603      	mov	r3, r0
 8005888:	4293      	cmp	r3, r2
 800588a:	d100      	bne.n	800588e <memset+0xa>
 800588c:	4770      	bx	lr
 800588e:	f803 1b01 	strb.w	r1, [r3], #1
 8005892:	e7f9      	b.n	8005888 <memset+0x4>

08005894 <_puts_r>:
 8005894:	b570      	push	{r4, r5, r6, lr}
 8005896:	460e      	mov	r6, r1
 8005898:	4605      	mov	r5, r0
 800589a:	b118      	cbz	r0, 80058a4 <_puts_r+0x10>
 800589c:	6983      	ldr	r3, [r0, #24]
 800589e:	b90b      	cbnz	r3, 80058a4 <_puts_r+0x10>
 80058a0:	f000 fa48 	bl	8005d34 <__sinit>
 80058a4:	69ab      	ldr	r3, [r5, #24]
 80058a6:	68ac      	ldr	r4, [r5, #8]
 80058a8:	b913      	cbnz	r3, 80058b0 <_puts_r+0x1c>
 80058aa:	4628      	mov	r0, r5
 80058ac:	f000 fa42 	bl	8005d34 <__sinit>
 80058b0:	4b2c      	ldr	r3, [pc, #176]	; (8005964 <_puts_r+0xd0>)
 80058b2:	429c      	cmp	r4, r3
 80058b4:	d120      	bne.n	80058f8 <_puts_r+0x64>
 80058b6:	686c      	ldr	r4, [r5, #4]
 80058b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80058ba:	07db      	lsls	r3, r3, #31
 80058bc:	d405      	bmi.n	80058ca <_puts_r+0x36>
 80058be:	89a3      	ldrh	r3, [r4, #12]
 80058c0:	0598      	lsls	r0, r3, #22
 80058c2:	d402      	bmi.n	80058ca <_puts_r+0x36>
 80058c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80058c6:	f000 fad3 	bl	8005e70 <__retarget_lock_acquire_recursive>
 80058ca:	89a3      	ldrh	r3, [r4, #12]
 80058cc:	0719      	lsls	r1, r3, #28
 80058ce:	d51d      	bpl.n	800590c <_puts_r+0x78>
 80058d0:	6923      	ldr	r3, [r4, #16]
 80058d2:	b1db      	cbz	r3, 800590c <_puts_r+0x78>
 80058d4:	3e01      	subs	r6, #1
 80058d6:	68a3      	ldr	r3, [r4, #8]
 80058d8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80058dc:	3b01      	subs	r3, #1
 80058de:	60a3      	str	r3, [r4, #8]
 80058e0:	bb39      	cbnz	r1, 8005932 <_puts_r+0x9e>
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	da38      	bge.n	8005958 <_puts_r+0xc4>
 80058e6:	4622      	mov	r2, r4
 80058e8:	210a      	movs	r1, #10
 80058ea:	4628      	mov	r0, r5
 80058ec:	f000 f848 	bl	8005980 <__swbuf_r>
 80058f0:	3001      	adds	r0, #1
 80058f2:	d011      	beq.n	8005918 <_puts_r+0x84>
 80058f4:	250a      	movs	r5, #10
 80058f6:	e011      	b.n	800591c <_puts_r+0x88>
 80058f8:	4b1b      	ldr	r3, [pc, #108]	; (8005968 <_puts_r+0xd4>)
 80058fa:	429c      	cmp	r4, r3
 80058fc:	d101      	bne.n	8005902 <_puts_r+0x6e>
 80058fe:	68ac      	ldr	r4, [r5, #8]
 8005900:	e7da      	b.n	80058b8 <_puts_r+0x24>
 8005902:	4b1a      	ldr	r3, [pc, #104]	; (800596c <_puts_r+0xd8>)
 8005904:	429c      	cmp	r4, r3
 8005906:	bf08      	it	eq
 8005908:	68ec      	ldreq	r4, [r5, #12]
 800590a:	e7d5      	b.n	80058b8 <_puts_r+0x24>
 800590c:	4621      	mov	r1, r4
 800590e:	4628      	mov	r0, r5
 8005910:	f000 f888 	bl	8005a24 <__swsetup_r>
 8005914:	2800      	cmp	r0, #0
 8005916:	d0dd      	beq.n	80058d4 <_puts_r+0x40>
 8005918:	f04f 35ff 	mov.w	r5, #4294967295
 800591c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800591e:	07da      	lsls	r2, r3, #31
 8005920:	d405      	bmi.n	800592e <_puts_r+0x9a>
 8005922:	89a3      	ldrh	r3, [r4, #12]
 8005924:	059b      	lsls	r3, r3, #22
 8005926:	d402      	bmi.n	800592e <_puts_r+0x9a>
 8005928:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800592a:	f000 faa2 	bl	8005e72 <__retarget_lock_release_recursive>
 800592e:	4628      	mov	r0, r5
 8005930:	bd70      	pop	{r4, r5, r6, pc}
 8005932:	2b00      	cmp	r3, #0
 8005934:	da04      	bge.n	8005940 <_puts_r+0xac>
 8005936:	69a2      	ldr	r2, [r4, #24]
 8005938:	429a      	cmp	r2, r3
 800593a:	dc06      	bgt.n	800594a <_puts_r+0xb6>
 800593c:	290a      	cmp	r1, #10
 800593e:	d004      	beq.n	800594a <_puts_r+0xb6>
 8005940:	6823      	ldr	r3, [r4, #0]
 8005942:	1c5a      	adds	r2, r3, #1
 8005944:	6022      	str	r2, [r4, #0]
 8005946:	7019      	strb	r1, [r3, #0]
 8005948:	e7c5      	b.n	80058d6 <_puts_r+0x42>
 800594a:	4622      	mov	r2, r4
 800594c:	4628      	mov	r0, r5
 800594e:	f000 f817 	bl	8005980 <__swbuf_r>
 8005952:	3001      	adds	r0, #1
 8005954:	d1bf      	bne.n	80058d6 <_puts_r+0x42>
 8005956:	e7df      	b.n	8005918 <_puts_r+0x84>
 8005958:	6823      	ldr	r3, [r4, #0]
 800595a:	250a      	movs	r5, #10
 800595c:	1c5a      	adds	r2, r3, #1
 800595e:	6022      	str	r2, [r4, #0]
 8005960:	701d      	strb	r5, [r3, #0]
 8005962:	e7db      	b.n	800591c <_puts_r+0x88>
 8005964:	08006364 	.word	0x08006364
 8005968:	08006384 	.word	0x08006384
 800596c:	08006344 	.word	0x08006344

08005970 <puts>:
 8005970:	4b02      	ldr	r3, [pc, #8]	; (800597c <puts+0xc>)
 8005972:	4601      	mov	r1, r0
 8005974:	6818      	ldr	r0, [r3, #0]
 8005976:	f7ff bf8d 	b.w	8005894 <_puts_r>
 800597a:	bf00      	nop
 800597c:	20000010 	.word	0x20000010

08005980 <__swbuf_r>:
 8005980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005982:	460e      	mov	r6, r1
 8005984:	4614      	mov	r4, r2
 8005986:	4605      	mov	r5, r0
 8005988:	b118      	cbz	r0, 8005992 <__swbuf_r+0x12>
 800598a:	6983      	ldr	r3, [r0, #24]
 800598c:	b90b      	cbnz	r3, 8005992 <__swbuf_r+0x12>
 800598e:	f000 f9d1 	bl	8005d34 <__sinit>
 8005992:	4b21      	ldr	r3, [pc, #132]	; (8005a18 <__swbuf_r+0x98>)
 8005994:	429c      	cmp	r4, r3
 8005996:	d12b      	bne.n	80059f0 <__swbuf_r+0x70>
 8005998:	686c      	ldr	r4, [r5, #4]
 800599a:	69a3      	ldr	r3, [r4, #24]
 800599c:	60a3      	str	r3, [r4, #8]
 800599e:	89a3      	ldrh	r3, [r4, #12]
 80059a0:	071a      	lsls	r2, r3, #28
 80059a2:	d52f      	bpl.n	8005a04 <__swbuf_r+0x84>
 80059a4:	6923      	ldr	r3, [r4, #16]
 80059a6:	b36b      	cbz	r3, 8005a04 <__swbuf_r+0x84>
 80059a8:	6923      	ldr	r3, [r4, #16]
 80059aa:	6820      	ldr	r0, [r4, #0]
 80059ac:	1ac0      	subs	r0, r0, r3
 80059ae:	6963      	ldr	r3, [r4, #20]
 80059b0:	b2f6      	uxtb	r6, r6
 80059b2:	4283      	cmp	r3, r0
 80059b4:	4637      	mov	r7, r6
 80059b6:	dc04      	bgt.n	80059c2 <__swbuf_r+0x42>
 80059b8:	4621      	mov	r1, r4
 80059ba:	4628      	mov	r0, r5
 80059bc:	f000 f926 	bl	8005c0c <_fflush_r>
 80059c0:	bb30      	cbnz	r0, 8005a10 <__swbuf_r+0x90>
 80059c2:	68a3      	ldr	r3, [r4, #8]
 80059c4:	3b01      	subs	r3, #1
 80059c6:	60a3      	str	r3, [r4, #8]
 80059c8:	6823      	ldr	r3, [r4, #0]
 80059ca:	1c5a      	adds	r2, r3, #1
 80059cc:	6022      	str	r2, [r4, #0]
 80059ce:	701e      	strb	r6, [r3, #0]
 80059d0:	6963      	ldr	r3, [r4, #20]
 80059d2:	3001      	adds	r0, #1
 80059d4:	4283      	cmp	r3, r0
 80059d6:	d004      	beq.n	80059e2 <__swbuf_r+0x62>
 80059d8:	89a3      	ldrh	r3, [r4, #12]
 80059da:	07db      	lsls	r3, r3, #31
 80059dc:	d506      	bpl.n	80059ec <__swbuf_r+0x6c>
 80059de:	2e0a      	cmp	r6, #10
 80059e0:	d104      	bne.n	80059ec <__swbuf_r+0x6c>
 80059e2:	4621      	mov	r1, r4
 80059e4:	4628      	mov	r0, r5
 80059e6:	f000 f911 	bl	8005c0c <_fflush_r>
 80059ea:	b988      	cbnz	r0, 8005a10 <__swbuf_r+0x90>
 80059ec:	4638      	mov	r0, r7
 80059ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059f0:	4b0a      	ldr	r3, [pc, #40]	; (8005a1c <__swbuf_r+0x9c>)
 80059f2:	429c      	cmp	r4, r3
 80059f4:	d101      	bne.n	80059fa <__swbuf_r+0x7a>
 80059f6:	68ac      	ldr	r4, [r5, #8]
 80059f8:	e7cf      	b.n	800599a <__swbuf_r+0x1a>
 80059fa:	4b09      	ldr	r3, [pc, #36]	; (8005a20 <__swbuf_r+0xa0>)
 80059fc:	429c      	cmp	r4, r3
 80059fe:	bf08      	it	eq
 8005a00:	68ec      	ldreq	r4, [r5, #12]
 8005a02:	e7ca      	b.n	800599a <__swbuf_r+0x1a>
 8005a04:	4621      	mov	r1, r4
 8005a06:	4628      	mov	r0, r5
 8005a08:	f000 f80c 	bl	8005a24 <__swsetup_r>
 8005a0c:	2800      	cmp	r0, #0
 8005a0e:	d0cb      	beq.n	80059a8 <__swbuf_r+0x28>
 8005a10:	f04f 37ff 	mov.w	r7, #4294967295
 8005a14:	e7ea      	b.n	80059ec <__swbuf_r+0x6c>
 8005a16:	bf00      	nop
 8005a18:	08006364 	.word	0x08006364
 8005a1c:	08006384 	.word	0x08006384
 8005a20:	08006344 	.word	0x08006344

08005a24 <__swsetup_r>:
 8005a24:	4b32      	ldr	r3, [pc, #200]	; (8005af0 <__swsetup_r+0xcc>)
 8005a26:	b570      	push	{r4, r5, r6, lr}
 8005a28:	681d      	ldr	r5, [r3, #0]
 8005a2a:	4606      	mov	r6, r0
 8005a2c:	460c      	mov	r4, r1
 8005a2e:	b125      	cbz	r5, 8005a3a <__swsetup_r+0x16>
 8005a30:	69ab      	ldr	r3, [r5, #24]
 8005a32:	b913      	cbnz	r3, 8005a3a <__swsetup_r+0x16>
 8005a34:	4628      	mov	r0, r5
 8005a36:	f000 f97d 	bl	8005d34 <__sinit>
 8005a3a:	4b2e      	ldr	r3, [pc, #184]	; (8005af4 <__swsetup_r+0xd0>)
 8005a3c:	429c      	cmp	r4, r3
 8005a3e:	d10f      	bne.n	8005a60 <__swsetup_r+0x3c>
 8005a40:	686c      	ldr	r4, [r5, #4]
 8005a42:	89a3      	ldrh	r3, [r4, #12]
 8005a44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005a48:	0719      	lsls	r1, r3, #28
 8005a4a:	d42c      	bmi.n	8005aa6 <__swsetup_r+0x82>
 8005a4c:	06dd      	lsls	r5, r3, #27
 8005a4e:	d411      	bmi.n	8005a74 <__swsetup_r+0x50>
 8005a50:	2309      	movs	r3, #9
 8005a52:	6033      	str	r3, [r6, #0]
 8005a54:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005a58:	81a3      	strh	r3, [r4, #12]
 8005a5a:	f04f 30ff 	mov.w	r0, #4294967295
 8005a5e:	e03e      	b.n	8005ade <__swsetup_r+0xba>
 8005a60:	4b25      	ldr	r3, [pc, #148]	; (8005af8 <__swsetup_r+0xd4>)
 8005a62:	429c      	cmp	r4, r3
 8005a64:	d101      	bne.n	8005a6a <__swsetup_r+0x46>
 8005a66:	68ac      	ldr	r4, [r5, #8]
 8005a68:	e7eb      	b.n	8005a42 <__swsetup_r+0x1e>
 8005a6a:	4b24      	ldr	r3, [pc, #144]	; (8005afc <__swsetup_r+0xd8>)
 8005a6c:	429c      	cmp	r4, r3
 8005a6e:	bf08      	it	eq
 8005a70:	68ec      	ldreq	r4, [r5, #12]
 8005a72:	e7e6      	b.n	8005a42 <__swsetup_r+0x1e>
 8005a74:	0758      	lsls	r0, r3, #29
 8005a76:	d512      	bpl.n	8005a9e <__swsetup_r+0x7a>
 8005a78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a7a:	b141      	cbz	r1, 8005a8e <__swsetup_r+0x6a>
 8005a7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a80:	4299      	cmp	r1, r3
 8005a82:	d002      	beq.n	8005a8a <__swsetup_r+0x66>
 8005a84:	4630      	mov	r0, r6
 8005a86:	f000 fa5b 	bl	8005f40 <_free_r>
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	6363      	str	r3, [r4, #52]	; 0x34
 8005a8e:	89a3      	ldrh	r3, [r4, #12]
 8005a90:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005a94:	81a3      	strh	r3, [r4, #12]
 8005a96:	2300      	movs	r3, #0
 8005a98:	6063      	str	r3, [r4, #4]
 8005a9a:	6923      	ldr	r3, [r4, #16]
 8005a9c:	6023      	str	r3, [r4, #0]
 8005a9e:	89a3      	ldrh	r3, [r4, #12]
 8005aa0:	f043 0308 	orr.w	r3, r3, #8
 8005aa4:	81a3      	strh	r3, [r4, #12]
 8005aa6:	6923      	ldr	r3, [r4, #16]
 8005aa8:	b94b      	cbnz	r3, 8005abe <__swsetup_r+0x9a>
 8005aaa:	89a3      	ldrh	r3, [r4, #12]
 8005aac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005ab0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ab4:	d003      	beq.n	8005abe <__swsetup_r+0x9a>
 8005ab6:	4621      	mov	r1, r4
 8005ab8:	4630      	mov	r0, r6
 8005aba:	f000 fa01 	bl	8005ec0 <__smakebuf_r>
 8005abe:	89a0      	ldrh	r0, [r4, #12]
 8005ac0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ac4:	f010 0301 	ands.w	r3, r0, #1
 8005ac8:	d00a      	beq.n	8005ae0 <__swsetup_r+0xbc>
 8005aca:	2300      	movs	r3, #0
 8005acc:	60a3      	str	r3, [r4, #8]
 8005ace:	6963      	ldr	r3, [r4, #20]
 8005ad0:	425b      	negs	r3, r3
 8005ad2:	61a3      	str	r3, [r4, #24]
 8005ad4:	6923      	ldr	r3, [r4, #16]
 8005ad6:	b943      	cbnz	r3, 8005aea <__swsetup_r+0xc6>
 8005ad8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005adc:	d1ba      	bne.n	8005a54 <__swsetup_r+0x30>
 8005ade:	bd70      	pop	{r4, r5, r6, pc}
 8005ae0:	0781      	lsls	r1, r0, #30
 8005ae2:	bf58      	it	pl
 8005ae4:	6963      	ldrpl	r3, [r4, #20]
 8005ae6:	60a3      	str	r3, [r4, #8]
 8005ae8:	e7f4      	b.n	8005ad4 <__swsetup_r+0xb0>
 8005aea:	2000      	movs	r0, #0
 8005aec:	e7f7      	b.n	8005ade <__swsetup_r+0xba>
 8005aee:	bf00      	nop
 8005af0:	20000010 	.word	0x20000010
 8005af4:	08006364 	.word	0x08006364
 8005af8:	08006384 	.word	0x08006384
 8005afc:	08006344 	.word	0x08006344

08005b00 <__sflush_r>:
 8005b00:	898a      	ldrh	r2, [r1, #12]
 8005b02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b06:	4605      	mov	r5, r0
 8005b08:	0710      	lsls	r0, r2, #28
 8005b0a:	460c      	mov	r4, r1
 8005b0c:	d458      	bmi.n	8005bc0 <__sflush_r+0xc0>
 8005b0e:	684b      	ldr	r3, [r1, #4]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	dc05      	bgt.n	8005b20 <__sflush_r+0x20>
 8005b14:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	dc02      	bgt.n	8005b20 <__sflush_r+0x20>
 8005b1a:	2000      	movs	r0, #0
 8005b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b22:	2e00      	cmp	r6, #0
 8005b24:	d0f9      	beq.n	8005b1a <__sflush_r+0x1a>
 8005b26:	2300      	movs	r3, #0
 8005b28:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005b2c:	682f      	ldr	r7, [r5, #0]
 8005b2e:	602b      	str	r3, [r5, #0]
 8005b30:	d032      	beq.n	8005b98 <__sflush_r+0x98>
 8005b32:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005b34:	89a3      	ldrh	r3, [r4, #12]
 8005b36:	075a      	lsls	r2, r3, #29
 8005b38:	d505      	bpl.n	8005b46 <__sflush_r+0x46>
 8005b3a:	6863      	ldr	r3, [r4, #4]
 8005b3c:	1ac0      	subs	r0, r0, r3
 8005b3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005b40:	b10b      	cbz	r3, 8005b46 <__sflush_r+0x46>
 8005b42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b44:	1ac0      	subs	r0, r0, r3
 8005b46:	2300      	movs	r3, #0
 8005b48:	4602      	mov	r2, r0
 8005b4a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b4c:	6a21      	ldr	r1, [r4, #32]
 8005b4e:	4628      	mov	r0, r5
 8005b50:	47b0      	blx	r6
 8005b52:	1c43      	adds	r3, r0, #1
 8005b54:	89a3      	ldrh	r3, [r4, #12]
 8005b56:	d106      	bne.n	8005b66 <__sflush_r+0x66>
 8005b58:	6829      	ldr	r1, [r5, #0]
 8005b5a:	291d      	cmp	r1, #29
 8005b5c:	d82c      	bhi.n	8005bb8 <__sflush_r+0xb8>
 8005b5e:	4a2a      	ldr	r2, [pc, #168]	; (8005c08 <__sflush_r+0x108>)
 8005b60:	40ca      	lsrs	r2, r1
 8005b62:	07d6      	lsls	r6, r2, #31
 8005b64:	d528      	bpl.n	8005bb8 <__sflush_r+0xb8>
 8005b66:	2200      	movs	r2, #0
 8005b68:	6062      	str	r2, [r4, #4]
 8005b6a:	04d9      	lsls	r1, r3, #19
 8005b6c:	6922      	ldr	r2, [r4, #16]
 8005b6e:	6022      	str	r2, [r4, #0]
 8005b70:	d504      	bpl.n	8005b7c <__sflush_r+0x7c>
 8005b72:	1c42      	adds	r2, r0, #1
 8005b74:	d101      	bne.n	8005b7a <__sflush_r+0x7a>
 8005b76:	682b      	ldr	r3, [r5, #0]
 8005b78:	b903      	cbnz	r3, 8005b7c <__sflush_r+0x7c>
 8005b7a:	6560      	str	r0, [r4, #84]	; 0x54
 8005b7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b7e:	602f      	str	r7, [r5, #0]
 8005b80:	2900      	cmp	r1, #0
 8005b82:	d0ca      	beq.n	8005b1a <__sflush_r+0x1a>
 8005b84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b88:	4299      	cmp	r1, r3
 8005b8a:	d002      	beq.n	8005b92 <__sflush_r+0x92>
 8005b8c:	4628      	mov	r0, r5
 8005b8e:	f000 f9d7 	bl	8005f40 <_free_r>
 8005b92:	2000      	movs	r0, #0
 8005b94:	6360      	str	r0, [r4, #52]	; 0x34
 8005b96:	e7c1      	b.n	8005b1c <__sflush_r+0x1c>
 8005b98:	6a21      	ldr	r1, [r4, #32]
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	4628      	mov	r0, r5
 8005b9e:	47b0      	blx	r6
 8005ba0:	1c41      	adds	r1, r0, #1
 8005ba2:	d1c7      	bne.n	8005b34 <__sflush_r+0x34>
 8005ba4:	682b      	ldr	r3, [r5, #0]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d0c4      	beq.n	8005b34 <__sflush_r+0x34>
 8005baa:	2b1d      	cmp	r3, #29
 8005bac:	d001      	beq.n	8005bb2 <__sflush_r+0xb2>
 8005bae:	2b16      	cmp	r3, #22
 8005bb0:	d101      	bne.n	8005bb6 <__sflush_r+0xb6>
 8005bb2:	602f      	str	r7, [r5, #0]
 8005bb4:	e7b1      	b.n	8005b1a <__sflush_r+0x1a>
 8005bb6:	89a3      	ldrh	r3, [r4, #12]
 8005bb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bbc:	81a3      	strh	r3, [r4, #12]
 8005bbe:	e7ad      	b.n	8005b1c <__sflush_r+0x1c>
 8005bc0:	690f      	ldr	r7, [r1, #16]
 8005bc2:	2f00      	cmp	r7, #0
 8005bc4:	d0a9      	beq.n	8005b1a <__sflush_r+0x1a>
 8005bc6:	0793      	lsls	r3, r2, #30
 8005bc8:	680e      	ldr	r6, [r1, #0]
 8005bca:	bf08      	it	eq
 8005bcc:	694b      	ldreq	r3, [r1, #20]
 8005bce:	600f      	str	r7, [r1, #0]
 8005bd0:	bf18      	it	ne
 8005bd2:	2300      	movne	r3, #0
 8005bd4:	eba6 0807 	sub.w	r8, r6, r7
 8005bd8:	608b      	str	r3, [r1, #8]
 8005bda:	f1b8 0f00 	cmp.w	r8, #0
 8005bde:	dd9c      	ble.n	8005b1a <__sflush_r+0x1a>
 8005be0:	6a21      	ldr	r1, [r4, #32]
 8005be2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005be4:	4643      	mov	r3, r8
 8005be6:	463a      	mov	r2, r7
 8005be8:	4628      	mov	r0, r5
 8005bea:	47b0      	blx	r6
 8005bec:	2800      	cmp	r0, #0
 8005bee:	dc06      	bgt.n	8005bfe <__sflush_r+0xfe>
 8005bf0:	89a3      	ldrh	r3, [r4, #12]
 8005bf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bf6:	81a3      	strh	r3, [r4, #12]
 8005bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8005bfc:	e78e      	b.n	8005b1c <__sflush_r+0x1c>
 8005bfe:	4407      	add	r7, r0
 8005c00:	eba8 0800 	sub.w	r8, r8, r0
 8005c04:	e7e9      	b.n	8005bda <__sflush_r+0xda>
 8005c06:	bf00      	nop
 8005c08:	20400001 	.word	0x20400001

08005c0c <_fflush_r>:
 8005c0c:	b538      	push	{r3, r4, r5, lr}
 8005c0e:	690b      	ldr	r3, [r1, #16]
 8005c10:	4605      	mov	r5, r0
 8005c12:	460c      	mov	r4, r1
 8005c14:	b913      	cbnz	r3, 8005c1c <_fflush_r+0x10>
 8005c16:	2500      	movs	r5, #0
 8005c18:	4628      	mov	r0, r5
 8005c1a:	bd38      	pop	{r3, r4, r5, pc}
 8005c1c:	b118      	cbz	r0, 8005c26 <_fflush_r+0x1a>
 8005c1e:	6983      	ldr	r3, [r0, #24]
 8005c20:	b90b      	cbnz	r3, 8005c26 <_fflush_r+0x1a>
 8005c22:	f000 f887 	bl	8005d34 <__sinit>
 8005c26:	4b14      	ldr	r3, [pc, #80]	; (8005c78 <_fflush_r+0x6c>)
 8005c28:	429c      	cmp	r4, r3
 8005c2a:	d11b      	bne.n	8005c64 <_fflush_r+0x58>
 8005c2c:	686c      	ldr	r4, [r5, #4]
 8005c2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d0ef      	beq.n	8005c16 <_fflush_r+0xa>
 8005c36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005c38:	07d0      	lsls	r0, r2, #31
 8005c3a:	d404      	bmi.n	8005c46 <_fflush_r+0x3a>
 8005c3c:	0599      	lsls	r1, r3, #22
 8005c3e:	d402      	bmi.n	8005c46 <_fflush_r+0x3a>
 8005c40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c42:	f000 f915 	bl	8005e70 <__retarget_lock_acquire_recursive>
 8005c46:	4628      	mov	r0, r5
 8005c48:	4621      	mov	r1, r4
 8005c4a:	f7ff ff59 	bl	8005b00 <__sflush_r>
 8005c4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c50:	07da      	lsls	r2, r3, #31
 8005c52:	4605      	mov	r5, r0
 8005c54:	d4e0      	bmi.n	8005c18 <_fflush_r+0xc>
 8005c56:	89a3      	ldrh	r3, [r4, #12]
 8005c58:	059b      	lsls	r3, r3, #22
 8005c5a:	d4dd      	bmi.n	8005c18 <_fflush_r+0xc>
 8005c5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c5e:	f000 f908 	bl	8005e72 <__retarget_lock_release_recursive>
 8005c62:	e7d9      	b.n	8005c18 <_fflush_r+0xc>
 8005c64:	4b05      	ldr	r3, [pc, #20]	; (8005c7c <_fflush_r+0x70>)
 8005c66:	429c      	cmp	r4, r3
 8005c68:	d101      	bne.n	8005c6e <_fflush_r+0x62>
 8005c6a:	68ac      	ldr	r4, [r5, #8]
 8005c6c:	e7df      	b.n	8005c2e <_fflush_r+0x22>
 8005c6e:	4b04      	ldr	r3, [pc, #16]	; (8005c80 <_fflush_r+0x74>)
 8005c70:	429c      	cmp	r4, r3
 8005c72:	bf08      	it	eq
 8005c74:	68ec      	ldreq	r4, [r5, #12]
 8005c76:	e7da      	b.n	8005c2e <_fflush_r+0x22>
 8005c78:	08006364 	.word	0x08006364
 8005c7c:	08006384 	.word	0x08006384
 8005c80:	08006344 	.word	0x08006344

08005c84 <std>:
 8005c84:	2300      	movs	r3, #0
 8005c86:	b510      	push	{r4, lr}
 8005c88:	4604      	mov	r4, r0
 8005c8a:	e9c0 3300 	strd	r3, r3, [r0]
 8005c8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005c92:	6083      	str	r3, [r0, #8]
 8005c94:	8181      	strh	r1, [r0, #12]
 8005c96:	6643      	str	r3, [r0, #100]	; 0x64
 8005c98:	81c2      	strh	r2, [r0, #14]
 8005c9a:	6183      	str	r3, [r0, #24]
 8005c9c:	4619      	mov	r1, r3
 8005c9e:	2208      	movs	r2, #8
 8005ca0:	305c      	adds	r0, #92	; 0x5c
 8005ca2:	f7ff fdef 	bl	8005884 <memset>
 8005ca6:	4b05      	ldr	r3, [pc, #20]	; (8005cbc <std+0x38>)
 8005ca8:	6263      	str	r3, [r4, #36]	; 0x24
 8005caa:	4b05      	ldr	r3, [pc, #20]	; (8005cc0 <std+0x3c>)
 8005cac:	62a3      	str	r3, [r4, #40]	; 0x28
 8005cae:	4b05      	ldr	r3, [pc, #20]	; (8005cc4 <std+0x40>)
 8005cb0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005cb2:	4b05      	ldr	r3, [pc, #20]	; (8005cc8 <std+0x44>)
 8005cb4:	6224      	str	r4, [r4, #32]
 8005cb6:	6323      	str	r3, [r4, #48]	; 0x30
 8005cb8:	bd10      	pop	{r4, pc}
 8005cba:	bf00      	nop
 8005cbc:	08006121 	.word	0x08006121
 8005cc0:	08006143 	.word	0x08006143
 8005cc4:	0800617b 	.word	0x0800617b
 8005cc8:	0800619f 	.word	0x0800619f

08005ccc <_cleanup_r>:
 8005ccc:	4901      	ldr	r1, [pc, #4]	; (8005cd4 <_cleanup_r+0x8>)
 8005cce:	f000 b8af 	b.w	8005e30 <_fwalk_reent>
 8005cd2:	bf00      	nop
 8005cd4:	08005c0d 	.word	0x08005c0d

08005cd8 <__sfmoreglue>:
 8005cd8:	b570      	push	{r4, r5, r6, lr}
 8005cda:	2268      	movs	r2, #104	; 0x68
 8005cdc:	1e4d      	subs	r5, r1, #1
 8005cde:	4355      	muls	r5, r2
 8005ce0:	460e      	mov	r6, r1
 8005ce2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005ce6:	f000 f997 	bl	8006018 <_malloc_r>
 8005cea:	4604      	mov	r4, r0
 8005cec:	b140      	cbz	r0, 8005d00 <__sfmoreglue+0x28>
 8005cee:	2100      	movs	r1, #0
 8005cf0:	e9c0 1600 	strd	r1, r6, [r0]
 8005cf4:	300c      	adds	r0, #12
 8005cf6:	60a0      	str	r0, [r4, #8]
 8005cf8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005cfc:	f7ff fdc2 	bl	8005884 <memset>
 8005d00:	4620      	mov	r0, r4
 8005d02:	bd70      	pop	{r4, r5, r6, pc}

08005d04 <__sfp_lock_acquire>:
 8005d04:	4801      	ldr	r0, [pc, #4]	; (8005d0c <__sfp_lock_acquire+0x8>)
 8005d06:	f000 b8b3 	b.w	8005e70 <__retarget_lock_acquire_recursive>
 8005d0a:	bf00      	nop
 8005d0c:	200040d5 	.word	0x200040d5

08005d10 <__sfp_lock_release>:
 8005d10:	4801      	ldr	r0, [pc, #4]	; (8005d18 <__sfp_lock_release+0x8>)
 8005d12:	f000 b8ae 	b.w	8005e72 <__retarget_lock_release_recursive>
 8005d16:	bf00      	nop
 8005d18:	200040d5 	.word	0x200040d5

08005d1c <__sinit_lock_acquire>:
 8005d1c:	4801      	ldr	r0, [pc, #4]	; (8005d24 <__sinit_lock_acquire+0x8>)
 8005d1e:	f000 b8a7 	b.w	8005e70 <__retarget_lock_acquire_recursive>
 8005d22:	bf00      	nop
 8005d24:	200040d6 	.word	0x200040d6

08005d28 <__sinit_lock_release>:
 8005d28:	4801      	ldr	r0, [pc, #4]	; (8005d30 <__sinit_lock_release+0x8>)
 8005d2a:	f000 b8a2 	b.w	8005e72 <__retarget_lock_release_recursive>
 8005d2e:	bf00      	nop
 8005d30:	200040d6 	.word	0x200040d6

08005d34 <__sinit>:
 8005d34:	b510      	push	{r4, lr}
 8005d36:	4604      	mov	r4, r0
 8005d38:	f7ff fff0 	bl	8005d1c <__sinit_lock_acquire>
 8005d3c:	69a3      	ldr	r3, [r4, #24]
 8005d3e:	b11b      	cbz	r3, 8005d48 <__sinit+0x14>
 8005d40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d44:	f7ff bff0 	b.w	8005d28 <__sinit_lock_release>
 8005d48:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005d4c:	6523      	str	r3, [r4, #80]	; 0x50
 8005d4e:	4b13      	ldr	r3, [pc, #76]	; (8005d9c <__sinit+0x68>)
 8005d50:	4a13      	ldr	r2, [pc, #76]	; (8005da0 <__sinit+0x6c>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	62a2      	str	r2, [r4, #40]	; 0x28
 8005d56:	42a3      	cmp	r3, r4
 8005d58:	bf04      	itt	eq
 8005d5a:	2301      	moveq	r3, #1
 8005d5c:	61a3      	streq	r3, [r4, #24]
 8005d5e:	4620      	mov	r0, r4
 8005d60:	f000 f820 	bl	8005da4 <__sfp>
 8005d64:	6060      	str	r0, [r4, #4]
 8005d66:	4620      	mov	r0, r4
 8005d68:	f000 f81c 	bl	8005da4 <__sfp>
 8005d6c:	60a0      	str	r0, [r4, #8]
 8005d6e:	4620      	mov	r0, r4
 8005d70:	f000 f818 	bl	8005da4 <__sfp>
 8005d74:	2200      	movs	r2, #0
 8005d76:	60e0      	str	r0, [r4, #12]
 8005d78:	2104      	movs	r1, #4
 8005d7a:	6860      	ldr	r0, [r4, #4]
 8005d7c:	f7ff ff82 	bl	8005c84 <std>
 8005d80:	68a0      	ldr	r0, [r4, #8]
 8005d82:	2201      	movs	r2, #1
 8005d84:	2109      	movs	r1, #9
 8005d86:	f7ff ff7d 	bl	8005c84 <std>
 8005d8a:	68e0      	ldr	r0, [r4, #12]
 8005d8c:	2202      	movs	r2, #2
 8005d8e:	2112      	movs	r1, #18
 8005d90:	f7ff ff78 	bl	8005c84 <std>
 8005d94:	2301      	movs	r3, #1
 8005d96:	61a3      	str	r3, [r4, #24]
 8005d98:	e7d2      	b.n	8005d40 <__sinit+0xc>
 8005d9a:	bf00      	nop
 8005d9c:	08006340 	.word	0x08006340
 8005da0:	08005ccd 	.word	0x08005ccd

08005da4 <__sfp>:
 8005da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005da6:	4607      	mov	r7, r0
 8005da8:	f7ff ffac 	bl	8005d04 <__sfp_lock_acquire>
 8005dac:	4b1e      	ldr	r3, [pc, #120]	; (8005e28 <__sfp+0x84>)
 8005dae:	681e      	ldr	r6, [r3, #0]
 8005db0:	69b3      	ldr	r3, [r6, #24]
 8005db2:	b913      	cbnz	r3, 8005dba <__sfp+0x16>
 8005db4:	4630      	mov	r0, r6
 8005db6:	f7ff ffbd 	bl	8005d34 <__sinit>
 8005dba:	3648      	adds	r6, #72	; 0x48
 8005dbc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005dc0:	3b01      	subs	r3, #1
 8005dc2:	d503      	bpl.n	8005dcc <__sfp+0x28>
 8005dc4:	6833      	ldr	r3, [r6, #0]
 8005dc6:	b30b      	cbz	r3, 8005e0c <__sfp+0x68>
 8005dc8:	6836      	ldr	r6, [r6, #0]
 8005dca:	e7f7      	b.n	8005dbc <__sfp+0x18>
 8005dcc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005dd0:	b9d5      	cbnz	r5, 8005e08 <__sfp+0x64>
 8005dd2:	4b16      	ldr	r3, [pc, #88]	; (8005e2c <__sfp+0x88>)
 8005dd4:	60e3      	str	r3, [r4, #12]
 8005dd6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005dda:	6665      	str	r5, [r4, #100]	; 0x64
 8005ddc:	f000 f847 	bl	8005e6e <__retarget_lock_init_recursive>
 8005de0:	f7ff ff96 	bl	8005d10 <__sfp_lock_release>
 8005de4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005de8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005dec:	6025      	str	r5, [r4, #0]
 8005dee:	61a5      	str	r5, [r4, #24]
 8005df0:	2208      	movs	r2, #8
 8005df2:	4629      	mov	r1, r5
 8005df4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005df8:	f7ff fd44 	bl	8005884 <memset>
 8005dfc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005e00:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005e04:	4620      	mov	r0, r4
 8005e06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e08:	3468      	adds	r4, #104	; 0x68
 8005e0a:	e7d9      	b.n	8005dc0 <__sfp+0x1c>
 8005e0c:	2104      	movs	r1, #4
 8005e0e:	4638      	mov	r0, r7
 8005e10:	f7ff ff62 	bl	8005cd8 <__sfmoreglue>
 8005e14:	4604      	mov	r4, r0
 8005e16:	6030      	str	r0, [r6, #0]
 8005e18:	2800      	cmp	r0, #0
 8005e1a:	d1d5      	bne.n	8005dc8 <__sfp+0x24>
 8005e1c:	f7ff ff78 	bl	8005d10 <__sfp_lock_release>
 8005e20:	230c      	movs	r3, #12
 8005e22:	603b      	str	r3, [r7, #0]
 8005e24:	e7ee      	b.n	8005e04 <__sfp+0x60>
 8005e26:	bf00      	nop
 8005e28:	08006340 	.word	0x08006340
 8005e2c:	ffff0001 	.word	0xffff0001

08005e30 <_fwalk_reent>:
 8005e30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e34:	4606      	mov	r6, r0
 8005e36:	4688      	mov	r8, r1
 8005e38:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005e3c:	2700      	movs	r7, #0
 8005e3e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005e42:	f1b9 0901 	subs.w	r9, r9, #1
 8005e46:	d505      	bpl.n	8005e54 <_fwalk_reent+0x24>
 8005e48:	6824      	ldr	r4, [r4, #0]
 8005e4a:	2c00      	cmp	r4, #0
 8005e4c:	d1f7      	bne.n	8005e3e <_fwalk_reent+0xe>
 8005e4e:	4638      	mov	r0, r7
 8005e50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e54:	89ab      	ldrh	r3, [r5, #12]
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d907      	bls.n	8005e6a <_fwalk_reent+0x3a>
 8005e5a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e5e:	3301      	adds	r3, #1
 8005e60:	d003      	beq.n	8005e6a <_fwalk_reent+0x3a>
 8005e62:	4629      	mov	r1, r5
 8005e64:	4630      	mov	r0, r6
 8005e66:	47c0      	blx	r8
 8005e68:	4307      	orrs	r7, r0
 8005e6a:	3568      	adds	r5, #104	; 0x68
 8005e6c:	e7e9      	b.n	8005e42 <_fwalk_reent+0x12>

08005e6e <__retarget_lock_init_recursive>:
 8005e6e:	4770      	bx	lr

08005e70 <__retarget_lock_acquire_recursive>:
 8005e70:	4770      	bx	lr

08005e72 <__retarget_lock_release_recursive>:
 8005e72:	4770      	bx	lr

08005e74 <__swhatbuf_r>:
 8005e74:	b570      	push	{r4, r5, r6, lr}
 8005e76:	460e      	mov	r6, r1
 8005e78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e7c:	2900      	cmp	r1, #0
 8005e7e:	b096      	sub	sp, #88	; 0x58
 8005e80:	4614      	mov	r4, r2
 8005e82:	461d      	mov	r5, r3
 8005e84:	da08      	bge.n	8005e98 <__swhatbuf_r+0x24>
 8005e86:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	602a      	str	r2, [r5, #0]
 8005e8e:	061a      	lsls	r2, r3, #24
 8005e90:	d410      	bmi.n	8005eb4 <__swhatbuf_r+0x40>
 8005e92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e96:	e00e      	b.n	8005eb6 <__swhatbuf_r+0x42>
 8005e98:	466a      	mov	r2, sp
 8005e9a:	f000 f9a7 	bl	80061ec <_fstat_r>
 8005e9e:	2800      	cmp	r0, #0
 8005ea0:	dbf1      	blt.n	8005e86 <__swhatbuf_r+0x12>
 8005ea2:	9a01      	ldr	r2, [sp, #4]
 8005ea4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005ea8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005eac:	425a      	negs	r2, r3
 8005eae:	415a      	adcs	r2, r3
 8005eb0:	602a      	str	r2, [r5, #0]
 8005eb2:	e7ee      	b.n	8005e92 <__swhatbuf_r+0x1e>
 8005eb4:	2340      	movs	r3, #64	; 0x40
 8005eb6:	2000      	movs	r0, #0
 8005eb8:	6023      	str	r3, [r4, #0]
 8005eba:	b016      	add	sp, #88	; 0x58
 8005ebc:	bd70      	pop	{r4, r5, r6, pc}
	...

08005ec0 <__smakebuf_r>:
 8005ec0:	898b      	ldrh	r3, [r1, #12]
 8005ec2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005ec4:	079d      	lsls	r5, r3, #30
 8005ec6:	4606      	mov	r6, r0
 8005ec8:	460c      	mov	r4, r1
 8005eca:	d507      	bpl.n	8005edc <__smakebuf_r+0x1c>
 8005ecc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005ed0:	6023      	str	r3, [r4, #0]
 8005ed2:	6123      	str	r3, [r4, #16]
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	6163      	str	r3, [r4, #20]
 8005ed8:	b002      	add	sp, #8
 8005eda:	bd70      	pop	{r4, r5, r6, pc}
 8005edc:	ab01      	add	r3, sp, #4
 8005ede:	466a      	mov	r2, sp
 8005ee0:	f7ff ffc8 	bl	8005e74 <__swhatbuf_r>
 8005ee4:	9900      	ldr	r1, [sp, #0]
 8005ee6:	4605      	mov	r5, r0
 8005ee8:	4630      	mov	r0, r6
 8005eea:	f000 f895 	bl	8006018 <_malloc_r>
 8005eee:	b948      	cbnz	r0, 8005f04 <__smakebuf_r+0x44>
 8005ef0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ef4:	059a      	lsls	r2, r3, #22
 8005ef6:	d4ef      	bmi.n	8005ed8 <__smakebuf_r+0x18>
 8005ef8:	f023 0303 	bic.w	r3, r3, #3
 8005efc:	f043 0302 	orr.w	r3, r3, #2
 8005f00:	81a3      	strh	r3, [r4, #12]
 8005f02:	e7e3      	b.n	8005ecc <__smakebuf_r+0xc>
 8005f04:	4b0d      	ldr	r3, [pc, #52]	; (8005f3c <__smakebuf_r+0x7c>)
 8005f06:	62b3      	str	r3, [r6, #40]	; 0x28
 8005f08:	89a3      	ldrh	r3, [r4, #12]
 8005f0a:	6020      	str	r0, [r4, #0]
 8005f0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f10:	81a3      	strh	r3, [r4, #12]
 8005f12:	9b00      	ldr	r3, [sp, #0]
 8005f14:	6163      	str	r3, [r4, #20]
 8005f16:	9b01      	ldr	r3, [sp, #4]
 8005f18:	6120      	str	r0, [r4, #16]
 8005f1a:	b15b      	cbz	r3, 8005f34 <__smakebuf_r+0x74>
 8005f1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f20:	4630      	mov	r0, r6
 8005f22:	f000 f975 	bl	8006210 <_isatty_r>
 8005f26:	b128      	cbz	r0, 8005f34 <__smakebuf_r+0x74>
 8005f28:	89a3      	ldrh	r3, [r4, #12]
 8005f2a:	f023 0303 	bic.w	r3, r3, #3
 8005f2e:	f043 0301 	orr.w	r3, r3, #1
 8005f32:	81a3      	strh	r3, [r4, #12]
 8005f34:	89a0      	ldrh	r0, [r4, #12]
 8005f36:	4305      	orrs	r5, r0
 8005f38:	81a5      	strh	r5, [r4, #12]
 8005f3a:	e7cd      	b.n	8005ed8 <__smakebuf_r+0x18>
 8005f3c:	08005ccd 	.word	0x08005ccd

08005f40 <_free_r>:
 8005f40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005f42:	2900      	cmp	r1, #0
 8005f44:	d044      	beq.n	8005fd0 <_free_r+0x90>
 8005f46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f4a:	9001      	str	r0, [sp, #4]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	f1a1 0404 	sub.w	r4, r1, #4
 8005f52:	bfb8      	it	lt
 8005f54:	18e4      	addlt	r4, r4, r3
 8005f56:	f000 f97d 	bl	8006254 <__malloc_lock>
 8005f5a:	4a1e      	ldr	r2, [pc, #120]	; (8005fd4 <_free_r+0x94>)
 8005f5c:	9801      	ldr	r0, [sp, #4]
 8005f5e:	6813      	ldr	r3, [r2, #0]
 8005f60:	b933      	cbnz	r3, 8005f70 <_free_r+0x30>
 8005f62:	6063      	str	r3, [r4, #4]
 8005f64:	6014      	str	r4, [r2, #0]
 8005f66:	b003      	add	sp, #12
 8005f68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005f6c:	f000 b978 	b.w	8006260 <__malloc_unlock>
 8005f70:	42a3      	cmp	r3, r4
 8005f72:	d908      	bls.n	8005f86 <_free_r+0x46>
 8005f74:	6825      	ldr	r5, [r4, #0]
 8005f76:	1961      	adds	r1, r4, r5
 8005f78:	428b      	cmp	r3, r1
 8005f7a:	bf01      	itttt	eq
 8005f7c:	6819      	ldreq	r1, [r3, #0]
 8005f7e:	685b      	ldreq	r3, [r3, #4]
 8005f80:	1949      	addeq	r1, r1, r5
 8005f82:	6021      	streq	r1, [r4, #0]
 8005f84:	e7ed      	b.n	8005f62 <_free_r+0x22>
 8005f86:	461a      	mov	r2, r3
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	b10b      	cbz	r3, 8005f90 <_free_r+0x50>
 8005f8c:	42a3      	cmp	r3, r4
 8005f8e:	d9fa      	bls.n	8005f86 <_free_r+0x46>
 8005f90:	6811      	ldr	r1, [r2, #0]
 8005f92:	1855      	adds	r5, r2, r1
 8005f94:	42a5      	cmp	r5, r4
 8005f96:	d10b      	bne.n	8005fb0 <_free_r+0x70>
 8005f98:	6824      	ldr	r4, [r4, #0]
 8005f9a:	4421      	add	r1, r4
 8005f9c:	1854      	adds	r4, r2, r1
 8005f9e:	42a3      	cmp	r3, r4
 8005fa0:	6011      	str	r1, [r2, #0]
 8005fa2:	d1e0      	bne.n	8005f66 <_free_r+0x26>
 8005fa4:	681c      	ldr	r4, [r3, #0]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	6053      	str	r3, [r2, #4]
 8005faa:	4421      	add	r1, r4
 8005fac:	6011      	str	r1, [r2, #0]
 8005fae:	e7da      	b.n	8005f66 <_free_r+0x26>
 8005fb0:	d902      	bls.n	8005fb8 <_free_r+0x78>
 8005fb2:	230c      	movs	r3, #12
 8005fb4:	6003      	str	r3, [r0, #0]
 8005fb6:	e7d6      	b.n	8005f66 <_free_r+0x26>
 8005fb8:	6825      	ldr	r5, [r4, #0]
 8005fba:	1961      	adds	r1, r4, r5
 8005fbc:	428b      	cmp	r3, r1
 8005fbe:	bf04      	itt	eq
 8005fc0:	6819      	ldreq	r1, [r3, #0]
 8005fc2:	685b      	ldreq	r3, [r3, #4]
 8005fc4:	6063      	str	r3, [r4, #4]
 8005fc6:	bf04      	itt	eq
 8005fc8:	1949      	addeq	r1, r1, r5
 8005fca:	6021      	streq	r1, [r4, #0]
 8005fcc:	6054      	str	r4, [r2, #4]
 8005fce:	e7ca      	b.n	8005f66 <_free_r+0x26>
 8005fd0:	b003      	add	sp, #12
 8005fd2:	bd30      	pop	{r4, r5, pc}
 8005fd4:	200040d8 	.word	0x200040d8

08005fd8 <sbrk_aligned>:
 8005fd8:	b570      	push	{r4, r5, r6, lr}
 8005fda:	4e0e      	ldr	r6, [pc, #56]	; (8006014 <sbrk_aligned+0x3c>)
 8005fdc:	460c      	mov	r4, r1
 8005fde:	6831      	ldr	r1, [r6, #0]
 8005fe0:	4605      	mov	r5, r0
 8005fe2:	b911      	cbnz	r1, 8005fea <sbrk_aligned+0x12>
 8005fe4:	f000 f88c 	bl	8006100 <_sbrk_r>
 8005fe8:	6030      	str	r0, [r6, #0]
 8005fea:	4621      	mov	r1, r4
 8005fec:	4628      	mov	r0, r5
 8005fee:	f000 f887 	bl	8006100 <_sbrk_r>
 8005ff2:	1c43      	adds	r3, r0, #1
 8005ff4:	d00a      	beq.n	800600c <sbrk_aligned+0x34>
 8005ff6:	1cc4      	adds	r4, r0, #3
 8005ff8:	f024 0403 	bic.w	r4, r4, #3
 8005ffc:	42a0      	cmp	r0, r4
 8005ffe:	d007      	beq.n	8006010 <sbrk_aligned+0x38>
 8006000:	1a21      	subs	r1, r4, r0
 8006002:	4628      	mov	r0, r5
 8006004:	f000 f87c 	bl	8006100 <_sbrk_r>
 8006008:	3001      	adds	r0, #1
 800600a:	d101      	bne.n	8006010 <sbrk_aligned+0x38>
 800600c:	f04f 34ff 	mov.w	r4, #4294967295
 8006010:	4620      	mov	r0, r4
 8006012:	bd70      	pop	{r4, r5, r6, pc}
 8006014:	200040dc 	.word	0x200040dc

08006018 <_malloc_r>:
 8006018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800601c:	1ccd      	adds	r5, r1, #3
 800601e:	f025 0503 	bic.w	r5, r5, #3
 8006022:	3508      	adds	r5, #8
 8006024:	2d0c      	cmp	r5, #12
 8006026:	bf38      	it	cc
 8006028:	250c      	movcc	r5, #12
 800602a:	2d00      	cmp	r5, #0
 800602c:	4607      	mov	r7, r0
 800602e:	db01      	blt.n	8006034 <_malloc_r+0x1c>
 8006030:	42a9      	cmp	r1, r5
 8006032:	d905      	bls.n	8006040 <_malloc_r+0x28>
 8006034:	230c      	movs	r3, #12
 8006036:	603b      	str	r3, [r7, #0]
 8006038:	2600      	movs	r6, #0
 800603a:	4630      	mov	r0, r6
 800603c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006040:	4e2e      	ldr	r6, [pc, #184]	; (80060fc <_malloc_r+0xe4>)
 8006042:	f000 f907 	bl	8006254 <__malloc_lock>
 8006046:	6833      	ldr	r3, [r6, #0]
 8006048:	461c      	mov	r4, r3
 800604a:	bb34      	cbnz	r4, 800609a <_malloc_r+0x82>
 800604c:	4629      	mov	r1, r5
 800604e:	4638      	mov	r0, r7
 8006050:	f7ff ffc2 	bl	8005fd8 <sbrk_aligned>
 8006054:	1c43      	adds	r3, r0, #1
 8006056:	4604      	mov	r4, r0
 8006058:	d14d      	bne.n	80060f6 <_malloc_r+0xde>
 800605a:	6834      	ldr	r4, [r6, #0]
 800605c:	4626      	mov	r6, r4
 800605e:	2e00      	cmp	r6, #0
 8006060:	d140      	bne.n	80060e4 <_malloc_r+0xcc>
 8006062:	6823      	ldr	r3, [r4, #0]
 8006064:	4631      	mov	r1, r6
 8006066:	4638      	mov	r0, r7
 8006068:	eb04 0803 	add.w	r8, r4, r3
 800606c:	f000 f848 	bl	8006100 <_sbrk_r>
 8006070:	4580      	cmp	r8, r0
 8006072:	d13a      	bne.n	80060ea <_malloc_r+0xd2>
 8006074:	6821      	ldr	r1, [r4, #0]
 8006076:	3503      	adds	r5, #3
 8006078:	1a6d      	subs	r5, r5, r1
 800607a:	f025 0503 	bic.w	r5, r5, #3
 800607e:	3508      	adds	r5, #8
 8006080:	2d0c      	cmp	r5, #12
 8006082:	bf38      	it	cc
 8006084:	250c      	movcc	r5, #12
 8006086:	4629      	mov	r1, r5
 8006088:	4638      	mov	r0, r7
 800608a:	f7ff ffa5 	bl	8005fd8 <sbrk_aligned>
 800608e:	3001      	adds	r0, #1
 8006090:	d02b      	beq.n	80060ea <_malloc_r+0xd2>
 8006092:	6823      	ldr	r3, [r4, #0]
 8006094:	442b      	add	r3, r5
 8006096:	6023      	str	r3, [r4, #0]
 8006098:	e00e      	b.n	80060b8 <_malloc_r+0xa0>
 800609a:	6822      	ldr	r2, [r4, #0]
 800609c:	1b52      	subs	r2, r2, r5
 800609e:	d41e      	bmi.n	80060de <_malloc_r+0xc6>
 80060a0:	2a0b      	cmp	r2, #11
 80060a2:	d916      	bls.n	80060d2 <_malloc_r+0xba>
 80060a4:	1961      	adds	r1, r4, r5
 80060a6:	42a3      	cmp	r3, r4
 80060a8:	6025      	str	r5, [r4, #0]
 80060aa:	bf18      	it	ne
 80060ac:	6059      	strne	r1, [r3, #4]
 80060ae:	6863      	ldr	r3, [r4, #4]
 80060b0:	bf08      	it	eq
 80060b2:	6031      	streq	r1, [r6, #0]
 80060b4:	5162      	str	r2, [r4, r5]
 80060b6:	604b      	str	r3, [r1, #4]
 80060b8:	4638      	mov	r0, r7
 80060ba:	f104 060b 	add.w	r6, r4, #11
 80060be:	f000 f8cf 	bl	8006260 <__malloc_unlock>
 80060c2:	f026 0607 	bic.w	r6, r6, #7
 80060c6:	1d23      	adds	r3, r4, #4
 80060c8:	1af2      	subs	r2, r6, r3
 80060ca:	d0b6      	beq.n	800603a <_malloc_r+0x22>
 80060cc:	1b9b      	subs	r3, r3, r6
 80060ce:	50a3      	str	r3, [r4, r2]
 80060d0:	e7b3      	b.n	800603a <_malloc_r+0x22>
 80060d2:	6862      	ldr	r2, [r4, #4]
 80060d4:	42a3      	cmp	r3, r4
 80060d6:	bf0c      	ite	eq
 80060d8:	6032      	streq	r2, [r6, #0]
 80060da:	605a      	strne	r2, [r3, #4]
 80060dc:	e7ec      	b.n	80060b8 <_malloc_r+0xa0>
 80060de:	4623      	mov	r3, r4
 80060e0:	6864      	ldr	r4, [r4, #4]
 80060e2:	e7b2      	b.n	800604a <_malloc_r+0x32>
 80060e4:	4634      	mov	r4, r6
 80060e6:	6876      	ldr	r6, [r6, #4]
 80060e8:	e7b9      	b.n	800605e <_malloc_r+0x46>
 80060ea:	230c      	movs	r3, #12
 80060ec:	603b      	str	r3, [r7, #0]
 80060ee:	4638      	mov	r0, r7
 80060f0:	f000 f8b6 	bl	8006260 <__malloc_unlock>
 80060f4:	e7a1      	b.n	800603a <_malloc_r+0x22>
 80060f6:	6025      	str	r5, [r4, #0]
 80060f8:	e7de      	b.n	80060b8 <_malloc_r+0xa0>
 80060fa:	bf00      	nop
 80060fc:	200040d8 	.word	0x200040d8

08006100 <_sbrk_r>:
 8006100:	b538      	push	{r3, r4, r5, lr}
 8006102:	4d06      	ldr	r5, [pc, #24]	; (800611c <_sbrk_r+0x1c>)
 8006104:	2300      	movs	r3, #0
 8006106:	4604      	mov	r4, r0
 8006108:	4608      	mov	r0, r1
 800610a:	602b      	str	r3, [r5, #0]
 800610c:	f7fb f8a0 	bl	8001250 <_sbrk>
 8006110:	1c43      	adds	r3, r0, #1
 8006112:	d102      	bne.n	800611a <_sbrk_r+0x1a>
 8006114:	682b      	ldr	r3, [r5, #0]
 8006116:	b103      	cbz	r3, 800611a <_sbrk_r+0x1a>
 8006118:	6023      	str	r3, [r4, #0]
 800611a:	bd38      	pop	{r3, r4, r5, pc}
 800611c:	200040e0 	.word	0x200040e0

08006120 <__sread>:
 8006120:	b510      	push	{r4, lr}
 8006122:	460c      	mov	r4, r1
 8006124:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006128:	f000 f8a0 	bl	800626c <_read_r>
 800612c:	2800      	cmp	r0, #0
 800612e:	bfab      	itete	ge
 8006130:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006132:	89a3      	ldrhlt	r3, [r4, #12]
 8006134:	181b      	addge	r3, r3, r0
 8006136:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800613a:	bfac      	ite	ge
 800613c:	6563      	strge	r3, [r4, #84]	; 0x54
 800613e:	81a3      	strhlt	r3, [r4, #12]
 8006140:	bd10      	pop	{r4, pc}

08006142 <__swrite>:
 8006142:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006146:	461f      	mov	r7, r3
 8006148:	898b      	ldrh	r3, [r1, #12]
 800614a:	05db      	lsls	r3, r3, #23
 800614c:	4605      	mov	r5, r0
 800614e:	460c      	mov	r4, r1
 8006150:	4616      	mov	r6, r2
 8006152:	d505      	bpl.n	8006160 <__swrite+0x1e>
 8006154:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006158:	2302      	movs	r3, #2
 800615a:	2200      	movs	r2, #0
 800615c:	f000 f868 	bl	8006230 <_lseek_r>
 8006160:	89a3      	ldrh	r3, [r4, #12]
 8006162:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006166:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800616a:	81a3      	strh	r3, [r4, #12]
 800616c:	4632      	mov	r2, r6
 800616e:	463b      	mov	r3, r7
 8006170:	4628      	mov	r0, r5
 8006172:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006176:	f000 b817 	b.w	80061a8 <_write_r>

0800617a <__sseek>:
 800617a:	b510      	push	{r4, lr}
 800617c:	460c      	mov	r4, r1
 800617e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006182:	f000 f855 	bl	8006230 <_lseek_r>
 8006186:	1c43      	adds	r3, r0, #1
 8006188:	89a3      	ldrh	r3, [r4, #12]
 800618a:	bf15      	itete	ne
 800618c:	6560      	strne	r0, [r4, #84]	; 0x54
 800618e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006192:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006196:	81a3      	strheq	r3, [r4, #12]
 8006198:	bf18      	it	ne
 800619a:	81a3      	strhne	r3, [r4, #12]
 800619c:	bd10      	pop	{r4, pc}

0800619e <__sclose>:
 800619e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061a2:	f000 b813 	b.w	80061cc <_close_r>
	...

080061a8 <_write_r>:
 80061a8:	b538      	push	{r3, r4, r5, lr}
 80061aa:	4d07      	ldr	r5, [pc, #28]	; (80061c8 <_write_r+0x20>)
 80061ac:	4604      	mov	r4, r0
 80061ae:	4608      	mov	r0, r1
 80061b0:	4611      	mov	r1, r2
 80061b2:	2200      	movs	r2, #0
 80061b4:	602a      	str	r2, [r5, #0]
 80061b6:	461a      	mov	r2, r3
 80061b8:	f7fa fffa 	bl	80011b0 <_write>
 80061bc:	1c43      	adds	r3, r0, #1
 80061be:	d102      	bne.n	80061c6 <_write_r+0x1e>
 80061c0:	682b      	ldr	r3, [r5, #0]
 80061c2:	b103      	cbz	r3, 80061c6 <_write_r+0x1e>
 80061c4:	6023      	str	r3, [r4, #0]
 80061c6:	bd38      	pop	{r3, r4, r5, pc}
 80061c8:	200040e0 	.word	0x200040e0

080061cc <_close_r>:
 80061cc:	b538      	push	{r3, r4, r5, lr}
 80061ce:	4d06      	ldr	r5, [pc, #24]	; (80061e8 <_close_r+0x1c>)
 80061d0:	2300      	movs	r3, #0
 80061d2:	4604      	mov	r4, r0
 80061d4:	4608      	mov	r0, r1
 80061d6:	602b      	str	r3, [r5, #0]
 80061d8:	f7fb f806 	bl	80011e8 <_close>
 80061dc:	1c43      	adds	r3, r0, #1
 80061de:	d102      	bne.n	80061e6 <_close_r+0x1a>
 80061e0:	682b      	ldr	r3, [r5, #0]
 80061e2:	b103      	cbz	r3, 80061e6 <_close_r+0x1a>
 80061e4:	6023      	str	r3, [r4, #0]
 80061e6:	bd38      	pop	{r3, r4, r5, pc}
 80061e8:	200040e0 	.word	0x200040e0

080061ec <_fstat_r>:
 80061ec:	b538      	push	{r3, r4, r5, lr}
 80061ee:	4d07      	ldr	r5, [pc, #28]	; (800620c <_fstat_r+0x20>)
 80061f0:	2300      	movs	r3, #0
 80061f2:	4604      	mov	r4, r0
 80061f4:	4608      	mov	r0, r1
 80061f6:	4611      	mov	r1, r2
 80061f8:	602b      	str	r3, [r5, #0]
 80061fa:	f7fb f801 	bl	8001200 <_fstat>
 80061fe:	1c43      	adds	r3, r0, #1
 8006200:	d102      	bne.n	8006208 <_fstat_r+0x1c>
 8006202:	682b      	ldr	r3, [r5, #0]
 8006204:	b103      	cbz	r3, 8006208 <_fstat_r+0x1c>
 8006206:	6023      	str	r3, [r4, #0]
 8006208:	bd38      	pop	{r3, r4, r5, pc}
 800620a:	bf00      	nop
 800620c:	200040e0 	.word	0x200040e0

08006210 <_isatty_r>:
 8006210:	b538      	push	{r3, r4, r5, lr}
 8006212:	4d06      	ldr	r5, [pc, #24]	; (800622c <_isatty_r+0x1c>)
 8006214:	2300      	movs	r3, #0
 8006216:	4604      	mov	r4, r0
 8006218:	4608      	mov	r0, r1
 800621a:	602b      	str	r3, [r5, #0]
 800621c:	f7fb f800 	bl	8001220 <_isatty>
 8006220:	1c43      	adds	r3, r0, #1
 8006222:	d102      	bne.n	800622a <_isatty_r+0x1a>
 8006224:	682b      	ldr	r3, [r5, #0]
 8006226:	b103      	cbz	r3, 800622a <_isatty_r+0x1a>
 8006228:	6023      	str	r3, [r4, #0]
 800622a:	bd38      	pop	{r3, r4, r5, pc}
 800622c:	200040e0 	.word	0x200040e0

08006230 <_lseek_r>:
 8006230:	b538      	push	{r3, r4, r5, lr}
 8006232:	4d07      	ldr	r5, [pc, #28]	; (8006250 <_lseek_r+0x20>)
 8006234:	4604      	mov	r4, r0
 8006236:	4608      	mov	r0, r1
 8006238:	4611      	mov	r1, r2
 800623a:	2200      	movs	r2, #0
 800623c:	602a      	str	r2, [r5, #0]
 800623e:	461a      	mov	r2, r3
 8006240:	f7fa fff9 	bl	8001236 <_lseek>
 8006244:	1c43      	adds	r3, r0, #1
 8006246:	d102      	bne.n	800624e <_lseek_r+0x1e>
 8006248:	682b      	ldr	r3, [r5, #0]
 800624a:	b103      	cbz	r3, 800624e <_lseek_r+0x1e>
 800624c:	6023      	str	r3, [r4, #0]
 800624e:	bd38      	pop	{r3, r4, r5, pc}
 8006250:	200040e0 	.word	0x200040e0

08006254 <__malloc_lock>:
 8006254:	4801      	ldr	r0, [pc, #4]	; (800625c <__malloc_lock+0x8>)
 8006256:	f7ff be0b 	b.w	8005e70 <__retarget_lock_acquire_recursive>
 800625a:	bf00      	nop
 800625c:	200040d4 	.word	0x200040d4

08006260 <__malloc_unlock>:
 8006260:	4801      	ldr	r0, [pc, #4]	; (8006268 <__malloc_unlock+0x8>)
 8006262:	f7ff be06 	b.w	8005e72 <__retarget_lock_release_recursive>
 8006266:	bf00      	nop
 8006268:	200040d4 	.word	0x200040d4

0800626c <_read_r>:
 800626c:	b538      	push	{r3, r4, r5, lr}
 800626e:	4d07      	ldr	r5, [pc, #28]	; (800628c <_read_r+0x20>)
 8006270:	4604      	mov	r4, r0
 8006272:	4608      	mov	r0, r1
 8006274:	4611      	mov	r1, r2
 8006276:	2200      	movs	r2, #0
 8006278:	602a      	str	r2, [r5, #0]
 800627a:	461a      	mov	r2, r3
 800627c:	f7fa ff7b 	bl	8001176 <_read>
 8006280:	1c43      	adds	r3, r0, #1
 8006282:	d102      	bne.n	800628a <_read_r+0x1e>
 8006284:	682b      	ldr	r3, [r5, #0]
 8006286:	b103      	cbz	r3, 800628a <_read_r+0x1e>
 8006288:	6023      	str	r3, [r4, #0]
 800628a:	bd38      	pop	{r3, r4, r5, pc}
 800628c:	200040e0 	.word	0x200040e0

08006290 <_init>:
 8006290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006292:	bf00      	nop
 8006294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006296:	bc08      	pop	{r3}
 8006298:	469e      	mov	lr, r3
 800629a:	4770      	bx	lr

0800629c <_fini>:
 800629c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800629e:	bf00      	nop
 80062a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062a2:	bc08      	pop	{r3}
 80062a4:	469e      	mov	lr, r3
 80062a6:	4770      	bx	lr

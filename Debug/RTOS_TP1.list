
RTOS_TP1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ab4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c8  08007c84  08007c84  00017c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f4c  08007f4c  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08007f4c  08007f4c  00017f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f54  08007f54  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f54  08007f54  00017f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f58  08007f58  00017f58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08007f5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000043c8  2000007c  08007fd8  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004444  08007fd8  00024444  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013724  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003346  00000000  00000000  000337d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ef0  00000000  00000000  00036b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d98  00000000  00000000  00037a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028d2f  00000000  00000000  000387a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001327f  00000000  00000000  000614cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f24c8  00000000  00000000  0007474e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00166c16  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044cc  00000000  00000000  00166c68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007c6c 	.word	0x08007c6c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000080 	.word	0x20000080
 800020c:	08007c6c 	.word	0x08007c6c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005b4:	b480      	push	{r7}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	4a07      	ldr	r2, [pc, #28]	; (80005e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80005c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	4a06      	ldr	r2, [pc, #24]	; (80005e4 <vApplicationGetIdleTaskMemory+0x30>)
 80005ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2280      	movs	r2, #128	; 0x80
 80005d0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005d2:	bf00      	nop
 80005d4:	3714      	adds	r7, #20
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	2000009c 	.word	0x2000009c
 80005e4:	200000f0 	.word	0x200000f0

080005e8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005e8:	b5b0      	push	{r4, r5, r7, lr}
 80005ea:	b088      	sub	sp, #32
 80005ec:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005ee:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <MX_FREERTOS_Init+0x30>)
 80005f0:	1d3c      	adds	r4, r7, #4
 80005f2:	461d      	mov	r5, r3
 80005f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000600:	1d3b      	adds	r3, r7, #4
 8000602:	2100      	movs	r1, #0
 8000604:	4618      	mov	r0, r3
 8000606:	f004 f92e 	bl	8004866 <osThreadCreate>
 800060a:	4603      	mov	r3, r0
 800060c:	4a03      	ldr	r2, [pc, #12]	; (800061c <MX_FREERTOS_Init+0x34>)
 800060e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000610:	bf00      	nop
 8000612:	3720      	adds	r7, #32
 8000614:	46bd      	mov	sp, r7
 8000616:	bdb0      	pop	{r4, r5, r7, pc}
 8000618:	08007c90 	.word	0x08007c90
 800061c:	20000098 	.word	0x20000098

08000620 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000628:	2001      	movs	r0, #1
 800062a:	f004 f968 	bl	80048fe <osDelay>
 800062e:	e7fb      	b.n	8000628 <StartDefaultTask+0x8>

08000630 <MX_GPIO_Init>:
     PB11   ------> USB_OTG_HS_ULPI_D4
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
void MX_GPIO_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b090      	sub	sp, #64	; 0x40
 8000634:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000636:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]
 8000644:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000646:	4bad      	ldr	r3, [pc, #692]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	4aac      	ldr	r2, [pc, #688]	; (80008fc <MX_GPIO_Init+0x2cc>)
 800064c:	f043 0310 	orr.w	r3, r3, #16
 8000650:	6313      	str	r3, [r2, #48]	; 0x30
 8000652:	4baa      	ldr	r3, [pc, #680]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	f003 0310 	and.w	r3, r3, #16
 800065a:	62bb      	str	r3, [r7, #40]	; 0x28
 800065c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800065e:	4ba7      	ldr	r3, [pc, #668]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	4aa6      	ldr	r2, [pc, #664]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000664:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000668:	6313      	str	r3, [r2, #48]	; 0x30
 800066a:	4ba4      	ldr	r3, [pc, #656]	; (80008fc <MX_GPIO_Init+0x2cc>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000672:	627b      	str	r3, [r7, #36]	; 0x24
 8000674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000676:	4ba1      	ldr	r3, [pc, #644]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	4aa0      	ldr	r2, [pc, #640]	; (80008fc <MX_GPIO_Init+0x2cc>)
 800067c:	f043 0302 	orr.w	r3, r3, #2
 8000680:	6313      	str	r3, [r2, #48]	; 0x30
 8000682:	4b9e      	ldr	r3, [pc, #632]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	f003 0302 	and.w	r3, r3, #2
 800068a:	623b      	str	r3, [r7, #32]
 800068c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800068e:	4b9b      	ldr	r3, [pc, #620]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	4a9a      	ldr	r2, [pc, #616]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000694:	f043 0308 	orr.w	r3, r3, #8
 8000698:	6313      	str	r3, [r2, #48]	; 0x30
 800069a:	4b98      	ldr	r3, [pc, #608]	; (80008fc <MX_GPIO_Init+0x2cc>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	f003 0308 	and.w	r3, r3, #8
 80006a2:	61fb      	str	r3, [r7, #28]
 80006a4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006a6:	4b95      	ldr	r3, [pc, #596]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	4a94      	ldr	r2, [pc, #592]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006ac:	f043 0304 	orr.w	r3, r3, #4
 80006b0:	6313      	str	r3, [r2, #48]	; 0x30
 80006b2:	4b92      	ldr	r3, [pc, #584]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	f003 0304 	and.w	r3, r3, #4
 80006ba:	61bb      	str	r3, [r7, #24]
 80006bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006be:	4b8f      	ldr	r3, [pc, #572]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4a8e      	ldr	r2, [pc, #568]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006c4:	f043 0301 	orr.w	r3, r3, #1
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ca:	4b8c      	ldr	r3, [pc, #560]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	617b      	str	r3, [r7, #20]
 80006d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80006d6:	4b89      	ldr	r3, [pc, #548]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	4a88      	ldr	r2, [pc, #544]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006e0:	6313      	str	r3, [r2, #48]	; 0x30
 80006e2:	4b86      	ldr	r3, [pc, #536]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80006ea:	613b      	str	r3, [r7, #16]
 80006ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80006ee:	4b83      	ldr	r3, [pc, #524]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	4a82      	ldr	r2, [pc, #520]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006f8:	6313      	str	r3, [r2, #48]	; 0x30
 80006fa:	4b80      	ldr	r3, [pc, #512]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000706:	4b7d      	ldr	r3, [pc, #500]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a7c      	ldr	r2, [pc, #496]	; (80008fc <MX_GPIO_Init+0x2cc>)
 800070c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b7a      	ldr	r3, [pc, #488]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800071a:	60bb      	str	r3, [r7, #8]
 800071c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800071e:	4b77      	ldr	r3, [pc, #476]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a76      	ldr	r2, [pc, #472]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000724:	f043 0320 	orr.w	r3, r3, #32
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b74      	ldr	r3, [pc, #464]	; (80008fc <MX_GPIO_Init+0x2cc>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0320 	and.w	r3, r3, #32
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000736:	4b71      	ldr	r3, [pc, #452]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a70      	ldr	r2, [pc, #448]	; (80008fc <MX_GPIO_Init+0x2cc>)
 800073c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b6e      	ldr	r3, [pc, #440]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800074a:	603b      	str	r3, [r7, #0]
 800074c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800074e:	2201      	movs	r2, #1
 8000750:	2120      	movs	r1, #32
 8000752:	486b      	ldr	r0, [pc, #428]	; (8000900 <MX_GPIO_Init+0x2d0>)
 8000754:	f001 fc84 	bl	8002060 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LED_Green_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8000758:	2200      	movs	r2, #0
 800075a:	f241 010e 	movw	r1, #4110	; 0x100e
 800075e:	4869      	ldr	r0, [pc, #420]	; (8000904 <MX_GPIO_Init+0x2d4>)
 8000760:	f001 fc7e 	bl	8002060 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000764:	2200      	movs	r2, #0
 8000766:	2108      	movs	r1, #8
 8000768:	4867      	ldr	r0, [pc, #412]	; (8000908 <MX_GPIO_Init+0x2d8>)
 800076a:	f001 fc79 	bl	8002060 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 800076e:	2200      	movs	r2, #0
 8000770:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000774:	4865      	ldr	r0, [pc, #404]	; (800090c <MX_GPIO_Init+0x2dc>)
 8000776:	f001 fc73 	bl	8002060 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	21c8      	movs	r1, #200	; 0xc8
 800077e:	4864      	ldr	r0, [pc, #400]	; (8000910 <MX_GPIO_Init+0x2e0>)
 8000780:	f001 fc6e 	bl	8002060 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 8000784:	2310      	movs	r3, #16
 8000786:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000788:	2302      	movs	r3, #2
 800078a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	2300      	movs	r3, #0
 800078e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000790:	2300      	movs	r3, #0
 8000792:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000794:	230e      	movs	r3, #14
 8000796:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8000798:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800079c:	4619      	mov	r1, r3
 800079e:	485d      	ldr	r0, [pc, #372]	; (8000914 <MX_GPIO_Init+0x2e4>)
 80007a0:	f001 fab2 	bl	8001d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80007a4:	2308      	movs	r3, #8
 80007a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007a8:	2300      	movs	r3, #0
 80007aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007b4:	4619      	mov	r1, r3
 80007b6:	4857      	ldr	r0, [pc, #348]	; (8000914 <MX_GPIO_Init+0x2e4>)
 80007b8:	f001 faa6 	bl	8001d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80007bc:	2304      	movs	r3, #4
 80007be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c0:	2302      	movs	r3, #2
 80007c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007c8:	2303      	movs	r3, #3
 80007ca:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80007cc:	2309      	movs	r3, #9
 80007ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80007d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007d4:	4619      	mov	r1, r3
 80007d6:	484f      	ldr	r0, [pc, #316]	; (8000914 <MX_GPIO_Init+0x2e4>)
 80007d8:	f001 fa96 	bl	8001d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80007dc:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80007e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e2:	2302      	movs	r3, #2
 80007e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ea:	2303      	movs	r3, #3
 80007ec:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007ee:	230b      	movs	r3, #11
 80007f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007f6:	4619      	mov	r1, r3
 80007f8:	4845      	ldr	r0, [pc, #276]	; (8000910 <MX_GPIO_Init+0x2e0>)
 80007fa:	f001 fa85 	bl	8001d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80007fe:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000802:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000804:	2302      	movs	r3, #2
 8000806:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800080c:	2303      	movs	r3, #3
 800080e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000810:	230c      	movs	r3, #12
 8000812:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000814:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000818:	4619      	mov	r1, r3
 800081a:	483e      	ldr	r0, [pc, #248]	; (8000914 <MX_GPIO_Init+0x2e4>)
 800081c:	f001 fa74 	bl	8001d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8000820:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000824:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000826:	2312      	movs	r3, #18
 8000828:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082e:	2300      	movs	r3, #0
 8000830:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000832:	2304      	movs	r3, #4
 8000834:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000836:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800083a:	4619      	mov	r1, r3
 800083c:	4836      	ldr	r0, [pc, #216]	; (8000918 <MX_GPIO_Init+0x2e8>)
 800083e:	f001 fa63 	bl	8001d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8000842:	f643 4321 	movw	r3, #15393	; 0x3c21
 8000846:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000848:	2302      	movs	r3, #2
 800084a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	2300      	movs	r3, #0
 800084e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000850:	2303      	movs	r3, #3
 8000852:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000854:	230a      	movs	r3, #10
 8000856:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000858:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800085c:	4619      	mov	r1, r3
 800085e:	482e      	ldr	r0, [pc, #184]	; (8000918 <MX_GPIO_Init+0x2e8>)
 8000860:	f001 fa52 	bl	8001d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8000864:	2310      	movs	r3, #16
 8000866:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000868:	2302      	movs	r3, #2
 800086a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000870:	2300      	movs	r3, #0
 8000872:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000874:	2302      	movs	r3, #2
 8000876:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8000878:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800087c:	4619      	mov	r1, r3
 800087e:	4826      	ldr	r0, [pc, #152]	; (8000918 <MX_GPIO_Init+0x2e8>)
 8000880:	f001 fa42 	bl	8001d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8000884:	2380      	movs	r3, #128	; 0x80
 8000886:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000888:	2302      	movs	r3, #2
 800088a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000890:	2300      	movs	r3, #0
 8000892:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8000894:	2308      	movs	r3, #8
 8000896:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8000898:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800089c:	4619      	mov	r1, r3
 800089e:	4818      	ldr	r0, [pc, #96]	; (8000900 <MX_GPIO_Init+0x2d0>)
 80008a0:	f001 fa32 	bl	8001d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 80008a4:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80008a8:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008aa:	2302      	movs	r3, #2
 80008ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b2:	2303      	movs	r3, #3
 80008b4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80008b6:	230c      	movs	r3, #12
 80008b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008be:	4619      	mov	r1, r3
 80008c0:	4816      	ldr	r0, [pc, #88]	; (800091c <MX_GPIO_Init+0x2ec>)
 80008c2:	f001 fa21 	bl	8001d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80008c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008cc:	2302      	movs	r3, #2
 80008ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d4:	2300      	movs	r3, #0
 80008d6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80008d8:	2301      	movs	r3, #1
 80008da:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 80008dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008e0:	4619      	mov	r1, r3
 80008e2:	480f      	ldr	r0, [pc, #60]	; (8000920 <MX_GPIO_Init+0x2f0>)
 80008e4:	f001 fa10 	bl	8001d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80008e8:	2360      	movs	r3, #96	; 0x60
 80008ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ec:	2302      	movs	r3, #2
 80008ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f4:	2300      	movs	r3, #0
 80008f6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80008f8:	230d      	movs	r3, #13
 80008fa:	e013      	b.n	8000924 <MX_GPIO_Init+0x2f4>
 80008fc:	40023800 	.word	0x40023800
 8000900:	40020c00 	.word	0x40020c00
 8000904:	40022000 	.word	0x40022000
 8000908:	40022800 	.word	0x40022800
 800090c:	40021c00 	.word	0x40021c00
 8000910:	40021800 	.word	0x40021800
 8000914:	40021000 	.word	0x40021000
 8000918:	40020400 	.word	0x40020400
 800091c:	40020800 	.word	0x40020800
 8000920:	40020000 	.word	0x40020000
 8000924:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000926:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800092a:	4619      	mov	r1, r3
 800092c:	48bc      	ldr	r0, [pc, #752]	; (8000c20 <MX_GPIO_Init+0x5f0>)
 800092e:	f001 f9eb 	bl	8001d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8000932:	2340      	movs	r3, #64	; 0x40
 8000934:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000936:	2302      	movs	r3, #2
 8000938:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800093e:	2303      	movs	r3, #3
 8000940:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000942:	230a      	movs	r3, #10
 8000944:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8000946:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800094a:	4619      	mov	r1, r3
 800094c:	48b5      	ldr	r0, [pc, #724]	; (8000c24 <MX_GPIO_Init+0x5f4>)
 800094e:	f001 f9db 	bl	8001d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8000952:	f248 1333 	movw	r3, #33075	; 0x8133
 8000956:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000958:	2302      	movs	r3, #2
 800095a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000960:	2303      	movs	r3, #3
 8000962:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000964:	230c      	movs	r3, #12
 8000966:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000968:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800096c:	4619      	mov	r1, r3
 800096e:	48ae      	ldr	r0, [pc, #696]	; (8000c28 <MX_GPIO_Init+0x5f8>)
 8000970:	f001 f9ca 	bl	8001d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8000974:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8000978:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097a:	2302      	movs	r3, #2
 800097c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2300      	movs	r3, #0
 8000984:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000986:	230e      	movs	r3, #14
 8000988:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800098a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800098e:	4619      	mov	r1, r3
 8000990:	48a6      	ldr	r0, [pc, #664]	; (8000c2c <MX_GPIO_Init+0x5fc>)
 8000992:	f001 f9b9 	bl	8001d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000996:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800099a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800099c:	2300      	movs	r3, #0
 800099e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80009a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009a8:	4619      	mov	r1, r3
 80009aa:	48a0      	ldr	r0, [pc, #640]	; (8000c2c <MX_GPIO_Init+0x5fc>)
 80009ac:	f001 f9ac 	bl	8001d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80009b0:	2340      	movs	r3, #64	; 0x40
 80009b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009b4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80009be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009c2:	4619      	mov	r1, r3
 80009c4:	489a      	ldr	r0, [pc, #616]	; (8000c30 <MX_GPIO_Init+0x600>)
 80009c6:	f001 f99f 	bl	8001d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80009ca:	f24c 7303 	movw	r3, #50947	; 0xc703
 80009ce:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d0:	2302      	movs	r3, #2
 80009d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d8:	2303      	movs	r3, #3
 80009da:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009dc:	230c      	movs	r3, #12
 80009de:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009e4:	4619      	mov	r1, r3
 80009e6:	4892      	ldr	r0, [pc, #584]	; (8000c30 <MX_GPIO_Init+0x600>)
 80009e8:	f001 f98e 	bl	8001d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 80009ec:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80009f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f2:	2302      	movs	r3, #2
 80009f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fa:	2303      	movs	r3, #3
 80009fc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009fe:	230a      	movs	r3, #10
 8000a00:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a06:	4619      	mov	r1, r3
 8000a08:	488a      	ldr	r0, [pc, #552]	; (8000c34 <MX_GPIO_Init+0x604>)
 8000a0a:	f001 f97d 	bl	8001d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8000a0e:	23f0      	movs	r3, #240	; 0xf0
 8000a10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a12:	2302      	movs	r3, #2
 8000a14:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000a1e:	230a      	movs	r3, #10
 8000a20:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a26:	4619      	mov	r1, r3
 8000a28:	4883      	ldr	r0, [pc, #524]	; (8000c38 <MX_GPIO_Init+0x608>)
 8000a2a:	f001 f96d 	bl	8001d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PKPin PKPin PKPin PKPin
                           PKPin PKPin PKPin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8000a2e:	23f7      	movs	r3, #247	; 0xf7
 8000a30:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a32:	2302      	movs	r3, #2
 8000a34:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a3e:	230e      	movs	r3, #14
 8000a40:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000a42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a46:	4619      	mov	r1, r3
 8000a48:	487c      	ldr	r0, [pc, #496]	; (8000c3c <MX_GPIO_Init+0x60c>)
 8000a4a:	f001 f95d 	bl	8001d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8000a4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a54:	2302      	movs	r3, #2
 8000a56:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000a60:	2309      	movs	r3, #9
 8000a62:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8000a64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a68:	4619      	mov	r1, r3
 8000a6a:	486f      	ldr	r0, [pc, #444]	; (8000c28 <MX_GPIO_Init+0x5f8>)
 8000a6c:	f001 f94c 	bl	8001d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8000a70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a76:	2302      	movs	r3, #2
 8000a78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000a82:	230a      	movs	r3, #10
 8000a84:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8000a86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4866      	ldr	r0, [pc, #408]	; (8000c28 <MX_GPIO_Init+0x5f8>)
 8000a8e:	f001 f93b 	bl	8001d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a92:	2320      	movs	r3, #32
 8000a94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a96:	2301      	movs	r3, #1
 8000a98:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000aa2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4861      	ldr	r0, [pc, #388]	; (8000c30 <MX_GPIO_Init+0x600>)
 8000aaa:	f001 f92d 	bl	8001d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000aae:	2308      	movs	r3, #8
 8000ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aba:	2300      	movs	r3, #0
 8000abc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000abe:	230d      	movs	r3, #13
 8000ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000ac2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4859      	ldr	r0, [pc, #356]	; (8000c30 <MX_GPIO_Init+0x600>)
 8000aca:	f001 f91d 	bl	8001d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LED_Green_Pin|LCD_DISP_Pin;
 8000ace:	f241 030e 	movw	r3, #4110	; 0x100e
 8000ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000adc:	2300      	movs	r3, #0
 8000ade:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000ae0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4854      	ldr	r0, [pc, #336]	; (8000c38 <MX_GPIO_Init+0x608>)
 8000ae8:	f001 f90e 	bl	8001d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000aec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000af0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af2:	2300      	movs	r3, #0
 8000af4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000afa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000afe:	4619      	mov	r1, r3
 8000b00:	484f      	ldr	r0, [pc, #316]	; (8000c40 <MX_GPIO_Init+0x610>)
 8000b02:	f001 f901 	bl	8001d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000b06:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b14:	2303      	movs	r3, #3
 8000b16:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b18:	230c      	movs	r3, #12
 8000b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b20:	4619      	mov	r1, r3
 8000b22:	4848      	ldr	r0, [pc, #288]	; (8000c44 <MX_GPIO_Init+0x614>)
 8000b24:	f001 f8f0 	bl	8001d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8000b28:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8000b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b36:	2300      	movs	r3, #0
 8000b38:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b3a:	230e      	movs	r3, #14
 8000b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000b3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b42:	4619      	mov	r1, r3
 8000b44:	483c      	ldr	r0, [pc, #240]	; (8000c38 <MX_GPIO_Init+0x608>)
 8000b46:	f001 f8df 	bl	8001d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000b4a:	2308      	movs	r3, #8
 8000b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b56:	2300      	movs	r3, #0
 8000b58:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000b5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4836      	ldr	r0, [pc, #216]	; (8000c3c <MX_GPIO_Init+0x60c>)
 8000b62:	f001 f8d1 	bl	8001d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000b66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b74:	2300      	movs	r3, #0
 8000b76:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000b78:	230d      	movs	r3, #13
 8000b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000b7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b80:	4619      	mov	r1, r3
 8000b82:	4829      	ldr	r0, [pc, #164]	; (8000c28 <MX_GPIO_Init+0x5f8>)
 8000b84:	f001 f8c0 	bl	8001d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b88:	2310      	movs	r3, #16
 8000b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4825      	ldr	r0, [pc, #148]	; (8000c30 <MX_GPIO_Init+0x600>)
 8000b9c:	f001 f8b4 	bl	8001d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8000ba0:	2304      	movs	r3, #4
 8000ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bac:	2303      	movs	r3, #3
 8000bae:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000bb0:	230c      	movs	r3, #12
 8000bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8000bb4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bb8:	4619      	mov	r1, r3
 8000bba:	481d      	ldr	r0, [pc, #116]	; (8000c30 <MX_GPIO_Init+0x600>)
 8000bbc:	f001 f8a4 	bl	8001d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000bc0:	f248 0304 	movw	r3, #32772	; 0x8004
 8000bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000bce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	481c      	ldr	r0, [pc, #112]	; (8000c48 <MX_GPIO_Init+0x618>)
 8000bd6:	f001 f897 	bl	8001d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000bda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bde:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be0:	2301      	movs	r3, #1
 8000be2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be8:	2300      	movs	r3, #0
 8000bea:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000bec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4815      	ldr	r0, [pc, #84]	; (8000c48 <MX_GPIO_Init+0x618>)
 8000bf4:	f001 f888 	bl	8001d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin
                           PHPin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000bf8:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8000bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c06:	2300      	movs	r3, #0
 8000c08:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000c0a:	230d      	movs	r3, #13
 8000c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c12:	4619      	mov	r1, r3
 8000c14:	480c      	ldr	r0, [pc, #48]	; (8000c48 <MX_GPIO_Init+0x618>)
 8000c16:	f001 f877 	bl	8001d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	e016      	b.n	8000c4c <MX_GPIO_Init+0x61c>
 8000c1e:	bf00      	nop
 8000c20:	40021000 	.word	0x40021000
 8000c24:	40020400 	.word	0x40020400
 8000c28:	40021800 	.word	0x40021800
 8000c2c:	40022400 	.word	0x40022400
 8000c30:	40020c00 	.word	0x40020c00
 8000c34:	40020000 	.word	0x40020000
 8000c38:	40022000 	.word	0x40022000
 8000c3c:	40022800 	.word	0x40022800
 8000c40:	40020800 	.word	0x40020800
 8000c44:	40021400 	.word	0x40021400
 8000c48:	40021c00 	.word	0x40021c00
 8000c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c56:	2300      	movs	r3, #0
 8000c58:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8000c5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c62:	4619      	mov	r1, r3
 8000c64:	48a4      	ldr	r0, [pc, #656]	; (8000ef8 <MX_GPIO_Init+0x8c8>)
 8000c66:	f001 f84f 	bl	8001d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PUSH_Pin;
 8000c6a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c70:	2300      	movs	r3, #0
 8000c72:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(PUSH_GPIO_Port, &GPIO_InitStruct);
 8000c78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	489e      	ldr	r0, [pc, #632]	; (8000ef8 <MX_GPIO_Init+0x8c8>)
 8000c80:	f001 f842 	bl	8001d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8000c84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c92:	2300      	movs	r3, #0
 8000c94:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000c96:	2301      	movs	r3, #1
 8000c98:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8000c9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4896      	ldr	r0, [pc, #600]	; (8000efc <MX_GPIO_Init+0x8cc>)
 8000ca2:	f001 f831 	bl	8001d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000ca6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000caa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000cac:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000cb0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000cb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cba:	4619      	mov	r1, r3
 8000cbc:	488e      	ldr	r0, [pc, #568]	; (8000ef8 <MX_GPIO_Init+0x8c8>)
 8000cbe:	f001 f823 	bl	8001d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8000cc2:	23c0      	movs	r3, #192	; 0xc0
 8000cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cce:	2303      	movs	r3, #3
 8000cd0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000cd2:	2308      	movs	r3, #8
 8000cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4888      	ldr	r0, [pc, #544]	; (8000f00 <MX_GPIO_Init+0x8d0>)
 8000cde:	f001 f813 	bl	8001d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000ce2:	2310      	movs	r3, #16
 8000ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cee:	2303      	movs	r3, #3
 8000cf0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000cf2:	230a      	movs	r3, #10
 8000cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000cf6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4881      	ldr	r0, [pc, #516]	; (8000f04 <MX_GPIO_Init+0x8d4>)
 8000cfe:	f001 f803 	bl	8001d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000d02:	2328      	movs	r3, #40	; 0x28
 8000d04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d06:	2302      	movs	r3, #2
 8000d08:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0e:	2303      	movs	r3, #3
 8000d10:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d12:	230c      	movs	r3, #12
 8000d14:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4879      	ldr	r0, [pc, #484]	; (8000f04 <MX_GPIO_Init+0x8d4>)
 8000d1e:	f000 fff3 	bl	8001d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8000d22:	23c8      	movs	r3, #200	; 0xc8
 8000d24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d26:	2301      	movs	r3, #1
 8000d28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d36:	4619      	mov	r1, r3
 8000d38:	4873      	ldr	r0, [pc, #460]	; (8000f08 <MX_GPIO_Init+0x8d8>)
 8000d3a:	f000 ffe5 	bl	8001d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8000d3e:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8000d42:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d44:	2303      	movs	r3, #3
 8000d46:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d50:	4619      	mov	r1, r3
 8000d52:	486e      	ldr	r0, [pc, #440]	; (8000f0c <MX_GPIO_Init+0x8dc>)
 8000d54:	f000 ffd8 	bl	8001d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000d58:	2308      	movs	r3, #8
 8000d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d64:	2303      	movs	r3, #3
 8000d66:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d68:	230c      	movs	r3, #12
 8000d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000d6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d70:	4619      	mov	r1, r3
 8000d72:	4863      	ldr	r0, [pc, #396]	; (8000f00 <MX_GPIO_Init+0x8d0>)
 8000d74:	f000 ffc8 	bl	8001d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8000d78:	2305      	movs	r3, #5
 8000d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d84:	2303      	movs	r3, #3
 8000d86:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000d88:	230a      	movs	r3, #10
 8000d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d90:	4619      	mov	r1, r3
 8000d92:	485b      	ldr	r0, [pc, #364]	; (8000f00 <MX_GPIO_Init+0x8d0>)
 8000d94:	f000 ffb8 	bl	8001d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000d98:	2332      	movs	r3, #50	; 0x32
 8000d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da4:	2303      	movs	r3, #3
 8000da6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000da8:	230b      	movs	r3, #11
 8000daa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000db0:	4619      	mov	r1, r3
 8000db2:	4853      	ldr	r0, [pc, #332]	; (8000f00 <MX_GPIO_Init+0x8d0>)
 8000db4:	f000 ffa8 	bl	8001d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000db8:	2304      	movs	r3, #4
 8000dba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc4:	2303      	movs	r3, #3
 8000dc6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000dc8:	2309      	movs	r3, #9
 8000dca:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dcc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	484f      	ldr	r0, [pc, #316]	; (8000f10 <MX_GPIO_Init+0x8e0>)
 8000dd4:	f000 ff98 	bl	8001d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8000dd8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dde:	2302      	movs	r3, #2
 8000de0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	2300      	movs	r3, #0
 8000de4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de6:	2303      	movs	r3, #3
 8000de8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000dea:	2309      	movs	r3, #9
 8000dec:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000df2:	4619      	mov	r1, r3
 8000df4:	4847      	ldr	r0, [pc, #284]	; (8000f14 <MX_GPIO_Init+0x8e4>)
 8000df6:	f000 ff87 	bl	8001d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8000dfa:	2304      	movs	r3, #4
 8000dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8000e06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	483e      	ldr	r0, [pc, #248]	; (8000f08 <MX_GPIO_Init+0x8d8>)
 8000e0e:	f000 ff7b 	bl	8001d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000e12:	2386      	movs	r3, #134	; 0x86
 8000e14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e16:	2302      	movs	r3, #2
 8000e18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e22:	230b      	movs	r3, #11
 8000e24:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4833      	ldr	r0, [pc, #204]	; (8000efc <MX_GPIO_Init+0x8cc>)
 8000e2e:	f000 ff6b 	bl	8001d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8000e32:	2301      	movs	r3, #1
 8000e34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e36:	2303      	movs	r3, #3
 8000e38:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8000e3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e42:	4619      	mov	r1, r3
 8000e44:	482d      	ldr	r0, [pc, #180]	; (8000efc <MX_GPIO_Init+0x8cc>)
 8000e46:	f000 ff5f 	bl	8001d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8000e4a:	2350      	movs	r3, #80	; 0x50
 8000e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e56:	2300      	movs	r3, #0
 8000e58:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000e5a:	230d      	movs	r3, #13
 8000e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e62:	4619      	mov	r1, r3
 8000e64:	4825      	ldr	r0, [pc, #148]	; (8000efc <MX_GPIO_Init+0x8cc>)
 8000e66:	f000 ff4f 	bl	8001d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8000e6a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e70:	2312      	movs	r3, #18
 8000e72:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e7c:	2304      	movs	r3, #4
 8000e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000e80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e84:	4619      	mov	r1, r3
 8000e86:	481f      	ldr	r0, [pc, #124]	; (8000f04 <MX_GPIO_Init+0x8d4>)
 8000e88:	f000 ff3e 	bl	8001d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8000e8c:	2328      	movs	r3, #40	; 0x28
 8000e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e90:	2302      	movs	r3, #2
 8000e92:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e98:	2303      	movs	r3, #3
 8000e9a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000e9c:	230a      	movs	r3, #10
 8000e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4815      	ldr	r0, [pc, #84]	; (8000efc <MX_GPIO_Init+0x8cc>)
 8000ea8:	f000 ff2e 	bl	8001d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8000eac:	2340      	movs	r3, #64	; 0x40
 8000eae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8000ebc:	2309      	movs	r3, #9
 8000ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8000ec0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	480f      	ldr	r0, [pc, #60]	; (8000f04 <MX_GPIO_Init+0x8d4>)
 8000ec8:	f000 ff1e 	bl	8001d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8000ecc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eda:	2300      	movs	r3, #0
 8000edc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ede:	2305      	movs	r3, #5
 8000ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4809      	ldr	r0, [pc, #36]	; (8000f10 <MX_GPIO_Init+0x8e0>)
 8000eea:	f000 ff0d 	bl	8001d08 <HAL_GPIO_Init>

}
 8000eee:	bf00      	nop
 8000ef0:	3740      	adds	r7, #64	; 0x40
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40022000 	.word	0x40022000
 8000efc:	40020000 	.word	0x40020000
 8000f00:	40020800 	.word	0x40020800
 8000f04:	40021c00 	.word	0x40021c00
 8000f08:	40021800 	.word	0x40021800
 8000f0c:	40021400 	.word	0x40021400
 8000f10:	40020400 	.word	0x40020400
 8000f14:	40020c00 	.word	0x40020c00

08000f18 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000f20:	1d39      	adds	r1, r7, #4
 8000f22:	f04f 33ff 	mov.w	r3, #4294967295
 8000f26:	2201      	movs	r2, #1
 8000f28:	4803      	ldr	r0, [pc, #12]	; (8000f38 <__io_putchar+0x20>)
 8000f2a:	f002 f9e5 	bl	80032f8 <HAL_UART_Transmit>
	return ch;
 8000f2e:	687b      	ldr	r3, [r7, #4]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	2000065c 	.word	0x2000065c

08000f3c <fonction>:

int fonction(int argc, char ** argv)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < argc; ++i) {
 8000f46:	2300      	movs	r3, #0
 8000f48:	60fb      	str	r3, [r7, #12]
 8000f4a:	e00c      	b.n	8000f66 <fonction+0x2a>
		printf("argument %d = %s \r\n",i,argv[i]);
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	683a      	ldr	r2, [r7, #0]
 8000f52:	4413      	add	r3, r2
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	461a      	mov	r2, r3
 8000f58:	68f9      	ldr	r1, [r7, #12]
 8000f5a:	4807      	ldr	r0, [pc, #28]	; (8000f78 <fonction+0x3c>)
 8000f5c:	f005 fc8a 	bl	8006874 <iprintf>
	for (int i = 0; i < argc; ++i) {
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	3301      	adds	r3, #1
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	68fa      	ldr	r2, [r7, #12]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	429a      	cmp	r2, r3
 8000f6c:	dbee      	blt.n	8000f4c <fonction+0x10>
	}


	return 0;
 8000f6e:	2300      	movs	r3, #0
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	08007cac 	.word	0x08007cac

08000f7c <gereLed>:
		printf("%d\r\n", RxBuffer);
	}
}

void gereLed(void * unused)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if(activate == 1){
 8000f84:	4b0d      	ldr	r3, [pc, #52]	; (8000fbc <gereLed+0x40>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d1fb      	bne.n	8000f84 <gereLed+0x8>
			if(delai > 0){
 8000f8c:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <gereLed+0x44>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	dd09      	ble.n	8000fa8 <gereLed+0x2c>
				HAL_GPIO_TogglePin(LED_Green_GPIO_Port, LED_Green_Pin);
 8000f94:	2102      	movs	r1, #2
 8000f96:	480b      	ldr	r0, [pc, #44]	; (8000fc4 <gereLed+0x48>)
 8000f98:	f001 f87b 	bl	8002092 <HAL_GPIO_TogglePin>
				vTaskDelay(delai);
 8000f9c:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <gereLed+0x44>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f004 fa05 	bl	80053b0 <vTaskDelay>
 8000fa6:	e7ed      	b.n	8000f84 <gereLed+0x8>
			}
			else {
				activate = 0;
 8000fa8:	4b04      	ldr	r3, [pc, #16]	; (8000fbc <gereLed+0x40>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, 0);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2102      	movs	r1, #2
 8000fb2:	4804      	ldr	r0, [pc, #16]	; (8000fc4 <gereLed+0x48>)
 8000fb4:	f001 f854 	bl	8002060 <HAL_GPIO_WritePin>
		if(activate == 1){
 8000fb8:	e7e4      	b.n	8000f84 <gereLed+0x8>
 8000fba:	bf00      	nop
 8000fbc:	200002f4 	.word	0x200002f4
 8000fc0:	200002f0 	.word	0x200002f0
 8000fc4:	40022000 	.word	0x40022000

08000fc8 <shell>:
		}
	}
}

void shell(void * unused)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
	shell_run();
 8000fd0:	f000 fa3e 	bl	8001450 <shell_run>
}
 8000fd4:	bf00      	nop
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <led>:

int led(int argc, char ** argv)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	6039      	str	r1, [r7, #0]
	activate = 1;
 8000fe6:	4b08      	ldr	r3, [pc, #32]	; (8001008 <led+0x2c>)
 8000fe8:	2201      	movs	r2, #1
 8000fea:	601a      	str	r2, [r3, #0]
	delai = atoi(argv[1]);
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	3304      	adds	r3, #4
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f005 fbfa 	bl	80067ec <atoi>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	4a04      	ldr	r2, [pc, #16]	; (800100c <led+0x30>)
 8000ffc:	6013      	str	r3, [r2, #0]
	return 0;
 8000ffe:	2300      	movs	r3, #0
}
 8001000:	4618      	mov	r0, r3
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	200002f4 	.word	0x200002f4
 800100c:	200002f0 	.word	0x200002f0

08001010 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001016:	f000 fc76 	bl	8001906 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800101a:	f000 f841 	bl	80010a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800101e:	f7ff fb07 	bl	8000630 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001022:	f000 fb8d 	bl	8001740 <MX_USART1_UART_Init>

//****************************************//

//****************************************//

	shell_init();
 8001026:	f000 f93b 	bl	80012a0 <shell_init>
	shell_add('f', fonction, "Une fonction inutile");
 800102a:	4a13      	ldr	r2, [pc, #76]	; (8001078 <main+0x68>)
 800102c:	4913      	ldr	r1, [pc, #76]	; (800107c <main+0x6c>)
 800102e:	2066      	movs	r0, #102	; 0x66
 8001030:	f000 f962 	bl	80012f8 <shell_add>
	shell_add('l', led, "j'allume le led");
 8001034:	4a12      	ldr	r2, [pc, #72]	; (8001080 <main+0x70>)
 8001036:	4913      	ldr	r1, [pc, #76]	; (8001084 <main+0x74>)
 8001038:	206c      	movs	r0, #108	; 0x6c
 800103a:	f000 f95d 	bl	80012f8 <shell_add>
	xTaskCreate(shell, "shell", 1000, NULL, 2, &xHandle4);
 800103e:	4b12      	ldr	r3, [pc, #72]	; (8001088 <main+0x78>)
 8001040:	9301      	str	r3, [sp, #4]
 8001042:	2302      	movs	r3, #2
 8001044:	9300      	str	r3, [sp, #0]
 8001046:	2300      	movs	r3, #0
 8001048:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800104c:	490f      	ldr	r1, [pc, #60]	; (800108c <main+0x7c>)
 800104e:	4810      	ldr	r0, [pc, #64]	; (8001090 <main+0x80>)
 8001050:	f004 f875 	bl	800513e <xTaskCreate>
  	xTaskCreate(gereLed, "gereled", 1000, NULL, 1, &xHandle3);
 8001054:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <main+0x84>)
 8001056:	9301      	str	r3, [sp, #4]
 8001058:	2301      	movs	r3, #1
 800105a:	9300      	str	r3, [sp, #0]
 800105c:	2300      	movs	r3, #0
 800105e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001062:	490d      	ldr	r1, [pc, #52]	; (8001098 <main+0x88>)
 8001064:	480d      	ldr	r0, [pc, #52]	; (800109c <main+0x8c>)
 8001066:	f004 f86a 	bl	800513e <xTaskCreate>


	//configASSERT(pdTRUE==xReturned);

	vTaskStartScheduler();
 800106a:	f004 f9d7 	bl	800541c <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800106e:	f7ff fabb 	bl	80005e8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001072:	f003 fbf1 	bl	8004858 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8001076:	e7fe      	b.n	8001076 <main+0x66>
 8001078:	08007cf8 	.word	0x08007cf8
 800107c:	08000f3d 	.word	0x08000f3d
 8001080:	08007d10 	.word	0x08007d10
 8001084:	08000fdd 	.word	0x08000fdd
 8001088:	200002fc 	.word	0x200002fc
 800108c:	08007d20 	.word	0x08007d20
 8001090:	08000fc9 	.word	0x08000fc9
 8001094:	200002f8 	.word	0x200002f8
 8001098:	08007d28 	.word	0x08007d28
 800109c:	08000f7d 	.word	0x08000f7d

080010a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b094      	sub	sp, #80	; 0x50
 80010a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010a6:	f107 0320 	add.w	r3, r7, #32
 80010aa:	2230      	movs	r2, #48	; 0x30
 80010ac:	2100      	movs	r1, #0
 80010ae:	4618      	mov	r0, r3
 80010b0:	f005 fbd8 	bl	8006864 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010b4:	f107 030c 	add.w	r3, r7, #12
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010c4:	4b2b      	ldr	r3, [pc, #172]	; (8001174 <SystemClock_Config+0xd4>)
 80010c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c8:	4a2a      	ldr	r2, [pc, #168]	; (8001174 <SystemClock_Config+0xd4>)
 80010ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ce:	6413      	str	r3, [r2, #64]	; 0x40
 80010d0:	4b28      	ldr	r3, [pc, #160]	; (8001174 <SystemClock_Config+0xd4>)
 80010d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d8:	60bb      	str	r3, [r7, #8]
 80010da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010dc:	4b26      	ldr	r3, [pc, #152]	; (8001178 <SystemClock_Config+0xd8>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a25      	ldr	r2, [pc, #148]	; (8001178 <SystemClock_Config+0xd8>)
 80010e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010e6:	6013      	str	r3, [r2, #0]
 80010e8:	4b23      	ldr	r3, [pc, #140]	; (8001178 <SystemClock_Config+0xd8>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010f0:	607b      	str	r3, [r7, #4]
 80010f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010f4:	2301      	movs	r3, #1
 80010f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010fe:	2302      	movs	r3, #2
 8001100:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001102:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001106:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001108:	2319      	movs	r3, #25
 800110a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 800110c:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8001110:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001112:	2302      	movs	r3, #2
 8001114:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001116:	2302      	movs	r3, #2
 8001118:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800111a:	f107 0320 	add.w	r3, r7, #32
 800111e:	4618      	mov	r0, r3
 8001120:	f001 f822 	bl	8002168 <HAL_RCC_OscConfig>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800112a:	f000 f827 	bl	800117c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800112e:	f000 ffcb 	bl	80020c8 <HAL_PWREx_EnableOverDrive>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001138:	f000 f820 	bl	800117c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800113c:	230f      	movs	r3, #15
 800113e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001140:	2302      	movs	r3, #2
 8001142:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001144:	2300      	movs	r3, #0
 8001146:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001148:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800114c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800114e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001152:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001154:	f107 030c 	add.w	r3, r7, #12
 8001158:	2107      	movs	r1, #7
 800115a:	4618      	mov	r0, r3
 800115c:	f001 faa8 	bl	80026b0 <HAL_RCC_ClockConfig>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001166:	f000 f809 	bl	800117c <Error_Handler>
  }
}
 800116a:	bf00      	nop
 800116c:	3750      	adds	r7, #80	; 0x50
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40023800 	.word	0x40023800
 8001178:	40007000 	.word	0x40007000

0800117c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001180:	b672      	cpsid	i
}
 8001182:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001184:	e7fe      	b.n	8001184 <Error_Handler+0x8>
	...

08001188 <uart_read>:

static char print_buffer[BUFFER_SIZE];

SemaphoreHandle_t sem_uart;

static char uart_read() {
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
	char c;

	HAL_UART_Receive_IT(&UART_DEVICE, (uint8_t*)(&c), 1);
 800118e:	1dfb      	adds	r3, r7, #7
 8001190:	2201      	movs	r2, #1
 8001192:	4619      	mov	r1, r3
 8001194:	4807      	ldr	r0, [pc, #28]	; (80011b4 <uart_read+0x2c>)
 8001196:	f002 f932 	bl	80033fe <HAL_UART_Receive_IT>

	// semaphore take
	xSemaphoreTake(sem_uart, portMAX_DELAY);
 800119a:	4b07      	ldr	r3, [pc, #28]	; (80011b8 <uart_read+0x30>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f04f 31ff 	mov.w	r1, #4294967295
 80011a2:	4618      	mov	r0, r3
 80011a4:	f003 fdd4 	bl	8004d50 <xQueueSemaphoreTake>

	return c;
 80011a8:	79fb      	ldrb	r3, [r7, #7]
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	2000065c 	.word	0x2000065c
 80011b8:	2000062c 	.word	0x2000062c

080011bc <uart_irq_cb>:

void uart_irq_cb(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
	BaseType_t taskWoken = pdFALSE;
 80011c2:	2300      	movs	r3, #0
 80011c4:	607b      	str	r3, [r7, #4]
	// semaphore give
	xSemaphoreGiveFromISR(sem_uart, &taskWoken);
 80011c6:	4b0b      	ldr	r3, [pc, #44]	; (80011f4 <uart_irq_cb+0x38>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	1d3a      	adds	r2, r7, #4
 80011cc:	4611      	mov	r1, r2
 80011ce:	4618      	mov	r0, r3
 80011d0:	f003 fd29 	bl	8004c26 <xQueueGiveFromISR>

	// xSemaphoreGiveFromISR écrit dans taskWoken (c'est pour ça qu'on passe un pointer) si elle a réveillé une tâche plus prioritaire
	// on passe taskWoken en paramètre a portYIELD_FROM_ISR qui va appeler le scheduler si une tache plus prioritaire est réveillée

	portYIELD_FROM_ISR(taskWoken)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d007      	beq.n	80011ea <uart_irq_cb+0x2e>
 80011da:	4b07      	ldr	r3, [pc, #28]	; (80011f8 <uart_irq_cb+0x3c>)
 80011dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	f3bf 8f4f 	dsb	sy
 80011e6:	f3bf 8f6f 	isb	sy
}
 80011ea:	bf00      	nop
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	2000062c 	.word	0x2000062c
 80011f8:	e000ed04 	.word	0xe000ed04

080011fc <uart_write>:

static int uart_write(char * s, uint16_t size) {
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	460b      	mov	r3, r1
 8001206:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&UART_DEVICE, (uint8_t*)s, size, HAL_MAX_DELAY);
 8001208:	887a      	ldrh	r2, [r7, #2]
 800120a:	f04f 33ff 	mov.w	r3, #4294967295
 800120e:	6879      	ldr	r1, [r7, #4]
 8001210:	4803      	ldr	r0, [pc, #12]	; (8001220 <uart_write+0x24>)
 8001212:	f002 f871 	bl	80032f8 <HAL_UART_Transmit>
	return size;
 8001216:	887b      	ldrh	r3, [r7, #2]
}
 8001218:	4618      	mov	r0, r3
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	2000065c 	.word	0x2000065c

08001224 <sh_help>:

static int sh_help(int argc, char ** argv) {
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af02      	add	r7, sp, #8
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	6039      	str	r1, [r7, #0]
	int i;
	for(i = 0 ; i < shell_func_list_size ; i++) {
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]
 8001232:	e022      	b.n	800127a <sh_help+0x56>
		int size;
		size = snprintf (print_buffer, BUFFER_SIZE, "%c: %s\r\n", shell_func_list[i].c, shell_func_list[i].description);
 8001234:	4916      	ldr	r1, [pc, #88]	; (8001290 <sh_help+0x6c>)
 8001236:	68fa      	ldr	r2, [r7, #12]
 8001238:	4613      	mov	r3, r2
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	4413      	add	r3, r2
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	440b      	add	r3, r1
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	4618      	mov	r0, r3
 8001246:	4912      	ldr	r1, [pc, #72]	; (8001290 <sh_help+0x6c>)
 8001248:	68fa      	ldr	r2, [r7, #12]
 800124a:	4613      	mov	r3, r2
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	4413      	add	r3, r2
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	440b      	add	r3, r1
 8001254:	3308      	adds	r3, #8
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	9300      	str	r3, [sp, #0]
 800125a:	4603      	mov	r3, r0
 800125c:	4a0d      	ldr	r2, [pc, #52]	; (8001294 <sh_help+0x70>)
 800125e:	2128      	movs	r1, #40	; 0x28
 8001260:	480d      	ldr	r0, [pc, #52]	; (8001298 <sh_help+0x74>)
 8001262:	f005 fb1f 	bl	80068a4 <sniprintf>
 8001266:	60b8      	str	r0, [r7, #8]
		uart_write(print_buffer, size);
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	b29b      	uxth	r3, r3
 800126c:	4619      	mov	r1, r3
 800126e:	480a      	ldr	r0, [pc, #40]	; (8001298 <sh_help+0x74>)
 8001270:	f7ff ffc4 	bl	80011fc <uart_write>
	for(i = 0 ; i < shell_func_list_size ; i++) {
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	3301      	adds	r3, #1
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	4b08      	ldr	r3, [pc, #32]	; (800129c <sh_help+0x78>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	68fa      	ldr	r2, [r7, #12]
 8001280:	429a      	cmp	r2, r3
 8001282:	dbd7      	blt.n	8001234 <sh_help+0x10>
	}

	return 0;
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	3710      	adds	r7, #16
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20000304 	.word	0x20000304
 8001294:	08007d30 	.word	0x08007d30
 8001298:	20000604 	.word	0x20000604
 800129c:	20000300 	.word	0x20000300

080012a0 <shell_init>:

void shell_init() {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
	int size = 0;
 80012a6:	2300      	movs	r3, #0
 80012a8:	607b      	str	r3, [r7, #4]

	size = snprintf (print_buffer, BUFFER_SIZE, "\r\n\r\n===== Monsieur Shell v0.2 =====\r\n");
 80012aa:	4a0e      	ldr	r2, [pc, #56]	; (80012e4 <shell_init+0x44>)
 80012ac:	2128      	movs	r1, #40	; 0x28
 80012ae:	480e      	ldr	r0, [pc, #56]	; (80012e8 <shell_init+0x48>)
 80012b0:	f005 faf8 	bl	80068a4 <sniprintf>
 80012b4:	6078      	str	r0, [r7, #4]
	uart_write(print_buffer, size);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	4619      	mov	r1, r3
 80012bc:	480a      	ldr	r0, [pc, #40]	; (80012e8 <shell_init+0x48>)
 80012be:	f7ff ff9d 	bl	80011fc <uart_write>

	sem_uart = xSemaphoreCreateBinary();
 80012c2:	2203      	movs	r2, #3
 80012c4:	2100      	movs	r1, #0
 80012c6:	2001      	movs	r0, #1
 80012c8:	f003 fc4c 	bl	8004b64 <xQueueGenericCreate>
 80012cc:	4603      	mov	r3, r0
 80012ce:	4a07      	ldr	r2, [pc, #28]	; (80012ec <shell_init+0x4c>)
 80012d0:	6013      	str	r3, [r2, #0]

	shell_add('h', sh_help, "Help");
 80012d2:	4a07      	ldr	r2, [pc, #28]	; (80012f0 <shell_init+0x50>)
 80012d4:	4907      	ldr	r1, [pc, #28]	; (80012f4 <shell_init+0x54>)
 80012d6:	2068      	movs	r0, #104	; 0x68
 80012d8:	f000 f80e 	bl	80012f8 <shell_add>
}
 80012dc:	bf00      	nop
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	08007d3c 	.word	0x08007d3c
 80012e8:	20000604 	.word	0x20000604
 80012ec:	2000062c 	.word	0x2000062c
 80012f0:	08007d64 	.word	0x08007d64
 80012f4:	08001225 	.word	0x08001225

080012f8 <shell_add>:

int shell_add(char c, int (* pfunc)(int argc, char ** argv), char * description) {
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	607a      	str	r2, [r7, #4]
 8001304:	73fb      	strb	r3, [r7, #15]
	if (shell_func_list_size < SHELL_FUNC_LIST_MAX_SIZE) {
 8001306:	4b19      	ldr	r3, [pc, #100]	; (800136c <shell_add+0x74>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2b3f      	cmp	r3, #63	; 0x3f
 800130c:	dc26      	bgt.n	800135c <shell_add+0x64>
		shell_func_list[shell_func_list_size].c = c;
 800130e:	4b17      	ldr	r3, [pc, #92]	; (800136c <shell_add+0x74>)
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	4917      	ldr	r1, [pc, #92]	; (8001370 <shell_add+0x78>)
 8001314:	4613      	mov	r3, r2
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	4413      	add	r3, r2
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	440b      	add	r3, r1
 800131e:	7bfa      	ldrb	r2, [r7, #15]
 8001320:	701a      	strb	r2, [r3, #0]
		shell_func_list[shell_func_list_size].func = pfunc;
 8001322:	4b12      	ldr	r3, [pc, #72]	; (800136c <shell_add+0x74>)
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	4912      	ldr	r1, [pc, #72]	; (8001370 <shell_add+0x78>)
 8001328:	4613      	mov	r3, r2
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	4413      	add	r3, r2
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	440b      	add	r3, r1
 8001332:	3304      	adds	r3, #4
 8001334:	68ba      	ldr	r2, [r7, #8]
 8001336:	601a      	str	r2, [r3, #0]
		shell_func_list[shell_func_list_size].description = description;
 8001338:	4b0c      	ldr	r3, [pc, #48]	; (800136c <shell_add+0x74>)
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	490c      	ldr	r1, [pc, #48]	; (8001370 <shell_add+0x78>)
 800133e:	4613      	mov	r3, r2
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	4413      	add	r3, r2
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	440b      	add	r3, r1
 8001348:	3308      	adds	r3, #8
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	601a      	str	r2, [r3, #0]
		shell_func_list_size++;
 800134e:	4b07      	ldr	r3, [pc, #28]	; (800136c <shell_add+0x74>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	3301      	adds	r3, #1
 8001354:	4a05      	ldr	r2, [pc, #20]	; (800136c <shell_add+0x74>)
 8001356:	6013      	str	r3, [r2, #0]
		return 0;
 8001358:	2300      	movs	r3, #0
 800135a:	e001      	b.n	8001360 <shell_add+0x68>
	}

	return -1;
 800135c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001360:	4618      	mov	r0, r3
 8001362:	3714      	adds	r7, #20
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	20000300 	.word	0x20000300
 8001370:	20000304 	.word	0x20000304

08001374 <shell_exec>:

static int shell_exec(char * buf) {
 8001374:	b580      	push	{r7, lr}
 8001376:	b090      	sub	sp, #64	; 0x40
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
	int i;

	char c = buf[0];
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	int argc;
	char * argv[ARGC_MAX];
	char *p;

	for(i = 0 ; i < shell_func_list_size ; i++) {
 8001384:	2300      	movs	r3, #0
 8001386:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001388:	e040      	b.n	800140c <shell_exec+0x98>
		if (shell_func_list[i].c == c) {
 800138a:	492d      	ldr	r1, [pc, #180]	; (8001440 <shell_exec+0xcc>)
 800138c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800138e:	4613      	mov	r3, r2
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	4413      	add	r3, r2
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	440b      	add	r3, r1
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800139e:	429a      	cmp	r2, r3
 80013a0:	d131      	bne.n	8001406 <shell_exec+0x92>
			argc = 1;
 80013a2:	2301      	movs	r3, #1
 80013a4:	63bb      	str	r3, [r7, #56]	; 0x38
			argv[0] = buf;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	60fb      	str	r3, [r7, #12]

			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	637b      	str	r3, [r7, #52]	; 0x34
 80013ae:	e013      	b.n	80013d8 <shell_exec+0x64>
				if(*p == ' ') {
 80013b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	2b20      	cmp	r3, #32
 80013b6:	d10c      	bne.n	80013d2 <shell_exec+0x5e>
					*p = '\0';
 80013b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013ba:	2200      	movs	r2, #0
 80013bc:	701a      	strb	r2, [r3, #0]
					argv[argc++] = p+1;
 80013be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013c0:	1c5a      	adds	r2, r3, #1
 80013c2:	63ba      	str	r2, [r7, #56]	; 0x38
 80013c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80013c6:	3201      	adds	r2, #1
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	3340      	adds	r3, #64	; 0x40
 80013cc:	443b      	add	r3, r7
 80013ce:	f843 2c34 	str.w	r2, [r3, #-52]
			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 80013d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013d4:	3301      	adds	r3, #1
 80013d6:	637b      	str	r3, [r7, #52]	; 0x34
 80013d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d002      	beq.n	80013e6 <shell_exec+0x72>
 80013e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013e2:	2b07      	cmp	r3, #7
 80013e4:	dde4      	ble.n	80013b0 <shell_exec+0x3c>
				}
			}

			return shell_func_list[i].func(argc, argv);
 80013e6:	4916      	ldr	r1, [pc, #88]	; (8001440 <shell_exec+0xcc>)
 80013e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80013ea:	4613      	mov	r3, r2
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	4413      	add	r3, r2
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	440b      	add	r3, r1
 80013f4:	3304      	adds	r3, #4
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f107 020c 	add.w	r2, r7, #12
 80013fc:	4611      	mov	r1, r2
 80013fe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001400:	4798      	blx	r3
 8001402:	4603      	mov	r3, r0
 8001404:	e017      	b.n	8001436 <shell_exec+0xc2>
	for(i = 0 ; i < shell_func_list_size ; i++) {
 8001406:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001408:	3301      	adds	r3, #1
 800140a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800140c:	4b0d      	ldr	r3, [pc, #52]	; (8001444 <shell_exec+0xd0>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001412:	429a      	cmp	r2, r3
 8001414:	dbb9      	blt.n	800138a <shell_exec+0x16>
		}
	}

	int size;
	size = snprintf (print_buffer, BUFFER_SIZE, "%c: no such command\r\n", c);
 8001416:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800141a:	4a0b      	ldr	r2, [pc, #44]	; (8001448 <shell_exec+0xd4>)
 800141c:	2128      	movs	r1, #40	; 0x28
 800141e:	480b      	ldr	r0, [pc, #44]	; (800144c <shell_exec+0xd8>)
 8001420:	f005 fa40 	bl	80068a4 <sniprintf>
 8001424:	62f8      	str	r0, [r7, #44]	; 0x2c
	uart_write(print_buffer, size);
 8001426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001428:	b29b      	uxth	r3, r3
 800142a:	4619      	mov	r1, r3
 800142c:	4807      	ldr	r0, [pc, #28]	; (800144c <shell_exec+0xd8>)
 800142e:	f7ff fee5 	bl	80011fc <uart_write>
	return -1;
 8001432:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001436:	4618      	mov	r0, r3
 8001438:	3740      	adds	r7, #64	; 0x40
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	20000304 	.word	0x20000304
 8001444:	20000300 	.word	0x20000300
 8001448:	08007d6c 	.word	0x08007d6c
 800144c:	20000604 	.word	0x20000604

08001450 <shell_run>:

static char backspace[] = "\b \b";
static char prompt[] = "> ";

int shell_run() {
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
	int reading = 0;
 8001456:	2300      	movs	r3, #0
 8001458:	60fb      	str	r3, [r7, #12]
	int pos = 0;
 800145a:	2300      	movs	r3, #0
 800145c:	60bb      	str	r3, [r7, #8]

	static char cmd_buffer[BUFFER_SIZE];

	while (1) {
		uart_write(prompt, 2);
 800145e:	2102      	movs	r1, #2
 8001460:	482a      	ldr	r0, [pc, #168]	; (800150c <shell_run+0xbc>)
 8001462:	f7ff fecb 	bl	80011fc <uart_write>
		reading = 1;
 8001466:	2301      	movs	r3, #1
 8001468:	60fb      	str	r3, [r7, #12]

		while(reading) {
 800146a:	e047      	b.n	80014fc <shell_run+0xac>
			char c = uart_read();
 800146c:	f7ff fe8c 	bl	8001188 <uart_read>
 8001470:	4603      	mov	r3, r0
 8001472:	70fb      	strb	r3, [r7, #3]
			int size;

			switch (c) {
 8001474:	78fb      	ldrb	r3, [r7, #3]
 8001476:	2b08      	cmp	r3, #8
 8001478:	d025      	beq.n	80014c6 <shell_run+0x76>
 800147a:	2b0d      	cmp	r3, #13
 800147c:	d12e      	bne.n	80014dc <shell_run+0x8c>
			//process RETURN key
			case '\r':
				//case '\n':
				size = snprintf (print_buffer, BUFFER_SIZE, "\r\n");
 800147e:	4a24      	ldr	r2, [pc, #144]	; (8001510 <shell_run+0xc0>)
 8001480:	2128      	movs	r1, #40	; 0x28
 8001482:	4824      	ldr	r0, [pc, #144]	; (8001514 <shell_run+0xc4>)
 8001484:	f005 fa0e 	bl	80068a4 <sniprintf>
 8001488:	6078      	str	r0, [r7, #4]
				uart_write(print_buffer, size);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	b29b      	uxth	r3, r3
 800148e:	4619      	mov	r1, r3
 8001490:	4820      	ldr	r0, [pc, #128]	; (8001514 <shell_run+0xc4>)
 8001492:	f7ff feb3 	bl	80011fc <uart_write>
				cmd_buffer[pos++] = 0;     //add \0 char at end of string
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	1c5a      	adds	r2, r3, #1
 800149a:	60ba      	str	r2, [r7, #8]
 800149c:	4a1e      	ldr	r2, [pc, #120]	; (8001518 <shell_run+0xc8>)
 800149e:	2100      	movs	r1, #0
 80014a0:	54d1      	strb	r1, [r2, r3]
				size = snprintf (print_buffer, BUFFER_SIZE, ":%s\r\n", cmd_buffer);
 80014a2:	4b1d      	ldr	r3, [pc, #116]	; (8001518 <shell_run+0xc8>)
 80014a4:	4a1d      	ldr	r2, [pc, #116]	; (800151c <shell_run+0xcc>)
 80014a6:	2128      	movs	r1, #40	; 0x28
 80014a8:	481a      	ldr	r0, [pc, #104]	; (8001514 <shell_run+0xc4>)
 80014aa:	f005 f9fb 	bl	80068a4 <sniprintf>
 80014ae:	6078      	str	r0, [r7, #4]
				uart_write(print_buffer, size);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	4619      	mov	r1, r3
 80014b6:	4817      	ldr	r0, [pc, #92]	; (8001514 <shell_run+0xc4>)
 80014b8:	f7ff fea0 	bl	80011fc <uart_write>
				reading = 0;        //exit read loop
 80014bc:	2300      	movs	r3, #0
 80014be:	60fb      	str	r3, [r7, #12]
				pos = 0;            //reset buffer
 80014c0:	2300      	movs	r3, #0
 80014c2:	60bb      	str	r3, [r7, #8]
				break;
 80014c4:	e01a      	b.n	80014fc <shell_run+0xac>
				//backspace
			case '\b':
				if (pos > 0) {      //is there a char to delete?
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	dd16      	ble.n	80014fa <shell_run+0xaa>
					pos--;          //remove it in buffer
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	3b01      	subs	r3, #1
 80014d0:	60bb      	str	r3, [r7, #8]

					uart_write(backspace, 3);	// delete the char on the terminal
 80014d2:	2103      	movs	r1, #3
 80014d4:	4812      	ldr	r0, [pc, #72]	; (8001520 <shell_run+0xd0>)
 80014d6:	f7ff fe91 	bl	80011fc <uart_write>
				}
				break;
 80014da:	e00e      	b.n	80014fa <shell_run+0xaa>
				//other characters
			default:
				//only store characters if buffer has space
				if (pos < BUFFER_SIZE) {
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	2b27      	cmp	r3, #39	; 0x27
 80014e0:	dc0c      	bgt.n	80014fc <shell_run+0xac>
					uart_write(&c, 1);
 80014e2:	1cfb      	adds	r3, r7, #3
 80014e4:	2101      	movs	r1, #1
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff fe88 	bl	80011fc <uart_write>
					cmd_buffer[pos++] = c; //store
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	1c5a      	adds	r2, r3, #1
 80014f0:	60ba      	str	r2, [r7, #8]
 80014f2:	78f9      	ldrb	r1, [r7, #3]
 80014f4:	4a08      	ldr	r2, [pc, #32]	; (8001518 <shell_run+0xc8>)
 80014f6:	54d1      	strb	r1, [r2, r3]
 80014f8:	e000      	b.n	80014fc <shell_run+0xac>
				break;
 80014fa:	bf00      	nop
		while(reading) {
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d1b4      	bne.n	800146c <shell_run+0x1c>
				}
			}
		}
		shell_exec(cmd_buffer);
 8001502:	4805      	ldr	r0, [pc, #20]	; (8001518 <shell_run+0xc8>)
 8001504:	f7ff ff36 	bl	8001374 <shell_exec>
		uart_write(prompt, 2);
 8001508:	e7a9      	b.n	800145e <shell_run+0xe>
 800150a:	bf00      	nop
 800150c:	20000004 	.word	0x20000004
 8001510:	08007d84 	.word	0x08007d84
 8001514:	20000604 	.word	0x20000604
 8001518:	20000630 	.word	0x20000630
 800151c:	08007d88 	.word	0x08007d88
 8001520:	20000000 	.word	0x20000000

08001524 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800152a:	4b11      	ldr	r3, [pc, #68]	; (8001570 <HAL_MspInit+0x4c>)
 800152c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152e:	4a10      	ldr	r2, [pc, #64]	; (8001570 <HAL_MspInit+0x4c>)
 8001530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001534:	6413      	str	r3, [r2, #64]	; 0x40
 8001536:	4b0e      	ldr	r3, [pc, #56]	; (8001570 <HAL_MspInit+0x4c>)
 8001538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153e:	607b      	str	r3, [r7, #4]
 8001540:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001542:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <HAL_MspInit+0x4c>)
 8001544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001546:	4a0a      	ldr	r2, [pc, #40]	; (8001570 <HAL_MspInit+0x4c>)
 8001548:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800154c:	6453      	str	r3, [r2, #68]	; 0x44
 800154e:	4b08      	ldr	r3, [pc, #32]	; (8001570 <HAL_MspInit+0x4c>)
 8001550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001552:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001556:	603b      	str	r3, [r7, #0]
 8001558:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800155a:	2200      	movs	r2, #0
 800155c:	210f      	movs	r1, #15
 800155e:	f06f 0001 	mvn.w	r0, #1
 8001562:	f000 fb08 	bl	8001b76 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40023800 	.word	0x40023800

08001574 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001578:	e7fe      	b.n	8001578 <NMI_Handler+0x4>

0800157a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800157a:	b480      	push	{r7}
 800157c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800157e:	e7fe      	b.n	800157e <HardFault_Handler+0x4>

08001580 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001584:	e7fe      	b.n	8001584 <MemManage_Handler+0x4>

08001586 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001586:	b480      	push	{r7}
 8001588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800158a:	e7fe      	b.n	800158a <BusFault_Handler+0x4>

0800158c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001590:	e7fe      	b.n	8001590 <UsageFault_Handler+0x4>

08001592 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001592:	b480      	push	{r7}
 8001594:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001596:	bf00      	nop
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015a4:	f000 f9ec 	bl	8001980 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80015a8:	f004 fb4a 	bl	8005c40 <xTaskGetSchedulerState>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d001      	beq.n	80015b6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80015b2:	f004 fea1 	bl	80062f8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
	...

080015bc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	uart_irq_cb();
 80015c0:	f7ff fdfc 	bl	80011bc <uart_irq_cb>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80015c4:	4802      	ldr	r0, [pc, #8]	; (80015d0 <USART1_IRQHandler+0x14>)
 80015c6:	f001 ff5f 	bl	8003488 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	2000065c 	.word	0x2000065c

080015d4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	60f8      	str	r0, [r7, #12]
 80015dc:	60b9      	str	r1, [r7, #8]
 80015de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015e0:	2300      	movs	r3, #0
 80015e2:	617b      	str	r3, [r7, #20]
 80015e4:	e00a      	b.n	80015fc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80015e6:	f3af 8000 	nop.w
 80015ea:	4601      	mov	r1, r0
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	1c5a      	adds	r2, r3, #1
 80015f0:	60ba      	str	r2, [r7, #8]
 80015f2:	b2ca      	uxtb	r2, r1
 80015f4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	3301      	adds	r3, #1
 80015fa:	617b      	str	r3, [r7, #20]
 80015fc:	697a      	ldr	r2, [r7, #20]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	429a      	cmp	r2, r3
 8001602:	dbf0      	blt.n	80015e6 <_read+0x12>
	}

return len;
 8001604:	687b      	ldr	r3, [r7, #4]
}
 8001606:	4618      	mov	r0, r3
 8001608:	3718      	adds	r7, #24
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	b086      	sub	sp, #24
 8001612:	af00      	add	r7, sp, #0
 8001614:	60f8      	str	r0, [r7, #12]
 8001616:	60b9      	str	r1, [r7, #8]
 8001618:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800161a:	2300      	movs	r3, #0
 800161c:	617b      	str	r3, [r7, #20]
 800161e:	e009      	b.n	8001634 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	1c5a      	adds	r2, r3, #1
 8001624:	60ba      	str	r2, [r7, #8]
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff fc75 	bl	8000f18 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	3301      	adds	r3, #1
 8001632:	617b      	str	r3, [r7, #20]
 8001634:	697a      	ldr	r2, [r7, #20]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	429a      	cmp	r2, r3
 800163a:	dbf1      	blt.n	8001620 <_write+0x12>
	}
	return len;
 800163c:	687b      	ldr	r3, [r7, #4]
}
 800163e:	4618      	mov	r0, r3
 8001640:	3718      	adds	r7, #24
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <_close>:

int _close(int file)
{
 8001646:	b480      	push	{r7}
 8001648:	b083      	sub	sp, #12
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
	return -1;
 800164e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001652:	4618      	mov	r0, r3
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr

0800165e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800165e:	b480      	push	{r7}
 8001660:	b083      	sub	sp, #12
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
 8001666:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800166e:	605a      	str	r2, [r3, #4]
	return 0;
 8001670:	2300      	movs	r3, #0
}
 8001672:	4618      	mov	r0, r3
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr

0800167e <_isatty>:

int _isatty(int file)
{
 800167e:	b480      	push	{r7}
 8001680:	b083      	sub	sp, #12
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
	return 1;
 8001686:	2301      	movs	r3, #1
}
 8001688:	4618      	mov	r0, r3
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001694:	b480      	push	{r7}
 8001696:	b085      	sub	sp, #20
 8001698:	af00      	add	r7, sp, #0
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	60b9      	str	r1, [r7, #8]
 800169e:	607a      	str	r2, [r7, #4]
	return 0;
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3714      	adds	r7, #20
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
	...

080016b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b086      	sub	sp, #24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016b8:	4a14      	ldr	r2, [pc, #80]	; (800170c <_sbrk+0x5c>)
 80016ba:	4b15      	ldr	r3, [pc, #84]	; (8001710 <_sbrk+0x60>)
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016c4:	4b13      	ldr	r3, [pc, #76]	; (8001714 <_sbrk+0x64>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d102      	bne.n	80016d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016cc:	4b11      	ldr	r3, [pc, #68]	; (8001714 <_sbrk+0x64>)
 80016ce:	4a12      	ldr	r2, [pc, #72]	; (8001718 <_sbrk+0x68>)
 80016d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016d2:	4b10      	ldr	r3, [pc, #64]	; (8001714 <_sbrk+0x64>)
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4413      	add	r3, r2
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d207      	bcs.n	80016f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016e0:	f005 f888 	bl	80067f4 <__errno>
 80016e4:	4603      	mov	r3, r0
 80016e6:	220c      	movs	r2, #12
 80016e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016ea:	f04f 33ff 	mov.w	r3, #4294967295
 80016ee:	e009      	b.n	8001704 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016f0:	4b08      	ldr	r3, [pc, #32]	; (8001714 <_sbrk+0x64>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016f6:	4b07      	ldr	r3, [pc, #28]	; (8001714 <_sbrk+0x64>)
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4413      	add	r3, r2
 80016fe:	4a05      	ldr	r2, [pc, #20]	; (8001714 <_sbrk+0x64>)
 8001700:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001702:	68fb      	ldr	r3, [r7, #12]
}
 8001704:	4618      	mov	r0, r3
 8001706:	3718      	adds	r7, #24
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	20050000 	.word	0x20050000
 8001710:	00000400 	.word	0x00000400
 8001714:	20000658 	.word	0x20000658
 8001718:	20004448 	.word	0x20004448

0800171c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001720:	4b06      	ldr	r3, [pc, #24]	; (800173c <SystemInit+0x20>)
 8001722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001726:	4a05      	ldr	r2, [pc, #20]	; (800173c <SystemInit+0x20>)
 8001728:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800172c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	e000ed00 	.word	0xe000ed00

08001740 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001744:	4b14      	ldr	r3, [pc, #80]	; (8001798 <MX_USART1_UART_Init+0x58>)
 8001746:	4a15      	ldr	r2, [pc, #84]	; (800179c <MX_USART1_UART_Init+0x5c>)
 8001748:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800174a:	4b13      	ldr	r3, [pc, #76]	; (8001798 <MX_USART1_UART_Init+0x58>)
 800174c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001750:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001752:	4b11      	ldr	r3, [pc, #68]	; (8001798 <MX_USART1_UART_Init+0x58>)
 8001754:	2200      	movs	r2, #0
 8001756:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001758:	4b0f      	ldr	r3, [pc, #60]	; (8001798 <MX_USART1_UART_Init+0x58>)
 800175a:	2200      	movs	r2, #0
 800175c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800175e:	4b0e      	ldr	r3, [pc, #56]	; (8001798 <MX_USART1_UART_Init+0x58>)
 8001760:	2200      	movs	r2, #0
 8001762:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001764:	4b0c      	ldr	r3, [pc, #48]	; (8001798 <MX_USART1_UART_Init+0x58>)
 8001766:	220c      	movs	r2, #12
 8001768:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800176a:	4b0b      	ldr	r3, [pc, #44]	; (8001798 <MX_USART1_UART_Init+0x58>)
 800176c:	2200      	movs	r2, #0
 800176e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001770:	4b09      	ldr	r3, [pc, #36]	; (8001798 <MX_USART1_UART_Init+0x58>)
 8001772:	2200      	movs	r2, #0
 8001774:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001776:	4b08      	ldr	r3, [pc, #32]	; (8001798 <MX_USART1_UART_Init+0x58>)
 8001778:	2200      	movs	r2, #0
 800177a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800177c:	4b06      	ldr	r3, [pc, #24]	; (8001798 <MX_USART1_UART_Init+0x58>)
 800177e:	2200      	movs	r2, #0
 8001780:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001782:	4805      	ldr	r0, [pc, #20]	; (8001798 <MX_USART1_UART_Init+0x58>)
 8001784:	f001 fd6a 	bl	800325c <HAL_UART_Init>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800178e:	f7ff fcf5 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	2000065c 	.word	0x2000065c
 800179c:	40011000 	.word	0x40011000

080017a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b0ac      	sub	sp, #176	; 0xb0
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	605a      	str	r2, [r3, #4]
 80017b2:	609a      	str	r2, [r3, #8]
 80017b4:	60da      	str	r2, [r3, #12]
 80017b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017b8:	f107 0318 	add.w	r3, r7, #24
 80017bc:	2284      	movs	r2, #132	; 0x84
 80017be:	2100      	movs	r1, #0
 80017c0:	4618      	mov	r0, r3
 80017c2:	f005 f84f 	bl	8006864 <memset>
  if(uartHandle->Instance==USART1)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a36      	ldr	r2, [pc, #216]	; (80018a4 <HAL_UART_MspInit+0x104>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d164      	bne.n	800189a <HAL_UART_MspInit+0xfa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80017d0:	2340      	movs	r3, #64	; 0x40
 80017d2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80017d4:	2300      	movs	r3, #0
 80017d6:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017d8:	f107 0318 	add.w	r3, r7, #24
 80017dc:	4618      	mov	r0, r3
 80017de:	f001 f94d 	bl	8002a7c <HAL_RCCEx_PeriphCLKConfig>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80017e8:	f7ff fcc8 	bl	800117c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017ec:	4b2e      	ldr	r3, [pc, #184]	; (80018a8 <HAL_UART_MspInit+0x108>)
 80017ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f0:	4a2d      	ldr	r2, [pc, #180]	; (80018a8 <HAL_UART_MspInit+0x108>)
 80017f2:	f043 0310 	orr.w	r3, r3, #16
 80017f6:	6453      	str	r3, [r2, #68]	; 0x44
 80017f8:	4b2b      	ldr	r3, [pc, #172]	; (80018a8 <HAL_UART_MspInit+0x108>)
 80017fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fc:	f003 0310 	and.w	r3, r3, #16
 8001800:	617b      	str	r3, [r7, #20]
 8001802:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001804:	4b28      	ldr	r3, [pc, #160]	; (80018a8 <HAL_UART_MspInit+0x108>)
 8001806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001808:	4a27      	ldr	r2, [pc, #156]	; (80018a8 <HAL_UART_MspInit+0x108>)
 800180a:	f043 0302 	orr.w	r3, r3, #2
 800180e:	6313      	str	r3, [r2, #48]	; 0x30
 8001810:	4b25      	ldr	r3, [pc, #148]	; (80018a8 <HAL_UART_MspInit+0x108>)
 8001812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001814:	f003 0302 	and.w	r3, r3, #2
 8001818:	613b      	str	r3, [r7, #16]
 800181a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800181c:	4b22      	ldr	r3, [pc, #136]	; (80018a8 <HAL_UART_MspInit+0x108>)
 800181e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001820:	4a21      	ldr	r2, [pc, #132]	; (80018a8 <HAL_UART_MspInit+0x108>)
 8001822:	f043 0301 	orr.w	r3, r3, #1
 8001826:	6313      	str	r3, [r2, #48]	; 0x30
 8001828:	4b1f      	ldr	r3, [pc, #124]	; (80018a8 <HAL_UART_MspInit+0x108>)
 800182a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182c:	f003 0301 	and.w	r3, r3, #1
 8001830:	60fb      	str	r3, [r7, #12]
 8001832:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001834:	2380      	movs	r3, #128	; 0x80
 8001836:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183a:	2302      	movs	r3, #2
 800183c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	2300      	movs	r3, #0
 8001842:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001846:	2300      	movs	r3, #0
 8001848:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800184c:	2307      	movs	r3, #7
 800184e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001852:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001856:	4619      	mov	r1, r3
 8001858:	4814      	ldr	r0, [pc, #80]	; (80018ac <HAL_UART_MspInit+0x10c>)
 800185a:	f000 fa55 	bl	8001d08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800185e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001862:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001866:	2302      	movs	r3, #2
 8001868:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186c:	2300      	movs	r3, #0
 800186e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001872:	2300      	movs	r3, #0
 8001874:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001878:	2307      	movs	r3, #7
 800187a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800187e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001882:	4619      	mov	r1, r3
 8001884:	480a      	ldr	r0, [pc, #40]	; (80018b0 <HAL_UART_MspInit+0x110>)
 8001886:	f000 fa3f 	bl	8001d08 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800188a:	2200      	movs	r2, #0
 800188c:	2105      	movs	r1, #5
 800188e:	2025      	movs	r0, #37	; 0x25
 8001890:	f000 f971 	bl	8001b76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001894:	2025      	movs	r0, #37	; 0x25
 8001896:	f000 f98a 	bl	8001bae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800189a:	bf00      	nop
 800189c:	37b0      	adds	r7, #176	; 0xb0
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40011000 	.word	0x40011000
 80018a8:	40023800 	.word	0x40023800
 80018ac:	40020400 	.word	0x40020400
 80018b0:	40020000 	.word	0x40020000

080018b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80018b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018ec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018b8:	480d      	ldr	r0, [pc, #52]	; (80018f0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018ba:	490e      	ldr	r1, [pc, #56]	; (80018f4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018bc:	4a0e      	ldr	r2, [pc, #56]	; (80018f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018c0:	e002      	b.n	80018c8 <LoopCopyDataInit>

080018c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018c6:	3304      	adds	r3, #4

080018c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018cc:	d3f9      	bcc.n	80018c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ce:	4a0b      	ldr	r2, [pc, #44]	; (80018fc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018d0:	4c0b      	ldr	r4, [pc, #44]	; (8001900 <LoopFillZerobss+0x26>)
  movs r3, #0
 80018d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018d4:	e001      	b.n	80018da <LoopFillZerobss>

080018d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018d8:	3204      	adds	r2, #4

080018da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018dc:	d3fb      	bcc.n	80018d6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018de:	f7ff ff1d 	bl	800171c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018e2:	f004 ff8d 	bl	8006800 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018e6:	f7ff fb93 	bl	8001010 <main>
  bx  lr    
 80018ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018ec:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80018f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018f4:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80018f8:	08007f5c 	.word	0x08007f5c
  ldr r2, =_sbss
 80018fc:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001900:	20004444 	.word	0x20004444

08001904 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001904:	e7fe      	b.n	8001904 <ADC_IRQHandler>

08001906 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800190a:	2003      	movs	r0, #3
 800190c:	f000 f928 	bl	8001b60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001910:	200f      	movs	r0, #15
 8001912:	f000 f805 	bl	8001920 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001916:	f7ff fe05 	bl	8001524 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800191a:	2300      	movs	r3, #0
}
 800191c:	4618      	mov	r0, r3
 800191e:	bd80      	pop	{r7, pc}

08001920 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001928:	4b12      	ldr	r3, [pc, #72]	; (8001974 <HAL_InitTick+0x54>)
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	4b12      	ldr	r3, [pc, #72]	; (8001978 <HAL_InitTick+0x58>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	4619      	mov	r1, r3
 8001932:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001936:	fbb3 f3f1 	udiv	r3, r3, r1
 800193a:	fbb2 f3f3 	udiv	r3, r2, r3
 800193e:	4618      	mov	r0, r3
 8001940:	f000 f943 	bl	8001bca <HAL_SYSTICK_Config>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e00e      	b.n	800196c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2b0f      	cmp	r3, #15
 8001952:	d80a      	bhi.n	800196a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001954:	2200      	movs	r2, #0
 8001956:	6879      	ldr	r1, [r7, #4]
 8001958:	f04f 30ff 	mov.w	r0, #4294967295
 800195c:	f000 f90b 	bl	8001b76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001960:	4a06      	ldr	r2, [pc, #24]	; (800197c <HAL_InitTick+0x5c>)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001966:	2300      	movs	r3, #0
 8001968:	e000      	b.n	800196c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
}
 800196c:	4618      	mov	r0, r3
 800196e:	3708      	adds	r7, #8
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	20000008 	.word	0x20000008
 8001978:	20000010 	.word	0x20000010
 800197c:	2000000c 	.word	0x2000000c

08001980 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001984:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <HAL_IncTick+0x20>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	461a      	mov	r2, r3
 800198a:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <HAL_IncTick+0x24>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4413      	add	r3, r2
 8001990:	4a04      	ldr	r2, [pc, #16]	; (80019a4 <HAL_IncTick+0x24>)
 8001992:	6013      	str	r3, [r2, #0]
}
 8001994:	bf00      	nop
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	20000010 	.word	0x20000010
 80019a4:	200006e4 	.word	0x200006e4

080019a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  return uwTick;
 80019ac:	4b03      	ldr	r3, [pc, #12]	; (80019bc <HAL_GetTick+0x14>)
 80019ae:	681b      	ldr	r3, [r3, #0]
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	200006e4 	.word	0x200006e4

080019c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f003 0307 	and.w	r3, r3, #7
 80019ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019d0:	4b0b      	ldr	r3, [pc, #44]	; (8001a00 <__NVIC_SetPriorityGrouping+0x40>)
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019d6:	68ba      	ldr	r2, [r7, #8]
 80019d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019dc:	4013      	ands	r3, r2
 80019de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80019e8:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <__NVIC_SetPriorityGrouping+0x44>)
 80019ea:	4313      	orrs	r3, r2
 80019ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ee:	4a04      	ldr	r2, [pc, #16]	; (8001a00 <__NVIC_SetPriorityGrouping+0x40>)
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	60d3      	str	r3, [r2, #12]
}
 80019f4:	bf00      	nop
 80019f6:	3714      	adds	r7, #20
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr
 8001a00:	e000ed00 	.word	0xe000ed00
 8001a04:	05fa0000 	.word	0x05fa0000

08001a08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a0c:	4b04      	ldr	r3, [pc, #16]	; (8001a20 <__NVIC_GetPriorityGrouping+0x18>)
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	0a1b      	lsrs	r3, r3, #8
 8001a12:	f003 0307 	and.w	r3, r3, #7
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	e000ed00 	.word	0xe000ed00

08001a24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	db0b      	blt.n	8001a4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a36:	79fb      	ldrb	r3, [r7, #7]
 8001a38:	f003 021f 	and.w	r2, r3, #31
 8001a3c:	4907      	ldr	r1, [pc, #28]	; (8001a5c <__NVIC_EnableIRQ+0x38>)
 8001a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a42:	095b      	lsrs	r3, r3, #5
 8001a44:	2001      	movs	r0, #1
 8001a46:	fa00 f202 	lsl.w	r2, r0, r2
 8001a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a4e:	bf00      	nop
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	e000e100 	.word	0xe000e100

08001a60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	6039      	str	r1, [r7, #0]
 8001a6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	db0a      	blt.n	8001a8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	b2da      	uxtb	r2, r3
 8001a78:	490c      	ldr	r1, [pc, #48]	; (8001aac <__NVIC_SetPriority+0x4c>)
 8001a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7e:	0112      	lsls	r2, r2, #4
 8001a80:	b2d2      	uxtb	r2, r2
 8001a82:	440b      	add	r3, r1
 8001a84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a88:	e00a      	b.n	8001aa0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	b2da      	uxtb	r2, r3
 8001a8e:	4908      	ldr	r1, [pc, #32]	; (8001ab0 <__NVIC_SetPriority+0x50>)
 8001a90:	79fb      	ldrb	r3, [r7, #7]
 8001a92:	f003 030f 	and.w	r3, r3, #15
 8001a96:	3b04      	subs	r3, #4
 8001a98:	0112      	lsls	r2, r2, #4
 8001a9a:	b2d2      	uxtb	r2, r2
 8001a9c:	440b      	add	r3, r1
 8001a9e:	761a      	strb	r2, [r3, #24]
}
 8001aa0:	bf00      	nop
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	e000e100 	.word	0xe000e100
 8001ab0:	e000ed00 	.word	0xe000ed00

08001ab4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b089      	sub	sp, #36	; 0x24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f003 0307 	and.w	r3, r3, #7
 8001ac6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	f1c3 0307 	rsb	r3, r3, #7
 8001ace:	2b04      	cmp	r3, #4
 8001ad0:	bf28      	it	cs
 8001ad2:	2304      	movcs	r3, #4
 8001ad4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	3304      	adds	r3, #4
 8001ada:	2b06      	cmp	r3, #6
 8001adc:	d902      	bls.n	8001ae4 <NVIC_EncodePriority+0x30>
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	3b03      	subs	r3, #3
 8001ae2:	e000      	b.n	8001ae6 <NVIC_EncodePriority+0x32>
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	43da      	mvns	r2, r3
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	401a      	ands	r2, r3
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001afc:	f04f 31ff 	mov.w	r1, #4294967295
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	fa01 f303 	lsl.w	r3, r1, r3
 8001b06:	43d9      	mvns	r1, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b0c:	4313      	orrs	r3, r2
         );
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3724      	adds	r7, #36	; 0x24
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
	...

08001b1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	3b01      	subs	r3, #1
 8001b28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b2c:	d301      	bcc.n	8001b32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e00f      	b.n	8001b52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b32:	4a0a      	ldr	r2, [pc, #40]	; (8001b5c <SysTick_Config+0x40>)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	3b01      	subs	r3, #1
 8001b38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b3a:	210f      	movs	r1, #15
 8001b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b40:	f7ff ff8e 	bl	8001a60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b44:	4b05      	ldr	r3, [pc, #20]	; (8001b5c <SysTick_Config+0x40>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b4a:	4b04      	ldr	r3, [pc, #16]	; (8001b5c <SysTick_Config+0x40>)
 8001b4c:	2207      	movs	r2, #7
 8001b4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	e000e010 	.word	0xe000e010

08001b60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f7ff ff29 	bl	80019c0 <__NVIC_SetPriorityGrouping>
}
 8001b6e:	bf00      	nop
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b086      	sub	sp, #24
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	60b9      	str	r1, [r7, #8]
 8001b80:	607a      	str	r2, [r7, #4]
 8001b82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b84:	2300      	movs	r3, #0
 8001b86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b88:	f7ff ff3e 	bl	8001a08 <__NVIC_GetPriorityGrouping>
 8001b8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	68b9      	ldr	r1, [r7, #8]
 8001b92:	6978      	ldr	r0, [r7, #20]
 8001b94:	f7ff ff8e 	bl	8001ab4 <NVIC_EncodePriority>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b9e:	4611      	mov	r1, r2
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff ff5d 	bl	8001a60 <__NVIC_SetPriority>
}
 8001ba6:	bf00      	nop
 8001ba8:	3718      	adds	r7, #24
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b082      	sub	sp, #8
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff ff31 	bl	8001a24 <__NVIC_EnableIRQ>
}
 8001bc2:	bf00      	nop
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b082      	sub	sp, #8
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f7ff ffa2 	bl	8001b1c <SysTick_Config>
 8001bd8:	4603      	mov	r3, r0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b084      	sub	sp, #16
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bee:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001bf0:	f7ff feda 	bl	80019a8 <HAL_GetTick>
 8001bf4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d008      	beq.n	8001c14 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2280      	movs	r2, #128	; 0x80
 8001c06:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e052      	b.n	8001cba <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f022 0216 	bic.w	r2, r2, #22
 8001c22:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	695a      	ldr	r2, [r3, #20]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c32:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d103      	bne.n	8001c44 <HAL_DMA_Abort+0x62>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d007      	beq.n	8001c54 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f022 0208 	bic.w	r2, r2, #8
 8001c52:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f022 0201 	bic.w	r2, r2, #1
 8001c62:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c64:	e013      	b.n	8001c8e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c66:	f7ff fe9f 	bl	80019a8 <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2b05      	cmp	r3, #5
 8001c72:	d90c      	bls.n	8001c8e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2220      	movs	r2, #32
 8001c78:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2203      	movs	r2, #3
 8001c7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e015      	b.n	8001cba <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0301 	and.w	r3, r3, #1
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d1e4      	bne.n	8001c66 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ca0:	223f      	movs	r2, #63	; 0x3f
 8001ca2:	409a      	lsls	r2, r3
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3710      	adds	r7, #16
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	b083      	sub	sp, #12
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d004      	beq.n	8001ce0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2280      	movs	r2, #128	; 0x80
 8001cda:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e00c      	b.n	8001cfa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2205      	movs	r2, #5
 8001ce4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f022 0201 	bic.w	r2, r2, #1
 8001cf6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
	...

08001d08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b089      	sub	sp, #36	; 0x24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001d12:	2300      	movs	r3, #0
 8001d14:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001d16:	2300      	movs	r3, #0
 8001d18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001d22:	2300      	movs	r3, #0
 8001d24:	61fb      	str	r3, [r7, #28]
 8001d26:	e175      	b.n	8002014 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001d28:	2201      	movs	r2, #1
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	697a      	ldr	r2, [r7, #20]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d3c:	693a      	ldr	r2, [r7, #16]
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	f040 8164 	bne.w	800200e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f003 0303 	and.w	r3, r3, #3
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d005      	beq.n	8001d5e <HAL_GPIO_Init+0x56>
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f003 0303 	and.w	r3, r3, #3
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d130      	bne.n	8001dc0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	2203      	movs	r2, #3
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	43db      	mvns	r3, r3
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	4013      	ands	r3, r2
 8001d74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	68da      	ldr	r2, [r3, #12]
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d94:	2201      	movs	r2, #1
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	4013      	ands	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	091b      	lsrs	r3, r3, #4
 8001daa:	f003 0201 	and.w	r2, r3, #1
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f003 0303 	and.w	r3, r3, #3
 8001dc8:	2b03      	cmp	r3, #3
 8001dca:	d017      	beq.n	8001dfc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	2203      	movs	r2, #3
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	4013      	ands	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	689a      	ldr	r2, [r3, #8]
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f003 0303 	and.w	r3, r3, #3
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d123      	bne.n	8001e50 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	08da      	lsrs	r2, r3, #3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	3208      	adds	r2, #8
 8001e10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	f003 0307 	and.w	r3, r3, #7
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	220f      	movs	r2, #15
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	43db      	mvns	r3, r3
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	691a      	ldr	r2, [r3, #16]
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	f003 0307 	and.w	r3, r3, #7
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	08da      	lsrs	r2, r3, #3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	3208      	adds	r2, #8
 8001e4a:	69b9      	ldr	r1, [r7, #24]
 8001e4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	2203      	movs	r2, #3
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	43db      	mvns	r3, r3
 8001e62:	69ba      	ldr	r2, [r7, #24]
 8001e64:	4013      	ands	r3, r2
 8001e66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f003 0203 	and.w	r2, r3, #3
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	f000 80be 	beq.w	800200e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e92:	4b66      	ldr	r3, [pc, #408]	; (800202c <HAL_GPIO_Init+0x324>)
 8001e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e96:	4a65      	ldr	r2, [pc, #404]	; (800202c <HAL_GPIO_Init+0x324>)
 8001e98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e9e:	4b63      	ldr	r3, [pc, #396]	; (800202c <HAL_GPIO_Init+0x324>)
 8001ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ea6:	60fb      	str	r3, [r7, #12]
 8001ea8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001eaa:	4a61      	ldr	r2, [pc, #388]	; (8002030 <HAL_GPIO_Init+0x328>)
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	089b      	lsrs	r3, r3, #2
 8001eb0:	3302      	adds	r3, #2
 8001eb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	f003 0303 	and.w	r3, r3, #3
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	220f      	movs	r2, #15
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	43db      	mvns	r3, r3
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a58      	ldr	r2, [pc, #352]	; (8002034 <HAL_GPIO_Init+0x32c>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d037      	beq.n	8001f46 <HAL_GPIO_Init+0x23e>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a57      	ldr	r2, [pc, #348]	; (8002038 <HAL_GPIO_Init+0x330>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d031      	beq.n	8001f42 <HAL_GPIO_Init+0x23a>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a56      	ldr	r2, [pc, #344]	; (800203c <HAL_GPIO_Init+0x334>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d02b      	beq.n	8001f3e <HAL_GPIO_Init+0x236>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a55      	ldr	r2, [pc, #340]	; (8002040 <HAL_GPIO_Init+0x338>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d025      	beq.n	8001f3a <HAL_GPIO_Init+0x232>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a54      	ldr	r2, [pc, #336]	; (8002044 <HAL_GPIO_Init+0x33c>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d01f      	beq.n	8001f36 <HAL_GPIO_Init+0x22e>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a53      	ldr	r2, [pc, #332]	; (8002048 <HAL_GPIO_Init+0x340>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d019      	beq.n	8001f32 <HAL_GPIO_Init+0x22a>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a52      	ldr	r2, [pc, #328]	; (800204c <HAL_GPIO_Init+0x344>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d013      	beq.n	8001f2e <HAL_GPIO_Init+0x226>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a51      	ldr	r2, [pc, #324]	; (8002050 <HAL_GPIO_Init+0x348>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d00d      	beq.n	8001f2a <HAL_GPIO_Init+0x222>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a50      	ldr	r2, [pc, #320]	; (8002054 <HAL_GPIO_Init+0x34c>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d007      	beq.n	8001f26 <HAL_GPIO_Init+0x21e>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a4f      	ldr	r2, [pc, #316]	; (8002058 <HAL_GPIO_Init+0x350>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d101      	bne.n	8001f22 <HAL_GPIO_Init+0x21a>
 8001f1e:	2309      	movs	r3, #9
 8001f20:	e012      	b.n	8001f48 <HAL_GPIO_Init+0x240>
 8001f22:	230a      	movs	r3, #10
 8001f24:	e010      	b.n	8001f48 <HAL_GPIO_Init+0x240>
 8001f26:	2308      	movs	r3, #8
 8001f28:	e00e      	b.n	8001f48 <HAL_GPIO_Init+0x240>
 8001f2a:	2307      	movs	r3, #7
 8001f2c:	e00c      	b.n	8001f48 <HAL_GPIO_Init+0x240>
 8001f2e:	2306      	movs	r3, #6
 8001f30:	e00a      	b.n	8001f48 <HAL_GPIO_Init+0x240>
 8001f32:	2305      	movs	r3, #5
 8001f34:	e008      	b.n	8001f48 <HAL_GPIO_Init+0x240>
 8001f36:	2304      	movs	r3, #4
 8001f38:	e006      	b.n	8001f48 <HAL_GPIO_Init+0x240>
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e004      	b.n	8001f48 <HAL_GPIO_Init+0x240>
 8001f3e:	2302      	movs	r3, #2
 8001f40:	e002      	b.n	8001f48 <HAL_GPIO_Init+0x240>
 8001f42:	2301      	movs	r3, #1
 8001f44:	e000      	b.n	8001f48 <HAL_GPIO_Init+0x240>
 8001f46:	2300      	movs	r3, #0
 8001f48:	69fa      	ldr	r2, [r7, #28]
 8001f4a:	f002 0203 	and.w	r2, r2, #3
 8001f4e:	0092      	lsls	r2, r2, #2
 8001f50:	4093      	lsls	r3, r2
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001f58:	4935      	ldr	r1, [pc, #212]	; (8002030 <HAL_GPIO_Init+0x328>)
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	089b      	lsrs	r3, r3, #2
 8001f5e:	3302      	adds	r3, #2
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f66:	4b3d      	ldr	r3, [pc, #244]	; (800205c <HAL_GPIO_Init+0x354>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	43db      	mvns	r3, r3
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	4013      	ands	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d003      	beq.n	8001f8a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f8a:	4a34      	ldr	r2, [pc, #208]	; (800205c <HAL_GPIO_Init+0x354>)
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f90:	4b32      	ldr	r3, [pc, #200]	; (800205c <HAL_GPIO_Init+0x354>)
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d003      	beq.n	8001fb4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fb4:	4a29      	ldr	r2, [pc, #164]	; (800205c <HAL_GPIO_Init+0x354>)
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fba:	4b28      	ldr	r3, [pc, #160]	; (800205c <HAL_GPIO_Init+0x354>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	43db      	mvns	r3, r3
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d003      	beq.n	8001fde <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fde:	4a1f      	ldr	r2, [pc, #124]	; (800205c <HAL_GPIO_Init+0x354>)
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fe4:	4b1d      	ldr	r3, [pc, #116]	; (800205c <HAL_GPIO_Init+0x354>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	43db      	mvns	r3, r3
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d003      	beq.n	8002008 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	4313      	orrs	r3, r2
 8002006:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002008:	4a14      	ldr	r2, [pc, #80]	; (800205c <HAL_GPIO_Init+0x354>)
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	3301      	adds	r3, #1
 8002012:	61fb      	str	r3, [r7, #28]
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	2b0f      	cmp	r3, #15
 8002018:	f67f ae86 	bls.w	8001d28 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800201c:	bf00      	nop
 800201e:	bf00      	nop
 8002020:	3724      	adds	r7, #36	; 0x24
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	40023800 	.word	0x40023800
 8002030:	40013800 	.word	0x40013800
 8002034:	40020000 	.word	0x40020000
 8002038:	40020400 	.word	0x40020400
 800203c:	40020800 	.word	0x40020800
 8002040:	40020c00 	.word	0x40020c00
 8002044:	40021000 	.word	0x40021000
 8002048:	40021400 	.word	0x40021400
 800204c:	40021800 	.word	0x40021800
 8002050:	40021c00 	.word	0x40021c00
 8002054:	40022000 	.word	0x40022000
 8002058:	40022400 	.word	0x40022400
 800205c:	40013c00 	.word	0x40013c00

08002060 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	460b      	mov	r3, r1
 800206a:	807b      	strh	r3, [r7, #2]
 800206c:	4613      	mov	r3, r2
 800206e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002070:	787b      	ldrb	r3, [r7, #1]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d003      	beq.n	800207e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002076:	887a      	ldrh	r2, [r7, #2]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800207c:	e003      	b.n	8002086 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800207e:	887b      	ldrh	r3, [r7, #2]
 8002080:	041a      	lsls	r2, r3, #16
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	619a      	str	r2, [r3, #24]
}
 8002086:	bf00      	nop
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr

08002092 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002092:	b480      	push	{r7}
 8002094:	b085      	sub	sp, #20
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
 800209a:	460b      	mov	r3, r1
 800209c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	695b      	ldr	r3, [r3, #20]
 80020a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020a4:	887a      	ldrh	r2, [r7, #2]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	4013      	ands	r3, r2
 80020aa:	041a      	lsls	r2, r3, #16
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	43d9      	mvns	r1, r3
 80020b0:	887b      	ldrh	r3, [r7, #2]
 80020b2:	400b      	ands	r3, r1
 80020b4:	431a      	orrs	r2, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	619a      	str	r2, [r3, #24]
}
 80020ba:	bf00      	nop
 80020bc:	3714      	adds	r7, #20
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
	...

080020c8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80020ce:	2300      	movs	r3, #0
 80020d0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80020d2:	4b23      	ldr	r3, [pc, #140]	; (8002160 <HAL_PWREx_EnableOverDrive+0x98>)
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	4a22      	ldr	r2, [pc, #136]	; (8002160 <HAL_PWREx_EnableOverDrive+0x98>)
 80020d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020dc:	6413      	str	r3, [r2, #64]	; 0x40
 80020de:	4b20      	ldr	r3, [pc, #128]	; (8002160 <HAL_PWREx_EnableOverDrive+0x98>)
 80020e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e6:	603b      	str	r3, [r7, #0]
 80020e8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80020ea:	4b1e      	ldr	r3, [pc, #120]	; (8002164 <HAL_PWREx_EnableOverDrive+0x9c>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a1d      	ldr	r2, [pc, #116]	; (8002164 <HAL_PWREx_EnableOverDrive+0x9c>)
 80020f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020f4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020f6:	f7ff fc57 	bl	80019a8 <HAL_GetTick>
 80020fa:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80020fc:	e009      	b.n	8002112 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80020fe:	f7ff fc53 	bl	80019a8 <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800210c:	d901      	bls.n	8002112 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e022      	b.n	8002158 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002112:	4b14      	ldr	r3, [pc, #80]	; (8002164 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800211a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800211e:	d1ee      	bne.n	80020fe <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002120:	4b10      	ldr	r3, [pc, #64]	; (8002164 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a0f      	ldr	r2, [pc, #60]	; (8002164 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002126:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800212a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800212c:	f7ff fc3c 	bl	80019a8 <HAL_GetTick>
 8002130:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002132:	e009      	b.n	8002148 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002134:	f7ff fc38 	bl	80019a8 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002142:	d901      	bls.n	8002148 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e007      	b.n	8002158 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002148:	4b06      	ldr	r3, [pc, #24]	; (8002164 <HAL_PWREx_EnableOverDrive+0x9c>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002150:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002154:	d1ee      	bne.n	8002134 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002156:	2300      	movs	r3, #0
}
 8002158:	4618      	mov	r0, r3
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40023800 	.word	0x40023800
 8002164:	40007000 	.word	0x40007000

08002168 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002170:	2300      	movs	r3, #0
 8002172:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d101      	bne.n	800217e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e291      	b.n	80026a2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	2b00      	cmp	r3, #0
 8002188:	f000 8087 	beq.w	800229a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800218c:	4b96      	ldr	r3, [pc, #600]	; (80023e8 <HAL_RCC_OscConfig+0x280>)
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f003 030c 	and.w	r3, r3, #12
 8002194:	2b04      	cmp	r3, #4
 8002196:	d00c      	beq.n	80021b2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002198:	4b93      	ldr	r3, [pc, #588]	; (80023e8 <HAL_RCC_OscConfig+0x280>)
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	f003 030c 	and.w	r3, r3, #12
 80021a0:	2b08      	cmp	r3, #8
 80021a2:	d112      	bne.n	80021ca <HAL_RCC_OscConfig+0x62>
 80021a4:	4b90      	ldr	r3, [pc, #576]	; (80023e8 <HAL_RCC_OscConfig+0x280>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021b0:	d10b      	bne.n	80021ca <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021b2:	4b8d      	ldr	r3, [pc, #564]	; (80023e8 <HAL_RCC_OscConfig+0x280>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d06c      	beq.n	8002298 <HAL_RCC_OscConfig+0x130>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d168      	bne.n	8002298 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e26b      	b.n	80026a2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021d2:	d106      	bne.n	80021e2 <HAL_RCC_OscConfig+0x7a>
 80021d4:	4b84      	ldr	r3, [pc, #528]	; (80023e8 <HAL_RCC_OscConfig+0x280>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a83      	ldr	r2, [pc, #524]	; (80023e8 <HAL_RCC_OscConfig+0x280>)
 80021da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021de:	6013      	str	r3, [r2, #0]
 80021e0:	e02e      	b.n	8002240 <HAL_RCC_OscConfig+0xd8>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d10c      	bne.n	8002204 <HAL_RCC_OscConfig+0x9c>
 80021ea:	4b7f      	ldr	r3, [pc, #508]	; (80023e8 <HAL_RCC_OscConfig+0x280>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a7e      	ldr	r2, [pc, #504]	; (80023e8 <HAL_RCC_OscConfig+0x280>)
 80021f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021f4:	6013      	str	r3, [r2, #0]
 80021f6:	4b7c      	ldr	r3, [pc, #496]	; (80023e8 <HAL_RCC_OscConfig+0x280>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a7b      	ldr	r2, [pc, #492]	; (80023e8 <HAL_RCC_OscConfig+0x280>)
 80021fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002200:	6013      	str	r3, [r2, #0]
 8002202:	e01d      	b.n	8002240 <HAL_RCC_OscConfig+0xd8>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800220c:	d10c      	bne.n	8002228 <HAL_RCC_OscConfig+0xc0>
 800220e:	4b76      	ldr	r3, [pc, #472]	; (80023e8 <HAL_RCC_OscConfig+0x280>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a75      	ldr	r2, [pc, #468]	; (80023e8 <HAL_RCC_OscConfig+0x280>)
 8002214:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002218:	6013      	str	r3, [r2, #0]
 800221a:	4b73      	ldr	r3, [pc, #460]	; (80023e8 <HAL_RCC_OscConfig+0x280>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a72      	ldr	r2, [pc, #456]	; (80023e8 <HAL_RCC_OscConfig+0x280>)
 8002220:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002224:	6013      	str	r3, [r2, #0]
 8002226:	e00b      	b.n	8002240 <HAL_RCC_OscConfig+0xd8>
 8002228:	4b6f      	ldr	r3, [pc, #444]	; (80023e8 <HAL_RCC_OscConfig+0x280>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a6e      	ldr	r2, [pc, #440]	; (80023e8 <HAL_RCC_OscConfig+0x280>)
 800222e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002232:	6013      	str	r3, [r2, #0]
 8002234:	4b6c      	ldr	r3, [pc, #432]	; (80023e8 <HAL_RCC_OscConfig+0x280>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a6b      	ldr	r2, [pc, #428]	; (80023e8 <HAL_RCC_OscConfig+0x280>)
 800223a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800223e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d013      	beq.n	8002270 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002248:	f7ff fbae 	bl	80019a8 <HAL_GetTick>
 800224c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800224e:	e008      	b.n	8002262 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002250:	f7ff fbaa 	bl	80019a8 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b64      	cmp	r3, #100	; 0x64
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e21f      	b.n	80026a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002262:	4b61      	ldr	r3, [pc, #388]	; (80023e8 <HAL_RCC_OscConfig+0x280>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d0f0      	beq.n	8002250 <HAL_RCC_OscConfig+0xe8>
 800226e:	e014      	b.n	800229a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002270:	f7ff fb9a 	bl	80019a8 <HAL_GetTick>
 8002274:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002276:	e008      	b.n	800228a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002278:	f7ff fb96 	bl	80019a8 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b64      	cmp	r3, #100	; 0x64
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e20b      	b.n	80026a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800228a:	4b57      	ldr	r3, [pc, #348]	; (80023e8 <HAL_RCC_OscConfig+0x280>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1f0      	bne.n	8002278 <HAL_RCC_OscConfig+0x110>
 8002296:	e000      	b.n	800229a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002298:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d069      	beq.n	800237a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022a6:	4b50      	ldr	r3, [pc, #320]	; (80023e8 <HAL_RCC_OscConfig+0x280>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f003 030c 	and.w	r3, r3, #12
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d00b      	beq.n	80022ca <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022b2:	4b4d      	ldr	r3, [pc, #308]	; (80023e8 <HAL_RCC_OscConfig+0x280>)
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f003 030c 	and.w	r3, r3, #12
 80022ba:	2b08      	cmp	r3, #8
 80022bc:	d11c      	bne.n	80022f8 <HAL_RCC_OscConfig+0x190>
 80022be:	4b4a      	ldr	r3, [pc, #296]	; (80023e8 <HAL_RCC_OscConfig+0x280>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d116      	bne.n	80022f8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ca:	4b47      	ldr	r3, [pc, #284]	; (80023e8 <HAL_RCC_OscConfig+0x280>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0302 	and.w	r3, r3, #2
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d005      	beq.n	80022e2 <HAL_RCC_OscConfig+0x17a>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d001      	beq.n	80022e2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e1df      	b.n	80026a2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022e2:	4b41      	ldr	r3, [pc, #260]	; (80023e8 <HAL_RCC_OscConfig+0x280>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	00db      	lsls	r3, r3, #3
 80022f0:	493d      	ldr	r1, [pc, #244]	; (80023e8 <HAL_RCC_OscConfig+0x280>)
 80022f2:	4313      	orrs	r3, r2
 80022f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022f6:	e040      	b.n	800237a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d023      	beq.n	8002348 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002300:	4b39      	ldr	r3, [pc, #228]	; (80023e8 <HAL_RCC_OscConfig+0x280>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a38      	ldr	r2, [pc, #224]	; (80023e8 <HAL_RCC_OscConfig+0x280>)
 8002306:	f043 0301 	orr.w	r3, r3, #1
 800230a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800230c:	f7ff fb4c 	bl	80019a8 <HAL_GetTick>
 8002310:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002312:	e008      	b.n	8002326 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002314:	f7ff fb48 	bl	80019a8 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b02      	cmp	r3, #2
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e1bd      	b.n	80026a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002326:	4b30      	ldr	r3, [pc, #192]	; (80023e8 <HAL_RCC_OscConfig+0x280>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d0f0      	beq.n	8002314 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002332:	4b2d      	ldr	r3, [pc, #180]	; (80023e8 <HAL_RCC_OscConfig+0x280>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	00db      	lsls	r3, r3, #3
 8002340:	4929      	ldr	r1, [pc, #164]	; (80023e8 <HAL_RCC_OscConfig+0x280>)
 8002342:	4313      	orrs	r3, r2
 8002344:	600b      	str	r3, [r1, #0]
 8002346:	e018      	b.n	800237a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002348:	4b27      	ldr	r3, [pc, #156]	; (80023e8 <HAL_RCC_OscConfig+0x280>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a26      	ldr	r2, [pc, #152]	; (80023e8 <HAL_RCC_OscConfig+0x280>)
 800234e:	f023 0301 	bic.w	r3, r3, #1
 8002352:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002354:	f7ff fb28 	bl	80019a8 <HAL_GetTick>
 8002358:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800235a:	e008      	b.n	800236e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800235c:	f7ff fb24 	bl	80019a8 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b02      	cmp	r3, #2
 8002368:	d901      	bls.n	800236e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e199      	b.n	80026a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800236e:	4b1e      	ldr	r3, [pc, #120]	; (80023e8 <HAL_RCC_OscConfig+0x280>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	2b00      	cmp	r3, #0
 8002378:	d1f0      	bne.n	800235c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0308 	and.w	r3, r3, #8
 8002382:	2b00      	cmp	r3, #0
 8002384:	d038      	beq.n	80023f8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d019      	beq.n	80023c2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800238e:	4b16      	ldr	r3, [pc, #88]	; (80023e8 <HAL_RCC_OscConfig+0x280>)
 8002390:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002392:	4a15      	ldr	r2, [pc, #84]	; (80023e8 <HAL_RCC_OscConfig+0x280>)
 8002394:	f043 0301 	orr.w	r3, r3, #1
 8002398:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800239a:	f7ff fb05 	bl	80019a8 <HAL_GetTick>
 800239e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023a0:	e008      	b.n	80023b4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023a2:	f7ff fb01 	bl	80019a8 <HAL_GetTick>
 80023a6:	4602      	mov	r2, r0
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d901      	bls.n	80023b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e176      	b.n	80026a2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023b4:	4b0c      	ldr	r3, [pc, #48]	; (80023e8 <HAL_RCC_OscConfig+0x280>)
 80023b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023b8:	f003 0302 	and.w	r3, r3, #2
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d0f0      	beq.n	80023a2 <HAL_RCC_OscConfig+0x23a>
 80023c0:	e01a      	b.n	80023f8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023c2:	4b09      	ldr	r3, [pc, #36]	; (80023e8 <HAL_RCC_OscConfig+0x280>)
 80023c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023c6:	4a08      	ldr	r2, [pc, #32]	; (80023e8 <HAL_RCC_OscConfig+0x280>)
 80023c8:	f023 0301 	bic.w	r3, r3, #1
 80023cc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ce:	f7ff faeb 	bl	80019a8 <HAL_GetTick>
 80023d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023d4:	e00a      	b.n	80023ec <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023d6:	f7ff fae7 	bl	80019a8 <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d903      	bls.n	80023ec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e15c      	b.n	80026a2 <HAL_RCC_OscConfig+0x53a>
 80023e8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023ec:	4b91      	ldr	r3, [pc, #580]	; (8002634 <HAL_RCC_OscConfig+0x4cc>)
 80023ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023f0:	f003 0302 	and.w	r3, r3, #2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d1ee      	bne.n	80023d6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0304 	and.w	r3, r3, #4
 8002400:	2b00      	cmp	r3, #0
 8002402:	f000 80a4 	beq.w	800254e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002406:	4b8b      	ldr	r3, [pc, #556]	; (8002634 <HAL_RCC_OscConfig+0x4cc>)
 8002408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d10d      	bne.n	800242e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002412:	4b88      	ldr	r3, [pc, #544]	; (8002634 <HAL_RCC_OscConfig+0x4cc>)
 8002414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002416:	4a87      	ldr	r2, [pc, #540]	; (8002634 <HAL_RCC_OscConfig+0x4cc>)
 8002418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800241c:	6413      	str	r3, [r2, #64]	; 0x40
 800241e:	4b85      	ldr	r3, [pc, #532]	; (8002634 <HAL_RCC_OscConfig+0x4cc>)
 8002420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002426:	60bb      	str	r3, [r7, #8]
 8002428:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800242a:	2301      	movs	r3, #1
 800242c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800242e:	4b82      	ldr	r3, [pc, #520]	; (8002638 <HAL_RCC_OscConfig+0x4d0>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002436:	2b00      	cmp	r3, #0
 8002438:	d118      	bne.n	800246c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800243a:	4b7f      	ldr	r3, [pc, #508]	; (8002638 <HAL_RCC_OscConfig+0x4d0>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a7e      	ldr	r2, [pc, #504]	; (8002638 <HAL_RCC_OscConfig+0x4d0>)
 8002440:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002444:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002446:	f7ff faaf 	bl	80019a8 <HAL_GetTick>
 800244a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800244c:	e008      	b.n	8002460 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800244e:	f7ff faab 	bl	80019a8 <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b64      	cmp	r3, #100	; 0x64
 800245a:	d901      	bls.n	8002460 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e120      	b.n	80026a2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002460:	4b75      	ldr	r3, [pc, #468]	; (8002638 <HAL_RCC_OscConfig+0x4d0>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002468:	2b00      	cmp	r3, #0
 800246a:	d0f0      	beq.n	800244e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d106      	bne.n	8002482 <HAL_RCC_OscConfig+0x31a>
 8002474:	4b6f      	ldr	r3, [pc, #444]	; (8002634 <HAL_RCC_OscConfig+0x4cc>)
 8002476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002478:	4a6e      	ldr	r2, [pc, #440]	; (8002634 <HAL_RCC_OscConfig+0x4cc>)
 800247a:	f043 0301 	orr.w	r3, r3, #1
 800247e:	6713      	str	r3, [r2, #112]	; 0x70
 8002480:	e02d      	b.n	80024de <HAL_RCC_OscConfig+0x376>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d10c      	bne.n	80024a4 <HAL_RCC_OscConfig+0x33c>
 800248a:	4b6a      	ldr	r3, [pc, #424]	; (8002634 <HAL_RCC_OscConfig+0x4cc>)
 800248c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800248e:	4a69      	ldr	r2, [pc, #420]	; (8002634 <HAL_RCC_OscConfig+0x4cc>)
 8002490:	f023 0301 	bic.w	r3, r3, #1
 8002494:	6713      	str	r3, [r2, #112]	; 0x70
 8002496:	4b67      	ldr	r3, [pc, #412]	; (8002634 <HAL_RCC_OscConfig+0x4cc>)
 8002498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800249a:	4a66      	ldr	r2, [pc, #408]	; (8002634 <HAL_RCC_OscConfig+0x4cc>)
 800249c:	f023 0304 	bic.w	r3, r3, #4
 80024a0:	6713      	str	r3, [r2, #112]	; 0x70
 80024a2:	e01c      	b.n	80024de <HAL_RCC_OscConfig+0x376>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	2b05      	cmp	r3, #5
 80024aa:	d10c      	bne.n	80024c6 <HAL_RCC_OscConfig+0x35e>
 80024ac:	4b61      	ldr	r3, [pc, #388]	; (8002634 <HAL_RCC_OscConfig+0x4cc>)
 80024ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b0:	4a60      	ldr	r2, [pc, #384]	; (8002634 <HAL_RCC_OscConfig+0x4cc>)
 80024b2:	f043 0304 	orr.w	r3, r3, #4
 80024b6:	6713      	str	r3, [r2, #112]	; 0x70
 80024b8:	4b5e      	ldr	r3, [pc, #376]	; (8002634 <HAL_RCC_OscConfig+0x4cc>)
 80024ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024bc:	4a5d      	ldr	r2, [pc, #372]	; (8002634 <HAL_RCC_OscConfig+0x4cc>)
 80024be:	f043 0301 	orr.w	r3, r3, #1
 80024c2:	6713      	str	r3, [r2, #112]	; 0x70
 80024c4:	e00b      	b.n	80024de <HAL_RCC_OscConfig+0x376>
 80024c6:	4b5b      	ldr	r3, [pc, #364]	; (8002634 <HAL_RCC_OscConfig+0x4cc>)
 80024c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ca:	4a5a      	ldr	r2, [pc, #360]	; (8002634 <HAL_RCC_OscConfig+0x4cc>)
 80024cc:	f023 0301 	bic.w	r3, r3, #1
 80024d0:	6713      	str	r3, [r2, #112]	; 0x70
 80024d2:	4b58      	ldr	r3, [pc, #352]	; (8002634 <HAL_RCC_OscConfig+0x4cc>)
 80024d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d6:	4a57      	ldr	r2, [pc, #348]	; (8002634 <HAL_RCC_OscConfig+0x4cc>)
 80024d8:	f023 0304 	bic.w	r3, r3, #4
 80024dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d015      	beq.n	8002512 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024e6:	f7ff fa5f 	bl	80019a8 <HAL_GetTick>
 80024ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ec:	e00a      	b.n	8002504 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ee:	f7ff fa5b 	bl	80019a8 <HAL_GetTick>
 80024f2:	4602      	mov	r2, r0
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d901      	bls.n	8002504 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e0ce      	b.n	80026a2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002504:	4b4b      	ldr	r3, [pc, #300]	; (8002634 <HAL_RCC_OscConfig+0x4cc>)
 8002506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002508:	f003 0302 	and.w	r3, r3, #2
 800250c:	2b00      	cmp	r3, #0
 800250e:	d0ee      	beq.n	80024ee <HAL_RCC_OscConfig+0x386>
 8002510:	e014      	b.n	800253c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002512:	f7ff fa49 	bl	80019a8 <HAL_GetTick>
 8002516:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002518:	e00a      	b.n	8002530 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800251a:	f7ff fa45 	bl	80019a8 <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	f241 3288 	movw	r2, #5000	; 0x1388
 8002528:	4293      	cmp	r3, r2
 800252a:	d901      	bls.n	8002530 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e0b8      	b.n	80026a2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002530:	4b40      	ldr	r3, [pc, #256]	; (8002634 <HAL_RCC_OscConfig+0x4cc>)
 8002532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002534:	f003 0302 	and.w	r3, r3, #2
 8002538:	2b00      	cmp	r3, #0
 800253a:	d1ee      	bne.n	800251a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800253c:	7dfb      	ldrb	r3, [r7, #23]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d105      	bne.n	800254e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002542:	4b3c      	ldr	r3, [pc, #240]	; (8002634 <HAL_RCC_OscConfig+0x4cc>)
 8002544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002546:	4a3b      	ldr	r2, [pc, #236]	; (8002634 <HAL_RCC_OscConfig+0x4cc>)
 8002548:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800254c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	2b00      	cmp	r3, #0
 8002554:	f000 80a4 	beq.w	80026a0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002558:	4b36      	ldr	r3, [pc, #216]	; (8002634 <HAL_RCC_OscConfig+0x4cc>)
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	f003 030c 	and.w	r3, r3, #12
 8002560:	2b08      	cmp	r3, #8
 8002562:	d06b      	beq.n	800263c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	2b02      	cmp	r3, #2
 800256a:	d149      	bne.n	8002600 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800256c:	4b31      	ldr	r3, [pc, #196]	; (8002634 <HAL_RCC_OscConfig+0x4cc>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a30      	ldr	r2, [pc, #192]	; (8002634 <HAL_RCC_OscConfig+0x4cc>)
 8002572:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002576:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002578:	f7ff fa16 	bl	80019a8 <HAL_GetTick>
 800257c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800257e:	e008      	b.n	8002592 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002580:	f7ff fa12 	bl	80019a8 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e087      	b.n	80026a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002592:	4b28      	ldr	r3, [pc, #160]	; (8002634 <HAL_RCC_OscConfig+0x4cc>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d1f0      	bne.n	8002580 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	69da      	ldr	r2, [r3, #28]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a1b      	ldr	r3, [r3, #32]
 80025a6:	431a      	orrs	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ac:	019b      	lsls	r3, r3, #6
 80025ae:	431a      	orrs	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b4:	085b      	lsrs	r3, r3, #1
 80025b6:	3b01      	subs	r3, #1
 80025b8:	041b      	lsls	r3, r3, #16
 80025ba:	431a      	orrs	r2, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c0:	061b      	lsls	r3, r3, #24
 80025c2:	4313      	orrs	r3, r2
 80025c4:	4a1b      	ldr	r2, [pc, #108]	; (8002634 <HAL_RCC_OscConfig+0x4cc>)
 80025c6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80025ca:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025cc:	4b19      	ldr	r3, [pc, #100]	; (8002634 <HAL_RCC_OscConfig+0x4cc>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a18      	ldr	r2, [pc, #96]	; (8002634 <HAL_RCC_OscConfig+0x4cc>)
 80025d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d8:	f7ff f9e6 	bl	80019a8 <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025e0:	f7ff f9e2 	bl	80019a8 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e057      	b.n	80026a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025f2:	4b10      	ldr	r3, [pc, #64]	; (8002634 <HAL_RCC_OscConfig+0x4cc>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d0f0      	beq.n	80025e0 <HAL_RCC_OscConfig+0x478>
 80025fe:	e04f      	b.n	80026a0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002600:	4b0c      	ldr	r3, [pc, #48]	; (8002634 <HAL_RCC_OscConfig+0x4cc>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a0b      	ldr	r2, [pc, #44]	; (8002634 <HAL_RCC_OscConfig+0x4cc>)
 8002606:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800260a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800260c:	f7ff f9cc 	bl	80019a8 <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002614:	f7ff f9c8 	bl	80019a8 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e03d      	b.n	80026a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002626:	4b03      	ldr	r3, [pc, #12]	; (8002634 <HAL_RCC_OscConfig+0x4cc>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1f0      	bne.n	8002614 <HAL_RCC_OscConfig+0x4ac>
 8002632:	e035      	b.n	80026a0 <HAL_RCC_OscConfig+0x538>
 8002634:	40023800 	.word	0x40023800
 8002638:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800263c:	4b1b      	ldr	r3, [pc, #108]	; (80026ac <HAL_RCC_OscConfig+0x544>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d028      	beq.n	800269c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002654:	429a      	cmp	r2, r3
 8002656:	d121      	bne.n	800269c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002662:	429a      	cmp	r2, r3
 8002664:	d11a      	bne.n	800269c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002666:	68fa      	ldr	r2, [r7, #12]
 8002668:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800266c:	4013      	ands	r3, r2
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002672:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002674:	4293      	cmp	r3, r2
 8002676:	d111      	bne.n	800269c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002682:	085b      	lsrs	r3, r3, #1
 8002684:	3b01      	subs	r3, #1
 8002686:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002688:	429a      	cmp	r2, r3
 800268a:	d107      	bne.n	800269c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002696:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002698:	429a      	cmp	r2, r3
 800269a:	d001      	beq.n	80026a0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e000      	b.n	80026a2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3718      	adds	r7, #24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	40023800 	.word	0x40023800

080026b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80026ba:	2300      	movs	r3, #0
 80026bc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d101      	bne.n	80026c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e0d0      	b.n	800286a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026c8:	4b6a      	ldr	r3, [pc, #424]	; (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 030f 	and.w	r3, r3, #15
 80026d0:	683a      	ldr	r2, [r7, #0]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d910      	bls.n	80026f8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026d6:	4b67      	ldr	r3, [pc, #412]	; (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f023 020f 	bic.w	r2, r3, #15
 80026de:	4965      	ldr	r1, [pc, #404]	; (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026e6:	4b63      	ldr	r3, [pc, #396]	; (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 030f 	and.w	r3, r3, #15
 80026ee:	683a      	ldr	r2, [r7, #0]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d001      	beq.n	80026f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e0b8      	b.n	800286a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d020      	beq.n	8002746 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0304 	and.w	r3, r3, #4
 800270c:	2b00      	cmp	r3, #0
 800270e:	d005      	beq.n	800271c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002710:	4b59      	ldr	r3, [pc, #356]	; (8002878 <HAL_RCC_ClockConfig+0x1c8>)
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	4a58      	ldr	r2, [pc, #352]	; (8002878 <HAL_RCC_ClockConfig+0x1c8>)
 8002716:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800271a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0308 	and.w	r3, r3, #8
 8002724:	2b00      	cmp	r3, #0
 8002726:	d005      	beq.n	8002734 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002728:	4b53      	ldr	r3, [pc, #332]	; (8002878 <HAL_RCC_ClockConfig+0x1c8>)
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	4a52      	ldr	r2, [pc, #328]	; (8002878 <HAL_RCC_ClockConfig+0x1c8>)
 800272e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002732:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002734:	4b50      	ldr	r3, [pc, #320]	; (8002878 <HAL_RCC_ClockConfig+0x1c8>)
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	494d      	ldr	r1, [pc, #308]	; (8002878 <HAL_RCC_ClockConfig+0x1c8>)
 8002742:	4313      	orrs	r3, r2
 8002744:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	2b00      	cmp	r3, #0
 8002750:	d040      	beq.n	80027d4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	2b01      	cmp	r3, #1
 8002758:	d107      	bne.n	800276a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800275a:	4b47      	ldr	r3, [pc, #284]	; (8002878 <HAL_RCC_ClockConfig+0x1c8>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d115      	bne.n	8002792 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e07f      	b.n	800286a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	2b02      	cmp	r3, #2
 8002770:	d107      	bne.n	8002782 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002772:	4b41      	ldr	r3, [pc, #260]	; (8002878 <HAL_RCC_ClockConfig+0x1c8>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d109      	bne.n	8002792 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e073      	b.n	800286a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002782:	4b3d      	ldr	r3, [pc, #244]	; (8002878 <HAL_RCC_ClockConfig+0x1c8>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d101      	bne.n	8002792 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e06b      	b.n	800286a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002792:	4b39      	ldr	r3, [pc, #228]	; (8002878 <HAL_RCC_ClockConfig+0x1c8>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f023 0203 	bic.w	r2, r3, #3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	4936      	ldr	r1, [pc, #216]	; (8002878 <HAL_RCC_ClockConfig+0x1c8>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027a4:	f7ff f900 	bl	80019a8 <HAL_GetTick>
 80027a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027aa:	e00a      	b.n	80027c2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027ac:	f7ff f8fc 	bl	80019a8 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e053      	b.n	800286a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027c2:	4b2d      	ldr	r3, [pc, #180]	; (8002878 <HAL_RCC_ClockConfig+0x1c8>)
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f003 020c 	and.w	r2, r3, #12
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d1eb      	bne.n	80027ac <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027d4:	4b27      	ldr	r3, [pc, #156]	; (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 030f 	and.w	r3, r3, #15
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d210      	bcs.n	8002804 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027e2:	4b24      	ldr	r3, [pc, #144]	; (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f023 020f 	bic.w	r2, r3, #15
 80027ea:	4922      	ldr	r1, [pc, #136]	; (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027f2:	4b20      	ldr	r3, [pc, #128]	; (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 030f 	and.w	r3, r3, #15
 80027fa:	683a      	ldr	r2, [r7, #0]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d001      	beq.n	8002804 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e032      	b.n	800286a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0304 	and.w	r3, r3, #4
 800280c:	2b00      	cmp	r3, #0
 800280e:	d008      	beq.n	8002822 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002810:	4b19      	ldr	r3, [pc, #100]	; (8002878 <HAL_RCC_ClockConfig+0x1c8>)
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	4916      	ldr	r1, [pc, #88]	; (8002878 <HAL_RCC_ClockConfig+0x1c8>)
 800281e:	4313      	orrs	r3, r2
 8002820:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0308 	and.w	r3, r3, #8
 800282a:	2b00      	cmp	r3, #0
 800282c:	d009      	beq.n	8002842 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800282e:	4b12      	ldr	r3, [pc, #72]	; (8002878 <HAL_RCC_ClockConfig+0x1c8>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	490e      	ldr	r1, [pc, #56]	; (8002878 <HAL_RCC_ClockConfig+0x1c8>)
 800283e:	4313      	orrs	r3, r2
 8002840:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002842:	f000 f821 	bl	8002888 <HAL_RCC_GetSysClockFreq>
 8002846:	4602      	mov	r2, r0
 8002848:	4b0b      	ldr	r3, [pc, #44]	; (8002878 <HAL_RCC_ClockConfig+0x1c8>)
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	091b      	lsrs	r3, r3, #4
 800284e:	f003 030f 	and.w	r3, r3, #15
 8002852:	490a      	ldr	r1, [pc, #40]	; (800287c <HAL_RCC_ClockConfig+0x1cc>)
 8002854:	5ccb      	ldrb	r3, [r1, r3]
 8002856:	fa22 f303 	lsr.w	r3, r2, r3
 800285a:	4a09      	ldr	r2, [pc, #36]	; (8002880 <HAL_RCC_ClockConfig+0x1d0>)
 800285c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800285e:	4b09      	ldr	r3, [pc, #36]	; (8002884 <HAL_RCC_ClockConfig+0x1d4>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4618      	mov	r0, r3
 8002864:	f7ff f85c 	bl	8001920 <HAL_InitTick>

  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3710      	adds	r7, #16
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	40023c00 	.word	0x40023c00
 8002878:	40023800 	.word	0x40023800
 800287c:	08007d98 	.word	0x08007d98
 8002880:	20000008 	.word	0x20000008
 8002884:	2000000c 	.word	0x2000000c

08002888 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002888:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800288c:	b090      	sub	sp, #64	; 0x40
 800288e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002890:	2300      	movs	r3, #0
 8002892:	637b      	str	r3, [r7, #52]	; 0x34
 8002894:	2300      	movs	r3, #0
 8002896:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002898:	2300      	movs	r3, #0
 800289a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 800289c:	2300      	movs	r3, #0
 800289e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028a0:	4b59      	ldr	r3, [pc, #356]	; (8002a08 <HAL_RCC_GetSysClockFreq+0x180>)
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f003 030c 	and.w	r3, r3, #12
 80028a8:	2b08      	cmp	r3, #8
 80028aa:	d00d      	beq.n	80028c8 <HAL_RCC_GetSysClockFreq+0x40>
 80028ac:	2b08      	cmp	r3, #8
 80028ae:	f200 80a1 	bhi.w	80029f4 <HAL_RCC_GetSysClockFreq+0x16c>
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d002      	beq.n	80028bc <HAL_RCC_GetSysClockFreq+0x34>
 80028b6:	2b04      	cmp	r3, #4
 80028b8:	d003      	beq.n	80028c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80028ba:	e09b      	b.n	80029f4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028bc:	4b53      	ldr	r3, [pc, #332]	; (8002a0c <HAL_RCC_GetSysClockFreq+0x184>)
 80028be:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80028c0:	e09b      	b.n	80029fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028c2:	4b53      	ldr	r3, [pc, #332]	; (8002a10 <HAL_RCC_GetSysClockFreq+0x188>)
 80028c4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80028c6:	e098      	b.n	80029fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028c8:	4b4f      	ldr	r3, [pc, #316]	; (8002a08 <HAL_RCC_GetSysClockFreq+0x180>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028d0:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80028d2:	4b4d      	ldr	r3, [pc, #308]	; (8002a08 <HAL_RCC_GetSysClockFreq+0x180>)
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d028      	beq.n	8002930 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028de:	4b4a      	ldr	r3, [pc, #296]	; (8002a08 <HAL_RCC_GetSysClockFreq+0x180>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	099b      	lsrs	r3, r3, #6
 80028e4:	2200      	movs	r2, #0
 80028e6:	623b      	str	r3, [r7, #32]
 80028e8:	627a      	str	r2, [r7, #36]	; 0x24
 80028ea:	6a3b      	ldr	r3, [r7, #32]
 80028ec:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80028f0:	2100      	movs	r1, #0
 80028f2:	4b47      	ldr	r3, [pc, #284]	; (8002a10 <HAL_RCC_GetSysClockFreq+0x188>)
 80028f4:	fb03 f201 	mul.w	r2, r3, r1
 80028f8:	2300      	movs	r3, #0
 80028fa:	fb00 f303 	mul.w	r3, r0, r3
 80028fe:	4413      	add	r3, r2
 8002900:	4a43      	ldr	r2, [pc, #268]	; (8002a10 <HAL_RCC_GetSysClockFreq+0x188>)
 8002902:	fba0 1202 	umull	r1, r2, r0, r2
 8002906:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002908:	460a      	mov	r2, r1
 800290a:	62ba      	str	r2, [r7, #40]	; 0x28
 800290c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800290e:	4413      	add	r3, r2
 8002910:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002914:	2200      	movs	r2, #0
 8002916:	61bb      	str	r3, [r7, #24]
 8002918:	61fa      	str	r2, [r7, #28]
 800291a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800291e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002922:	f7fd fcc5 	bl	80002b0 <__aeabi_uldivmod>
 8002926:	4602      	mov	r2, r0
 8002928:	460b      	mov	r3, r1
 800292a:	4613      	mov	r3, r2
 800292c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800292e:	e053      	b.n	80029d8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002930:	4b35      	ldr	r3, [pc, #212]	; (8002a08 <HAL_RCC_GetSysClockFreq+0x180>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	099b      	lsrs	r3, r3, #6
 8002936:	2200      	movs	r2, #0
 8002938:	613b      	str	r3, [r7, #16]
 800293a:	617a      	str	r2, [r7, #20]
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002942:	f04f 0b00 	mov.w	fp, #0
 8002946:	4652      	mov	r2, sl
 8002948:	465b      	mov	r3, fp
 800294a:	f04f 0000 	mov.w	r0, #0
 800294e:	f04f 0100 	mov.w	r1, #0
 8002952:	0159      	lsls	r1, r3, #5
 8002954:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002958:	0150      	lsls	r0, r2, #5
 800295a:	4602      	mov	r2, r0
 800295c:	460b      	mov	r3, r1
 800295e:	ebb2 080a 	subs.w	r8, r2, sl
 8002962:	eb63 090b 	sbc.w	r9, r3, fp
 8002966:	f04f 0200 	mov.w	r2, #0
 800296a:	f04f 0300 	mov.w	r3, #0
 800296e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002972:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002976:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800297a:	ebb2 0408 	subs.w	r4, r2, r8
 800297e:	eb63 0509 	sbc.w	r5, r3, r9
 8002982:	f04f 0200 	mov.w	r2, #0
 8002986:	f04f 0300 	mov.w	r3, #0
 800298a:	00eb      	lsls	r3, r5, #3
 800298c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002990:	00e2      	lsls	r2, r4, #3
 8002992:	4614      	mov	r4, r2
 8002994:	461d      	mov	r5, r3
 8002996:	eb14 030a 	adds.w	r3, r4, sl
 800299a:	603b      	str	r3, [r7, #0]
 800299c:	eb45 030b 	adc.w	r3, r5, fp
 80029a0:	607b      	str	r3, [r7, #4]
 80029a2:	f04f 0200 	mov.w	r2, #0
 80029a6:	f04f 0300 	mov.w	r3, #0
 80029aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029ae:	4629      	mov	r1, r5
 80029b0:	028b      	lsls	r3, r1, #10
 80029b2:	4621      	mov	r1, r4
 80029b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029b8:	4621      	mov	r1, r4
 80029ba:	028a      	lsls	r2, r1, #10
 80029bc:	4610      	mov	r0, r2
 80029be:	4619      	mov	r1, r3
 80029c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029c2:	2200      	movs	r2, #0
 80029c4:	60bb      	str	r3, [r7, #8]
 80029c6:	60fa      	str	r2, [r7, #12]
 80029c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80029cc:	f7fd fc70 	bl	80002b0 <__aeabi_uldivmod>
 80029d0:	4602      	mov	r2, r0
 80029d2:	460b      	mov	r3, r1
 80029d4:	4613      	mov	r3, r2
 80029d6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80029d8:	4b0b      	ldr	r3, [pc, #44]	; (8002a08 <HAL_RCC_GetSysClockFreq+0x180>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	0c1b      	lsrs	r3, r3, #16
 80029de:	f003 0303 	and.w	r3, r3, #3
 80029e2:	3301      	adds	r3, #1
 80029e4:	005b      	lsls	r3, r3, #1
 80029e6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80029e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80029ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80029f0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80029f2:	e002      	b.n	80029fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029f4:	4b05      	ldr	r3, [pc, #20]	; (8002a0c <HAL_RCC_GetSysClockFreq+0x184>)
 80029f6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80029f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3740      	adds	r7, #64	; 0x40
 8002a00:	46bd      	mov	sp, r7
 8002a02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a06:	bf00      	nop
 8002a08:	40023800 	.word	0x40023800
 8002a0c:	00f42400 	.word	0x00f42400
 8002a10:	017d7840 	.word	0x017d7840

08002a14 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a18:	4b03      	ldr	r3, [pc, #12]	; (8002a28 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	20000008 	.word	0x20000008

08002a2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a30:	f7ff fff0 	bl	8002a14 <HAL_RCC_GetHCLKFreq>
 8002a34:	4602      	mov	r2, r0
 8002a36:	4b05      	ldr	r3, [pc, #20]	; (8002a4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	0a9b      	lsrs	r3, r3, #10
 8002a3c:	f003 0307 	and.w	r3, r3, #7
 8002a40:	4903      	ldr	r1, [pc, #12]	; (8002a50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a42:	5ccb      	ldrb	r3, [r1, r3]
 8002a44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	40023800 	.word	0x40023800
 8002a50:	08007da8 	.word	0x08007da8

08002a54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a58:	f7ff ffdc 	bl	8002a14 <HAL_RCC_GetHCLKFreq>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	4b05      	ldr	r3, [pc, #20]	; (8002a74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	0b5b      	lsrs	r3, r3, #13
 8002a64:	f003 0307 	and.w	r3, r3, #7
 8002a68:	4903      	ldr	r1, [pc, #12]	; (8002a78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a6a:	5ccb      	ldrb	r3, [r1, r3]
 8002a6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	40023800 	.word	0x40023800
 8002a78:	08007da8 	.word	0x08007da8

08002a7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b088      	sub	sp, #32
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002a84:	2300      	movs	r3, #0
 8002a86:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002a90:	2300      	movs	r3, #0
 8002a92:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002a94:	2300      	movs	r3, #0
 8002a96:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0301 	and.w	r3, r3, #1
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d012      	beq.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002aa4:	4b69      	ldr	r3, [pc, #420]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	4a68      	ldr	r2, [pc, #416]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aaa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002aae:	6093      	str	r3, [r2, #8]
 8002ab0:	4b66      	ldr	r3, [pc, #408]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ab2:	689a      	ldr	r2, [r3, #8]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ab8:	4964      	ldr	r1, [pc, #400]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d101      	bne.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d017      	beq.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ad6:	4b5d      	ldr	r3, [pc, #372]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ad8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002adc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ae4:	4959      	ldr	r1, [pc, #356]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002af4:	d101      	bne.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002af6:	2301      	movs	r3, #1
 8002af8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002b02:	2301      	movs	r3, #1
 8002b04:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d017      	beq.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b12:	4b4e      	ldr	r3, [pc, #312]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b18:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b20:	494a      	ldr	r1, [pc, #296]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b30:	d101      	bne.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002b32:	2301      	movs	r3, #1
 8002b34:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d101      	bne.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d001      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0320 	and.w	r3, r3, #32
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	f000 808b 	beq.w	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b60:	4b3a      	ldr	r3, [pc, #232]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b64:	4a39      	ldr	r2, [pc, #228]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b6a:	6413      	str	r3, [r2, #64]	; 0x40
 8002b6c:	4b37      	ldr	r3, [pc, #220]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b74:	60bb      	str	r3, [r7, #8]
 8002b76:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002b78:	4b35      	ldr	r3, [pc, #212]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a34      	ldr	r2, [pc, #208]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b84:	f7fe ff10 	bl	80019a8 <HAL_GetTick>
 8002b88:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002b8a:	e008      	b.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b8c:	f7fe ff0c 	bl	80019a8 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b64      	cmp	r3, #100	; 0x64
 8002b98:	d901      	bls.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e357      	b.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002b9e:	4b2c      	ldr	r3, [pc, #176]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d0f0      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002baa:	4b28      	ldr	r3, [pc, #160]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bb2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d035      	beq.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bc2:	693a      	ldr	r2, [r7, #16]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d02e      	beq.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002bc8:	4b20      	ldr	r3, [pc, #128]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bd0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002bd2:	4b1e      	ldr	r3, [pc, #120]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd6:	4a1d      	ldr	r2, [pc, #116]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bdc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002bde:	4b1b      	ldr	r3, [pc, #108]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be2:	4a1a      	ldr	r2, [pc, #104]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002be4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002be8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002bea:	4a18      	ldr	r2, [pc, #96]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002bf0:	4b16      	ldr	r3, [pc, #88]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf4:	f003 0301 	and.w	r3, r3, #1
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d114      	bne.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bfc:	f7fe fed4 	bl	80019a8 <HAL_GetTick>
 8002c00:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c02:	e00a      	b.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c04:	f7fe fed0 	bl	80019a8 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d901      	bls.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e319      	b.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c1a:	4b0c      	ldr	r3, [pc, #48]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d0ee      	beq.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c32:	d111      	bne.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002c34:	4b05      	ldr	r3, [pc, #20]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c40:	4b04      	ldr	r3, [pc, #16]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002c42:	400b      	ands	r3, r1
 8002c44:	4901      	ldr	r1, [pc, #4]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	608b      	str	r3, [r1, #8]
 8002c4a:	e00b      	b.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002c4c:	40023800 	.word	0x40023800
 8002c50:	40007000 	.word	0x40007000
 8002c54:	0ffffcff 	.word	0x0ffffcff
 8002c58:	4baa      	ldr	r3, [pc, #680]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	4aa9      	ldr	r2, [pc, #676]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c5e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002c62:	6093      	str	r3, [r2, #8]
 8002c64:	4ba7      	ldr	r3, [pc, #668]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c66:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c70:	49a4      	ldr	r1, [pc, #656]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0310 	and.w	r3, r3, #16
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d010      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002c82:	4ba0      	ldr	r3, [pc, #640]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c88:	4a9e      	ldr	r2, [pc, #632]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c8e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002c92:	4b9c      	ldr	r3, [pc, #624]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c94:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c9c:	4999      	ldr	r1, [pc, #612]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d00a      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cb0:	4b94      	ldr	r3, [pc, #592]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cb6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cbe:	4991      	ldr	r1, [pc, #580]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00a      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002cd2:	4b8c      	ldr	r3, [pc, #560]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ce0:	4988      	ldr	r1, [pc, #544]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d00a      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002cf4:	4b83      	ldr	r3, [pc, #524]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cfa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d02:	4980      	ldr	r1, [pc, #512]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d00a      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002d16:	4b7b      	ldr	r3, [pc, #492]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d1c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d24:	4977      	ldr	r1, [pc, #476]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d00a      	beq.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d38:	4b72      	ldr	r3, [pc, #456]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d3e:	f023 0203 	bic.w	r2, r3, #3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d46:	496f      	ldr	r1, [pc, #444]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00a      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d5a:	4b6a      	ldr	r3, [pc, #424]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d60:	f023 020c 	bic.w	r2, r3, #12
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d68:	4966      	ldr	r1, [pc, #408]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00a      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d7c:	4b61      	ldr	r3, [pc, #388]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d82:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d8a:	495e      	ldr	r1, [pc, #376]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00a      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d9e:	4b59      	ldr	r3, [pc, #356]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002da4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dac:	4955      	ldr	r1, [pc, #340]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00a      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002dc0:	4b50      	ldr	r3, [pc, #320]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dce:	494d      	ldr	r1, [pc, #308]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d00a      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002de2:	4b48      	ldr	r3, [pc, #288]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002de8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df0:	4944      	ldr	r1, [pc, #272]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d00a      	beq.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002e04:	4b3f      	ldr	r3, [pc, #252]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e0a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e12:	493c      	ldr	r1, [pc, #240]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00a      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002e26:	4b37      	ldr	r3, [pc, #220]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e2c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e34:	4933      	ldr	r1, [pc, #204]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00a      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002e48:	4b2e      	ldr	r3, [pc, #184]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e4e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e56:	492b      	ldr	r1, [pc, #172]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d011      	beq.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002e6a:	4b26      	ldr	r3, [pc, #152]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e70:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e78:	4922      	ldr	r1, [pc, #136]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e88:	d101      	bne.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0308 	and.w	r3, r3, #8
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00a      	beq.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002eaa:	4b16      	ldr	r3, [pc, #88]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eb8:	4912      	ldr	r1, [pc, #72]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d00b      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ecc:	4b0d      	ldr	r3, [pc, #52]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ed2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002edc:	4909      	ldr	r1, [pc, #36]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d006      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	f000 80d9 	beq.w	80030aa <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002ef8:	4b02      	ldr	r3, [pc, #8]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a01      	ldr	r2, [pc, #4]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002efe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f02:	e001      	b.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002f04:	40023800 	.word	0x40023800
 8002f08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f0a:	f7fe fd4d 	bl	80019a8 <HAL_GetTick>
 8002f0e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f10:	e008      	b.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002f12:	f7fe fd49 	bl	80019a8 <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	2b64      	cmp	r3, #100	; 0x64
 8002f1e:	d901      	bls.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e194      	b.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f24:	4b6c      	ldr	r3, [pc, #432]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d1f0      	bne.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0301 	and.w	r3, r3, #1
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d021      	beq.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d11d      	bne.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002f44:	4b64      	ldr	r3, [pc, #400]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f4a:	0c1b      	lsrs	r3, r3, #16
 8002f4c:	f003 0303 	and.w	r3, r3, #3
 8002f50:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002f52:	4b61      	ldr	r3, [pc, #388]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f58:	0e1b      	lsrs	r3, r3, #24
 8002f5a:	f003 030f 	and.w	r3, r3, #15
 8002f5e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	019a      	lsls	r2, r3, #6
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	041b      	lsls	r3, r3, #16
 8002f6a:	431a      	orrs	r2, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	061b      	lsls	r3, r3, #24
 8002f70:	431a      	orrs	r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	071b      	lsls	r3, r3, #28
 8002f78:	4957      	ldr	r1, [pc, #348]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d004      	beq.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f94:	d00a      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d02e      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002faa:	d129      	bne.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002fac:	4b4a      	ldr	r3, [pc, #296]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fb2:	0c1b      	lsrs	r3, r3, #16
 8002fb4:	f003 0303 	and.w	r3, r3, #3
 8002fb8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002fba:	4b47      	ldr	r3, [pc, #284]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fc0:	0f1b      	lsrs	r3, r3, #28
 8002fc2:	f003 0307 	and.w	r3, r3, #7
 8002fc6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	019a      	lsls	r2, r3, #6
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	041b      	lsls	r3, r3, #16
 8002fd2:	431a      	orrs	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	061b      	lsls	r3, r3, #24
 8002fda:	431a      	orrs	r2, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	071b      	lsls	r3, r3, #28
 8002fe0:	493d      	ldr	r1, [pc, #244]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002fe8:	4b3b      	ldr	r3, [pc, #236]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fee:	f023 021f 	bic.w	r2, r3, #31
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff6:	3b01      	subs	r3, #1
 8002ff8:	4937      	ldr	r1, [pc, #220]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d01d      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800300c:	4b32      	ldr	r3, [pc, #200]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800300e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003012:	0e1b      	lsrs	r3, r3, #24
 8003014:	f003 030f 	and.w	r3, r3, #15
 8003018:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800301a:	4b2f      	ldr	r3, [pc, #188]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800301c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003020:	0f1b      	lsrs	r3, r3, #28
 8003022:	f003 0307 	and.w	r3, r3, #7
 8003026:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	019a      	lsls	r2, r3, #6
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	041b      	lsls	r3, r3, #16
 8003034:	431a      	orrs	r2, r3
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	061b      	lsls	r3, r3, #24
 800303a:	431a      	orrs	r2, r3
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	071b      	lsls	r3, r3, #28
 8003040:	4925      	ldr	r1, [pc, #148]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003042:	4313      	orrs	r3, r2
 8003044:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d011      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	019a      	lsls	r2, r3, #6
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	041b      	lsls	r3, r3, #16
 8003060:	431a      	orrs	r2, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	061b      	lsls	r3, r3, #24
 8003068:	431a      	orrs	r2, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	071b      	lsls	r3, r3, #28
 8003070:	4919      	ldr	r1, [pc, #100]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003072:	4313      	orrs	r3, r2
 8003074:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003078:	4b17      	ldr	r3, [pc, #92]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a16      	ldr	r2, [pc, #88]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800307e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003082:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003084:	f7fe fc90 	bl	80019a8 <HAL_GetTick>
 8003088:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800308a:	e008      	b.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800308c:	f7fe fc8c 	bl	80019a8 <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	2b64      	cmp	r3, #100	; 0x64
 8003098:	d901      	bls.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e0d7      	b.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800309e:	4b0e      	ldr	r3, [pc, #56]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d0f0      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	f040 80cd 	bne.w	800324c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80030b2:	4b09      	ldr	r3, [pc, #36]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a08      	ldr	r2, [pc, #32]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030be:	f7fe fc73 	bl	80019a8 <HAL_GetTick>
 80030c2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80030c4:	e00a      	b.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80030c6:	f7fe fc6f 	bl	80019a8 <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	2b64      	cmp	r3, #100	; 0x64
 80030d2:	d903      	bls.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e0ba      	b.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80030d8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80030dc:	4b5e      	ldr	r3, [pc, #376]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030e8:	d0ed      	beq.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d003      	beq.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x682>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d009      	beq.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003106:	2b00      	cmp	r3, #0
 8003108:	d02e      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310e:	2b00      	cmp	r3, #0
 8003110:	d12a      	bne.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003112:	4b51      	ldr	r3, [pc, #324]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003118:	0c1b      	lsrs	r3, r3, #16
 800311a:	f003 0303 	and.w	r3, r3, #3
 800311e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003120:	4b4d      	ldr	r3, [pc, #308]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003126:	0f1b      	lsrs	r3, r3, #28
 8003128:	f003 0307 	and.w	r3, r3, #7
 800312c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	695b      	ldr	r3, [r3, #20]
 8003132:	019a      	lsls	r2, r3, #6
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	041b      	lsls	r3, r3, #16
 8003138:	431a      	orrs	r2, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	699b      	ldr	r3, [r3, #24]
 800313e:	061b      	lsls	r3, r3, #24
 8003140:	431a      	orrs	r2, r3
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	071b      	lsls	r3, r3, #28
 8003146:	4944      	ldr	r1, [pc, #272]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003148:	4313      	orrs	r3, r2
 800314a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800314e:	4b42      	ldr	r3, [pc, #264]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003150:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003154:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800315c:	3b01      	subs	r3, #1
 800315e:	021b      	lsls	r3, r3, #8
 8003160:	493d      	ldr	r1, [pc, #244]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003162:	4313      	orrs	r3, r2
 8003164:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d022      	beq.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003178:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800317c:	d11d      	bne.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800317e:	4b36      	ldr	r3, [pc, #216]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003180:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003184:	0e1b      	lsrs	r3, r3, #24
 8003186:	f003 030f 	and.w	r3, r3, #15
 800318a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800318c:	4b32      	ldr	r3, [pc, #200]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800318e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003192:	0f1b      	lsrs	r3, r3, #28
 8003194:	f003 0307 	and.w	r3, r3, #7
 8003198:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	695b      	ldr	r3, [r3, #20]
 800319e:	019a      	lsls	r2, r3, #6
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a1b      	ldr	r3, [r3, #32]
 80031a4:	041b      	lsls	r3, r3, #16
 80031a6:	431a      	orrs	r2, r3
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	061b      	lsls	r3, r3, #24
 80031ac:	431a      	orrs	r2, r3
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	071b      	lsls	r3, r3, #28
 80031b2:	4929      	ldr	r1, [pc, #164]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0308 	and.w	r3, r3, #8
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d028      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80031c6:	4b24      	ldr	r3, [pc, #144]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031cc:	0e1b      	lsrs	r3, r3, #24
 80031ce:	f003 030f 	and.w	r3, r3, #15
 80031d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80031d4:	4b20      	ldr	r3, [pc, #128]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031da:	0c1b      	lsrs	r3, r3, #16
 80031dc:	f003 0303 	and.w	r3, r3, #3
 80031e0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	019a      	lsls	r2, r3, #6
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	041b      	lsls	r3, r3, #16
 80031ec:	431a      	orrs	r2, r3
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	061b      	lsls	r3, r3, #24
 80031f2:	431a      	orrs	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	69db      	ldr	r3, [r3, #28]
 80031f8:	071b      	lsls	r3, r3, #28
 80031fa:	4917      	ldr	r1, [pc, #92]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003202:	4b15      	ldr	r3, [pc, #84]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003204:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003208:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003210:	4911      	ldr	r1, [pc, #68]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003212:	4313      	orrs	r3, r2
 8003214:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003218:	4b0f      	ldr	r3, [pc, #60]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a0e      	ldr	r2, [pc, #56]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800321e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003222:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003224:	f7fe fbc0 	bl	80019a8 <HAL_GetTick>
 8003228:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800322a:	e008      	b.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800322c:	f7fe fbbc 	bl	80019a8 <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	2b64      	cmp	r3, #100	; 0x64
 8003238:	d901      	bls.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e007      	b.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800323e:	4b06      	ldr	r3, [pc, #24]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003246:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800324a:	d1ef      	bne.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3720      	adds	r7, #32
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	40023800 	.word	0x40023800

0800325c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d101      	bne.n	800326e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e040      	b.n	80032f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003272:	2b00      	cmp	r3, #0
 8003274:	d106      	bne.n	8003284 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f7fe fa8e 	bl	80017a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2224      	movs	r2, #36	; 0x24
 8003288:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f022 0201 	bic.w	r2, r2, #1
 8003298:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 fbf0 	bl	8003a80 <UART_SetConfig>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d101      	bne.n	80032aa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e022      	b.n	80032f0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d002      	beq.n	80032b8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f000 fe48 	bl	8003f48 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	685a      	ldr	r2, [r3, #4]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	689a      	ldr	r2, [r3, #8]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f042 0201 	orr.w	r2, r2, #1
 80032e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f000 fecf 	bl	800408c <UART_CheckIdleState>
 80032ee:	4603      	mov	r3, r0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3708      	adds	r7, #8
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b08a      	sub	sp, #40	; 0x28
 80032fc:	af02      	add	r7, sp, #8
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	603b      	str	r3, [r7, #0]
 8003304:	4613      	mov	r3, r2
 8003306:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800330c:	2b20      	cmp	r3, #32
 800330e:	d171      	bne.n	80033f4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d002      	beq.n	800331c <HAL_UART_Transmit+0x24>
 8003316:	88fb      	ldrh	r3, [r7, #6]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d101      	bne.n	8003320 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e06a      	b.n	80033f6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2200      	movs	r2, #0
 8003324:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2221      	movs	r2, #33	; 0x21
 800332c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800332e:	f7fe fb3b 	bl	80019a8 <HAL_GetTick>
 8003332:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	88fa      	ldrh	r2, [r7, #6]
 8003338:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	88fa      	ldrh	r2, [r7, #6]
 8003340:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800334c:	d108      	bne.n	8003360 <HAL_UART_Transmit+0x68>
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d104      	bne.n	8003360 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003356:	2300      	movs	r3, #0
 8003358:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	61bb      	str	r3, [r7, #24]
 800335e:	e003      	b.n	8003368 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003364:	2300      	movs	r3, #0
 8003366:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003368:	e02c      	b.n	80033c4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	9300      	str	r3, [sp, #0]
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	2200      	movs	r2, #0
 8003372:	2180      	movs	r1, #128	; 0x80
 8003374:	68f8      	ldr	r0, [r7, #12]
 8003376:	f000 fec0 	bl	80040fa <UART_WaitOnFlagUntilTimeout>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d001      	beq.n	8003384 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e038      	b.n	80033f6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d10b      	bne.n	80033a2 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	881b      	ldrh	r3, [r3, #0]
 800338e:	461a      	mov	r2, r3
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003398:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	3302      	adds	r3, #2
 800339e:	61bb      	str	r3, [r7, #24]
 80033a0:	e007      	b.n	80033b2 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	781a      	ldrb	r2, [r3, #0]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	3301      	adds	r3, #1
 80033b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	3b01      	subs	r3, #1
 80033bc:	b29a      	uxth	r2, r3
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d1cc      	bne.n	800336a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	9300      	str	r3, [sp, #0]
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	2200      	movs	r2, #0
 80033d8:	2140      	movs	r1, #64	; 0x40
 80033da:	68f8      	ldr	r0, [r7, #12]
 80033dc:	f000 fe8d 	bl	80040fa <UART_WaitOnFlagUntilTimeout>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d001      	beq.n	80033ea <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e005      	b.n	80033f6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2220      	movs	r2, #32
 80033ee:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80033f0:	2300      	movs	r3, #0
 80033f2:	e000      	b.n	80033f6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80033f4:	2302      	movs	r3, #2
  }
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3720      	adds	r7, #32
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}

080033fe <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80033fe:	b580      	push	{r7, lr}
 8003400:	b08a      	sub	sp, #40	; 0x28
 8003402:	af00      	add	r7, sp, #0
 8003404:	60f8      	str	r0, [r7, #12]
 8003406:	60b9      	str	r1, [r7, #8]
 8003408:	4613      	mov	r3, r2
 800340a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003412:	2b20      	cmp	r3, #32
 8003414:	d132      	bne.n	800347c <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d002      	beq.n	8003422 <HAL_UART_Receive_IT+0x24>
 800341c:	88fb      	ldrh	r3, [r7, #6]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d101      	bne.n	8003426 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e02b      	b.n	800347e <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2200      	movs	r2, #0
 800342a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d018      	beq.n	800346c <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	e853 3f00 	ldrex	r3, [r3]
 8003446:	613b      	str	r3, [r7, #16]
   return(result);
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800344e:	627b      	str	r3, [r7, #36]	; 0x24
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	461a      	mov	r2, r3
 8003456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003458:	623b      	str	r3, [r7, #32]
 800345a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800345c:	69f9      	ldr	r1, [r7, #28]
 800345e:	6a3a      	ldr	r2, [r7, #32]
 8003460:	e841 2300 	strex	r3, r2, [r1]
 8003464:	61bb      	str	r3, [r7, #24]
   return(result);
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d1e6      	bne.n	800343a <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800346c:	88fb      	ldrh	r3, [r7, #6]
 800346e:	461a      	mov	r2, r3
 8003470:	68b9      	ldr	r1, [r7, #8]
 8003472:	68f8      	ldr	r0, [r7, #12]
 8003474:	f000 ff08 	bl	8004288 <UART_Start_Receive_IT>
 8003478:	4603      	mov	r3, r0
 800347a:	e000      	b.n	800347e <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800347c:	2302      	movs	r3, #2
  }
}
 800347e:	4618      	mov	r0, r3
 8003480:	3728      	adds	r7, #40	; 0x28
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
	...

08003488 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b0ba      	sub	sp, #232	; 0xe8
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	69db      	ldr	r3, [r3, #28]
 8003496:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80034ae:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80034b2:	f640 030f 	movw	r3, #2063	; 0x80f
 80034b6:	4013      	ands	r3, r2
 80034b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80034bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d115      	bne.n	80034f0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80034c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034c8:	f003 0320 	and.w	r3, r3, #32
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d00f      	beq.n	80034f0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80034d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034d4:	f003 0320 	and.w	r3, r3, #32
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d009      	beq.n	80034f0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f000 8297 	beq.w	8003a14 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	4798      	blx	r3
      }
      return;
 80034ee:	e291      	b.n	8003a14 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80034f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	f000 8117 	beq.w	8003728 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80034fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	2b00      	cmp	r3, #0
 8003504:	d106      	bne.n	8003514 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003506:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800350a:	4b85      	ldr	r3, [pc, #532]	; (8003720 <HAL_UART_IRQHandler+0x298>)
 800350c:	4013      	ands	r3, r2
 800350e:	2b00      	cmp	r3, #0
 8003510:	f000 810a 	beq.w	8003728 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003514:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003518:	f003 0301 	and.w	r3, r3, #1
 800351c:	2b00      	cmp	r3, #0
 800351e:	d011      	beq.n	8003544 <HAL_UART_IRQHandler+0xbc>
 8003520:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00b      	beq.n	8003544 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	2201      	movs	r2, #1
 8003532:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800353a:	f043 0201 	orr.w	r2, r3, #1
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003544:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003548:	f003 0302 	and.w	r3, r3, #2
 800354c:	2b00      	cmp	r3, #0
 800354e:	d011      	beq.n	8003574 <HAL_UART_IRQHandler+0xec>
 8003550:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003554:	f003 0301 	and.w	r3, r3, #1
 8003558:	2b00      	cmp	r3, #0
 800355a:	d00b      	beq.n	8003574 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2202      	movs	r2, #2
 8003562:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800356a:	f043 0204 	orr.w	r2, r3, #4
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003574:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003578:	f003 0304 	and.w	r3, r3, #4
 800357c:	2b00      	cmp	r3, #0
 800357e:	d011      	beq.n	80035a4 <HAL_UART_IRQHandler+0x11c>
 8003580:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003584:	f003 0301 	and.w	r3, r3, #1
 8003588:	2b00      	cmp	r3, #0
 800358a:	d00b      	beq.n	80035a4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2204      	movs	r2, #4
 8003592:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800359a:	f043 0202 	orr.w	r2, r3, #2
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80035a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035a8:	f003 0308 	and.w	r3, r3, #8
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d017      	beq.n	80035e0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80035b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035b4:	f003 0320 	and.w	r3, r3, #32
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d105      	bne.n	80035c8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80035bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035c0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00b      	beq.n	80035e0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2208      	movs	r2, #8
 80035ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035d6:	f043 0208 	orr.w	r2, r3, #8
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80035e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d012      	beq.n	8003612 <HAL_UART_IRQHandler+0x18a>
 80035ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d00c      	beq.n	8003612 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003600:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003608:	f043 0220 	orr.w	r2, r3, #32
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003618:	2b00      	cmp	r3, #0
 800361a:	f000 81fd 	beq.w	8003a18 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800361e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003622:	f003 0320 	and.w	r3, r3, #32
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00d      	beq.n	8003646 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800362a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800362e:	f003 0320 	and.w	r3, r3, #32
 8003632:	2b00      	cmp	r3, #0
 8003634:	d007      	beq.n	8003646 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800363a:	2b00      	cmp	r3, #0
 800363c:	d003      	beq.n	8003646 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800364c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800365a:	2b40      	cmp	r3, #64	; 0x40
 800365c:	d005      	beq.n	800366a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800365e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003662:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003666:	2b00      	cmp	r3, #0
 8003668:	d04f      	beq.n	800370a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 fed2 	bl	8004414 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800367a:	2b40      	cmp	r3, #64	; 0x40
 800367c:	d141      	bne.n	8003702 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	3308      	adds	r3, #8
 8003684:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003688:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800368c:	e853 3f00 	ldrex	r3, [r3]
 8003690:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003694:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003698:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800369c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	3308      	adds	r3, #8
 80036a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80036aa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80036ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80036b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80036ba:	e841 2300 	strex	r3, r2, [r1]
 80036be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80036c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d1d9      	bne.n	800367e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d013      	beq.n	80036fa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036d6:	4a13      	ldr	r2, [pc, #76]	; (8003724 <HAL_UART_IRQHandler+0x29c>)
 80036d8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036de:	4618      	mov	r0, r3
 80036e0:	f7fe faef 	bl	8001cc2 <HAL_DMA_Abort_IT>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d017      	beq.n	800371a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80036f4:	4610      	mov	r0, r2
 80036f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036f8:	e00f      	b.n	800371a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 f9aa 	bl	8003a54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003700:	e00b      	b.n	800371a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 f9a6 	bl	8003a54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003708:	e007      	b.n	800371a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 f9a2 	bl	8003a54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003718:	e17e      	b.n	8003a18 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800371a:	bf00      	nop
    return;
 800371c:	e17c      	b.n	8003a18 <HAL_UART_IRQHandler+0x590>
 800371e:	bf00      	nop
 8003720:	04000120 	.word	0x04000120
 8003724:	080044dd 	.word	0x080044dd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800372c:	2b01      	cmp	r3, #1
 800372e:	f040 814c 	bne.w	80039ca <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003732:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003736:	f003 0310 	and.w	r3, r3, #16
 800373a:	2b00      	cmp	r3, #0
 800373c:	f000 8145 	beq.w	80039ca <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003740:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003744:	f003 0310 	and.w	r3, r3, #16
 8003748:	2b00      	cmp	r3, #0
 800374a:	f000 813e 	beq.w	80039ca <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	2210      	movs	r2, #16
 8003754:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003760:	2b40      	cmp	r3, #64	; 0x40
 8003762:	f040 80b6 	bne.w	80038d2 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003772:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003776:	2b00      	cmp	r3, #0
 8003778:	f000 8150 	beq.w	8003a1c <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003782:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003786:	429a      	cmp	r2, r3
 8003788:	f080 8148 	bcs.w	8003a1c <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003792:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800379a:	69db      	ldr	r3, [r3, #28]
 800379c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037a0:	f000 8086 	beq.w	80038b0 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80037b0:	e853 3f00 	ldrex	r3, [r3]
 80037b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80037b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80037bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	461a      	mov	r2, r3
 80037ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80037ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80037d2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80037da:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80037de:	e841 2300 	strex	r3, r2, [r1]
 80037e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80037e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d1da      	bne.n	80037a4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	3308      	adds	r3, #8
 80037f4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037f8:	e853 3f00 	ldrex	r3, [r3]
 80037fc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80037fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003800:	f023 0301 	bic.w	r3, r3, #1
 8003804:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	3308      	adds	r3, #8
 800380e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003812:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003816:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003818:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800381a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800381e:	e841 2300 	strex	r3, r2, [r1]
 8003822:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003824:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003826:	2b00      	cmp	r3, #0
 8003828:	d1e1      	bne.n	80037ee <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	3308      	adds	r3, #8
 8003830:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003832:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003834:	e853 3f00 	ldrex	r3, [r3]
 8003838:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800383a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800383c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003840:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	3308      	adds	r3, #8
 800384a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800384e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003850:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003852:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003854:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003856:	e841 2300 	strex	r3, r2, [r1]
 800385a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800385c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800385e:	2b00      	cmp	r3, #0
 8003860:	d1e3      	bne.n	800382a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2220      	movs	r2, #32
 8003866:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003876:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003878:	e853 3f00 	ldrex	r3, [r3]
 800387c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800387e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003880:	f023 0310 	bic.w	r3, r3, #16
 8003884:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	461a      	mov	r2, r3
 800388e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003892:	65bb      	str	r3, [r7, #88]	; 0x58
 8003894:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003896:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003898:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800389a:	e841 2300 	strex	r3, r2, [r1]
 800389e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80038a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d1e4      	bne.n	8003870 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7fe f999 	bl	8001be2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2202      	movs	r2, #2
 80038b4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	4619      	mov	r1, r3
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 f8cc 	bl	8003a68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80038d0:	e0a4      	b.n	8003a1c <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80038de:	b29b      	uxth	r3, r3
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	f000 8096 	beq.w	8003a20 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 80038f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	f000 8091 	beq.w	8003a20 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003906:	e853 3f00 	ldrex	r3, [r3]
 800390a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800390c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800390e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003912:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	461a      	mov	r2, r3
 800391c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003920:	647b      	str	r3, [r7, #68]	; 0x44
 8003922:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003924:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003926:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003928:	e841 2300 	strex	r3, r2, [r1]
 800392c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800392e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003930:	2b00      	cmp	r3, #0
 8003932:	d1e4      	bne.n	80038fe <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	3308      	adds	r3, #8
 800393a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800393c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393e:	e853 3f00 	ldrex	r3, [r3]
 8003942:	623b      	str	r3, [r7, #32]
   return(result);
 8003944:	6a3b      	ldr	r3, [r7, #32]
 8003946:	f023 0301 	bic.w	r3, r3, #1
 800394a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	3308      	adds	r3, #8
 8003954:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003958:	633a      	str	r2, [r7, #48]	; 0x30
 800395a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800395c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800395e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003960:	e841 2300 	strex	r3, r2, [r1]
 8003964:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003968:	2b00      	cmp	r3, #0
 800396a:	d1e3      	bne.n	8003934 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2220      	movs	r2, #32
 8003970:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	e853 3f00 	ldrex	r3, [r3]
 800398c:	60fb      	str	r3, [r7, #12]
   return(result);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f023 0310 	bic.w	r3, r3, #16
 8003994:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	461a      	mov	r2, r3
 800399e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80039a2:	61fb      	str	r3, [r7, #28]
 80039a4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a6:	69b9      	ldr	r1, [r7, #24]
 80039a8:	69fa      	ldr	r2, [r7, #28]
 80039aa:	e841 2300 	strex	r3, r2, [r1]
 80039ae:	617b      	str	r3, [r7, #20]
   return(result);
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d1e4      	bne.n	8003980 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2202      	movs	r2, #2
 80039ba:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80039bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80039c0:	4619      	mov	r1, r3
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 f850 	bl	8003a68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80039c8:	e02a      	b.n	8003a20 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80039ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00e      	beq.n	80039f4 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80039d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d008      	beq.n	80039f4 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d01c      	beq.n	8003a24 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	4798      	blx	r3
    }
    return;
 80039f2:	e017      	b.n	8003a24 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80039f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d012      	beq.n	8003a26 <HAL_UART_IRQHandler+0x59e>
 8003a00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d00c      	beq.n	8003a26 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f000 fd7b 	bl	8004508 <UART_EndTransmit_IT>
    return;
 8003a12:	e008      	b.n	8003a26 <HAL_UART_IRQHandler+0x59e>
      return;
 8003a14:	bf00      	nop
 8003a16:	e006      	b.n	8003a26 <HAL_UART_IRQHandler+0x59e>
    return;
 8003a18:	bf00      	nop
 8003a1a:	e004      	b.n	8003a26 <HAL_UART_IRQHandler+0x59e>
      return;
 8003a1c:	bf00      	nop
 8003a1e:	e002      	b.n	8003a26 <HAL_UART_IRQHandler+0x59e>
      return;
 8003a20:	bf00      	nop
 8003a22:	e000      	b.n	8003a26 <HAL_UART_IRQHandler+0x59e>
    return;
 8003a24:	bf00      	nop
  }

}
 8003a26:	37e8      	adds	r7, #232	; 0xe8
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003a34:	bf00      	nop
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003a48:	bf00      	nop
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003a5c:	bf00      	nop
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	460b      	mov	r3, r1
 8003a72:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003a74:	bf00      	nop
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b088      	sub	sp, #32
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	689a      	ldr	r2, [r3, #8]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	691b      	ldr	r3, [r3, #16]
 8003a94:	431a      	orrs	r2, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	695b      	ldr	r3, [r3, #20]
 8003a9a:	431a      	orrs	r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	69db      	ldr	r3, [r3, #28]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	4ba6      	ldr	r3, [pc, #664]	; (8003d44 <UART_SetConfig+0x2c4>)
 8003aac:	4013      	ands	r3, r2
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	6812      	ldr	r2, [r2, #0]
 8003ab2:	6979      	ldr	r1, [r7, #20]
 8003ab4:	430b      	orrs	r3, r1
 8003ab6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	68da      	ldr	r2, [r3, #12]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	430a      	orrs	r2, r1
 8003acc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a1b      	ldr	r3, [r3, #32]
 8003ad8:	697a      	ldr	r2, [r7, #20]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	697a      	ldr	r2, [r7, #20]
 8003aee:	430a      	orrs	r2, r1
 8003af0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a94      	ldr	r2, [pc, #592]	; (8003d48 <UART_SetConfig+0x2c8>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d120      	bne.n	8003b3e <UART_SetConfig+0xbe>
 8003afc:	4b93      	ldr	r3, [pc, #588]	; (8003d4c <UART_SetConfig+0x2cc>)
 8003afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b02:	f003 0303 	and.w	r3, r3, #3
 8003b06:	2b03      	cmp	r3, #3
 8003b08:	d816      	bhi.n	8003b38 <UART_SetConfig+0xb8>
 8003b0a:	a201      	add	r2, pc, #4	; (adr r2, 8003b10 <UART_SetConfig+0x90>)
 8003b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b10:	08003b21 	.word	0x08003b21
 8003b14:	08003b2d 	.word	0x08003b2d
 8003b18:	08003b27 	.word	0x08003b27
 8003b1c:	08003b33 	.word	0x08003b33
 8003b20:	2301      	movs	r3, #1
 8003b22:	77fb      	strb	r3, [r7, #31]
 8003b24:	e150      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003b26:	2302      	movs	r3, #2
 8003b28:	77fb      	strb	r3, [r7, #31]
 8003b2a:	e14d      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003b2c:	2304      	movs	r3, #4
 8003b2e:	77fb      	strb	r3, [r7, #31]
 8003b30:	e14a      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003b32:	2308      	movs	r3, #8
 8003b34:	77fb      	strb	r3, [r7, #31]
 8003b36:	e147      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003b38:	2310      	movs	r3, #16
 8003b3a:	77fb      	strb	r3, [r7, #31]
 8003b3c:	e144      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a83      	ldr	r2, [pc, #524]	; (8003d50 <UART_SetConfig+0x2d0>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d132      	bne.n	8003bae <UART_SetConfig+0x12e>
 8003b48:	4b80      	ldr	r3, [pc, #512]	; (8003d4c <UART_SetConfig+0x2cc>)
 8003b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b4e:	f003 030c 	and.w	r3, r3, #12
 8003b52:	2b0c      	cmp	r3, #12
 8003b54:	d828      	bhi.n	8003ba8 <UART_SetConfig+0x128>
 8003b56:	a201      	add	r2, pc, #4	; (adr r2, 8003b5c <UART_SetConfig+0xdc>)
 8003b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b5c:	08003b91 	.word	0x08003b91
 8003b60:	08003ba9 	.word	0x08003ba9
 8003b64:	08003ba9 	.word	0x08003ba9
 8003b68:	08003ba9 	.word	0x08003ba9
 8003b6c:	08003b9d 	.word	0x08003b9d
 8003b70:	08003ba9 	.word	0x08003ba9
 8003b74:	08003ba9 	.word	0x08003ba9
 8003b78:	08003ba9 	.word	0x08003ba9
 8003b7c:	08003b97 	.word	0x08003b97
 8003b80:	08003ba9 	.word	0x08003ba9
 8003b84:	08003ba9 	.word	0x08003ba9
 8003b88:	08003ba9 	.word	0x08003ba9
 8003b8c:	08003ba3 	.word	0x08003ba3
 8003b90:	2300      	movs	r3, #0
 8003b92:	77fb      	strb	r3, [r7, #31]
 8003b94:	e118      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003b96:	2302      	movs	r3, #2
 8003b98:	77fb      	strb	r3, [r7, #31]
 8003b9a:	e115      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003b9c:	2304      	movs	r3, #4
 8003b9e:	77fb      	strb	r3, [r7, #31]
 8003ba0:	e112      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003ba2:	2308      	movs	r3, #8
 8003ba4:	77fb      	strb	r3, [r7, #31]
 8003ba6:	e10f      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003ba8:	2310      	movs	r3, #16
 8003baa:	77fb      	strb	r3, [r7, #31]
 8003bac:	e10c      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a68      	ldr	r2, [pc, #416]	; (8003d54 <UART_SetConfig+0x2d4>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d120      	bne.n	8003bfa <UART_SetConfig+0x17a>
 8003bb8:	4b64      	ldr	r3, [pc, #400]	; (8003d4c <UART_SetConfig+0x2cc>)
 8003bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bbe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003bc2:	2b30      	cmp	r3, #48	; 0x30
 8003bc4:	d013      	beq.n	8003bee <UART_SetConfig+0x16e>
 8003bc6:	2b30      	cmp	r3, #48	; 0x30
 8003bc8:	d814      	bhi.n	8003bf4 <UART_SetConfig+0x174>
 8003bca:	2b20      	cmp	r3, #32
 8003bcc:	d009      	beq.n	8003be2 <UART_SetConfig+0x162>
 8003bce:	2b20      	cmp	r3, #32
 8003bd0:	d810      	bhi.n	8003bf4 <UART_SetConfig+0x174>
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d002      	beq.n	8003bdc <UART_SetConfig+0x15c>
 8003bd6:	2b10      	cmp	r3, #16
 8003bd8:	d006      	beq.n	8003be8 <UART_SetConfig+0x168>
 8003bda:	e00b      	b.n	8003bf4 <UART_SetConfig+0x174>
 8003bdc:	2300      	movs	r3, #0
 8003bde:	77fb      	strb	r3, [r7, #31]
 8003be0:	e0f2      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003be2:	2302      	movs	r3, #2
 8003be4:	77fb      	strb	r3, [r7, #31]
 8003be6:	e0ef      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003be8:	2304      	movs	r3, #4
 8003bea:	77fb      	strb	r3, [r7, #31]
 8003bec:	e0ec      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003bee:	2308      	movs	r3, #8
 8003bf0:	77fb      	strb	r3, [r7, #31]
 8003bf2:	e0e9      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003bf4:	2310      	movs	r3, #16
 8003bf6:	77fb      	strb	r3, [r7, #31]
 8003bf8:	e0e6      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a56      	ldr	r2, [pc, #344]	; (8003d58 <UART_SetConfig+0x2d8>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d120      	bne.n	8003c46 <UART_SetConfig+0x1c6>
 8003c04:	4b51      	ldr	r3, [pc, #324]	; (8003d4c <UART_SetConfig+0x2cc>)
 8003c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c0a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003c0e:	2bc0      	cmp	r3, #192	; 0xc0
 8003c10:	d013      	beq.n	8003c3a <UART_SetConfig+0x1ba>
 8003c12:	2bc0      	cmp	r3, #192	; 0xc0
 8003c14:	d814      	bhi.n	8003c40 <UART_SetConfig+0x1c0>
 8003c16:	2b80      	cmp	r3, #128	; 0x80
 8003c18:	d009      	beq.n	8003c2e <UART_SetConfig+0x1ae>
 8003c1a:	2b80      	cmp	r3, #128	; 0x80
 8003c1c:	d810      	bhi.n	8003c40 <UART_SetConfig+0x1c0>
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d002      	beq.n	8003c28 <UART_SetConfig+0x1a8>
 8003c22:	2b40      	cmp	r3, #64	; 0x40
 8003c24:	d006      	beq.n	8003c34 <UART_SetConfig+0x1b4>
 8003c26:	e00b      	b.n	8003c40 <UART_SetConfig+0x1c0>
 8003c28:	2300      	movs	r3, #0
 8003c2a:	77fb      	strb	r3, [r7, #31]
 8003c2c:	e0cc      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003c2e:	2302      	movs	r3, #2
 8003c30:	77fb      	strb	r3, [r7, #31]
 8003c32:	e0c9      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003c34:	2304      	movs	r3, #4
 8003c36:	77fb      	strb	r3, [r7, #31]
 8003c38:	e0c6      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003c3a:	2308      	movs	r3, #8
 8003c3c:	77fb      	strb	r3, [r7, #31]
 8003c3e:	e0c3      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003c40:	2310      	movs	r3, #16
 8003c42:	77fb      	strb	r3, [r7, #31]
 8003c44:	e0c0      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a44      	ldr	r2, [pc, #272]	; (8003d5c <UART_SetConfig+0x2dc>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d125      	bne.n	8003c9c <UART_SetConfig+0x21c>
 8003c50:	4b3e      	ldr	r3, [pc, #248]	; (8003d4c <UART_SetConfig+0x2cc>)
 8003c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c5e:	d017      	beq.n	8003c90 <UART_SetConfig+0x210>
 8003c60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c64:	d817      	bhi.n	8003c96 <UART_SetConfig+0x216>
 8003c66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c6a:	d00b      	beq.n	8003c84 <UART_SetConfig+0x204>
 8003c6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c70:	d811      	bhi.n	8003c96 <UART_SetConfig+0x216>
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d003      	beq.n	8003c7e <UART_SetConfig+0x1fe>
 8003c76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c7a:	d006      	beq.n	8003c8a <UART_SetConfig+0x20a>
 8003c7c:	e00b      	b.n	8003c96 <UART_SetConfig+0x216>
 8003c7e:	2300      	movs	r3, #0
 8003c80:	77fb      	strb	r3, [r7, #31]
 8003c82:	e0a1      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003c84:	2302      	movs	r3, #2
 8003c86:	77fb      	strb	r3, [r7, #31]
 8003c88:	e09e      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003c8a:	2304      	movs	r3, #4
 8003c8c:	77fb      	strb	r3, [r7, #31]
 8003c8e:	e09b      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003c90:	2308      	movs	r3, #8
 8003c92:	77fb      	strb	r3, [r7, #31]
 8003c94:	e098      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003c96:	2310      	movs	r3, #16
 8003c98:	77fb      	strb	r3, [r7, #31]
 8003c9a:	e095      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a2f      	ldr	r2, [pc, #188]	; (8003d60 <UART_SetConfig+0x2e0>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d125      	bne.n	8003cf2 <UART_SetConfig+0x272>
 8003ca6:	4b29      	ldr	r3, [pc, #164]	; (8003d4c <UART_SetConfig+0x2cc>)
 8003ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003cb0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003cb4:	d017      	beq.n	8003ce6 <UART_SetConfig+0x266>
 8003cb6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003cba:	d817      	bhi.n	8003cec <UART_SetConfig+0x26c>
 8003cbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cc0:	d00b      	beq.n	8003cda <UART_SetConfig+0x25a>
 8003cc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cc6:	d811      	bhi.n	8003cec <UART_SetConfig+0x26c>
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d003      	beq.n	8003cd4 <UART_SetConfig+0x254>
 8003ccc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cd0:	d006      	beq.n	8003ce0 <UART_SetConfig+0x260>
 8003cd2:	e00b      	b.n	8003cec <UART_SetConfig+0x26c>
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	77fb      	strb	r3, [r7, #31]
 8003cd8:	e076      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003cda:	2302      	movs	r3, #2
 8003cdc:	77fb      	strb	r3, [r7, #31]
 8003cde:	e073      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003ce0:	2304      	movs	r3, #4
 8003ce2:	77fb      	strb	r3, [r7, #31]
 8003ce4:	e070      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003ce6:	2308      	movs	r3, #8
 8003ce8:	77fb      	strb	r3, [r7, #31]
 8003cea:	e06d      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003cec:	2310      	movs	r3, #16
 8003cee:	77fb      	strb	r3, [r7, #31]
 8003cf0:	e06a      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a1b      	ldr	r2, [pc, #108]	; (8003d64 <UART_SetConfig+0x2e4>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d138      	bne.n	8003d6e <UART_SetConfig+0x2ee>
 8003cfc:	4b13      	ldr	r3, [pc, #76]	; (8003d4c <UART_SetConfig+0x2cc>)
 8003cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d02:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003d06:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003d0a:	d017      	beq.n	8003d3c <UART_SetConfig+0x2bc>
 8003d0c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003d10:	d82a      	bhi.n	8003d68 <UART_SetConfig+0x2e8>
 8003d12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d16:	d00b      	beq.n	8003d30 <UART_SetConfig+0x2b0>
 8003d18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d1c:	d824      	bhi.n	8003d68 <UART_SetConfig+0x2e8>
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d003      	beq.n	8003d2a <UART_SetConfig+0x2aa>
 8003d22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d26:	d006      	beq.n	8003d36 <UART_SetConfig+0x2b6>
 8003d28:	e01e      	b.n	8003d68 <UART_SetConfig+0x2e8>
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	77fb      	strb	r3, [r7, #31]
 8003d2e:	e04b      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003d30:	2302      	movs	r3, #2
 8003d32:	77fb      	strb	r3, [r7, #31]
 8003d34:	e048      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003d36:	2304      	movs	r3, #4
 8003d38:	77fb      	strb	r3, [r7, #31]
 8003d3a:	e045      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003d3c:	2308      	movs	r3, #8
 8003d3e:	77fb      	strb	r3, [r7, #31]
 8003d40:	e042      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003d42:	bf00      	nop
 8003d44:	efff69f3 	.word	0xefff69f3
 8003d48:	40011000 	.word	0x40011000
 8003d4c:	40023800 	.word	0x40023800
 8003d50:	40004400 	.word	0x40004400
 8003d54:	40004800 	.word	0x40004800
 8003d58:	40004c00 	.word	0x40004c00
 8003d5c:	40005000 	.word	0x40005000
 8003d60:	40011400 	.word	0x40011400
 8003d64:	40007800 	.word	0x40007800
 8003d68:	2310      	movs	r3, #16
 8003d6a:	77fb      	strb	r3, [r7, #31]
 8003d6c:	e02c      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a72      	ldr	r2, [pc, #456]	; (8003f3c <UART_SetConfig+0x4bc>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d125      	bne.n	8003dc4 <UART_SetConfig+0x344>
 8003d78:	4b71      	ldr	r3, [pc, #452]	; (8003f40 <UART_SetConfig+0x4c0>)
 8003d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d7e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003d82:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003d86:	d017      	beq.n	8003db8 <UART_SetConfig+0x338>
 8003d88:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003d8c:	d817      	bhi.n	8003dbe <UART_SetConfig+0x33e>
 8003d8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d92:	d00b      	beq.n	8003dac <UART_SetConfig+0x32c>
 8003d94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d98:	d811      	bhi.n	8003dbe <UART_SetConfig+0x33e>
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d003      	beq.n	8003da6 <UART_SetConfig+0x326>
 8003d9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003da2:	d006      	beq.n	8003db2 <UART_SetConfig+0x332>
 8003da4:	e00b      	b.n	8003dbe <UART_SetConfig+0x33e>
 8003da6:	2300      	movs	r3, #0
 8003da8:	77fb      	strb	r3, [r7, #31]
 8003daa:	e00d      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003dac:	2302      	movs	r3, #2
 8003dae:	77fb      	strb	r3, [r7, #31]
 8003db0:	e00a      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003db2:	2304      	movs	r3, #4
 8003db4:	77fb      	strb	r3, [r7, #31]
 8003db6:	e007      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003db8:	2308      	movs	r3, #8
 8003dba:	77fb      	strb	r3, [r7, #31]
 8003dbc:	e004      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003dbe:	2310      	movs	r3, #16
 8003dc0:	77fb      	strb	r3, [r7, #31]
 8003dc2:	e001      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003dc4:	2310      	movs	r3, #16
 8003dc6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	69db      	ldr	r3, [r3, #28]
 8003dcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dd0:	d15b      	bne.n	8003e8a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003dd2:	7ffb      	ldrb	r3, [r7, #31]
 8003dd4:	2b08      	cmp	r3, #8
 8003dd6:	d828      	bhi.n	8003e2a <UART_SetConfig+0x3aa>
 8003dd8:	a201      	add	r2, pc, #4	; (adr r2, 8003de0 <UART_SetConfig+0x360>)
 8003dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dde:	bf00      	nop
 8003de0:	08003e05 	.word	0x08003e05
 8003de4:	08003e0d 	.word	0x08003e0d
 8003de8:	08003e15 	.word	0x08003e15
 8003dec:	08003e2b 	.word	0x08003e2b
 8003df0:	08003e1b 	.word	0x08003e1b
 8003df4:	08003e2b 	.word	0x08003e2b
 8003df8:	08003e2b 	.word	0x08003e2b
 8003dfc:	08003e2b 	.word	0x08003e2b
 8003e00:	08003e23 	.word	0x08003e23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e04:	f7fe fe12 	bl	8002a2c <HAL_RCC_GetPCLK1Freq>
 8003e08:	61b8      	str	r0, [r7, #24]
        break;
 8003e0a:	e013      	b.n	8003e34 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e0c:	f7fe fe22 	bl	8002a54 <HAL_RCC_GetPCLK2Freq>
 8003e10:	61b8      	str	r0, [r7, #24]
        break;
 8003e12:	e00f      	b.n	8003e34 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e14:	4b4b      	ldr	r3, [pc, #300]	; (8003f44 <UART_SetConfig+0x4c4>)
 8003e16:	61bb      	str	r3, [r7, #24]
        break;
 8003e18:	e00c      	b.n	8003e34 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e1a:	f7fe fd35 	bl	8002888 <HAL_RCC_GetSysClockFreq>
 8003e1e:	61b8      	str	r0, [r7, #24]
        break;
 8003e20:	e008      	b.n	8003e34 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e26:	61bb      	str	r3, [r7, #24]
        break;
 8003e28:	e004      	b.n	8003e34 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	77bb      	strb	r3, [r7, #30]
        break;
 8003e32:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d074      	beq.n	8003f24 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	005a      	lsls	r2, r3, #1
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	085b      	lsrs	r3, r3, #1
 8003e44:	441a      	add	r2, r3
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e4e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	2b0f      	cmp	r3, #15
 8003e54:	d916      	bls.n	8003e84 <UART_SetConfig+0x404>
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e5c:	d212      	bcs.n	8003e84 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	f023 030f 	bic.w	r3, r3, #15
 8003e66:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	085b      	lsrs	r3, r3, #1
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	f003 0307 	and.w	r3, r3, #7
 8003e72:	b29a      	uxth	r2, r3
 8003e74:	89fb      	ldrh	r3, [r7, #14]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	89fa      	ldrh	r2, [r7, #14]
 8003e80:	60da      	str	r2, [r3, #12]
 8003e82:	e04f      	b.n	8003f24 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	77bb      	strb	r3, [r7, #30]
 8003e88:	e04c      	b.n	8003f24 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e8a:	7ffb      	ldrb	r3, [r7, #31]
 8003e8c:	2b08      	cmp	r3, #8
 8003e8e:	d828      	bhi.n	8003ee2 <UART_SetConfig+0x462>
 8003e90:	a201      	add	r2, pc, #4	; (adr r2, 8003e98 <UART_SetConfig+0x418>)
 8003e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e96:	bf00      	nop
 8003e98:	08003ebd 	.word	0x08003ebd
 8003e9c:	08003ec5 	.word	0x08003ec5
 8003ea0:	08003ecd 	.word	0x08003ecd
 8003ea4:	08003ee3 	.word	0x08003ee3
 8003ea8:	08003ed3 	.word	0x08003ed3
 8003eac:	08003ee3 	.word	0x08003ee3
 8003eb0:	08003ee3 	.word	0x08003ee3
 8003eb4:	08003ee3 	.word	0x08003ee3
 8003eb8:	08003edb 	.word	0x08003edb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ebc:	f7fe fdb6 	bl	8002a2c <HAL_RCC_GetPCLK1Freq>
 8003ec0:	61b8      	str	r0, [r7, #24]
        break;
 8003ec2:	e013      	b.n	8003eec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ec4:	f7fe fdc6 	bl	8002a54 <HAL_RCC_GetPCLK2Freq>
 8003ec8:	61b8      	str	r0, [r7, #24]
        break;
 8003eca:	e00f      	b.n	8003eec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ecc:	4b1d      	ldr	r3, [pc, #116]	; (8003f44 <UART_SetConfig+0x4c4>)
 8003ece:	61bb      	str	r3, [r7, #24]
        break;
 8003ed0:	e00c      	b.n	8003eec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ed2:	f7fe fcd9 	bl	8002888 <HAL_RCC_GetSysClockFreq>
 8003ed6:	61b8      	str	r0, [r7, #24]
        break;
 8003ed8:	e008      	b.n	8003eec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003eda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ede:	61bb      	str	r3, [r7, #24]
        break;
 8003ee0:	e004      	b.n	8003eec <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	77bb      	strb	r3, [r7, #30]
        break;
 8003eea:	bf00      	nop
    }

    if (pclk != 0U)
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d018      	beq.n	8003f24 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	085a      	lsrs	r2, r3, #1
 8003ef8:	69bb      	ldr	r3, [r7, #24]
 8003efa:	441a      	add	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f04:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	2b0f      	cmp	r3, #15
 8003f0a:	d909      	bls.n	8003f20 <UART_SetConfig+0x4a0>
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f12:	d205      	bcs.n	8003f20 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	b29a      	uxth	r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	60da      	str	r2, [r3, #12]
 8003f1e:	e001      	b.n	8003f24 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003f30:	7fbb      	ldrb	r3, [r7, #30]
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3720      	adds	r7, #32
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	40007c00 	.word	0x40007c00
 8003f40:	40023800 	.word	0x40023800
 8003f44:	00f42400 	.word	0x00f42400

08003f48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f54:	f003 0301 	and.w	r3, r3, #1
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d00a      	beq.n	8003f72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	430a      	orrs	r2, r1
 8003f70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f76:	f003 0302 	and.w	r3, r3, #2
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d00a      	beq.n	8003f94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	430a      	orrs	r2, r1
 8003f92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f98:	f003 0304 	and.w	r3, r3, #4
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d00a      	beq.n	8003fb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	430a      	orrs	r2, r1
 8003fb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fba:	f003 0308 	and.w	r3, r3, #8
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00a      	beq.n	8003fd8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	430a      	orrs	r2, r1
 8003fd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fdc:	f003 0310 	and.w	r3, r3, #16
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d00a      	beq.n	8003ffa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	430a      	orrs	r2, r1
 8003ff8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffe:	f003 0320 	and.w	r3, r3, #32
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00a      	beq.n	800401c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	430a      	orrs	r2, r1
 800401a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004024:	2b00      	cmp	r3, #0
 8004026:	d01a      	beq.n	800405e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	430a      	orrs	r2, r1
 800403c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004042:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004046:	d10a      	bne.n	800405e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	430a      	orrs	r2, r1
 800405c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00a      	beq.n	8004080 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	430a      	orrs	r2, r1
 800407e:	605a      	str	r2, [r3, #4]
  }
}
 8004080:	bf00      	nop
 8004082:	370c      	adds	r7, #12
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b086      	sub	sp, #24
 8004090:	af02      	add	r7, sp, #8
 8004092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800409c:	f7fd fc84 	bl	80019a8 <HAL_GetTick>
 80040a0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0308 	and.w	r3, r3, #8
 80040ac:	2b08      	cmp	r3, #8
 80040ae:	d10e      	bne.n	80040ce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040b4:	9300      	str	r3, [sp, #0]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2200      	movs	r2, #0
 80040ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 f81b 	bl	80040fa <UART_WaitOnFlagUntilTimeout>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d001      	beq.n	80040ce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e011      	b.n	80040f2 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2220      	movs	r2, #32
 80040d2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2220      	movs	r2, #32
 80040d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3710      	adds	r7, #16
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}

080040fa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80040fa:	b580      	push	{r7, lr}
 80040fc:	b09c      	sub	sp, #112	; 0x70
 80040fe:	af00      	add	r7, sp, #0
 8004100:	60f8      	str	r0, [r7, #12]
 8004102:	60b9      	str	r1, [r7, #8]
 8004104:	603b      	str	r3, [r7, #0]
 8004106:	4613      	mov	r3, r2
 8004108:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800410a:	e0a7      	b.n	800425c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800410c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800410e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004112:	f000 80a3 	beq.w	800425c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004116:	f7fd fc47 	bl	80019a8 <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004122:	429a      	cmp	r2, r3
 8004124:	d302      	bcc.n	800412c <UART_WaitOnFlagUntilTimeout+0x32>
 8004126:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004128:	2b00      	cmp	r3, #0
 800412a:	d13f      	bne.n	80041ac <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004132:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004134:	e853 3f00 	ldrex	r3, [r3]
 8004138:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800413a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800413c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004140:	667b      	str	r3, [r7, #100]	; 0x64
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	461a      	mov	r2, r3
 8004148:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800414a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800414c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800414e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004150:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004152:	e841 2300 	strex	r3, r2, [r1]
 8004156:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004158:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800415a:	2b00      	cmp	r3, #0
 800415c:	d1e6      	bne.n	800412c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	3308      	adds	r3, #8
 8004164:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004166:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004168:	e853 3f00 	ldrex	r3, [r3]
 800416c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800416e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004170:	f023 0301 	bic.w	r3, r3, #1
 8004174:	663b      	str	r3, [r7, #96]	; 0x60
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	3308      	adds	r3, #8
 800417c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800417e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004180:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004182:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004184:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004186:	e841 2300 	strex	r3, r2, [r1]
 800418a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800418c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800418e:	2b00      	cmp	r3, #0
 8004190:	d1e5      	bne.n	800415e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2220      	movs	r2, #32
 8004196:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2220      	movs	r2, #32
 800419c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80041a8:	2303      	movs	r3, #3
 80041aa:	e068      	b.n	800427e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0304 	and.w	r3, r3, #4
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d050      	beq.n	800425c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	69db      	ldr	r3, [r3, #28]
 80041c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041c8:	d148      	bne.n	800425c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041d2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041dc:	e853 3f00 	ldrex	r3, [r3]
 80041e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80041e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80041e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	461a      	mov	r2, r3
 80041f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041f2:	637b      	str	r3, [r7, #52]	; 0x34
 80041f4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80041f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041fa:	e841 2300 	strex	r3, r2, [r1]
 80041fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004202:	2b00      	cmp	r3, #0
 8004204:	d1e6      	bne.n	80041d4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	3308      	adds	r3, #8
 800420c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	e853 3f00 	ldrex	r3, [r3]
 8004214:	613b      	str	r3, [r7, #16]
   return(result);
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	f023 0301 	bic.w	r3, r3, #1
 800421c:	66bb      	str	r3, [r7, #104]	; 0x68
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	3308      	adds	r3, #8
 8004224:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004226:	623a      	str	r2, [r7, #32]
 8004228:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800422a:	69f9      	ldr	r1, [r7, #28]
 800422c:	6a3a      	ldr	r2, [r7, #32]
 800422e:	e841 2300 	strex	r3, r2, [r1]
 8004232:	61bb      	str	r3, [r7, #24]
   return(result);
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1e5      	bne.n	8004206 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2220      	movs	r2, #32
 800423e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2220      	movs	r2, #32
 8004244:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2220      	movs	r2, #32
 800424c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2200      	movs	r2, #0
 8004254:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004258:	2303      	movs	r3, #3
 800425a:	e010      	b.n	800427e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	69da      	ldr	r2, [r3, #28]
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	4013      	ands	r3, r2
 8004266:	68ba      	ldr	r2, [r7, #8]
 8004268:	429a      	cmp	r2, r3
 800426a:	bf0c      	ite	eq
 800426c:	2301      	moveq	r3, #1
 800426e:	2300      	movne	r3, #0
 8004270:	b2db      	uxtb	r3, r3
 8004272:	461a      	mov	r2, r3
 8004274:	79fb      	ldrb	r3, [r7, #7]
 8004276:	429a      	cmp	r2, r3
 8004278:	f43f af48 	beq.w	800410c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800427c:	2300      	movs	r3, #0
}
 800427e:	4618      	mov	r0, r3
 8004280:	3770      	adds	r7, #112	; 0x70
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
	...

08004288 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004288:	b480      	push	{r7}
 800428a:	b097      	sub	sp, #92	; 0x5c
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	4613      	mov	r3, r2
 8004294:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	68ba      	ldr	r2, [r7, #8]
 800429a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	88fa      	ldrh	r2, [r7, #6]
 80042a0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	88fa      	ldrh	r2, [r7, #6]
 80042a8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2200      	movs	r2, #0
 80042b0:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042ba:	d10e      	bne.n	80042da <UART_Start_Receive_IT+0x52>
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d105      	bne.n	80042d0 <UART_Start_Receive_IT+0x48>
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80042ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80042ce:	e02d      	b.n	800432c <UART_Start_Receive_IT+0xa4>
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	22ff      	movs	r2, #255	; 0xff
 80042d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80042d8:	e028      	b.n	800432c <UART_Start_Receive_IT+0xa4>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d10d      	bne.n	80042fe <UART_Start_Receive_IT+0x76>
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d104      	bne.n	80042f4 <UART_Start_Receive_IT+0x6c>
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	22ff      	movs	r2, #255	; 0xff
 80042ee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80042f2:	e01b      	b.n	800432c <UART_Start_Receive_IT+0xa4>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	227f      	movs	r2, #127	; 0x7f
 80042f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80042fc:	e016      	b.n	800432c <UART_Start_Receive_IT+0xa4>
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004306:	d10d      	bne.n	8004324 <UART_Start_Receive_IT+0x9c>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d104      	bne.n	800431a <UART_Start_Receive_IT+0x92>
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	227f      	movs	r2, #127	; 0x7f
 8004314:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004318:	e008      	b.n	800432c <UART_Start_Receive_IT+0xa4>
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	223f      	movs	r2, #63	; 0x3f
 800431e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004322:	e003      	b.n	800432c <UART_Start_Receive_IT+0xa4>
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2200      	movs	r2, #0
 8004328:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2200      	movs	r2, #0
 8004330:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2222      	movs	r2, #34	; 0x22
 8004338:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	3308      	adds	r3, #8
 8004342:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004346:	e853 3f00 	ldrex	r3, [r3]
 800434a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800434c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800434e:	f043 0301 	orr.w	r3, r3, #1
 8004352:	657b      	str	r3, [r7, #84]	; 0x54
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	3308      	adds	r3, #8
 800435a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800435c:	64ba      	str	r2, [r7, #72]	; 0x48
 800435e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004360:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004362:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004364:	e841 2300 	strex	r3, r2, [r1]
 8004368:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800436a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800436c:	2b00      	cmp	r3, #0
 800436e:	d1e5      	bne.n	800433c <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004378:	d107      	bne.n	800438a <UART_Start_Receive_IT+0x102>
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d103      	bne.n	800438a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	4a21      	ldr	r2, [pc, #132]	; (800440c <UART_Start_Receive_IT+0x184>)
 8004386:	669a      	str	r2, [r3, #104]	; 0x68
 8004388:	e002      	b.n	8004390 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	4a20      	ldr	r2, [pc, #128]	; (8004410 <UART_Start_Receive_IT+0x188>)
 800438e:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	691b      	ldr	r3, [r3, #16]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d019      	beq.n	80043cc <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800439e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a0:	e853 3f00 	ldrex	r3, [r3]
 80043a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80043a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a8:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80043ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	461a      	mov	r2, r3
 80043b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043b6:	637b      	str	r3, [r7, #52]	; 0x34
 80043b8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043be:	e841 2300 	strex	r3, r2, [r1]
 80043c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80043c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1e6      	bne.n	8004398 <UART_Start_Receive_IT+0x110>
 80043ca:	e018      	b.n	80043fe <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	e853 3f00 	ldrex	r3, [r3]
 80043d8:	613b      	str	r3, [r7, #16]
   return(result);
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	f043 0320 	orr.w	r3, r3, #32
 80043e0:	653b      	str	r3, [r7, #80]	; 0x50
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	461a      	mov	r2, r3
 80043e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043ea:	623b      	str	r3, [r7, #32]
 80043ec:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ee:	69f9      	ldr	r1, [r7, #28]
 80043f0:	6a3a      	ldr	r2, [r7, #32]
 80043f2:	e841 2300 	strex	r3, r2, [r1]
 80043f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d1e6      	bne.n	80043cc <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80043fe:	2300      	movs	r3, #0
}
 8004400:	4618      	mov	r0, r3
 8004402:	375c      	adds	r7, #92	; 0x5c
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr
 800440c:	080046c3 	.word	0x080046c3
 8004410:	0800455d 	.word	0x0800455d

08004414 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004414:	b480      	push	{r7}
 8004416:	b095      	sub	sp, #84	; 0x54
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004424:	e853 3f00 	ldrex	r3, [r3]
 8004428:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800442a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800442c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004430:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	461a      	mov	r2, r3
 8004438:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800443a:	643b      	str	r3, [r7, #64]	; 0x40
 800443c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800443e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004440:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004442:	e841 2300 	strex	r3, r2, [r1]
 8004446:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800444a:	2b00      	cmp	r3, #0
 800444c:	d1e6      	bne.n	800441c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	3308      	adds	r3, #8
 8004454:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004456:	6a3b      	ldr	r3, [r7, #32]
 8004458:	e853 3f00 	ldrex	r3, [r3]
 800445c:	61fb      	str	r3, [r7, #28]
   return(result);
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	f023 0301 	bic.w	r3, r3, #1
 8004464:	64bb      	str	r3, [r7, #72]	; 0x48
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	3308      	adds	r3, #8
 800446c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800446e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004470:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004472:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004474:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004476:	e841 2300 	strex	r3, r2, [r1]
 800447a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800447c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447e:	2b00      	cmp	r3, #0
 8004480:	d1e5      	bne.n	800444e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004486:	2b01      	cmp	r3, #1
 8004488:	d118      	bne.n	80044bc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	e853 3f00 	ldrex	r3, [r3]
 8004496:	60bb      	str	r3, [r7, #8]
   return(result);
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	f023 0310 	bic.w	r3, r3, #16
 800449e:	647b      	str	r3, [r7, #68]	; 0x44
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	461a      	mov	r2, r3
 80044a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044a8:	61bb      	str	r3, [r7, #24]
 80044aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ac:	6979      	ldr	r1, [r7, #20]
 80044ae:	69ba      	ldr	r2, [r7, #24]
 80044b0:	e841 2300 	strex	r3, r2, [r1]
 80044b4:	613b      	str	r3, [r7, #16]
   return(result);
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d1e6      	bne.n	800448a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2220      	movs	r2, #32
 80044c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	669a      	str	r2, [r3, #104]	; 0x68
}
 80044d0:	bf00      	nop
 80044d2:	3754      	adds	r7, #84	; 0x54
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b084      	sub	sp, #16
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80044fa:	68f8      	ldr	r0, [r7, #12]
 80044fc:	f7ff faaa 	bl	8003a54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004500:	bf00      	nop
 8004502:	3710      	adds	r7, #16
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b088      	sub	sp, #32
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	e853 3f00 	ldrex	r3, [r3]
 800451c:	60bb      	str	r3, [r7, #8]
   return(result);
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004524:	61fb      	str	r3, [r7, #28]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	461a      	mov	r2, r3
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	61bb      	str	r3, [r7, #24]
 8004530:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004532:	6979      	ldr	r1, [r7, #20]
 8004534:	69ba      	ldr	r2, [r7, #24]
 8004536:	e841 2300 	strex	r3, r2, [r1]
 800453a:	613b      	str	r3, [r7, #16]
   return(result);
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d1e6      	bne.n	8004510 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2220      	movs	r2, #32
 8004546:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f7ff fa6c 	bl	8003a2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004554:	bf00      	nop
 8004556:	3720      	adds	r7, #32
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}

0800455c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b096      	sub	sp, #88	; 0x58
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800456a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004574:	2b22      	cmp	r3, #34	; 0x22
 8004576:	f040 8098 	bne.w	80046aa <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004580:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004584:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004588:	b2d9      	uxtb	r1, r3
 800458a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800458e:	b2da      	uxtb	r2, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004594:	400a      	ands	r2, r1
 8004596:	b2d2      	uxtb	r2, r2
 8004598:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800459e:	1c5a      	adds	r2, r3, #1
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	3b01      	subs	r3, #1
 80045ae:	b29a      	uxth	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80045bc:	b29b      	uxth	r3, r3
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d17b      	bne.n	80046ba <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ca:	e853 3f00 	ldrex	r3, [r3]
 80045ce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80045d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045d6:	653b      	str	r3, [r7, #80]	; 0x50
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	461a      	mov	r2, r3
 80045de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045e0:	647b      	str	r3, [r7, #68]	; 0x44
 80045e2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80045e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045e8:	e841 2300 	strex	r3, r2, [r1]
 80045ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80045ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d1e6      	bne.n	80045c2 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	3308      	adds	r3, #8
 80045fa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fe:	e853 3f00 	ldrex	r3, [r3]
 8004602:	623b      	str	r3, [r7, #32]
   return(result);
 8004604:	6a3b      	ldr	r3, [r7, #32]
 8004606:	f023 0301 	bic.w	r3, r3, #1
 800460a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	3308      	adds	r3, #8
 8004612:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004614:	633a      	str	r2, [r7, #48]	; 0x30
 8004616:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004618:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800461a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800461c:	e841 2300 	strex	r3, r2, [r1]
 8004620:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004624:	2b00      	cmp	r3, #0
 8004626:	d1e5      	bne.n	80045f4 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2220      	movs	r2, #32
 800462c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004640:	2b01      	cmp	r3, #1
 8004642:	d12e      	bne.n	80046a2 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	e853 3f00 	ldrex	r3, [r3]
 8004656:	60fb      	str	r3, [r7, #12]
   return(result);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f023 0310 	bic.w	r3, r3, #16
 800465e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	461a      	mov	r2, r3
 8004666:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004668:	61fb      	str	r3, [r7, #28]
 800466a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800466c:	69b9      	ldr	r1, [r7, #24]
 800466e:	69fa      	ldr	r2, [r7, #28]
 8004670:	e841 2300 	strex	r3, r2, [r1]
 8004674:	617b      	str	r3, [r7, #20]
   return(result);
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d1e6      	bne.n	800464a <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	69db      	ldr	r3, [r3, #28]
 8004682:	f003 0310 	and.w	r3, r3, #16
 8004686:	2b10      	cmp	r3, #16
 8004688:	d103      	bne.n	8004692 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2210      	movs	r2, #16
 8004690:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004698:	4619      	mov	r1, r3
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f7ff f9e4 	bl	8003a68 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80046a0:	e00b      	b.n	80046ba <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f7ff f9cc 	bl	8003a40 <HAL_UART_RxCpltCallback>
}
 80046a8:	e007      	b.n	80046ba <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	699a      	ldr	r2, [r3, #24]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f042 0208 	orr.w	r2, r2, #8
 80046b8:	619a      	str	r2, [r3, #24]
}
 80046ba:	bf00      	nop
 80046bc:	3758      	adds	r7, #88	; 0x58
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}

080046c2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80046c2:	b580      	push	{r7, lr}
 80046c4:	b096      	sub	sp, #88	; 0x58
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80046d0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046da:	2b22      	cmp	r3, #34	; 0x22
 80046dc:	f040 8098 	bne.w	8004810 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ee:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80046f0:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80046f4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80046f8:	4013      	ands	r3, r2
 80046fa:	b29a      	uxth	r2, r3
 80046fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046fe:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004704:	1c9a      	adds	r2, r3, #2
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004710:	b29b      	uxth	r3, r3
 8004712:	3b01      	subs	r3, #1
 8004714:	b29a      	uxth	r2, r3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004722:	b29b      	uxth	r3, r3
 8004724:	2b00      	cmp	r3, #0
 8004726:	d17b      	bne.n	8004820 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800472e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004730:	e853 3f00 	ldrex	r3, [r3]
 8004734:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004738:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800473c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	461a      	mov	r2, r3
 8004744:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004746:	643b      	str	r3, [r7, #64]	; 0x40
 8004748:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800474a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800474c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800474e:	e841 2300 	strex	r3, r2, [r1]
 8004752:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004756:	2b00      	cmp	r3, #0
 8004758:	d1e6      	bne.n	8004728 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	3308      	adds	r3, #8
 8004760:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004762:	6a3b      	ldr	r3, [r7, #32]
 8004764:	e853 3f00 	ldrex	r3, [r3]
 8004768:	61fb      	str	r3, [r7, #28]
   return(result);
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	f023 0301 	bic.w	r3, r3, #1
 8004770:	64bb      	str	r3, [r7, #72]	; 0x48
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	3308      	adds	r3, #8
 8004778:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800477a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800477c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800477e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004780:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004782:	e841 2300 	strex	r3, r2, [r1]
 8004786:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478a:	2b00      	cmp	r3, #0
 800478c:	d1e5      	bne.n	800475a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2220      	movs	r2, #32
 8004792:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d12e      	bne.n	8004808 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	e853 3f00 	ldrex	r3, [r3]
 80047bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	f023 0310 	bic.w	r3, r3, #16
 80047c4:	647b      	str	r3, [r7, #68]	; 0x44
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	461a      	mov	r2, r3
 80047cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047ce:	61bb      	str	r3, [r7, #24]
 80047d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d2:	6979      	ldr	r1, [r7, #20]
 80047d4:	69ba      	ldr	r2, [r7, #24]
 80047d6:	e841 2300 	strex	r3, r2, [r1]
 80047da:	613b      	str	r3, [r7, #16]
   return(result);
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d1e6      	bne.n	80047b0 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	69db      	ldr	r3, [r3, #28]
 80047e8:	f003 0310 	and.w	r3, r3, #16
 80047ec:	2b10      	cmp	r3, #16
 80047ee:	d103      	bne.n	80047f8 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2210      	movs	r2, #16
 80047f6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80047fe:	4619      	mov	r1, r3
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f7ff f931 	bl	8003a68 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004806:	e00b      	b.n	8004820 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f7ff f919 	bl	8003a40 <HAL_UART_RxCpltCallback>
}
 800480e:	e007      	b.n	8004820 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	699a      	ldr	r2, [r3, #24]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f042 0208 	orr.w	r2, r2, #8
 800481e:	619a      	str	r2, [r3, #24]
}
 8004820:	bf00      	nop
 8004822:	3758      	adds	r7, #88	; 0x58
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}

08004828 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004828:	b480      	push	{r7}
 800482a:	b085      	sub	sp, #20
 800482c:	af00      	add	r7, sp, #0
 800482e:	4603      	mov	r3, r0
 8004830:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004832:	2300      	movs	r3, #0
 8004834:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004836:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800483a:	2b84      	cmp	r3, #132	; 0x84
 800483c:	d005      	beq.n	800484a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800483e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	4413      	add	r3, r2
 8004846:	3303      	adds	r3, #3
 8004848:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800484a:	68fb      	ldr	r3, [r7, #12]
}
 800484c:	4618      	mov	r0, r3
 800484e:	3714      	adds	r7, #20
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800485c:	f000 fdde 	bl	800541c <vTaskStartScheduler>
  
  return osOK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	bd80      	pop	{r7, pc}

08004866 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004866:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004868:	b089      	sub	sp, #36	; 0x24
 800486a:	af04      	add	r7, sp, #16
 800486c:	6078      	str	r0, [r7, #4]
 800486e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	695b      	ldr	r3, [r3, #20]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d020      	beq.n	80048ba <osThreadCreate+0x54>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	699b      	ldr	r3, [r3, #24]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d01c      	beq.n	80048ba <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	685c      	ldr	r4, [r3, #4]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681d      	ldr	r5, [r3, #0]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	691e      	ldr	r6, [r3, #16]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004892:	4618      	mov	r0, r3
 8004894:	f7ff ffc8 	bl	8004828 <makeFreeRtosPriority>
 8004898:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	695b      	ldr	r3, [r3, #20]
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80048a2:	9202      	str	r2, [sp, #8]
 80048a4:	9301      	str	r3, [sp, #4]
 80048a6:	9100      	str	r1, [sp, #0]
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	4632      	mov	r2, r6
 80048ac:	4629      	mov	r1, r5
 80048ae:	4620      	mov	r0, r4
 80048b0:	f000 fbe2 	bl	8005078 <xTaskCreateStatic>
 80048b4:	4603      	mov	r3, r0
 80048b6:	60fb      	str	r3, [r7, #12]
 80048b8:	e01c      	b.n	80048f4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685c      	ldr	r4, [r3, #4]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80048c6:	b29e      	uxth	r6, r3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80048ce:	4618      	mov	r0, r3
 80048d0:	f7ff ffaa 	bl	8004828 <makeFreeRtosPriority>
 80048d4:	4602      	mov	r2, r0
 80048d6:	f107 030c 	add.w	r3, r7, #12
 80048da:	9301      	str	r3, [sp, #4]
 80048dc:	9200      	str	r2, [sp, #0]
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	4632      	mov	r2, r6
 80048e2:	4629      	mov	r1, r5
 80048e4:	4620      	mov	r0, r4
 80048e6:	f000 fc2a 	bl	800513e <xTaskCreate>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d001      	beq.n	80048f4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80048f0:	2300      	movs	r3, #0
 80048f2:	e000      	b.n	80048f6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80048f4:	68fb      	ldr	r3, [r7, #12]
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3714      	adds	r7, #20
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080048fe <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80048fe:	b580      	push	{r7, lr}
 8004900:	b084      	sub	sp, #16
 8004902:	af00      	add	r7, sp, #0
 8004904:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d001      	beq.n	8004914 <osDelay+0x16>
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	e000      	b.n	8004916 <osDelay+0x18>
 8004914:	2301      	movs	r3, #1
 8004916:	4618      	mov	r0, r3
 8004918:	f000 fd4a 	bl	80053b0 <vTaskDelay>
  
  return osOK;
 800491c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800491e:	4618      	mov	r0, r3
 8004920:	3710      	adds	r7, #16
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}

08004926 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004926:	b480      	push	{r7}
 8004928:	b083      	sub	sp, #12
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f103 0208 	add.w	r2, r3, #8
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f04f 32ff 	mov.w	r2, #4294967295
 800493e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f103 0208 	add.w	r2, r3, #8
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f103 0208 	add.w	r2, r3, #8
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800495a:	bf00      	nop
 800495c:	370c      	adds	r7, #12
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr

08004966 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004966:	b480      	push	{r7}
 8004968:	b083      	sub	sp, #12
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004974:	bf00      	nop
 8004976:	370c      	adds	r7, #12
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr

08004980 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004980:	b480      	push	{r7}
 8004982:	b085      	sub	sp, #20
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	68fa      	ldr	r2, [r7, #12]
 8004994:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	689a      	ldr	r2, [r3, #8]
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	683a      	ldr	r2, [r7, #0]
 80049a4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	683a      	ldr	r2, [r7, #0]
 80049aa:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	1c5a      	adds	r2, r3, #1
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	601a      	str	r2, [r3, #0]
}
 80049bc:	bf00      	nop
 80049be:	3714      	adds	r7, #20
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80049c8:	b480      	push	{r7}
 80049ca:	b085      	sub	sp, #20
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049de:	d103      	bne.n	80049e8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	691b      	ldr	r3, [r3, #16]
 80049e4:	60fb      	str	r3, [r7, #12]
 80049e6:	e00c      	b.n	8004a02 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	3308      	adds	r3, #8
 80049ec:	60fb      	str	r3, [r7, #12]
 80049ee:	e002      	b.n	80049f6 <vListInsert+0x2e>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	60fb      	str	r3, [r7, #12]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68ba      	ldr	r2, [r7, #8]
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d2f6      	bcs.n	80049f0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	685a      	ldr	r2, [r3, #4]
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	683a      	ldr	r2, [r7, #0]
 8004a10:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	68fa      	ldr	r2, [r7, #12]
 8004a16:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	683a      	ldr	r2, [r7, #0]
 8004a1c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	1c5a      	adds	r2, r3, #1
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	601a      	str	r2, [r3, #0]
}
 8004a2e:	bf00      	nop
 8004a30:	3714      	adds	r7, #20
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr

08004a3a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004a3a:	b480      	push	{r7}
 8004a3c:	b085      	sub	sp, #20
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	691b      	ldr	r3, [r3, #16]
 8004a46:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	6892      	ldr	r2, [r2, #8]
 8004a50:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	6852      	ldr	r2, [r2, #4]
 8004a5a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d103      	bne.n	8004a6e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	689a      	ldr	r2, [r3, #8]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	1e5a      	subs	r2, r3, #1
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3714      	adds	r7, #20
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr
	...

08004a90 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b084      	sub	sp, #16
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d10c      	bne.n	8004abe <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa8:	b672      	cpsid	i
 8004aaa:	f383 8811 	msr	BASEPRI, r3
 8004aae:	f3bf 8f6f 	isb	sy
 8004ab2:	f3bf 8f4f 	dsb	sy
 8004ab6:	b662      	cpsie	i
 8004ab8:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004aba:	bf00      	nop
 8004abc:	e7fe      	b.n	8004abc <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8004abe:	f001 fb85 	bl	80061cc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aca:	68f9      	ldr	r1, [r7, #12]
 8004acc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004ace:	fb01 f303 	mul.w	r3, r1, r3
 8004ad2:	441a      	add	r2, r3
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2200      	movs	r2, #0
 8004adc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aee:	3b01      	subs	r3, #1
 8004af0:	68f9      	ldr	r1, [r7, #12]
 8004af2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004af4:	fb01 f303 	mul.w	r3, r1, r3
 8004af8:	441a      	add	r2, r3
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	22ff      	movs	r2, #255	; 0xff
 8004b02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	22ff      	movs	r2, #255	; 0xff
 8004b0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d114      	bne.n	8004b3e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	691b      	ldr	r3, [r3, #16]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d01a      	beq.n	8004b52 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	3310      	adds	r3, #16
 8004b20:	4618      	mov	r0, r3
 8004b22:	f000 fec9 	bl	80058b8 <xTaskRemoveFromEventList>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d012      	beq.n	8004b52 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004b2c:	4b0c      	ldr	r3, [pc, #48]	; (8004b60 <xQueueGenericReset+0xd0>)
 8004b2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b32:	601a      	str	r2, [r3, #0]
 8004b34:	f3bf 8f4f 	dsb	sy
 8004b38:	f3bf 8f6f 	isb	sy
 8004b3c:	e009      	b.n	8004b52 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	3310      	adds	r3, #16
 8004b42:	4618      	mov	r0, r3
 8004b44:	f7ff feef 	bl	8004926 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	3324      	adds	r3, #36	; 0x24
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f7ff feea 	bl	8004926 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004b52:	f001 fb6f 	bl	8006234 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004b56:	2301      	movs	r3, #1
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3710      	adds	r7, #16
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	e000ed04 	.word	0xe000ed04

08004b64 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b08a      	sub	sp, #40	; 0x28
 8004b68:	af02      	add	r7, sp, #8
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	60b9      	str	r1, [r7, #8]
 8004b6e:	4613      	mov	r3, r2
 8004b70:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d10c      	bne.n	8004b92 <xQueueGenericCreate+0x2e>
	__asm volatile
 8004b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b7c:	b672      	cpsid	i
 8004b7e:	f383 8811 	msr	BASEPRI, r3
 8004b82:	f3bf 8f6f 	isb	sy
 8004b86:	f3bf 8f4f 	dsb	sy
 8004b8a:	b662      	cpsie	i
 8004b8c:	613b      	str	r3, [r7, #16]
}
 8004b8e:	bf00      	nop
 8004b90:	e7fe      	b.n	8004b90 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d102      	bne.n	8004b9e <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	61fb      	str	r3, [r7, #28]
 8004b9c:	e004      	b.n	8004ba8 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	68ba      	ldr	r2, [r7, #8]
 8004ba2:	fb02 f303 	mul.w	r3, r2, r3
 8004ba6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	3348      	adds	r3, #72	; 0x48
 8004bac:	4618      	mov	r0, r3
 8004bae:	f001 fc39 	bl	8006424 <pvPortMalloc>
 8004bb2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004bb4:	69bb      	ldr	r3, [r7, #24]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d011      	beq.n	8004bde <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004bba:	69bb      	ldr	r3, [r7, #24]
 8004bbc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	3348      	adds	r3, #72	; 0x48
 8004bc2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004bcc:	79fa      	ldrb	r2, [r7, #7]
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	9300      	str	r3, [sp, #0]
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	697a      	ldr	r2, [r7, #20]
 8004bd6:	68b9      	ldr	r1, [r7, #8]
 8004bd8:	68f8      	ldr	r0, [r7, #12]
 8004bda:	f000 f805 	bl	8004be8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004bde:	69bb      	ldr	r3, [r7, #24]
	}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3720      	adds	r7, #32
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}

08004be8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	607a      	str	r2, [r7, #4]
 8004bf4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d103      	bne.n	8004c04 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	69ba      	ldr	r2, [r7, #24]
 8004c00:	601a      	str	r2, [r3, #0]
 8004c02:	e002      	b.n	8004c0a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	68fa      	ldr	r2, [r7, #12]
 8004c0e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004c10:	69bb      	ldr	r3, [r7, #24]
 8004c12:	68ba      	ldr	r2, [r7, #8]
 8004c14:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004c16:	2101      	movs	r1, #1
 8004c18:	69b8      	ldr	r0, [r7, #24]
 8004c1a:	f7ff ff39 	bl	8004a90 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004c1e:	bf00      	nop
 8004c20:	3710      	adds	r7, #16
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}

08004c26 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004c26:	b580      	push	{r7, lr}
 8004c28:	b08e      	sub	sp, #56	; 0x38
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
 8004c2e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d10c      	bne.n	8004c54 <xQueueGiveFromISR+0x2e>
	__asm volatile
 8004c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c3e:	b672      	cpsid	i
 8004c40:	f383 8811 	msr	BASEPRI, r3
 8004c44:	f3bf 8f6f 	isb	sy
 8004c48:	f3bf 8f4f 	dsb	sy
 8004c4c:	b662      	cpsie	i
 8004c4e:	623b      	str	r3, [r7, #32]
}
 8004c50:	bf00      	nop
 8004c52:	e7fe      	b.n	8004c52 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d00c      	beq.n	8004c76 <xQueueGiveFromISR+0x50>
	__asm volatile
 8004c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c60:	b672      	cpsid	i
 8004c62:	f383 8811 	msr	BASEPRI, r3
 8004c66:	f3bf 8f6f 	isb	sy
 8004c6a:	f3bf 8f4f 	dsb	sy
 8004c6e:	b662      	cpsie	i
 8004c70:	61fb      	str	r3, [r7, #28]
}
 8004c72:	bf00      	nop
 8004c74:	e7fe      	b.n	8004c74 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d103      	bne.n	8004c86 <xQueueGiveFromISR+0x60>
 8004c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d101      	bne.n	8004c8a <xQueueGiveFromISR+0x64>
 8004c86:	2301      	movs	r3, #1
 8004c88:	e000      	b.n	8004c8c <xQueueGiveFromISR+0x66>
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d10c      	bne.n	8004caa <xQueueGiveFromISR+0x84>
	__asm volatile
 8004c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c94:	b672      	cpsid	i
 8004c96:	f383 8811 	msr	BASEPRI, r3
 8004c9a:	f3bf 8f6f 	isb	sy
 8004c9e:	f3bf 8f4f 	dsb	sy
 8004ca2:	b662      	cpsie	i
 8004ca4:	61bb      	str	r3, [r7, #24]
}
 8004ca6:	bf00      	nop
 8004ca8:	e7fe      	b.n	8004ca8 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004caa:	f001 fb77 	bl	800639c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004cae:	f3ef 8211 	mrs	r2, BASEPRI
 8004cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb6:	b672      	cpsid	i
 8004cb8:	f383 8811 	msr	BASEPRI, r3
 8004cbc:	f3bf 8f6f 	isb	sy
 8004cc0:	f3bf 8f4f 	dsb	sy
 8004cc4:	b662      	cpsie	i
 8004cc6:	617a      	str	r2, [r7, #20]
 8004cc8:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004cca:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d22b      	bcs.n	8004d36 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ce4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cea:	1c5a      	adds	r2, r3, #1
 8004cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cee:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004cf0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cf8:	d112      	bne.n	8004d20 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d016      	beq.n	8004d30 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d04:	3324      	adds	r3, #36	; 0x24
 8004d06:	4618      	mov	r0, r3
 8004d08:	f000 fdd6 	bl	80058b8 <xTaskRemoveFromEventList>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d00e      	beq.n	8004d30 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d00b      	beq.n	8004d30 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	601a      	str	r2, [r3, #0]
 8004d1e:	e007      	b.n	8004d30 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004d20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d24:	3301      	adds	r3, #1
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	b25a      	sxtb	r2, r3
 8004d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004d30:	2301      	movs	r3, #1
 8004d32:	637b      	str	r3, [r7, #52]	; 0x34
 8004d34:	e001      	b.n	8004d3a <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004d36:	2300      	movs	r3, #0
 8004d38:	637b      	str	r3, [r7, #52]	; 0x34
 8004d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d3c:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004d44:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004d46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3738      	adds	r7, #56	; 0x38
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}

08004d50 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b08e      	sub	sp, #56	; 0x38
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004d62:	2300      	movs	r3, #0
 8004d64:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d10c      	bne.n	8004d86 <xQueueSemaphoreTake+0x36>
	__asm volatile
 8004d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d70:	b672      	cpsid	i
 8004d72:	f383 8811 	msr	BASEPRI, r3
 8004d76:	f3bf 8f6f 	isb	sy
 8004d7a:	f3bf 8f4f 	dsb	sy
 8004d7e:	b662      	cpsie	i
 8004d80:	623b      	str	r3, [r7, #32]
}
 8004d82:	bf00      	nop
 8004d84:	e7fe      	b.n	8004d84 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00c      	beq.n	8004da8 <xQueueSemaphoreTake+0x58>
	__asm volatile
 8004d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d92:	b672      	cpsid	i
 8004d94:	f383 8811 	msr	BASEPRI, r3
 8004d98:	f3bf 8f6f 	isb	sy
 8004d9c:	f3bf 8f4f 	dsb	sy
 8004da0:	b662      	cpsie	i
 8004da2:	61fb      	str	r3, [r7, #28]
}
 8004da4:	bf00      	nop
 8004da6:	e7fe      	b.n	8004da6 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004da8:	f000 ff4a 	bl	8005c40 <xTaskGetSchedulerState>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d102      	bne.n	8004db8 <xQueueSemaphoreTake+0x68>
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d101      	bne.n	8004dbc <xQueueSemaphoreTake+0x6c>
 8004db8:	2301      	movs	r3, #1
 8004dba:	e000      	b.n	8004dbe <xQueueSemaphoreTake+0x6e>
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d10c      	bne.n	8004ddc <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8004dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc6:	b672      	cpsid	i
 8004dc8:	f383 8811 	msr	BASEPRI, r3
 8004dcc:	f3bf 8f6f 	isb	sy
 8004dd0:	f3bf 8f4f 	dsb	sy
 8004dd4:	b662      	cpsie	i
 8004dd6:	61bb      	str	r3, [r7, #24]
}
 8004dd8:	bf00      	nop
 8004dda:	e7fe      	b.n	8004dda <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004ddc:	f001 f9f6 	bl	80061cc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d024      	beq.n	8004e36 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dee:	1e5a      	subs	r2, r3, #1
 8004df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004df2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d104      	bne.n	8004e06 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004dfc:	f001 f85c 	bl	8005eb8 <pvTaskIncrementMutexHeldCount>
 8004e00:	4602      	mov	r2, r0
 8004e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e04:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d00f      	beq.n	8004e2e <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e10:	3310      	adds	r3, #16
 8004e12:	4618      	mov	r0, r3
 8004e14:	f000 fd50 	bl	80058b8 <xTaskRemoveFromEventList>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d007      	beq.n	8004e2e <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004e1e:	4b55      	ldr	r3, [pc, #340]	; (8004f74 <xQueueSemaphoreTake+0x224>)
 8004e20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e24:	601a      	str	r2, [r3, #0]
 8004e26:	f3bf 8f4f 	dsb	sy
 8004e2a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004e2e:	f001 fa01 	bl	8006234 <vPortExitCritical>
				return pdPASS;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e099      	b.n	8004f6a <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d113      	bne.n	8004e64 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d00c      	beq.n	8004e5c <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8004e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e46:	b672      	cpsid	i
 8004e48:	f383 8811 	msr	BASEPRI, r3
 8004e4c:	f3bf 8f6f 	isb	sy
 8004e50:	f3bf 8f4f 	dsb	sy
 8004e54:	b662      	cpsie	i
 8004e56:	617b      	str	r3, [r7, #20]
}
 8004e58:	bf00      	nop
 8004e5a:	e7fe      	b.n	8004e5a <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004e5c:	f001 f9ea 	bl	8006234 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004e60:	2300      	movs	r3, #0
 8004e62:	e082      	b.n	8004f6a <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d106      	bne.n	8004e78 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004e6a:	f107 030c 	add.w	r3, r7, #12
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f000 fd86 	bl	8005980 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004e74:	2301      	movs	r3, #1
 8004e76:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004e78:	f001 f9dc 	bl	8006234 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004e7c:	f000 fb32 	bl	80054e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e80:	f001 f9a4 	bl	80061cc <vPortEnterCritical>
 8004e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e86:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e8a:	b25b      	sxtb	r3, r3
 8004e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e90:	d103      	bne.n	8004e9a <xQueueSemaphoreTake+0x14a>
 8004e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e94:	2200      	movs	r2, #0
 8004e96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ea0:	b25b      	sxtb	r3, r3
 8004ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ea6:	d103      	bne.n	8004eb0 <xQueueSemaphoreTake+0x160>
 8004ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004eb0:	f001 f9c0 	bl	8006234 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004eb4:	463a      	mov	r2, r7
 8004eb6:	f107 030c 	add.w	r3, r7, #12
 8004eba:	4611      	mov	r1, r2
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f000 fd75 	bl	80059ac <xTaskCheckForTimeOut>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d132      	bne.n	8004f2e <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ec8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004eca:	f000 f8bf 	bl	800504c <prvIsQueueEmpty>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d026      	beq.n	8004f22 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d109      	bne.n	8004ef0 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8004edc:	f001 f976 	bl	80061cc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f000 fec9 	bl	8005c7c <xTaskPriorityInherit>
 8004eea:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004eec:	f001 f9a2 	bl	8006234 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef2:	3324      	adds	r3, #36	; 0x24
 8004ef4:	683a      	ldr	r2, [r7, #0]
 8004ef6:	4611      	mov	r1, r2
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f000 fcb7 	bl	800586c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004efe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004f00:	f000 f852 	bl	8004fa8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004f04:	f000 fafc 	bl	8005500 <xTaskResumeAll>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	f47f af66 	bne.w	8004ddc <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8004f10:	4b18      	ldr	r3, [pc, #96]	; (8004f74 <xQueueSemaphoreTake+0x224>)
 8004f12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f16:	601a      	str	r2, [r3, #0]
 8004f18:	f3bf 8f4f 	dsb	sy
 8004f1c:	f3bf 8f6f 	isb	sy
 8004f20:	e75c      	b.n	8004ddc <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004f22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004f24:	f000 f840 	bl	8004fa8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f28:	f000 faea 	bl	8005500 <xTaskResumeAll>
 8004f2c:	e756      	b.n	8004ddc <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004f2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004f30:	f000 f83a 	bl	8004fa8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f34:	f000 fae4 	bl	8005500 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004f3a:	f000 f887 	bl	800504c <prvIsQueueEmpty>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	f43f af4b 	beq.w	8004ddc <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d00d      	beq.n	8004f68 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8004f4c:	f001 f93e 	bl	80061cc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004f50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004f52:	f000 f811 	bl	8004f78 <prvGetDisinheritPriorityAfterTimeout>
 8004f56:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f000 ff0c 	bl	8005d7c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004f64:	f001 f966 	bl	8006234 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004f68:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3738      	adds	r7, #56	; 0x38
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	e000ed04 	.word	0xe000ed04

08004f78 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004f78:	b480      	push	{r7}
 8004f7a:	b085      	sub	sp, #20
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d006      	beq.n	8004f96 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f1c3 0307 	rsb	r3, r3, #7
 8004f92:	60fb      	str	r3, [r7, #12]
 8004f94:	e001      	b.n	8004f9a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004f96:	2300      	movs	r3, #0
 8004f98:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
	}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3714      	adds	r7, #20
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr

08004fa8 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b084      	sub	sp, #16
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004fb0:	f001 f90c 	bl	80061cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004fbc:	e011      	b.n	8004fe2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d012      	beq.n	8004fec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	3324      	adds	r3, #36	; 0x24
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f000 fc74 	bl	80058b8 <xTaskRemoveFromEventList>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d001      	beq.n	8004fda <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004fd6:	f000 fd4f 	bl	8005a78 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004fda:	7bfb      	ldrb	r3, [r7, #15]
 8004fdc:	3b01      	subs	r3, #1
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004fe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	dce9      	bgt.n	8004fbe <prvUnlockQueue+0x16>
 8004fea:	e000      	b.n	8004fee <prvUnlockQueue+0x46>
					break;
 8004fec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	22ff      	movs	r2, #255	; 0xff
 8004ff2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004ff6:	f001 f91d 	bl	8006234 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004ffa:	f001 f8e7 	bl	80061cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005004:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005006:	e011      	b.n	800502c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	691b      	ldr	r3, [r3, #16]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d012      	beq.n	8005036 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	3310      	adds	r3, #16
 8005014:	4618      	mov	r0, r3
 8005016:	f000 fc4f 	bl	80058b8 <xTaskRemoveFromEventList>
 800501a:	4603      	mov	r3, r0
 800501c:	2b00      	cmp	r3, #0
 800501e:	d001      	beq.n	8005024 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005020:	f000 fd2a 	bl	8005a78 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005024:	7bbb      	ldrb	r3, [r7, #14]
 8005026:	3b01      	subs	r3, #1
 8005028:	b2db      	uxtb	r3, r3
 800502a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800502c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005030:	2b00      	cmp	r3, #0
 8005032:	dce9      	bgt.n	8005008 <prvUnlockQueue+0x60>
 8005034:	e000      	b.n	8005038 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005036:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	22ff      	movs	r2, #255	; 0xff
 800503c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005040:	f001 f8f8 	bl	8006234 <vPortExitCritical>
}
 8005044:	bf00      	nop
 8005046:	3710      	adds	r7, #16
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}

0800504c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005054:	f001 f8ba 	bl	80061cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800505c:	2b00      	cmp	r3, #0
 800505e:	d102      	bne.n	8005066 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005060:	2301      	movs	r3, #1
 8005062:	60fb      	str	r3, [r7, #12]
 8005064:	e001      	b.n	800506a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005066:	2300      	movs	r3, #0
 8005068:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800506a:	f001 f8e3 	bl	8006234 <vPortExitCritical>

	return xReturn;
 800506e:	68fb      	ldr	r3, [r7, #12]
}
 8005070:	4618      	mov	r0, r3
 8005072:	3710      	adds	r7, #16
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}

08005078 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005078:	b580      	push	{r7, lr}
 800507a:	b08e      	sub	sp, #56	; 0x38
 800507c:	af04      	add	r7, sp, #16
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	607a      	str	r2, [r7, #4]
 8005084:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005088:	2b00      	cmp	r3, #0
 800508a:	d10c      	bne.n	80050a6 <xTaskCreateStatic+0x2e>
	__asm volatile
 800508c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005090:	b672      	cpsid	i
 8005092:	f383 8811 	msr	BASEPRI, r3
 8005096:	f3bf 8f6f 	isb	sy
 800509a:	f3bf 8f4f 	dsb	sy
 800509e:	b662      	cpsie	i
 80050a0:	623b      	str	r3, [r7, #32]
}
 80050a2:	bf00      	nop
 80050a4:	e7fe      	b.n	80050a4 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80050a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d10c      	bne.n	80050c6 <xTaskCreateStatic+0x4e>
	__asm volatile
 80050ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b0:	b672      	cpsid	i
 80050b2:	f383 8811 	msr	BASEPRI, r3
 80050b6:	f3bf 8f6f 	isb	sy
 80050ba:	f3bf 8f4f 	dsb	sy
 80050be:	b662      	cpsie	i
 80050c0:	61fb      	str	r3, [r7, #28]
}
 80050c2:	bf00      	nop
 80050c4:	e7fe      	b.n	80050c4 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80050c6:	2354      	movs	r3, #84	; 0x54
 80050c8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	2b54      	cmp	r3, #84	; 0x54
 80050ce:	d00c      	beq.n	80050ea <xTaskCreateStatic+0x72>
	__asm volatile
 80050d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d4:	b672      	cpsid	i
 80050d6:	f383 8811 	msr	BASEPRI, r3
 80050da:	f3bf 8f6f 	isb	sy
 80050de:	f3bf 8f4f 	dsb	sy
 80050e2:	b662      	cpsie	i
 80050e4:	61bb      	str	r3, [r7, #24]
}
 80050e6:	bf00      	nop
 80050e8:	e7fe      	b.n	80050e8 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80050ea:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80050ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d01e      	beq.n	8005130 <xTaskCreateStatic+0xb8>
 80050f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d01b      	beq.n	8005130 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80050f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050fa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80050fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005100:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005104:	2202      	movs	r2, #2
 8005106:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800510a:	2300      	movs	r3, #0
 800510c:	9303      	str	r3, [sp, #12]
 800510e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005110:	9302      	str	r3, [sp, #8]
 8005112:	f107 0314 	add.w	r3, r7, #20
 8005116:	9301      	str	r3, [sp, #4]
 8005118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800511a:	9300      	str	r3, [sp, #0]
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	68b9      	ldr	r1, [r7, #8]
 8005122:	68f8      	ldr	r0, [r7, #12]
 8005124:	f000 f850 	bl	80051c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005128:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800512a:	f000 f8d7 	bl	80052dc <prvAddNewTaskToReadyList>
 800512e:	e001      	b.n	8005134 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8005130:	2300      	movs	r3, #0
 8005132:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005134:	697b      	ldr	r3, [r7, #20]
	}
 8005136:	4618      	mov	r0, r3
 8005138:	3728      	adds	r7, #40	; 0x28
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}

0800513e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800513e:	b580      	push	{r7, lr}
 8005140:	b08c      	sub	sp, #48	; 0x30
 8005142:	af04      	add	r7, sp, #16
 8005144:	60f8      	str	r0, [r7, #12]
 8005146:	60b9      	str	r1, [r7, #8]
 8005148:	603b      	str	r3, [r7, #0]
 800514a:	4613      	mov	r3, r2
 800514c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800514e:	88fb      	ldrh	r3, [r7, #6]
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	4618      	mov	r0, r3
 8005154:	f001 f966 	bl	8006424 <pvPortMalloc>
 8005158:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d00e      	beq.n	800517e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005160:	2054      	movs	r0, #84	; 0x54
 8005162:	f001 f95f 	bl	8006424 <pvPortMalloc>
 8005166:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d003      	beq.n	8005176 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	697a      	ldr	r2, [r7, #20]
 8005172:	631a      	str	r2, [r3, #48]	; 0x30
 8005174:	e005      	b.n	8005182 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005176:	6978      	ldr	r0, [r7, #20]
 8005178:	f001 fa1e 	bl	80065b8 <vPortFree>
 800517c:	e001      	b.n	8005182 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800517e:	2300      	movs	r3, #0
 8005180:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d017      	beq.n	80051b8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	2200      	movs	r2, #0
 800518c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005190:	88fa      	ldrh	r2, [r7, #6]
 8005192:	2300      	movs	r3, #0
 8005194:	9303      	str	r3, [sp, #12]
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	9302      	str	r3, [sp, #8]
 800519a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800519c:	9301      	str	r3, [sp, #4]
 800519e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a0:	9300      	str	r3, [sp, #0]
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	68b9      	ldr	r1, [r7, #8]
 80051a6:	68f8      	ldr	r0, [r7, #12]
 80051a8:	f000 f80e 	bl	80051c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80051ac:	69f8      	ldr	r0, [r7, #28]
 80051ae:	f000 f895 	bl	80052dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80051b2:	2301      	movs	r3, #1
 80051b4:	61bb      	str	r3, [r7, #24]
 80051b6:	e002      	b.n	80051be <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80051b8:	f04f 33ff 	mov.w	r3, #4294967295
 80051bc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80051be:	69bb      	ldr	r3, [r7, #24]
	}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3720      	adds	r7, #32
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b088      	sub	sp, #32
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	60b9      	str	r1, [r7, #8]
 80051d2:	607a      	str	r2, [r7, #4]
 80051d4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80051d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051da:	6879      	ldr	r1, [r7, #4]
 80051dc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80051e0:	440b      	add	r3, r1
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	4413      	add	r3, r2
 80051e6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80051e8:	69bb      	ldr	r3, [r7, #24]
 80051ea:	f023 0307 	bic.w	r3, r3, #7
 80051ee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80051f0:	69bb      	ldr	r3, [r7, #24]
 80051f2:	f003 0307 	and.w	r3, r3, #7
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00c      	beq.n	8005214 <prvInitialiseNewTask+0x4c>
	__asm volatile
 80051fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051fe:	b672      	cpsid	i
 8005200:	f383 8811 	msr	BASEPRI, r3
 8005204:	f3bf 8f6f 	isb	sy
 8005208:	f3bf 8f4f 	dsb	sy
 800520c:	b662      	cpsie	i
 800520e:	617b      	str	r3, [r7, #20]
}
 8005210:	bf00      	nop
 8005212:	e7fe      	b.n	8005212 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d01f      	beq.n	800525a <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800521a:	2300      	movs	r3, #0
 800521c:	61fb      	str	r3, [r7, #28]
 800521e:	e012      	b.n	8005246 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005220:	68ba      	ldr	r2, [r7, #8]
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	4413      	add	r3, r2
 8005226:	7819      	ldrb	r1, [r3, #0]
 8005228:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	4413      	add	r3, r2
 800522e:	3334      	adds	r3, #52	; 0x34
 8005230:	460a      	mov	r2, r1
 8005232:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005234:	68ba      	ldr	r2, [r7, #8]
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	4413      	add	r3, r2
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d006      	beq.n	800524e <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	3301      	adds	r3, #1
 8005244:	61fb      	str	r3, [r7, #28]
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	2b0f      	cmp	r3, #15
 800524a:	d9e9      	bls.n	8005220 <prvInitialiseNewTask+0x58>
 800524c:	e000      	b.n	8005250 <prvInitialiseNewTask+0x88>
			{
				break;
 800524e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005252:	2200      	movs	r2, #0
 8005254:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005258:	e003      	b.n	8005262 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800525a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800525c:	2200      	movs	r2, #0
 800525e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005264:	2b06      	cmp	r3, #6
 8005266:	d901      	bls.n	800526c <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005268:	2306      	movs	r3, #6
 800526a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800526c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800526e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005270:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005274:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005276:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800527a:	2200      	movs	r2, #0
 800527c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800527e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005280:	3304      	adds	r3, #4
 8005282:	4618      	mov	r0, r3
 8005284:	f7ff fb6f 	bl	8004966 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800528a:	3318      	adds	r3, #24
 800528c:	4618      	mov	r0, r3
 800528e:	f7ff fb6a 	bl	8004966 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005294:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005296:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800529a:	f1c3 0207 	rsb	r2, r3, #7
 800529e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80052a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052a6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80052a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052aa:	2200      	movs	r2, #0
 80052ac:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80052ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b0:	2200      	movs	r2, #0
 80052b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80052b6:	683a      	ldr	r2, [r7, #0]
 80052b8:	68f9      	ldr	r1, [r7, #12]
 80052ba:	69b8      	ldr	r0, [r7, #24]
 80052bc:	f000 fe76 	bl	8005fac <pxPortInitialiseStack>
 80052c0:	4602      	mov	r2, r0
 80052c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80052c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d002      	beq.n	80052d2 <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80052cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052d2:	bf00      	nop
 80052d4:	3720      	adds	r7, #32
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}
	...

080052dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b082      	sub	sp, #8
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80052e4:	f000 ff72 	bl	80061cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80052e8:	4b2a      	ldr	r3, [pc, #168]	; (8005394 <prvAddNewTaskToReadyList+0xb8>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	3301      	adds	r3, #1
 80052ee:	4a29      	ldr	r2, [pc, #164]	; (8005394 <prvAddNewTaskToReadyList+0xb8>)
 80052f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80052f2:	4b29      	ldr	r3, [pc, #164]	; (8005398 <prvAddNewTaskToReadyList+0xbc>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d109      	bne.n	800530e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80052fa:	4a27      	ldr	r2, [pc, #156]	; (8005398 <prvAddNewTaskToReadyList+0xbc>)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005300:	4b24      	ldr	r3, [pc, #144]	; (8005394 <prvAddNewTaskToReadyList+0xb8>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2b01      	cmp	r3, #1
 8005306:	d110      	bne.n	800532a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005308:	f000 fbda 	bl	8005ac0 <prvInitialiseTaskLists>
 800530c:	e00d      	b.n	800532a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800530e:	4b23      	ldr	r3, [pc, #140]	; (800539c <prvAddNewTaskToReadyList+0xc0>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d109      	bne.n	800532a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005316:	4b20      	ldr	r3, [pc, #128]	; (8005398 <prvAddNewTaskToReadyList+0xbc>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005320:	429a      	cmp	r2, r3
 8005322:	d802      	bhi.n	800532a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005324:	4a1c      	ldr	r2, [pc, #112]	; (8005398 <prvAddNewTaskToReadyList+0xbc>)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800532a:	4b1d      	ldr	r3, [pc, #116]	; (80053a0 <prvAddNewTaskToReadyList+0xc4>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	3301      	adds	r3, #1
 8005330:	4a1b      	ldr	r2, [pc, #108]	; (80053a0 <prvAddNewTaskToReadyList+0xc4>)
 8005332:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005338:	2201      	movs	r2, #1
 800533a:	409a      	lsls	r2, r3
 800533c:	4b19      	ldr	r3, [pc, #100]	; (80053a4 <prvAddNewTaskToReadyList+0xc8>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4313      	orrs	r3, r2
 8005342:	4a18      	ldr	r2, [pc, #96]	; (80053a4 <prvAddNewTaskToReadyList+0xc8>)
 8005344:	6013      	str	r3, [r2, #0]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800534a:	4613      	mov	r3, r2
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	4413      	add	r3, r2
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	4a15      	ldr	r2, [pc, #84]	; (80053a8 <prvAddNewTaskToReadyList+0xcc>)
 8005354:	441a      	add	r2, r3
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	3304      	adds	r3, #4
 800535a:	4619      	mov	r1, r3
 800535c:	4610      	mov	r0, r2
 800535e:	f7ff fb0f 	bl	8004980 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005362:	f000 ff67 	bl	8006234 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005366:	4b0d      	ldr	r3, [pc, #52]	; (800539c <prvAddNewTaskToReadyList+0xc0>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d00e      	beq.n	800538c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800536e:	4b0a      	ldr	r3, [pc, #40]	; (8005398 <prvAddNewTaskToReadyList+0xbc>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005378:	429a      	cmp	r2, r3
 800537a:	d207      	bcs.n	800538c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800537c:	4b0b      	ldr	r3, [pc, #44]	; (80053ac <prvAddNewTaskToReadyList+0xd0>)
 800537e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005382:	601a      	str	r2, [r3, #0]
 8005384:	f3bf 8f4f 	dsb	sy
 8005388:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800538c:	bf00      	nop
 800538e:	3708      	adds	r7, #8
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}
 8005394:	200007e8 	.word	0x200007e8
 8005398:	200006e8 	.word	0x200006e8
 800539c:	200007f4 	.word	0x200007f4
 80053a0:	20000804 	.word	0x20000804
 80053a4:	200007f0 	.word	0x200007f0
 80053a8:	200006ec 	.word	0x200006ec
 80053ac:	e000ed04 	.word	0xe000ed04

080053b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b084      	sub	sp, #16
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80053b8:	2300      	movs	r3, #0
 80053ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d019      	beq.n	80053f6 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80053c2:	4b14      	ldr	r3, [pc, #80]	; (8005414 <vTaskDelay+0x64>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d00c      	beq.n	80053e4 <vTaskDelay+0x34>
	__asm volatile
 80053ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ce:	b672      	cpsid	i
 80053d0:	f383 8811 	msr	BASEPRI, r3
 80053d4:	f3bf 8f6f 	isb	sy
 80053d8:	f3bf 8f4f 	dsb	sy
 80053dc:	b662      	cpsie	i
 80053de:	60bb      	str	r3, [r7, #8]
}
 80053e0:	bf00      	nop
 80053e2:	e7fe      	b.n	80053e2 <vTaskDelay+0x32>
			vTaskSuspendAll();
 80053e4:	f000 f87e 	bl	80054e4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80053e8:	2100      	movs	r1, #0
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 fd78 	bl	8005ee0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80053f0:	f000 f886 	bl	8005500 <xTaskResumeAll>
 80053f4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d107      	bne.n	800540c <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80053fc:	4b06      	ldr	r3, [pc, #24]	; (8005418 <vTaskDelay+0x68>)
 80053fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005402:	601a      	str	r2, [r3, #0]
 8005404:	f3bf 8f4f 	dsb	sy
 8005408:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800540c:	bf00      	nop
 800540e:	3710      	adds	r7, #16
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}
 8005414:	20000810 	.word	0x20000810
 8005418:	e000ed04 	.word	0xe000ed04

0800541c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b08a      	sub	sp, #40	; 0x28
 8005420:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005422:	2300      	movs	r3, #0
 8005424:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005426:	2300      	movs	r3, #0
 8005428:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800542a:	463a      	mov	r2, r7
 800542c:	1d39      	adds	r1, r7, #4
 800542e:	f107 0308 	add.w	r3, r7, #8
 8005432:	4618      	mov	r0, r3
 8005434:	f7fb f8be 	bl	80005b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005438:	6839      	ldr	r1, [r7, #0]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	68ba      	ldr	r2, [r7, #8]
 800543e:	9202      	str	r2, [sp, #8]
 8005440:	9301      	str	r3, [sp, #4]
 8005442:	2300      	movs	r3, #0
 8005444:	9300      	str	r3, [sp, #0]
 8005446:	2300      	movs	r3, #0
 8005448:	460a      	mov	r2, r1
 800544a:	4920      	ldr	r1, [pc, #128]	; (80054cc <vTaskStartScheduler+0xb0>)
 800544c:	4820      	ldr	r0, [pc, #128]	; (80054d0 <vTaskStartScheduler+0xb4>)
 800544e:	f7ff fe13 	bl	8005078 <xTaskCreateStatic>
 8005452:	4603      	mov	r3, r0
 8005454:	4a1f      	ldr	r2, [pc, #124]	; (80054d4 <vTaskStartScheduler+0xb8>)
 8005456:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005458:	4b1e      	ldr	r3, [pc, #120]	; (80054d4 <vTaskStartScheduler+0xb8>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d002      	beq.n	8005466 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005460:	2301      	movs	r3, #1
 8005462:	617b      	str	r3, [r7, #20]
 8005464:	e001      	b.n	800546a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005466:	2300      	movs	r3, #0
 8005468:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	2b01      	cmp	r3, #1
 800546e:	d118      	bne.n	80054a2 <vTaskStartScheduler+0x86>
	__asm volatile
 8005470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005474:	b672      	cpsid	i
 8005476:	f383 8811 	msr	BASEPRI, r3
 800547a:	f3bf 8f6f 	isb	sy
 800547e:	f3bf 8f4f 	dsb	sy
 8005482:	b662      	cpsie	i
 8005484:	613b      	str	r3, [r7, #16]
}
 8005486:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005488:	4b13      	ldr	r3, [pc, #76]	; (80054d8 <vTaskStartScheduler+0xbc>)
 800548a:	f04f 32ff 	mov.w	r2, #4294967295
 800548e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005490:	4b12      	ldr	r3, [pc, #72]	; (80054dc <vTaskStartScheduler+0xc0>)
 8005492:	2201      	movs	r2, #1
 8005494:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005496:	4b12      	ldr	r3, [pc, #72]	; (80054e0 <vTaskStartScheduler+0xc4>)
 8005498:	2200      	movs	r2, #0
 800549a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800549c:	f000 fe18 	bl	80060d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80054a0:	e010      	b.n	80054c4 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054a8:	d10c      	bne.n	80054c4 <vTaskStartScheduler+0xa8>
	__asm volatile
 80054aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ae:	b672      	cpsid	i
 80054b0:	f383 8811 	msr	BASEPRI, r3
 80054b4:	f3bf 8f6f 	isb	sy
 80054b8:	f3bf 8f4f 	dsb	sy
 80054bc:	b662      	cpsie	i
 80054be:	60fb      	str	r3, [r7, #12]
}
 80054c0:	bf00      	nop
 80054c2:	e7fe      	b.n	80054c2 <vTaskStartScheduler+0xa6>
}
 80054c4:	bf00      	nop
 80054c6:	3718      	adds	r7, #24
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}
 80054cc:	08007d90 	.word	0x08007d90
 80054d0:	08005a91 	.word	0x08005a91
 80054d4:	2000080c 	.word	0x2000080c
 80054d8:	20000808 	.word	0x20000808
 80054dc:	200007f4 	.word	0x200007f4
 80054e0:	200007ec 	.word	0x200007ec

080054e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80054e4:	b480      	push	{r7}
 80054e6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80054e8:	4b04      	ldr	r3, [pc, #16]	; (80054fc <vTaskSuspendAll+0x18>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	3301      	adds	r3, #1
 80054ee:	4a03      	ldr	r2, [pc, #12]	; (80054fc <vTaskSuspendAll+0x18>)
 80054f0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80054f2:	bf00      	nop
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr
 80054fc:	20000810 	.word	0x20000810

08005500 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b084      	sub	sp, #16
 8005504:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005506:	2300      	movs	r3, #0
 8005508:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800550a:	2300      	movs	r3, #0
 800550c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800550e:	4b42      	ldr	r3, [pc, #264]	; (8005618 <xTaskResumeAll+0x118>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d10c      	bne.n	8005530 <xTaskResumeAll+0x30>
	__asm volatile
 8005516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800551a:	b672      	cpsid	i
 800551c:	f383 8811 	msr	BASEPRI, r3
 8005520:	f3bf 8f6f 	isb	sy
 8005524:	f3bf 8f4f 	dsb	sy
 8005528:	b662      	cpsie	i
 800552a:	603b      	str	r3, [r7, #0]
}
 800552c:	bf00      	nop
 800552e:	e7fe      	b.n	800552e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005530:	f000 fe4c 	bl	80061cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005534:	4b38      	ldr	r3, [pc, #224]	; (8005618 <xTaskResumeAll+0x118>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	3b01      	subs	r3, #1
 800553a:	4a37      	ldr	r2, [pc, #220]	; (8005618 <xTaskResumeAll+0x118>)
 800553c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800553e:	4b36      	ldr	r3, [pc, #216]	; (8005618 <xTaskResumeAll+0x118>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d161      	bne.n	800560a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005546:	4b35      	ldr	r3, [pc, #212]	; (800561c <xTaskResumeAll+0x11c>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d05d      	beq.n	800560a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800554e:	e02e      	b.n	80055ae <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005550:	4b33      	ldr	r3, [pc, #204]	; (8005620 <xTaskResumeAll+0x120>)
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	3318      	adds	r3, #24
 800555c:	4618      	mov	r0, r3
 800555e:	f7ff fa6c 	bl	8004a3a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	3304      	adds	r3, #4
 8005566:	4618      	mov	r0, r3
 8005568:	f7ff fa67 	bl	8004a3a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005570:	2201      	movs	r2, #1
 8005572:	409a      	lsls	r2, r3
 8005574:	4b2b      	ldr	r3, [pc, #172]	; (8005624 <xTaskResumeAll+0x124>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4313      	orrs	r3, r2
 800557a:	4a2a      	ldr	r2, [pc, #168]	; (8005624 <xTaskResumeAll+0x124>)
 800557c:	6013      	str	r3, [r2, #0]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005582:	4613      	mov	r3, r2
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	4413      	add	r3, r2
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	4a27      	ldr	r2, [pc, #156]	; (8005628 <xTaskResumeAll+0x128>)
 800558c:	441a      	add	r2, r3
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	3304      	adds	r3, #4
 8005592:	4619      	mov	r1, r3
 8005594:	4610      	mov	r0, r2
 8005596:	f7ff f9f3 	bl	8004980 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800559e:	4b23      	ldr	r3, [pc, #140]	; (800562c <xTaskResumeAll+0x12c>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d302      	bcc.n	80055ae <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80055a8:	4b21      	ldr	r3, [pc, #132]	; (8005630 <xTaskResumeAll+0x130>)
 80055aa:	2201      	movs	r2, #1
 80055ac:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80055ae:	4b1c      	ldr	r3, [pc, #112]	; (8005620 <xTaskResumeAll+0x120>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d1cc      	bne.n	8005550 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d001      	beq.n	80055c0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80055bc:	f000 fb20 	bl	8005c00 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80055c0:	4b1c      	ldr	r3, [pc, #112]	; (8005634 <xTaskResumeAll+0x134>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d010      	beq.n	80055ee <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80055cc:	f000 f836 	bl	800563c <xTaskIncrementTick>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d002      	beq.n	80055dc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80055d6:	4b16      	ldr	r3, [pc, #88]	; (8005630 <xTaskResumeAll+0x130>)
 80055d8:	2201      	movs	r2, #1
 80055da:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	3b01      	subs	r3, #1
 80055e0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d1f1      	bne.n	80055cc <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80055e8:	4b12      	ldr	r3, [pc, #72]	; (8005634 <xTaskResumeAll+0x134>)
 80055ea:	2200      	movs	r2, #0
 80055ec:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80055ee:	4b10      	ldr	r3, [pc, #64]	; (8005630 <xTaskResumeAll+0x130>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d009      	beq.n	800560a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80055f6:	2301      	movs	r3, #1
 80055f8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80055fa:	4b0f      	ldr	r3, [pc, #60]	; (8005638 <xTaskResumeAll+0x138>)
 80055fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005600:	601a      	str	r2, [r3, #0]
 8005602:	f3bf 8f4f 	dsb	sy
 8005606:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800560a:	f000 fe13 	bl	8006234 <vPortExitCritical>

	return xAlreadyYielded;
 800560e:	68bb      	ldr	r3, [r7, #8]
}
 8005610:	4618      	mov	r0, r3
 8005612:	3710      	adds	r7, #16
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}
 8005618:	20000810 	.word	0x20000810
 800561c:	200007e8 	.word	0x200007e8
 8005620:	200007a8 	.word	0x200007a8
 8005624:	200007f0 	.word	0x200007f0
 8005628:	200006ec 	.word	0x200006ec
 800562c:	200006e8 	.word	0x200006e8
 8005630:	200007fc 	.word	0x200007fc
 8005634:	200007f8 	.word	0x200007f8
 8005638:	e000ed04 	.word	0xe000ed04

0800563c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b086      	sub	sp, #24
 8005640:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005642:	2300      	movs	r3, #0
 8005644:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005646:	4b4f      	ldr	r3, [pc, #316]	; (8005784 <xTaskIncrementTick+0x148>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2b00      	cmp	r3, #0
 800564c:	f040 808a 	bne.w	8005764 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005650:	4b4d      	ldr	r3, [pc, #308]	; (8005788 <xTaskIncrementTick+0x14c>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	3301      	adds	r3, #1
 8005656:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005658:	4a4b      	ldr	r2, [pc, #300]	; (8005788 <xTaskIncrementTick+0x14c>)
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d122      	bne.n	80056aa <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8005664:	4b49      	ldr	r3, [pc, #292]	; (800578c <xTaskIncrementTick+0x150>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d00c      	beq.n	8005688 <xTaskIncrementTick+0x4c>
	__asm volatile
 800566e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005672:	b672      	cpsid	i
 8005674:	f383 8811 	msr	BASEPRI, r3
 8005678:	f3bf 8f6f 	isb	sy
 800567c:	f3bf 8f4f 	dsb	sy
 8005680:	b662      	cpsie	i
 8005682:	603b      	str	r3, [r7, #0]
}
 8005684:	bf00      	nop
 8005686:	e7fe      	b.n	8005686 <xTaskIncrementTick+0x4a>
 8005688:	4b40      	ldr	r3, [pc, #256]	; (800578c <xTaskIncrementTick+0x150>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	60fb      	str	r3, [r7, #12]
 800568e:	4b40      	ldr	r3, [pc, #256]	; (8005790 <xTaskIncrementTick+0x154>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a3e      	ldr	r2, [pc, #248]	; (800578c <xTaskIncrementTick+0x150>)
 8005694:	6013      	str	r3, [r2, #0]
 8005696:	4a3e      	ldr	r2, [pc, #248]	; (8005790 <xTaskIncrementTick+0x154>)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6013      	str	r3, [r2, #0]
 800569c:	4b3d      	ldr	r3, [pc, #244]	; (8005794 <xTaskIncrementTick+0x158>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	3301      	adds	r3, #1
 80056a2:	4a3c      	ldr	r2, [pc, #240]	; (8005794 <xTaskIncrementTick+0x158>)
 80056a4:	6013      	str	r3, [r2, #0]
 80056a6:	f000 faab 	bl	8005c00 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80056aa:	4b3b      	ldr	r3, [pc, #236]	; (8005798 <xTaskIncrementTick+0x15c>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	693a      	ldr	r2, [r7, #16]
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d348      	bcc.n	8005746 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056b4:	4b35      	ldr	r3, [pc, #212]	; (800578c <xTaskIncrementTick+0x150>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d104      	bne.n	80056c8 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056be:	4b36      	ldr	r3, [pc, #216]	; (8005798 <xTaskIncrementTick+0x15c>)
 80056c0:	f04f 32ff 	mov.w	r2, #4294967295
 80056c4:	601a      	str	r2, [r3, #0]
					break;
 80056c6:	e03e      	b.n	8005746 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056c8:	4b30      	ldr	r3, [pc, #192]	; (800578c <xTaskIncrementTick+0x150>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80056d8:	693a      	ldr	r2, [r7, #16]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	429a      	cmp	r2, r3
 80056de:	d203      	bcs.n	80056e8 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80056e0:	4a2d      	ldr	r2, [pc, #180]	; (8005798 <xTaskIncrementTick+0x15c>)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80056e6:	e02e      	b.n	8005746 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	3304      	adds	r3, #4
 80056ec:	4618      	mov	r0, r3
 80056ee:	f7ff f9a4 	bl	8004a3a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d004      	beq.n	8005704 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	3318      	adds	r3, #24
 80056fe:	4618      	mov	r0, r3
 8005700:	f7ff f99b 	bl	8004a3a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005708:	2201      	movs	r2, #1
 800570a:	409a      	lsls	r2, r3
 800570c:	4b23      	ldr	r3, [pc, #140]	; (800579c <xTaskIncrementTick+0x160>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4313      	orrs	r3, r2
 8005712:	4a22      	ldr	r2, [pc, #136]	; (800579c <xTaskIncrementTick+0x160>)
 8005714:	6013      	str	r3, [r2, #0]
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800571a:	4613      	mov	r3, r2
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	4413      	add	r3, r2
 8005720:	009b      	lsls	r3, r3, #2
 8005722:	4a1f      	ldr	r2, [pc, #124]	; (80057a0 <xTaskIncrementTick+0x164>)
 8005724:	441a      	add	r2, r3
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	3304      	adds	r3, #4
 800572a:	4619      	mov	r1, r3
 800572c:	4610      	mov	r0, r2
 800572e:	f7ff f927 	bl	8004980 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005736:	4b1b      	ldr	r3, [pc, #108]	; (80057a4 <xTaskIncrementTick+0x168>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800573c:	429a      	cmp	r2, r3
 800573e:	d3b9      	bcc.n	80056b4 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8005740:	2301      	movs	r3, #1
 8005742:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005744:	e7b6      	b.n	80056b4 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005746:	4b17      	ldr	r3, [pc, #92]	; (80057a4 <xTaskIncrementTick+0x168>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800574c:	4914      	ldr	r1, [pc, #80]	; (80057a0 <xTaskIncrementTick+0x164>)
 800574e:	4613      	mov	r3, r2
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	4413      	add	r3, r2
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	440b      	add	r3, r1
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	2b01      	cmp	r3, #1
 800575c:	d907      	bls.n	800576e <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800575e:	2301      	movs	r3, #1
 8005760:	617b      	str	r3, [r7, #20]
 8005762:	e004      	b.n	800576e <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005764:	4b10      	ldr	r3, [pc, #64]	; (80057a8 <xTaskIncrementTick+0x16c>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	3301      	adds	r3, #1
 800576a:	4a0f      	ldr	r2, [pc, #60]	; (80057a8 <xTaskIncrementTick+0x16c>)
 800576c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800576e:	4b0f      	ldr	r3, [pc, #60]	; (80057ac <xTaskIncrementTick+0x170>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d001      	beq.n	800577a <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8005776:	2301      	movs	r3, #1
 8005778:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800577a:	697b      	ldr	r3, [r7, #20]
}
 800577c:	4618      	mov	r0, r3
 800577e:	3718      	adds	r7, #24
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}
 8005784:	20000810 	.word	0x20000810
 8005788:	200007ec 	.word	0x200007ec
 800578c:	200007a0 	.word	0x200007a0
 8005790:	200007a4 	.word	0x200007a4
 8005794:	20000800 	.word	0x20000800
 8005798:	20000808 	.word	0x20000808
 800579c:	200007f0 	.word	0x200007f0
 80057a0:	200006ec 	.word	0x200006ec
 80057a4:	200006e8 	.word	0x200006e8
 80057a8:	200007f8 	.word	0x200007f8
 80057ac:	200007fc 	.word	0x200007fc

080057b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80057b0:	b480      	push	{r7}
 80057b2:	b087      	sub	sp, #28
 80057b4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80057b6:	4b28      	ldr	r3, [pc, #160]	; (8005858 <vTaskSwitchContext+0xa8>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d003      	beq.n	80057c6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80057be:	4b27      	ldr	r3, [pc, #156]	; (800585c <vTaskSwitchContext+0xac>)
 80057c0:	2201      	movs	r2, #1
 80057c2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80057c4:	e041      	b.n	800584a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80057c6:	4b25      	ldr	r3, [pc, #148]	; (800585c <vTaskSwitchContext+0xac>)
 80057c8:	2200      	movs	r2, #0
 80057ca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057cc:	4b24      	ldr	r3, [pc, #144]	; (8005860 <vTaskSwitchContext+0xb0>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	fab3 f383 	clz	r3, r3
 80057d8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80057da:	7afb      	ldrb	r3, [r7, #11]
 80057dc:	f1c3 031f 	rsb	r3, r3, #31
 80057e0:	617b      	str	r3, [r7, #20]
 80057e2:	4920      	ldr	r1, [pc, #128]	; (8005864 <vTaskSwitchContext+0xb4>)
 80057e4:	697a      	ldr	r2, [r7, #20]
 80057e6:	4613      	mov	r3, r2
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	4413      	add	r3, r2
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	440b      	add	r3, r1
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d10c      	bne.n	8005810 <vTaskSwitchContext+0x60>
	__asm volatile
 80057f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057fa:	b672      	cpsid	i
 80057fc:	f383 8811 	msr	BASEPRI, r3
 8005800:	f3bf 8f6f 	isb	sy
 8005804:	f3bf 8f4f 	dsb	sy
 8005808:	b662      	cpsie	i
 800580a:	607b      	str	r3, [r7, #4]
}
 800580c:	bf00      	nop
 800580e:	e7fe      	b.n	800580e <vTaskSwitchContext+0x5e>
 8005810:	697a      	ldr	r2, [r7, #20]
 8005812:	4613      	mov	r3, r2
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	4413      	add	r3, r2
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	4a12      	ldr	r2, [pc, #72]	; (8005864 <vTaskSwitchContext+0xb4>)
 800581c:	4413      	add	r3, r2
 800581e:	613b      	str	r3, [r7, #16]
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	685a      	ldr	r2, [r3, #4]
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	605a      	str	r2, [r3, #4]
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	685a      	ldr	r2, [r3, #4]
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	3308      	adds	r3, #8
 8005832:	429a      	cmp	r2, r3
 8005834:	d104      	bne.n	8005840 <vTaskSwitchContext+0x90>
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	685a      	ldr	r2, [r3, #4]
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	605a      	str	r2, [r3, #4]
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	68db      	ldr	r3, [r3, #12]
 8005846:	4a08      	ldr	r2, [pc, #32]	; (8005868 <vTaskSwitchContext+0xb8>)
 8005848:	6013      	str	r3, [r2, #0]
}
 800584a:	bf00      	nop
 800584c:	371c      	adds	r7, #28
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr
 8005856:	bf00      	nop
 8005858:	20000810 	.word	0x20000810
 800585c:	200007fc 	.word	0x200007fc
 8005860:	200007f0 	.word	0x200007f0
 8005864:	200006ec 	.word	0x200006ec
 8005868:	200006e8 	.word	0x200006e8

0800586c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d10c      	bne.n	8005896 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800587c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005880:	b672      	cpsid	i
 8005882:	f383 8811 	msr	BASEPRI, r3
 8005886:	f3bf 8f6f 	isb	sy
 800588a:	f3bf 8f4f 	dsb	sy
 800588e:	b662      	cpsie	i
 8005890:	60fb      	str	r3, [r7, #12]
}
 8005892:	bf00      	nop
 8005894:	e7fe      	b.n	8005894 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005896:	4b07      	ldr	r3, [pc, #28]	; (80058b4 <vTaskPlaceOnEventList+0x48>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	3318      	adds	r3, #24
 800589c:	4619      	mov	r1, r3
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f7ff f892 	bl	80049c8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80058a4:	2101      	movs	r1, #1
 80058a6:	6838      	ldr	r0, [r7, #0]
 80058a8:	f000 fb1a 	bl	8005ee0 <prvAddCurrentTaskToDelayedList>
}
 80058ac:	bf00      	nop
 80058ae:	3710      	adds	r7, #16
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}
 80058b4:	200006e8 	.word	0x200006e8

080058b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b086      	sub	sp, #24
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d10c      	bne.n	80058e8 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80058ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d2:	b672      	cpsid	i
 80058d4:	f383 8811 	msr	BASEPRI, r3
 80058d8:	f3bf 8f6f 	isb	sy
 80058dc:	f3bf 8f4f 	dsb	sy
 80058e0:	b662      	cpsie	i
 80058e2:	60fb      	str	r3, [r7, #12]
}
 80058e4:	bf00      	nop
 80058e6:	e7fe      	b.n	80058e6 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	3318      	adds	r3, #24
 80058ec:	4618      	mov	r0, r3
 80058ee:	f7ff f8a4 	bl	8004a3a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058f2:	4b1d      	ldr	r3, [pc, #116]	; (8005968 <xTaskRemoveFromEventList+0xb0>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d11c      	bne.n	8005934 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	3304      	adds	r3, #4
 80058fe:	4618      	mov	r0, r3
 8005900:	f7ff f89b 	bl	8004a3a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005908:	2201      	movs	r2, #1
 800590a:	409a      	lsls	r2, r3
 800590c:	4b17      	ldr	r3, [pc, #92]	; (800596c <xTaskRemoveFromEventList+0xb4>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4313      	orrs	r3, r2
 8005912:	4a16      	ldr	r2, [pc, #88]	; (800596c <xTaskRemoveFromEventList+0xb4>)
 8005914:	6013      	str	r3, [r2, #0]
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800591a:	4613      	mov	r3, r2
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	4413      	add	r3, r2
 8005920:	009b      	lsls	r3, r3, #2
 8005922:	4a13      	ldr	r2, [pc, #76]	; (8005970 <xTaskRemoveFromEventList+0xb8>)
 8005924:	441a      	add	r2, r3
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	3304      	adds	r3, #4
 800592a:	4619      	mov	r1, r3
 800592c:	4610      	mov	r0, r2
 800592e:	f7ff f827 	bl	8004980 <vListInsertEnd>
 8005932:	e005      	b.n	8005940 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	3318      	adds	r3, #24
 8005938:	4619      	mov	r1, r3
 800593a:	480e      	ldr	r0, [pc, #56]	; (8005974 <xTaskRemoveFromEventList+0xbc>)
 800593c:	f7ff f820 	bl	8004980 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005944:	4b0c      	ldr	r3, [pc, #48]	; (8005978 <xTaskRemoveFromEventList+0xc0>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800594a:	429a      	cmp	r2, r3
 800594c:	d905      	bls.n	800595a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800594e:	2301      	movs	r3, #1
 8005950:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005952:	4b0a      	ldr	r3, [pc, #40]	; (800597c <xTaskRemoveFromEventList+0xc4>)
 8005954:	2201      	movs	r2, #1
 8005956:	601a      	str	r2, [r3, #0]
 8005958:	e001      	b.n	800595e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800595a:	2300      	movs	r3, #0
 800595c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800595e:	697b      	ldr	r3, [r7, #20]
}
 8005960:	4618      	mov	r0, r3
 8005962:	3718      	adds	r7, #24
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}
 8005968:	20000810 	.word	0x20000810
 800596c:	200007f0 	.word	0x200007f0
 8005970:	200006ec 	.word	0x200006ec
 8005974:	200007a8 	.word	0x200007a8
 8005978:	200006e8 	.word	0x200006e8
 800597c:	200007fc 	.word	0x200007fc

08005980 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005988:	4b06      	ldr	r3, [pc, #24]	; (80059a4 <vTaskInternalSetTimeOutState+0x24>)
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005990:	4b05      	ldr	r3, [pc, #20]	; (80059a8 <vTaskInternalSetTimeOutState+0x28>)
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	605a      	str	r2, [r3, #4]
}
 8005998:	bf00      	nop
 800599a:	370c      	adds	r7, #12
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr
 80059a4:	20000800 	.word	0x20000800
 80059a8:	200007ec 	.word	0x200007ec

080059ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b088      	sub	sp, #32
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d10c      	bne.n	80059d6 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 80059bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c0:	b672      	cpsid	i
 80059c2:	f383 8811 	msr	BASEPRI, r3
 80059c6:	f3bf 8f6f 	isb	sy
 80059ca:	f3bf 8f4f 	dsb	sy
 80059ce:	b662      	cpsie	i
 80059d0:	613b      	str	r3, [r7, #16]
}
 80059d2:	bf00      	nop
 80059d4:	e7fe      	b.n	80059d4 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d10c      	bne.n	80059f6 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 80059dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e0:	b672      	cpsid	i
 80059e2:	f383 8811 	msr	BASEPRI, r3
 80059e6:	f3bf 8f6f 	isb	sy
 80059ea:	f3bf 8f4f 	dsb	sy
 80059ee:	b662      	cpsie	i
 80059f0:	60fb      	str	r3, [r7, #12]
}
 80059f2:	bf00      	nop
 80059f4:	e7fe      	b.n	80059f4 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80059f6:	f000 fbe9 	bl	80061cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80059fa:	4b1d      	ldr	r3, [pc, #116]	; (8005a70 <xTaskCheckForTimeOut+0xc4>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	69ba      	ldr	r2, [r7, #24]
 8005a06:	1ad3      	subs	r3, r2, r3
 8005a08:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a12:	d102      	bne.n	8005a1a <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005a14:	2300      	movs	r3, #0
 8005a16:	61fb      	str	r3, [r7, #28]
 8005a18:	e023      	b.n	8005a62 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	4b15      	ldr	r3, [pc, #84]	; (8005a74 <xTaskCheckForTimeOut+0xc8>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d007      	beq.n	8005a36 <xTaskCheckForTimeOut+0x8a>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	69ba      	ldr	r2, [r7, #24]
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d302      	bcc.n	8005a36 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005a30:	2301      	movs	r3, #1
 8005a32:	61fb      	str	r3, [r7, #28]
 8005a34:	e015      	b.n	8005a62 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	697a      	ldr	r2, [r7, #20]
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d20b      	bcs.n	8005a58 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	1ad2      	subs	r2, r2, r3
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f7ff ff97 	bl	8005980 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005a52:	2300      	movs	r3, #0
 8005a54:	61fb      	str	r3, [r7, #28]
 8005a56:	e004      	b.n	8005a62 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005a62:	f000 fbe7 	bl	8006234 <vPortExitCritical>

	return xReturn;
 8005a66:	69fb      	ldr	r3, [r7, #28]
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3720      	adds	r7, #32
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}
 8005a70:	200007ec 	.word	0x200007ec
 8005a74:	20000800 	.word	0x20000800

08005a78 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005a78:	b480      	push	{r7}
 8005a7a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005a7c:	4b03      	ldr	r3, [pc, #12]	; (8005a8c <vTaskMissedYield+0x14>)
 8005a7e:	2201      	movs	r2, #1
 8005a80:	601a      	str	r2, [r3, #0]
}
 8005a82:	bf00      	nop
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr
 8005a8c:	200007fc 	.word	0x200007fc

08005a90 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b082      	sub	sp, #8
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005a98:	f000 f852 	bl	8005b40 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005a9c:	4b06      	ldr	r3, [pc, #24]	; (8005ab8 <prvIdleTask+0x28>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d9f9      	bls.n	8005a98 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005aa4:	4b05      	ldr	r3, [pc, #20]	; (8005abc <prvIdleTask+0x2c>)
 8005aa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005aaa:	601a      	str	r2, [r3, #0]
 8005aac:	f3bf 8f4f 	dsb	sy
 8005ab0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005ab4:	e7f0      	b.n	8005a98 <prvIdleTask+0x8>
 8005ab6:	bf00      	nop
 8005ab8:	200006ec 	.word	0x200006ec
 8005abc:	e000ed04 	.word	0xe000ed04

08005ac0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b082      	sub	sp, #8
 8005ac4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	607b      	str	r3, [r7, #4]
 8005aca:	e00c      	b.n	8005ae6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	4613      	mov	r3, r2
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	4413      	add	r3, r2
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	4a12      	ldr	r2, [pc, #72]	; (8005b20 <prvInitialiseTaskLists+0x60>)
 8005ad8:	4413      	add	r3, r2
 8005ada:	4618      	mov	r0, r3
 8005adc:	f7fe ff23 	bl	8004926 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	3301      	adds	r3, #1
 8005ae4:	607b      	str	r3, [r7, #4]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2b06      	cmp	r3, #6
 8005aea:	d9ef      	bls.n	8005acc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005aec:	480d      	ldr	r0, [pc, #52]	; (8005b24 <prvInitialiseTaskLists+0x64>)
 8005aee:	f7fe ff1a 	bl	8004926 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005af2:	480d      	ldr	r0, [pc, #52]	; (8005b28 <prvInitialiseTaskLists+0x68>)
 8005af4:	f7fe ff17 	bl	8004926 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005af8:	480c      	ldr	r0, [pc, #48]	; (8005b2c <prvInitialiseTaskLists+0x6c>)
 8005afa:	f7fe ff14 	bl	8004926 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005afe:	480c      	ldr	r0, [pc, #48]	; (8005b30 <prvInitialiseTaskLists+0x70>)
 8005b00:	f7fe ff11 	bl	8004926 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005b04:	480b      	ldr	r0, [pc, #44]	; (8005b34 <prvInitialiseTaskLists+0x74>)
 8005b06:	f7fe ff0e 	bl	8004926 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005b0a:	4b0b      	ldr	r3, [pc, #44]	; (8005b38 <prvInitialiseTaskLists+0x78>)
 8005b0c:	4a05      	ldr	r2, [pc, #20]	; (8005b24 <prvInitialiseTaskLists+0x64>)
 8005b0e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005b10:	4b0a      	ldr	r3, [pc, #40]	; (8005b3c <prvInitialiseTaskLists+0x7c>)
 8005b12:	4a05      	ldr	r2, [pc, #20]	; (8005b28 <prvInitialiseTaskLists+0x68>)
 8005b14:	601a      	str	r2, [r3, #0]
}
 8005b16:	bf00      	nop
 8005b18:	3708      	adds	r7, #8
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
 8005b1e:	bf00      	nop
 8005b20:	200006ec 	.word	0x200006ec
 8005b24:	20000778 	.word	0x20000778
 8005b28:	2000078c 	.word	0x2000078c
 8005b2c:	200007a8 	.word	0x200007a8
 8005b30:	200007bc 	.word	0x200007bc
 8005b34:	200007d4 	.word	0x200007d4
 8005b38:	200007a0 	.word	0x200007a0
 8005b3c:	200007a4 	.word	0x200007a4

08005b40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b082      	sub	sp, #8
 8005b44:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b46:	e019      	b.n	8005b7c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005b48:	f000 fb40 	bl	80061cc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b4c:	4b10      	ldr	r3, [pc, #64]	; (8005b90 <prvCheckTasksWaitingTermination+0x50>)
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	68db      	ldr	r3, [r3, #12]
 8005b52:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	3304      	adds	r3, #4
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f7fe ff6e 	bl	8004a3a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005b5e:	4b0d      	ldr	r3, [pc, #52]	; (8005b94 <prvCheckTasksWaitingTermination+0x54>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	3b01      	subs	r3, #1
 8005b64:	4a0b      	ldr	r2, [pc, #44]	; (8005b94 <prvCheckTasksWaitingTermination+0x54>)
 8005b66:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005b68:	4b0b      	ldr	r3, [pc, #44]	; (8005b98 <prvCheckTasksWaitingTermination+0x58>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	3b01      	subs	r3, #1
 8005b6e:	4a0a      	ldr	r2, [pc, #40]	; (8005b98 <prvCheckTasksWaitingTermination+0x58>)
 8005b70:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005b72:	f000 fb5f 	bl	8006234 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 f810 	bl	8005b9c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b7c:	4b06      	ldr	r3, [pc, #24]	; (8005b98 <prvCheckTasksWaitingTermination+0x58>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d1e1      	bne.n	8005b48 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005b84:	bf00      	nop
 8005b86:	bf00      	nop
 8005b88:	3708      	adds	r7, #8
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}
 8005b8e:	bf00      	nop
 8005b90:	200007bc 	.word	0x200007bc
 8005b94:	200007e8 	.word	0x200007e8
 8005b98:	200007d0 	.word	0x200007d0

08005b9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b084      	sub	sp, #16
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d108      	bne.n	8005bc0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f000 fd00 	bl	80065b8 <vPortFree>
				vPortFree( pxTCB );
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f000 fcfd 	bl	80065b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005bbe:	e01a      	b.n	8005bf6 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d103      	bne.n	8005bd2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f000 fcf4 	bl	80065b8 <vPortFree>
	}
 8005bd0:	e011      	b.n	8005bf6 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005bd8:	2b02      	cmp	r3, #2
 8005bda:	d00c      	beq.n	8005bf6 <prvDeleteTCB+0x5a>
	__asm volatile
 8005bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be0:	b672      	cpsid	i
 8005be2:	f383 8811 	msr	BASEPRI, r3
 8005be6:	f3bf 8f6f 	isb	sy
 8005bea:	f3bf 8f4f 	dsb	sy
 8005bee:	b662      	cpsie	i
 8005bf0:	60fb      	str	r3, [r7, #12]
}
 8005bf2:	bf00      	nop
 8005bf4:	e7fe      	b.n	8005bf4 <prvDeleteTCB+0x58>
	}
 8005bf6:	bf00      	nop
 8005bf8:	3710      	adds	r7, #16
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
	...

08005c00 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c06:	4b0c      	ldr	r3, [pc, #48]	; (8005c38 <prvResetNextTaskUnblockTime+0x38>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d104      	bne.n	8005c1a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005c10:	4b0a      	ldr	r3, [pc, #40]	; (8005c3c <prvResetNextTaskUnblockTime+0x3c>)
 8005c12:	f04f 32ff 	mov.w	r2, #4294967295
 8005c16:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005c18:	e008      	b.n	8005c2c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c1a:	4b07      	ldr	r3, [pc, #28]	; (8005c38 <prvResetNextTaskUnblockTime+0x38>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	4a04      	ldr	r2, [pc, #16]	; (8005c3c <prvResetNextTaskUnblockTime+0x3c>)
 8005c2a:	6013      	str	r3, [r2, #0]
}
 8005c2c:	bf00      	nop
 8005c2e:	370c      	adds	r7, #12
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr
 8005c38:	200007a0 	.word	0x200007a0
 8005c3c:	20000808 	.word	0x20000808

08005c40 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005c40:	b480      	push	{r7}
 8005c42:	b083      	sub	sp, #12
 8005c44:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005c46:	4b0b      	ldr	r3, [pc, #44]	; (8005c74 <xTaskGetSchedulerState+0x34>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d102      	bne.n	8005c54 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	607b      	str	r3, [r7, #4]
 8005c52:	e008      	b.n	8005c66 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c54:	4b08      	ldr	r3, [pc, #32]	; (8005c78 <xTaskGetSchedulerState+0x38>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d102      	bne.n	8005c62 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005c5c:	2302      	movs	r3, #2
 8005c5e:	607b      	str	r3, [r7, #4]
 8005c60:	e001      	b.n	8005c66 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005c62:	2300      	movs	r3, #0
 8005c64:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005c66:	687b      	ldr	r3, [r7, #4]
	}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	370c      	adds	r7, #12
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr
 8005c74:	200007f4 	.word	0x200007f4
 8005c78:	20000810 	.word	0x20000810

08005c7c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b084      	sub	sp, #16
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d069      	beq.n	8005d66 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c96:	4b36      	ldr	r3, [pc, #216]	; (8005d70 <xTaskPriorityInherit+0xf4>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d259      	bcs.n	8005d54 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	699b      	ldr	r3, [r3, #24]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	db06      	blt.n	8005cb6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ca8:	4b31      	ldr	r3, [pc, #196]	; (8005d70 <xTaskPriorityInherit+0xf4>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cae:	f1c3 0207 	rsb	r2, r3, #7
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	6959      	ldr	r1, [r3, #20]
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cbe:	4613      	mov	r3, r2
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	4413      	add	r3, r2
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	4a2b      	ldr	r2, [pc, #172]	; (8005d74 <xTaskPriorityInherit+0xf8>)
 8005cc8:	4413      	add	r3, r2
 8005cca:	4299      	cmp	r1, r3
 8005ccc:	d13a      	bne.n	8005d44 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	3304      	adds	r3, #4
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f7fe feb1 	bl	8004a3a <uxListRemove>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d115      	bne.n	8005d0a <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ce2:	4924      	ldr	r1, [pc, #144]	; (8005d74 <xTaskPriorityInherit+0xf8>)
 8005ce4:	4613      	mov	r3, r2
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	4413      	add	r3, r2
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	440b      	add	r3, r1
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d10a      	bne.n	8005d0a <xTaskPriorityInherit+0x8e>
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8005cfe:	43da      	mvns	r2, r3
 8005d00:	4b1d      	ldr	r3, [pc, #116]	; (8005d78 <xTaskPriorityInherit+0xfc>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4013      	ands	r3, r2
 8005d06:	4a1c      	ldr	r2, [pc, #112]	; (8005d78 <xTaskPriorityInherit+0xfc>)
 8005d08:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005d0a:	4b19      	ldr	r3, [pc, #100]	; (8005d70 <xTaskPriorityInherit+0xf4>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d18:	2201      	movs	r2, #1
 8005d1a:	409a      	lsls	r2, r3
 8005d1c:	4b16      	ldr	r3, [pc, #88]	; (8005d78 <xTaskPriorityInherit+0xfc>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4313      	orrs	r3, r2
 8005d22:	4a15      	ldr	r2, [pc, #84]	; (8005d78 <xTaskPriorityInherit+0xfc>)
 8005d24:	6013      	str	r3, [r2, #0]
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d2a:	4613      	mov	r3, r2
 8005d2c:	009b      	lsls	r3, r3, #2
 8005d2e:	4413      	add	r3, r2
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	4a10      	ldr	r2, [pc, #64]	; (8005d74 <xTaskPriorityInherit+0xf8>)
 8005d34:	441a      	add	r2, r3
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	3304      	adds	r3, #4
 8005d3a:	4619      	mov	r1, r3
 8005d3c:	4610      	mov	r0, r2
 8005d3e:	f7fe fe1f 	bl	8004980 <vListInsertEnd>
 8005d42:	e004      	b.n	8005d4e <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005d44:	4b0a      	ldr	r3, [pc, #40]	; (8005d70 <xTaskPriorityInherit+0xf4>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	60fb      	str	r3, [r7, #12]
 8005d52:	e008      	b.n	8005d66 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d58:	4b05      	ldr	r3, [pc, #20]	; (8005d70 <xTaskPriorityInherit+0xf4>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d201      	bcs.n	8005d66 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005d62:	2301      	movs	r3, #1
 8005d64:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005d66:	68fb      	ldr	r3, [r7, #12]
	}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3710      	adds	r7, #16
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}
 8005d70:	200006e8 	.word	0x200006e8
 8005d74:	200006ec 	.word	0x200006ec
 8005d78:	200007f0 	.word	0x200007f0

08005d7c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b088      	sub	sp, #32
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	f000 8087 	beq.w	8005ea4 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d10c      	bne.n	8005db8 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8005d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da2:	b672      	cpsid	i
 8005da4:	f383 8811 	msr	BASEPRI, r3
 8005da8:	f3bf 8f6f 	isb	sy
 8005dac:	f3bf 8f4f 	dsb	sy
 8005db0:	b662      	cpsie	i
 8005db2:	60fb      	str	r3, [r7, #12]
}
 8005db4:	bf00      	nop
 8005db6:	e7fe      	b.n	8005db6 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005db8:	69bb      	ldr	r3, [r7, #24]
 8005dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dbc:	683a      	ldr	r2, [r7, #0]
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d902      	bls.n	8005dc8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	61fb      	str	r3, [r7, #28]
 8005dc6:	e002      	b.n	8005dce <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005dc8:	69bb      	ldr	r3, [r7, #24]
 8005dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dcc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005dce:	69bb      	ldr	r3, [r7, #24]
 8005dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd2:	69fa      	ldr	r2, [r7, #28]
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d065      	beq.n	8005ea4 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005dd8:	69bb      	ldr	r3, [r7, #24]
 8005dda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ddc:	697a      	ldr	r2, [r7, #20]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d160      	bne.n	8005ea4 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005de2:	4b32      	ldr	r3, [pc, #200]	; (8005eac <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	69ba      	ldr	r2, [r7, #24]
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d10c      	bne.n	8005e06 <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 8005dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df0:	b672      	cpsid	i
 8005df2:	f383 8811 	msr	BASEPRI, r3
 8005df6:	f3bf 8f6f 	isb	sy
 8005dfa:	f3bf 8f4f 	dsb	sy
 8005dfe:	b662      	cpsie	i
 8005e00:	60bb      	str	r3, [r7, #8]
}
 8005e02:	bf00      	nop
 8005e04:	e7fe      	b.n	8005e04 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005e06:	69bb      	ldr	r3, [r7, #24]
 8005e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e0a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005e0c:	69bb      	ldr	r3, [r7, #24]
 8005e0e:	69fa      	ldr	r2, [r7, #28]
 8005e10:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005e12:	69bb      	ldr	r3, [r7, #24]
 8005e14:	699b      	ldr	r3, [r3, #24]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	db04      	blt.n	8005e24 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e1a:	69fb      	ldr	r3, [r7, #28]
 8005e1c:	f1c3 0207 	rsb	r2, r3, #7
 8005e20:	69bb      	ldr	r3, [r7, #24]
 8005e22:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005e24:	69bb      	ldr	r3, [r7, #24]
 8005e26:	6959      	ldr	r1, [r3, #20]
 8005e28:	693a      	ldr	r2, [r7, #16]
 8005e2a:	4613      	mov	r3, r2
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	4413      	add	r3, r2
 8005e30:	009b      	lsls	r3, r3, #2
 8005e32:	4a1f      	ldr	r2, [pc, #124]	; (8005eb0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8005e34:	4413      	add	r3, r2
 8005e36:	4299      	cmp	r1, r3
 8005e38:	d134      	bne.n	8005ea4 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e3a:	69bb      	ldr	r3, [r7, #24]
 8005e3c:	3304      	adds	r3, #4
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f7fe fdfb 	bl	8004a3a <uxListRemove>
 8005e44:	4603      	mov	r3, r0
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d115      	bne.n	8005e76 <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005e4a:	69bb      	ldr	r3, [r7, #24]
 8005e4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e4e:	4918      	ldr	r1, [pc, #96]	; (8005eb0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8005e50:	4613      	mov	r3, r2
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	4413      	add	r3, r2
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	440b      	add	r3, r1
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d10a      	bne.n	8005e76 <vTaskPriorityDisinheritAfterTimeout+0xfa>
 8005e60:	69bb      	ldr	r3, [r7, #24]
 8005e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e64:	2201      	movs	r2, #1
 8005e66:	fa02 f303 	lsl.w	r3, r2, r3
 8005e6a:	43da      	mvns	r2, r3
 8005e6c:	4b11      	ldr	r3, [pc, #68]	; (8005eb4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4013      	ands	r3, r2
 8005e72:	4a10      	ldr	r2, [pc, #64]	; (8005eb4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005e74:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005e76:	69bb      	ldr	r3, [r7, #24]
 8005e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	409a      	lsls	r2, r3
 8005e7e:	4b0d      	ldr	r3, [pc, #52]	; (8005eb4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	4a0b      	ldr	r2, [pc, #44]	; (8005eb4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005e86:	6013      	str	r3, [r2, #0]
 8005e88:	69bb      	ldr	r3, [r7, #24]
 8005e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e8c:	4613      	mov	r3, r2
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	4413      	add	r3, r2
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	4a06      	ldr	r2, [pc, #24]	; (8005eb0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8005e96:	441a      	add	r2, r3
 8005e98:	69bb      	ldr	r3, [r7, #24]
 8005e9a:	3304      	adds	r3, #4
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	4610      	mov	r0, r2
 8005ea0:	f7fe fd6e 	bl	8004980 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005ea4:	bf00      	nop
 8005ea6:	3720      	adds	r7, #32
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}
 8005eac:	200006e8 	.word	0x200006e8
 8005eb0:	200006ec 	.word	0x200006ec
 8005eb4:	200007f0 	.word	0x200007f0

08005eb8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005eb8:	b480      	push	{r7}
 8005eba:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005ebc:	4b07      	ldr	r3, [pc, #28]	; (8005edc <pvTaskIncrementMutexHeldCount+0x24>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d004      	beq.n	8005ece <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005ec4:	4b05      	ldr	r3, [pc, #20]	; (8005edc <pvTaskIncrementMutexHeldCount+0x24>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005eca:	3201      	adds	r2, #1
 8005ecc:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8005ece:	4b03      	ldr	r3, [pc, #12]	; (8005edc <pvTaskIncrementMutexHeldCount+0x24>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
	}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr
 8005edc:	200006e8 	.word	0x200006e8

08005ee0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b084      	sub	sp, #16
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005eea:	4b29      	ldr	r3, [pc, #164]	; (8005f90 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ef0:	4b28      	ldr	r3, [pc, #160]	; (8005f94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	3304      	adds	r3, #4
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f7fe fd9f 	bl	8004a3a <uxListRemove>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d10b      	bne.n	8005f1a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005f02:	4b24      	ldr	r3, [pc, #144]	; (8005f94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f08:	2201      	movs	r2, #1
 8005f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f0e:	43da      	mvns	r2, r3
 8005f10:	4b21      	ldr	r3, [pc, #132]	; (8005f98 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4013      	ands	r3, r2
 8005f16:	4a20      	ldr	r2, [pc, #128]	; (8005f98 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005f18:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f20:	d10a      	bne.n	8005f38 <prvAddCurrentTaskToDelayedList+0x58>
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d007      	beq.n	8005f38 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f28:	4b1a      	ldr	r3, [pc, #104]	; (8005f94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	3304      	adds	r3, #4
 8005f2e:	4619      	mov	r1, r3
 8005f30:	481a      	ldr	r0, [pc, #104]	; (8005f9c <prvAddCurrentTaskToDelayedList+0xbc>)
 8005f32:	f7fe fd25 	bl	8004980 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005f36:	e026      	b.n	8005f86 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005f38:	68fa      	ldr	r2, [r7, #12]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	4413      	add	r3, r2
 8005f3e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005f40:	4b14      	ldr	r3, [pc, #80]	; (8005f94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	68ba      	ldr	r2, [r7, #8]
 8005f46:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005f48:	68ba      	ldr	r2, [r7, #8]
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d209      	bcs.n	8005f64 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f50:	4b13      	ldr	r3, [pc, #76]	; (8005fa0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005f52:	681a      	ldr	r2, [r3, #0]
 8005f54:	4b0f      	ldr	r3, [pc, #60]	; (8005f94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	3304      	adds	r3, #4
 8005f5a:	4619      	mov	r1, r3
 8005f5c:	4610      	mov	r0, r2
 8005f5e:	f7fe fd33 	bl	80049c8 <vListInsert>
}
 8005f62:	e010      	b.n	8005f86 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f64:	4b0f      	ldr	r3, [pc, #60]	; (8005fa4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	4b0a      	ldr	r3, [pc, #40]	; (8005f94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	3304      	adds	r3, #4
 8005f6e:	4619      	mov	r1, r3
 8005f70:	4610      	mov	r0, r2
 8005f72:	f7fe fd29 	bl	80049c8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005f76:	4b0c      	ldr	r3, [pc, #48]	; (8005fa8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	68ba      	ldr	r2, [r7, #8]
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d202      	bcs.n	8005f86 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005f80:	4a09      	ldr	r2, [pc, #36]	; (8005fa8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	6013      	str	r3, [r2, #0]
}
 8005f86:	bf00      	nop
 8005f88:	3710      	adds	r7, #16
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	200007ec 	.word	0x200007ec
 8005f94:	200006e8 	.word	0x200006e8
 8005f98:	200007f0 	.word	0x200007f0
 8005f9c:	200007d4 	.word	0x200007d4
 8005fa0:	200007a4 	.word	0x200007a4
 8005fa4:	200007a0 	.word	0x200007a0
 8005fa8:	20000808 	.word	0x20000808

08005fac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005fac:	b480      	push	{r7}
 8005fae:	b085      	sub	sp, #20
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	60f8      	str	r0, [r7, #12]
 8005fb4:	60b9      	str	r1, [r7, #8]
 8005fb6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	3b04      	subs	r3, #4
 8005fbc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005fc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	3b04      	subs	r3, #4
 8005fca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	f023 0201 	bic.w	r2, r3, #1
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	3b04      	subs	r3, #4
 8005fda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005fdc:	4a0c      	ldr	r2, [pc, #48]	; (8006010 <pxPortInitialiseStack+0x64>)
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	3b14      	subs	r3, #20
 8005fe6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	3b04      	subs	r3, #4
 8005ff2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f06f 0202 	mvn.w	r2, #2
 8005ffa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	3b20      	subs	r3, #32
 8006000:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006002:	68fb      	ldr	r3, [r7, #12]
}
 8006004:	4618      	mov	r0, r3
 8006006:	3714      	adds	r7, #20
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr
 8006010:	08006015 	.word	0x08006015

08006014 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006014:	b480      	push	{r7}
 8006016:	b085      	sub	sp, #20
 8006018:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800601a:	2300      	movs	r3, #0
 800601c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800601e:	4b14      	ldr	r3, [pc, #80]	; (8006070 <prvTaskExitError+0x5c>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006026:	d00c      	beq.n	8006042 <prvTaskExitError+0x2e>
	__asm volatile
 8006028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800602c:	b672      	cpsid	i
 800602e:	f383 8811 	msr	BASEPRI, r3
 8006032:	f3bf 8f6f 	isb	sy
 8006036:	f3bf 8f4f 	dsb	sy
 800603a:	b662      	cpsie	i
 800603c:	60fb      	str	r3, [r7, #12]
}
 800603e:	bf00      	nop
 8006040:	e7fe      	b.n	8006040 <prvTaskExitError+0x2c>
	__asm volatile
 8006042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006046:	b672      	cpsid	i
 8006048:	f383 8811 	msr	BASEPRI, r3
 800604c:	f3bf 8f6f 	isb	sy
 8006050:	f3bf 8f4f 	dsb	sy
 8006054:	b662      	cpsie	i
 8006056:	60bb      	str	r3, [r7, #8]
}
 8006058:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800605a:	bf00      	nop
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d0fc      	beq.n	800605c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006062:	bf00      	nop
 8006064:	bf00      	nop
 8006066:	3714      	adds	r7, #20
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr
 8006070:	20000014 	.word	0x20000014
	...

08006080 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006080:	4b07      	ldr	r3, [pc, #28]	; (80060a0 <pxCurrentTCBConst2>)
 8006082:	6819      	ldr	r1, [r3, #0]
 8006084:	6808      	ldr	r0, [r1, #0]
 8006086:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800608a:	f380 8809 	msr	PSP, r0
 800608e:	f3bf 8f6f 	isb	sy
 8006092:	f04f 0000 	mov.w	r0, #0
 8006096:	f380 8811 	msr	BASEPRI, r0
 800609a:	4770      	bx	lr
 800609c:	f3af 8000 	nop.w

080060a0 <pxCurrentTCBConst2>:
 80060a0:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80060a4:	bf00      	nop
 80060a6:	bf00      	nop

080060a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80060a8:	4808      	ldr	r0, [pc, #32]	; (80060cc <prvPortStartFirstTask+0x24>)
 80060aa:	6800      	ldr	r0, [r0, #0]
 80060ac:	6800      	ldr	r0, [r0, #0]
 80060ae:	f380 8808 	msr	MSP, r0
 80060b2:	f04f 0000 	mov.w	r0, #0
 80060b6:	f380 8814 	msr	CONTROL, r0
 80060ba:	b662      	cpsie	i
 80060bc:	b661      	cpsie	f
 80060be:	f3bf 8f4f 	dsb	sy
 80060c2:	f3bf 8f6f 	isb	sy
 80060c6:	df00      	svc	0
 80060c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80060ca:	bf00      	nop
 80060cc:	e000ed08 	.word	0xe000ed08

080060d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b084      	sub	sp, #16
 80060d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80060d6:	4b37      	ldr	r3, [pc, #220]	; (80061b4 <xPortStartScheduler+0xe4>)
 80060d8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	22ff      	movs	r2, #255	; 0xff
 80060e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80060f0:	78fb      	ldrb	r3, [r7, #3]
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80060f8:	b2da      	uxtb	r2, r3
 80060fa:	4b2f      	ldr	r3, [pc, #188]	; (80061b8 <xPortStartScheduler+0xe8>)
 80060fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80060fe:	4b2f      	ldr	r3, [pc, #188]	; (80061bc <xPortStartScheduler+0xec>)
 8006100:	2207      	movs	r2, #7
 8006102:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006104:	e009      	b.n	800611a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006106:	4b2d      	ldr	r3, [pc, #180]	; (80061bc <xPortStartScheduler+0xec>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	3b01      	subs	r3, #1
 800610c:	4a2b      	ldr	r2, [pc, #172]	; (80061bc <xPortStartScheduler+0xec>)
 800610e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006110:	78fb      	ldrb	r3, [r7, #3]
 8006112:	b2db      	uxtb	r3, r3
 8006114:	005b      	lsls	r3, r3, #1
 8006116:	b2db      	uxtb	r3, r3
 8006118:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800611a:	78fb      	ldrb	r3, [r7, #3]
 800611c:	b2db      	uxtb	r3, r3
 800611e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006122:	2b80      	cmp	r3, #128	; 0x80
 8006124:	d0ef      	beq.n	8006106 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006126:	4b25      	ldr	r3, [pc, #148]	; (80061bc <xPortStartScheduler+0xec>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f1c3 0307 	rsb	r3, r3, #7
 800612e:	2b04      	cmp	r3, #4
 8006130:	d00c      	beq.n	800614c <xPortStartScheduler+0x7c>
	__asm volatile
 8006132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006136:	b672      	cpsid	i
 8006138:	f383 8811 	msr	BASEPRI, r3
 800613c:	f3bf 8f6f 	isb	sy
 8006140:	f3bf 8f4f 	dsb	sy
 8006144:	b662      	cpsie	i
 8006146:	60bb      	str	r3, [r7, #8]
}
 8006148:	bf00      	nop
 800614a:	e7fe      	b.n	800614a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800614c:	4b1b      	ldr	r3, [pc, #108]	; (80061bc <xPortStartScheduler+0xec>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	021b      	lsls	r3, r3, #8
 8006152:	4a1a      	ldr	r2, [pc, #104]	; (80061bc <xPortStartScheduler+0xec>)
 8006154:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006156:	4b19      	ldr	r3, [pc, #100]	; (80061bc <xPortStartScheduler+0xec>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800615e:	4a17      	ldr	r2, [pc, #92]	; (80061bc <xPortStartScheduler+0xec>)
 8006160:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	b2da      	uxtb	r2, r3
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800616a:	4b15      	ldr	r3, [pc, #84]	; (80061c0 <xPortStartScheduler+0xf0>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a14      	ldr	r2, [pc, #80]	; (80061c0 <xPortStartScheduler+0xf0>)
 8006170:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006174:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006176:	4b12      	ldr	r3, [pc, #72]	; (80061c0 <xPortStartScheduler+0xf0>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a11      	ldr	r2, [pc, #68]	; (80061c0 <xPortStartScheduler+0xf0>)
 800617c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006180:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006182:	f000 f8dd 	bl	8006340 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006186:	4b0f      	ldr	r3, [pc, #60]	; (80061c4 <xPortStartScheduler+0xf4>)
 8006188:	2200      	movs	r2, #0
 800618a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800618c:	f000 f8fc 	bl	8006388 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006190:	4b0d      	ldr	r3, [pc, #52]	; (80061c8 <xPortStartScheduler+0xf8>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a0c      	ldr	r2, [pc, #48]	; (80061c8 <xPortStartScheduler+0xf8>)
 8006196:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800619a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800619c:	f7ff ff84 	bl	80060a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80061a0:	f7ff fb06 	bl	80057b0 <vTaskSwitchContext>
	prvTaskExitError();
 80061a4:	f7ff ff36 	bl	8006014 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80061a8:	2300      	movs	r3, #0
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3710      	adds	r7, #16
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	bf00      	nop
 80061b4:	e000e400 	.word	0xe000e400
 80061b8:	20000814 	.word	0x20000814
 80061bc:	20000818 	.word	0x20000818
 80061c0:	e000ed20 	.word	0xe000ed20
 80061c4:	20000014 	.word	0x20000014
 80061c8:	e000ef34 	.word	0xe000ef34

080061cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80061cc:	b480      	push	{r7}
 80061ce:	b083      	sub	sp, #12
 80061d0:	af00      	add	r7, sp, #0
	__asm volatile
 80061d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d6:	b672      	cpsid	i
 80061d8:	f383 8811 	msr	BASEPRI, r3
 80061dc:	f3bf 8f6f 	isb	sy
 80061e0:	f3bf 8f4f 	dsb	sy
 80061e4:	b662      	cpsie	i
 80061e6:	607b      	str	r3, [r7, #4]
}
 80061e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80061ea:	4b10      	ldr	r3, [pc, #64]	; (800622c <vPortEnterCritical+0x60>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	3301      	adds	r3, #1
 80061f0:	4a0e      	ldr	r2, [pc, #56]	; (800622c <vPortEnterCritical+0x60>)
 80061f2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80061f4:	4b0d      	ldr	r3, [pc, #52]	; (800622c <vPortEnterCritical+0x60>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d111      	bne.n	8006220 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80061fc:	4b0c      	ldr	r3, [pc, #48]	; (8006230 <vPortEnterCritical+0x64>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	b2db      	uxtb	r3, r3
 8006202:	2b00      	cmp	r3, #0
 8006204:	d00c      	beq.n	8006220 <vPortEnterCritical+0x54>
	__asm volatile
 8006206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800620a:	b672      	cpsid	i
 800620c:	f383 8811 	msr	BASEPRI, r3
 8006210:	f3bf 8f6f 	isb	sy
 8006214:	f3bf 8f4f 	dsb	sy
 8006218:	b662      	cpsie	i
 800621a:	603b      	str	r3, [r7, #0]
}
 800621c:	bf00      	nop
 800621e:	e7fe      	b.n	800621e <vPortEnterCritical+0x52>
	}
}
 8006220:	bf00      	nop
 8006222:	370c      	adds	r7, #12
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr
 800622c:	20000014 	.word	0x20000014
 8006230:	e000ed04 	.word	0xe000ed04

08006234 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006234:	b480      	push	{r7}
 8006236:	b083      	sub	sp, #12
 8006238:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800623a:	4b13      	ldr	r3, [pc, #76]	; (8006288 <vPortExitCritical+0x54>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d10c      	bne.n	800625c <vPortExitCritical+0x28>
	__asm volatile
 8006242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006246:	b672      	cpsid	i
 8006248:	f383 8811 	msr	BASEPRI, r3
 800624c:	f3bf 8f6f 	isb	sy
 8006250:	f3bf 8f4f 	dsb	sy
 8006254:	b662      	cpsie	i
 8006256:	607b      	str	r3, [r7, #4]
}
 8006258:	bf00      	nop
 800625a:	e7fe      	b.n	800625a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800625c:	4b0a      	ldr	r3, [pc, #40]	; (8006288 <vPortExitCritical+0x54>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	3b01      	subs	r3, #1
 8006262:	4a09      	ldr	r2, [pc, #36]	; (8006288 <vPortExitCritical+0x54>)
 8006264:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006266:	4b08      	ldr	r3, [pc, #32]	; (8006288 <vPortExitCritical+0x54>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d105      	bne.n	800627a <vPortExitCritical+0x46>
 800626e:	2300      	movs	r3, #0
 8006270:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	f383 8811 	msr	BASEPRI, r3
}
 8006278:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800627a:	bf00      	nop
 800627c:	370c      	adds	r7, #12
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr
 8006286:	bf00      	nop
 8006288:	20000014 	.word	0x20000014
 800628c:	00000000 	.word	0x00000000

08006290 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006290:	f3ef 8009 	mrs	r0, PSP
 8006294:	f3bf 8f6f 	isb	sy
 8006298:	4b15      	ldr	r3, [pc, #84]	; (80062f0 <pxCurrentTCBConst>)
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	f01e 0f10 	tst.w	lr, #16
 80062a0:	bf08      	it	eq
 80062a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80062a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062aa:	6010      	str	r0, [r2, #0]
 80062ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80062b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80062b4:	b672      	cpsid	i
 80062b6:	f380 8811 	msr	BASEPRI, r0
 80062ba:	f3bf 8f4f 	dsb	sy
 80062be:	f3bf 8f6f 	isb	sy
 80062c2:	b662      	cpsie	i
 80062c4:	f7ff fa74 	bl	80057b0 <vTaskSwitchContext>
 80062c8:	f04f 0000 	mov.w	r0, #0
 80062cc:	f380 8811 	msr	BASEPRI, r0
 80062d0:	bc09      	pop	{r0, r3}
 80062d2:	6819      	ldr	r1, [r3, #0]
 80062d4:	6808      	ldr	r0, [r1, #0]
 80062d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062da:	f01e 0f10 	tst.w	lr, #16
 80062de:	bf08      	it	eq
 80062e0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80062e4:	f380 8809 	msr	PSP, r0
 80062e8:	f3bf 8f6f 	isb	sy
 80062ec:	4770      	bx	lr
 80062ee:	bf00      	nop

080062f0 <pxCurrentTCBConst>:
 80062f0:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80062f4:	bf00      	nop
 80062f6:	bf00      	nop

080062f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b082      	sub	sp, #8
 80062fc:	af00      	add	r7, sp, #0
	__asm volatile
 80062fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006302:	b672      	cpsid	i
 8006304:	f383 8811 	msr	BASEPRI, r3
 8006308:	f3bf 8f6f 	isb	sy
 800630c:	f3bf 8f4f 	dsb	sy
 8006310:	b662      	cpsie	i
 8006312:	607b      	str	r3, [r7, #4]
}
 8006314:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006316:	f7ff f991 	bl	800563c <xTaskIncrementTick>
 800631a:	4603      	mov	r3, r0
 800631c:	2b00      	cmp	r3, #0
 800631e:	d003      	beq.n	8006328 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006320:	4b06      	ldr	r3, [pc, #24]	; (800633c <xPortSysTickHandler+0x44>)
 8006322:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006326:	601a      	str	r2, [r3, #0]
 8006328:	2300      	movs	r3, #0
 800632a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	f383 8811 	msr	BASEPRI, r3
}
 8006332:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006334:	bf00      	nop
 8006336:	3708      	adds	r7, #8
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}
 800633c:	e000ed04 	.word	0xe000ed04

08006340 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006340:	b480      	push	{r7}
 8006342:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006344:	4b0b      	ldr	r3, [pc, #44]	; (8006374 <vPortSetupTimerInterrupt+0x34>)
 8006346:	2200      	movs	r2, #0
 8006348:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800634a:	4b0b      	ldr	r3, [pc, #44]	; (8006378 <vPortSetupTimerInterrupt+0x38>)
 800634c:	2200      	movs	r2, #0
 800634e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006350:	4b0a      	ldr	r3, [pc, #40]	; (800637c <vPortSetupTimerInterrupt+0x3c>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a0a      	ldr	r2, [pc, #40]	; (8006380 <vPortSetupTimerInterrupt+0x40>)
 8006356:	fba2 2303 	umull	r2, r3, r2, r3
 800635a:	099b      	lsrs	r3, r3, #6
 800635c:	4a09      	ldr	r2, [pc, #36]	; (8006384 <vPortSetupTimerInterrupt+0x44>)
 800635e:	3b01      	subs	r3, #1
 8006360:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006362:	4b04      	ldr	r3, [pc, #16]	; (8006374 <vPortSetupTimerInterrupt+0x34>)
 8006364:	2207      	movs	r2, #7
 8006366:	601a      	str	r2, [r3, #0]
}
 8006368:	bf00      	nop
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr
 8006372:	bf00      	nop
 8006374:	e000e010 	.word	0xe000e010
 8006378:	e000e018 	.word	0xe000e018
 800637c:	20000008 	.word	0x20000008
 8006380:	10624dd3 	.word	0x10624dd3
 8006384:	e000e014 	.word	0xe000e014

08006388 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006388:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006398 <vPortEnableVFP+0x10>
 800638c:	6801      	ldr	r1, [r0, #0]
 800638e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006392:	6001      	str	r1, [r0, #0]
 8006394:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006396:	bf00      	nop
 8006398:	e000ed88 	.word	0xe000ed88

0800639c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800639c:	b480      	push	{r7}
 800639e:	b085      	sub	sp, #20
 80063a0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80063a2:	f3ef 8305 	mrs	r3, IPSR
 80063a6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2b0f      	cmp	r3, #15
 80063ac:	d916      	bls.n	80063dc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80063ae:	4a19      	ldr	r2, [pc, #100]	; (8006414 <vPortValidateInterruptPriority+0x78>)
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	4413      	add	r3, r2
 80063b4:	781b      	ldrb	r3, [r3, #0]
 80063b6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80063b8:	4b17      	ldr	r3, [pc, #92]	; (8006418 <vPortValidateInterruptPriority+0x7c>)
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	7afa      	ldrb	r2, [r7, #11]
 80063be:	429a      	cmp	r2, r3
 80063c0:	d20c      	bcs.n	80063dc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 80063c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c6:	b672      	cpsid	i
 80063c8:	f383 8811 	msr	BASEPRI, r3
 80063cc:	f3bf 8f6f 	isb	sy
 80063d0:	f3bf 8f4f 	dsb	sy
 80063d4:	b662      	cpsie	i
 80063d6:	607b      	str	r3, [r7, #4]
}
 80063d8:	bf00      	nop
 80063da:	e7fe      	b.n	80063da <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80063dc:	4b0f      	ldr	r3, [pc, #60]	; (800641c <vPortValidateInterruptPriority+0x80>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80063e4:	4b0e      	ldr	r3, [pc, #56]	; (8006420 <vPortValidateInterruptPriority+0x84>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d90c      	bls.n	8006406 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 80063ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f0:	b672      	cpsid	i
 80063f2:	f383 8811 	msr	BASEPRI, r3
 80063f6:	f3bf 8f6f 	isb	sy
 80063fa:	f3bf 8f4f 	dsb	sy
 80063fe:	b662      	cpsie	i
 8006400:	603b      	str	r3, [r7, #0]
}
 8006402:	bf00      	nop
 8006404:	e7fe      	b.n	8006404 <vPortValidateInterruptPriority+0x68>
	}
 8006406:	bf00      	nop
 8006408:	3714      	adds	r7, #20
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr
 8006412:	bf00      	nop
 8006414:	e000e3f0 	.word	0xe000e3f0
 8006418:	20000814 	.word	0x20000814
 800641c:	e000ed0c 	.word	0xe000ed0c
 8006420:	20000818 	.word	0x20000818

08006424 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b08a      	sub	sp, #40	; 0x28
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800642c:	2300      	movs	r3, #0
 800642e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006430:	f7ff f858 	bl	80054e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006434:	4b5b      	ldr	r3, [pc, #364]	; (80065a4 <pvPortMalloc+0x180>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d101      	bne.n	8006440 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800643c:	f000 f91a 	bl	8006674 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006440:	4b59      	ldr	r3, [pc, #356]	; (80065a8 <pvPortMalloc+0x184>)
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	4013      	ands	r3, r2
 8006448:	2b00      	cmp	r3, #0
 800644a:	f040 8092 	bne.w	8006572 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d01f      	beq.n	8006494 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8006454:	2208      	movs	r2, #8
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	4413      	add	r3, r2
 800645a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f003 0307 	and.w	r3, r3, #7
 8006462:	2b00      	cmp	r3, #0
 8006464:	d016      	beq.n	8006494 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f023 0307 	bic.w	r3, r3, #7
 800646c:	3308      	adds	r3, #8
 800646e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f003 0307 	and.w	r3, r3, #7
 8006476:	2b00      	cmp	r3, #0
 8006478:	d00c      	beq.n	8006494 <pvPortMalloc+0x70>
	__asm volatile
 800647a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800647e:	b672      	cpsid	i
 8006480:	f383 8811 	msr	BASEPRI, r3
 8006484:	f3bf 8f6f 	isb	sy
 8006488:	f3bf 8f4f 	dsb	sy
 800648c:	b662      	cpsie	i
 800648e:	617b      	str	r3, [r7, #20]
}
 8006490:	bf00      	nop
 8006492:	e7fe      	b.n	8006492 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d06b      	beq.n	8006572 <pvPortMalloc+0x14e>
 800649a:	4b44      	ldr	r3, [pc, #272]	; (80065ac <pvPortMalloc+0x188>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d866      	bhi.n	8006572 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80064a4:	4b42      	ldr	r3, [pc, #264]	; (80065b0 <pvPortMalloc+0x18c>)
 80064a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80064a8:	4b41      	ldr	r3, [pc, #260]	; (80065b0 <pvPortMalloc+0x18c>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80064ae:	e004      	b.n	80064ba <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 80064b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80064b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80064ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	687a      	ldr	r2, [r7, #4]
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d903      	bls.n	80064cc <pvPortMalloc+0xa8>
 80064c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d1f1      	bne.n	80064b0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80064cc:	4b35      	ldr	r3, [pc, #212]	; (80065a4 <pvPortMalloc+0x180>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d04d      	beq.n	8006572 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80064d6:	6a3b      	ldr	r3, [r7, #32]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	2208      	movs	r2, #8
 80064dc:	4413      	add	r3, r2
 80064de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80064e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	6a3b      	ldr	r3, [r7, #32]
 80064e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80064e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ea:	685a      	ldr	r2, [r3, #4]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	1ad2      	subs	r2, r2, r3
 80064f0:	2308      	movs	r3, #8
 80064f2:	005b      	lsls	r3, r3, #1
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d921      	bls.n	800653c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80064f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4413      	add	r3, r2
 80064fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006500:	69bb      	ldr	r3, [r7, #24]
 8006502:	f003 0307 	and.w	r3, r3, #7
 8006506:	2b00      	cmp	r3, #0
 8006508:	d00c      	beq.n	8006524 <pvPortMalloc+0x100>
	__asm volatile
 800650a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800650e:	b672      	cpsid	i
 8006510:	f383 8811 	msr	BASEPRI, r3
 8006514:	f3bf 8f6f 	isb	sy
 8006518:	f3bf 8f4f 	dsb	sy
 800651c:	b662      	cpsie	i
 800651e:	613b      	str	r3, [r7, #16]
}
 8006520:	bf00      	nop
 8006522:	e7fe      	b.n	8006522 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006526:	685a      	ldr	r2, [r3, #4]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	1ad2      	subs	r2, r2, r3
 800652c:	69bb      	ldr	r3, [r7, #24]
 800652e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006532:	687a      	ldr	r2, [r7, #4]
 8006534:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006536:	69b8      	ldr	r0, [r7, #24]
 8006538:	f000 f8fe 	bl	8006738 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800653c:	4b1b      	ldr	r3, [pc, #108]	; (80065ac <pvPortMalloc+0x188>)
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	1ad3      	subs	r3, r2, r3
 8006546:	4a19      	ldr	r2, [pc, #100]	; (80065ac <pvPortMalloc+0x188>)
 8006548:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800654a:	4b18      	ldr	r3, [pc, #96]	; (80065ac <pvPortMalloc+0x188>)
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	4b19      	ldr	r3, [pc, #100]	; (80065b4 <pvPortMalloc+0x190>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	429a      	cmp	r2, r3
 8006554:	d203      	bcs.n	800655e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006556:	4b15      	ldr	r3, [pc, #84]	; (80065ac <pvPortMalloc+0x188>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a16      	ldr	r2, [pc, #88]	; (80065b4 <pvPortMalloc+0x190>)
 800655c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800655e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006560:	685a      	ldr	r2, [r3, #4]
 8006562:	4b11      	ldr	r3, [pc, #68]	; (80065a8 <pvPortMalloc+0x184>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	431a      	orrs	r2, r3
 8006568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800656c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656e:	2200      	movs	r2, #0
 8006570:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006572:	f7fe ffc5 	bl	8005500 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006576:	69fb      	ldr	r3, [r7, #28]
 8006578:	f003 0307 	and.w	r3, r3, #7
 800657c:	2b00      	cmp	r3, #0
 800657e:	d00c      	beq.n	800659a <pvPortMalloc+0x176>
	__asm volatile
 8006580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006584:	b672      	cpsid	i
 8006586:	f383 8811 	msr	BASEPRI, r3
 800658a:	f3bf 8f6f 	isb	sy
 800658e:	f3bf 8f4f 	dsb	sy
 8006592:	b662      	cpsie	i
 8006594:	60fb      	str	r3, [r7, #12]
}
 8006596:	bf00      	nop
 8006598:	e7fe      	b.n	8006598 <pvPortMalloc+0x174>
	return pvReturn;
 800659a:	69fb      	ldr	r3, [r7, #28]
}
 800659c:	4618      	mov	r0, r3
 800659e:	3728      	adds	r7, #40	; 0x28
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}
 80065a4:	20004424 	.word	0x20004424
 80065a8:	20004430 	.word	0x20004430
 80065ac:	20004428 	.word	0x20004428
 80065b0:	2000441c 	.word	0x2000441c
 80065b4:	2000442c 	.word	0x2000442c

080065b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b086      	sub	sp, #24
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d04c      	beq.n	8006664 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80065ca:	2308      	movs	r3, #8
 80065cc:	425b      	negs	r3, r3
 80065ce:	697a      	ldr	r2, [r7, #20]
 80065d0:	4413      	add	r3, r2
 80065d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	685a      	ldr	r2, [r3, #4]
 80065dc:	4b23      	ldr	r3, [pc, #140]	; (800666c <vPortFree+0xb4>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4013      	ands	r3, r2
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d10c      	bne.n	8006600 <vPortFree+0x48>
	__asm volatile
 80065e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ea:	b672      	cpsid	i
 80065ec:	f383 8811 	msr	BASEPRI, r3
 80065f0:	f3bf 8f6f 	isb	sy
 80065f4:	f3bf 8f4f 	dsb	sy
 80065f8:	b662      	cpsie	i
 80065fa:	60fb      	str	r3, [r7, #12]
}
 80065fc:	bf00      	nop
 80065fe:	e7fe      	b.n	80065fe <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d00c      	beq.n	8006622 <vPortFree+0x6a>
	__asm volatile
 8006608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800660c:	b672      	cpsid	i
 800660e:	f383 8811 	msr	BASEPRI, r3
 8006612:	f3bf 8f6f 	isb	sy
 8006616:	f3bf 8f4f 	dsb	sy
 800661a:	b662      	cpsie	i
 800661c:	60bb      	str	r3, [r7, #8]
}
 800661e:	bf00      	nop
 8006620:	e7fe      	b.n	8006620 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	685a      	ldr	r2, [r3, #4]
 8006626:	4b11      	ldr	r3, [pc, #68]	; (800666c <vPortFree+0xb4>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4013      	ands	r3, r2
 800662c:	2b00      	cmp	r3, #0
 800662e:	d019      	beq.n	8006664 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d115      	bne.n	8006664 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	685a      	ldr	r2, [r3, #4]
 800663c:	4b0b      	ldr	r3, [pc, #44]	; (800666c <vPortFree+0xb4>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	43db      	mvns	r3, r3
 8006642:	401a      	ands	r2, r3
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006648:	f7fe ff4c 	bl	80054e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	685a      	ldr	r2, [r3, #4]
 8006650:	4b07      	ldr	r3, [pc, #28]	; (8006670 <vPortFree+0xb8>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4413      	add	r3, r2
 8006656:	4a06      	ldr	r2, [pc, #24]	; (8006670 <vPortFree+0xb8>)
 8006658:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800665a:	6938      	ldr	r0, [r7, #16]
 800665c:	f000 f86c 	bl	8006738 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006660:	f7fe ff4e 	bl	8005500 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006664:	bf00      	nop
 8006666:	3718      	adds	r7, #24
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}
 800666c:	20004430 	.word	0x20004430
 8006670:	20004428 	.word	0x20004428

08006674 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006674:	b480      	push	{r7}
 8006676:	b085      	sub	sp, #20
 8006678:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800667a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800667e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006680:	4b27      	ldr	r3, [pc, #156]	; (8006720 <prvHeapInit+0xac>)
 8006682:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f003 0307 	and.w	r3, r3, #7
 800668a:	2b00      	cmp	r3, #0
 800668c:	d00c      	beq.n	80066a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	3307      	adds	r3, #7
 8006692:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f023 0307 	bic.w	r3, r3, #7
 800669a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800669c:	68ba      	ldr	r2, [r7, #8]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	1ad3      	subs	r3, r2, r3
 80066a2:	4a1f      	ldr	r2, [pc, #124]	; (8006720 <prvHeapInit+0xac>)
 80066a4:	4413      	add	r3, r2
 80066a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80066ac:	4a1d      	ldr	r2, [pc, #116]	; (8006724 <prvHeapInit+0xb0>)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80066b2:	4b1c      	ldr	r3, [pc, #112]	; (8006724 <prvHeapInit+0xb0>)
 80066b4:	2200      	movs	r2, #0
 80066b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	68ba      	ldr	r2, [r7, #8]
 80066bc:	4413      	add	r3, r2
 80066be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80066c0:	2208      	movs	r2, #8
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	1a9b      	subs	r3, r3, r2
 80066c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f023 0307 	bic.w	r3, r3, #7
 80066ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	4a15      	ldr	r2, [pc, #84]	; (8006728 <prvHeapInit+0xb4>)
 80066d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80066d6:	4b14      	ldr	r3, [pc, #80]	; (8006728 <prvHeapInit+0xb4>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	2200      	movs	r2, #0
 80066dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80066de:	4b12      	ldr	r3, [pc, #72]	; (8006728 <prvHeapInit+0xb4>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	2200      	movs	r2, #0
 80066e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	68fa      	ldr	r2, [r7, #12]
 80066ee:	1ad2      	subs	r2, r2, r3
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80066f4:	4b0c      	ldr	r3, [pc, #48]	; (8006728 <prvHeapInit+0xb4>)
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	4a0a      	ldr	r2, [pc, #40]	; (800672c <prvHeapInit+0xb8>)
 8006702:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	4a09      	ldr	r2, [pc, #36]	; (8006730 <prvHeapInit+0xbc>)
 800670a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800670c:	4b09      	ldr	r3, [pc, #36]	; (8006734 <prvHeapInit+0xc0>)
 800670e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006712:	601a      	str	r2, [r3, #0]
}
 8006714:	bf00      	nop
 8006716:	3714      	adds	r7, #20
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr
 8006720:	2000081c 	.word	0x2000081c
 8006724:	2000441c 	.word	0x2000441c
 8006728:	20004424 	.word	0x20004424
 800672c:	2000442c 	.word	0x2000442c
 8006730:	20004428 	.word	0x20004428
 8006734:	20004430 	.word	0x20004430

08006738 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006738:	b480      	push	{r7}
 800673a:	b085      	sub	sp, #20
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006740:	4b28      	ldr	r3, [pc, #160]	; (80067e4 <prvInsertBlockIntoFreeList+0xac>)
 8006742:	60fb      	str	r3, [r7, #12]
 8006744:	e002      	b.n	800674c <prvInsertBlockIntoFreeList+0x14>
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	60fb      	str	r3, [r7, #12]
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	687a      	ldr	r2, [r7, #4]
 8006752:	429a      	cmp	r2, r3
 8006754:	d8f7      	bhi.n	8006746 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	68ba      	ldr	r2, [r7, #8]
 8006760:	4413      	add	r3, r2
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	429a      	cmp	r2, r3
 8006766:	d108      	bne.n	800677a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	685a      	ldr	r2, [r3, #4]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	441a      	add	r2, r3
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	68ba      	ldr	r2, [r7, #8]
 8006784:	441a      	add	r2, r3
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	429a      	cmp	r2, r3
 800678c:	d118      	bne.n	80067c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	4b15      	ldr	r3, [pc, #84]	; (80067e8 <prvInsertBlockIntoFreeList+0xb0>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	429a      	cmp	r2, r3
 8006798:	d00d      	beq.n	80067b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	685a      	ldr	r2, [r3, #4]
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	441a      	add	r2, r3
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	601a      	str	r2, [r3, #0]
 80067b4:	e008      	b.n	80067c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80067b6:	4b0c      	ldr	r3, [pc, #48]	; (80067e8 <prvInsertBlockIntoFreeList+0xb0>)
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	601a      	str	r2, [r3, #0]
 80067be:	e003      	b.n	80067c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80067c8:	68fa      	ldr	r2, [r7, #12]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d002      	beq.n	80067d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	687a      	ldr	r2, [r7, #4]
 80067d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80067d6:	bf00      	nop
 80067d8:	3714      	adds	r7, #20
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr
 80067e2:	bf00      	nop
 80067e4:	2000441c 	.word	0x2000441c
 80067e8:	20004424 	.word	0x20004424

080067ec <atoi>:
 80067ec:	220a      	movs	r2, #10
 80067ee:	2100      	movs	r1, #0
 80067f0:	f000 b90e 	b.w	8006a10 <strtol>

080067f4 <__errno>:
 80067f4:	4b01      	ldr	r3, [pc, #4]	; (80067fc <__errno+0x8>)
 80067f6:	6818      	ldr	r0, [r3, #0]
 80067f8:	4770      	bx	lr
 80067fa:	bf00      	nop
 80067fc:	20000018 	.word	0x20000018

08006800 <__libc_init_array>:
 8006800:	b570      	push	{r4, r5, r6, lr}
 8006802:	4d0d      	ldr	r5, [pc, #52]	; (8006838 <__libc_init_array+0x38>)
 8006804:	4c0d      	ldr	r4, [pc, #52]	; (800683c <__libc_init_array+0x3c>)
 8006806:	1b64      	subs	r4, r4, r5
 8006808:	10a4      	asrs	r4, r4, #2
 800680a:	2600      	movs	r6, #0
 800680c:	42a6      	cmp	r6, r4
 800680e:	d109      	bne.n	8006824 <__libc_init_array+0x24>
 8006810:	4d0b      	ldr	r5, [pc, #44]	; (8006840 <__libc_init_array+0x40>)
 8006812:	4c0c      	ldr	r4, [pc, #48]	; (8006844 <__libc_init_array+0x44>)
 8006814:	f001 fa2a 	bl	8007c6c <_init>
 8006818:	1b64      	subs	r4, r4, r5
 800681a:	10a4      	asrs	r4, r4, #2
 800681c:	2600      	movs	r6, #0
 800681e:	42a6      	cmp	r6, r4
 8006820:	d105      	bne.n	800682e <__libc_init_array+0x2e>
 8006822:	bd70      	pop	{r4, r5, r6, pc}
 8006824:	f855 3b04 	ldr.w	r3, [r5], #4
 8006828:	4798      	blx	r3
 800682a:	3601      	adds	r6, #1
 800682c:	e7ee      	b.n	800680c <__libc_init_array+0xc>
 800682e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006832:	4798      	blx	r3
 8006834:	3601      	adds	r6, #1
 8006836:	e7f2      	b.n	800681e <__libc_init_array+0x1e>
 8006838:	08007f54 	.word	0x08007f54
 800683c:	08007f54 	.word	0x08007f54
 8006840:	08007f54 	.word	0x08007f54
 8006844:	08007f58 	.word	0x08007f58

08006848 <memcpy>:
 8006848:	440a      	add	r2, r1
 800684a:	4291      	cmp	r1, r2
 800684c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006850:	d100      	bne.n	8006854 <memcpy+0xc>
 8006852:	4770      	bx	lr
 8006854:	b510      	push	{r4, lr}
 8006856:	f811 4b01 	ldrb.w	r4, [r1], #1
 800685a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800685e:	4291      	cmp	r1, r2
 8006860:	d1f9      	bne.n	8006856 <memcpy+0xe>
 8006862:	bd10      	pop	{r4, pc}

08006864 <memset>:
 8006864:	4402      	add	r2, r0
 8006866:	4603      	mov	r3, r0
 8006868:	4293      	cmp	r3, r2
 800686a:	d100      	bne.n	800686e <memset+0xa>
 800686c:	4770      	bx	lr
 800686e:	f803 1b01 	strb.w	r1, [r3], #1
 8006872:	e7f9      	b.n	8006868 <memset+0x4>

08006874 <iprintf>:
 8006874:	b40f      	push	{r0, r1, r2, r3}
 8006876:	4b0a      	ldr	r3, [pc, #40]	; (80068a0 <iprintf+0x2c>)
 8006878:	b513      	push	{r0, r1, r4, lr}
 800687a:	681c      	ldr	r4, [r3, #0]
 800687c:	b124      	cbz	r4, 8006888 <iprintf+0x14>
 800687e:	69a3      	ldr	r3, [r4, #24]
 8006880:	b913      	cbnz	r3, 8006888 <iprintf+0x14>
 8006882:	4620      	mov	r0, r4
 8006884:	f000 faa8 	bl	8006dd8 <__sinit>
 8006888:	ab05      	add	r3, sp, #20
 800688a:	9a04      	ldr	r2, [sp, #16]
 800688c:	68a1      	ldr	r1, [r4, #8]
 800688e:	9301      	str	r3, [sp, #4]
 8006890:	4620      	mov	r0, r4
 8006892:	f000 fe0d 	bl	80074b0 <_vfiprintf_r>
 8006896:	b002      	add	sp, #8
 8006898:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800689c:	b004      	add	sp, #16
 800689e:	4770      	bx	lr
 80068a0:	20000018 	.word	0x20000018

080068a4 <sniprintf>:
 80068a4:	b40c      	push	{r2, r3}
 80068a6:	b530      	push	{r4, r5, lr}
 80068a8:	4b17      	ldr	r3, [pc, #92]	; (8006908 <sniprintf+0x64>)
 80068aa:	1e0c      	subs	r4, r1, #0
 80068ac:	681d      	ldr	r5, [r3, #0]
 80068ae:	b09d      	sub	sp, #116	; 0x74
 80068b0:	da08      	bge.n	80068c4 <sniprintf+0x20>
 80068b2:	238b      	movs	r3, #139	; 0x8b
 80068b4:	602b      	str	r3, [r5, #0]
 80068b6:	f04f 30ff 	mov.w	r0, #4294967295
 80068ba:	b01d      	add	sp, #116	; 0x74
 80068bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80068c0:	b002      	add	sp, #8
 80068c2:	4770      	bx	lr
 80068c4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80068c8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80068cc:	bf14      	ite	ne
 80068ce:	f104 33ff 	addne.w	r3, r4, #4294967295
 80068d2:	4623      	moveq	r3, r4
 80068d4:	9304      	str	r3, [sp, #16]
 80068d6:	9307      	str	r3, [sp, #28]
 80068d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80068dc:	9002      	str	r0, [sp, #8]
 80068de:	9006      	str	r0, [sp, #24]
 80068e0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80068e4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80068e6:	ab21      	add	r3, sp, #132	; 0x84
 80068e8:	a902      	add	r1, sp, #8
 80068ea:	4628      	mov	r0, r5
 80068ec:	9301      	str	r3, [sp, #4]
 80068ee:	f000 fcb5 	bl	800725c <_svfiprintf_r>
 80068f2:	1c43      	adds	r3, r0, #1
 80068f4:	bfbc      	itt	lt
 80068f6:	238b      	movlt	r3, #139	; 0x8b
 80068f8:	602b      	strlt	r3, [r5, #0]
 80068fa:	2c00      	cmp	r4, #0
 80068fc:	d0dd      	beq.n	80068ba <sniprintf+0x16>
 80068fe:	9b02      	ldr	r3, [sp, #8]
 8006900:	2200      	movs	r2, #0
 8006902:	701a      	strb	r2, [r3, #0]
 8006904:	e7d9      	b.n	80068ba <sniprintf+0x16>
 8006906:	bf00      	nop
 8006908:	20000018 	.word	0x20000018

0800690c <_strtol_l.constprop.0>:
 800690c:	2b01      	cmp	r3, #1
 800690e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006912:	d001      	beq.n	8006918 <_strtol_l.constprop.0+0xc>
 8006914:	2b24      	cmp	r3, #36	; 0x24
 8006916:	d906      	bls.n	8006926 <_strtol_l.constprop.0+0x1a>
 8006918:	f7ff ff6c 	bl	80067f4 <__errno>
 800691c:	2316      	movs	r3, #22
 800691e:	6003      	str	r3, [r0, #0]
 8006920:	2000      	movs	r0, #0
 8006922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006926:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006a0c <_strtol_l.constprop.0+0x100>
 800692a:	460d      	mov	r5, r1
 800692c:	462e      	mov	r6, r5
 800692e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006932:	f814 700c 	ldrb.w	r7, [r4, ip]
 8006936:	f017 0708 	ands.w	r7, r7, #8
 800693a:	d1f7      	bne.n	800692c <_strtol_l.constprop.0+0x20>
 800693c:	2c2d      	cmp	r4, #45	; 0x2d
 800693e:	d132      	bne.n	80069a6 <_strtol_l.constprop.0+0x9a>
 8006940:	782c      	ldrb	r4, [r5, #0]
 8006942:	2701      	movs	r7, #1
 8006944:	1cb5      	adds	r5, r6, #2
 8006946:	2b00      	cmp	r3, #0
 8006948:	d05b      	beq.n	8006a02 <_strtol_l.constprop.0+0xf6>
 800694a:	2b10      	cmp	r3, #16
 800694c:	d109      	bne.n	8006962 <_strtol_l.constprop.0+0x56>
 800694e:	2c30      	cmp	r4, #48	; 0x30
 8006950:	d107      	bne.n	8006962 <_strtol_l.constprop.0+0x56>
 8006952:	782c      	ldrb	r4, [r5, #0]
 8006954:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006958:	2c58      	cmp	r4, #88	; 0x58
 800695a:	d14d      	bne.n	80069f8 <_strtol_l.constprop.0+0xec>
 800695c:	786c      	ldrb	r4, [r5, #1]
 800695e:	2310      	movs	r3, #16
 8006960:	3502      	adds	r5, #2
 8006962:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006966:	f108 38ff 	add.w	r8, r8, #4294967295
 800696a:	f04f 0c00 	mov.w	ip, #0
 800696e:	fbb8 f9f3 	udiv	r9, r8, r3
 8006972:	4666      	mov	r6, ip
 8006974:	fb03 8a19 	mls	sl, r3, r9, r8
 8006978:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800697c:	f1be 0f09 	cmp.w	lr, #9
 8006980:	d816      	bhi.n	80069b0 <_strtol_l.constprop.0+0xa4>
 8006982:	4674      	mov	r4, lr
 8006984:	42a3      	cmp	r3, r4
 8006986:	dd24      	ble.n	80069d2 <_strtol_l.constprop.0+0xc6>
 8006988:	f1bc 0f00 	cmp.w	ip, #0
 800698c:	db1e      	blt.n	80069cc <_strtol_l.constprop.0+0xc0>
 800698e:	45b1      	cmp	r9, r6
 8006990:	d31c      	bcc.n	80069cc <_strtol_l.constprop.0+0xc0>
 8006992:	d101      	bne.n	8006998 <_strtol_l.constprop.0+0x8c>
 8006994:	45a2      	cmp	sl, r4
 8006996:	db19      	blt.n	80069cc <_strtol_l.constprop.0+0xc0>
 8006998:	fb06 4603 	mla	r6, r6, r3, r4
 800699c:	f04f 0c01 	mov.w	ip, #1
 80069a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80069a4:	e7e8      	b.n	8006978 <_strtol_l.constprop.0+0x6c>
 80069a6:	2c2b      	cmp	r4, #43	; 0x2b
 80069a8:	bf04      	itt	eq
 80069aa:	782c      	ldrbeq	r4, [r5, #0]
 80069ac:	1cb5      	addeq	r5, r6, #2
 80069ae:	e7ca      	b.n	8006946 <_strtol_l.constprop.0+0x3a>
 80069b0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80069b4:	f1be 0f19 	cmp.w	lr, #25
 80069b8:	d801      	bhi.n	80069be <_strtol_l.constprop.0+0xb2>
 80069ba:	3c37      	subs	r4, #55	; 0x37
 80069bc:	e7e2      	b.n	8006984 <_strtol_l.constprop.0+0x78>
 80069be:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80069c2:	f1be 0f19 	cmp.w	lr, #25
 80069c6:	d804      	bhi.n	80069d2 <_strtol_l.constprop.0+0xc6>
 80069c8:	3c57      	subs	r4, #87	; 0x57
 80069ca:	e7db      	b.n	8006984 <_strtol_l.constprop.0+0x78>
 80069cc:	f04f 3cff 	mov.w	ip, #4294967295
 80069d0:	e7e6      	b.n	80069a0 <_strtol_l.constprop.0+0x94>
 80069d2:	f1bc 0f00 	cmp.w	ip, #0
 80069d6:	da05      	bge.n	80069e4 <_strtol_l.constprop.0+0xd8>
 80069d8:	2322      	movs	r3, #34	; 0x22
 80069da:	6003      	str	r3, [r0, #0]
 80069dc:	4646      	mov	r6, r8
 80069de:	b942      	cbnz	r2, 80069f2 <_strtol_l.constprop.0+0xe6>
 80069e0:	4630      	mov	r0, r6
 80069e2:	e79e      	b.n	8006922 <_strtol_l.constprop.0+0x16>
 80069e4:	b107      	cbz	r7, 80069e8 <_strtol_l.constprop.0+0xdc>
 80069e6:	4276      	negs	r6, r6
 80069e8:	2a00      	cmp	r2, #0
 80069ea:	d0f9      	beq.n	80069e0 <_strtol_l.constprop.0+0xd4>
 80069ec:	f1bc 0f00 	cmp.w	ip, #0
 80069f0:	d000      	beq.n	80069f4 <_strtol_l.constprop.0+0xe8>
 80069f2:	1e69      	subs	r1, r5, #1
 80069f4:	6011      	str	r1, [r2, #0]
 80069f6:	e7f3      	b.n	80069e0 <_strtol_l.constprop.0+0xd4>
 80069f8:	2430      	movs	r4, #48	; 0x30
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d1b1      	bne.n	8006962 <_strtol_l.constprop.0+0x56>
 80069fe:	2308      	movs	r3, #8
 8006a00:	e7af      	b.n	8006962 <_strtol_l.constprop.0+0x56>
 8006a02:	2c30      	cmp	r4, #48	; 0x30
 8006a04:	d0a5      	beq.n	8006952 <_strtol_l.constprop.0+0x46>
 8006a06:	230a      	movs	r3, #10
 8006a08:	e7ab      	b.n	8006962 <_strtol_l.constprop.0+0x56>
 8006a0a:	bf00      	nop
 8006a0c:	08007db5 	.word	0x08007db5

08006a10 <strtol>:
 8006a10:	4613      	mov	r3, r2
 8006a12:	460a      	mov	r2, r1
 8006a14:	4601      	mov	r1, r0
 8006a16:	4802      	ldr	r0, [pc, #8]	; (8006a20 <strtol+0x10>)
 8006a18:	6800      	ldr	r0, [r0, #0]
 8006a1a:	f7ff bf77 	b.w	800690c <_strtol_l.constprop.0>
 8006a1e:	bf00      	nop
 8006a20:	20000018 	.word	0x20000018

08006a24 <__swbuf_r>:
 8006a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a26:	460e      	mov	r6, r1
 8006a28:	4614      	mov	r4, r2
 8006a2a:	4605      	mov	r5, r0
 8006a2c:	b118      	cbz	r0, 8006a36 <__swbuf_r+0x12>
 8006a2e:	6983      	ldr	r3, [r0, #24]
 8006a30:	b90b      	cbnz	r3, 8006a36 <__swbuf_r+0x12>
 8006a32:	f000 f9d1 	bl	8006dd8 <__sinit>
 8006a36:	4b21      	ldr	r3, [pc, #132]	; (8006abc <__swbuf_r+0x98>)
 8006a38:	429c      	cmp	r4, r3
 8006a3a:	d12b      	bne.n	8006a94 <__swbuf_r+0x70>
 8006a3c:	686c      	ldr	r4, [r5, #4]
 8006a3e:	69a3      	ldr	r3, [r4, #24]
 8006a40:	60a3      	str	r3, [r4, #8]
 8006a42:	89a3      	ldrh	r3, [r4, #12]
 8006a44:	071a      	lsls	r2, r3, #28
 8006a46:	d52f      	bpl.n	8006aa8 <__swbuf_r+0x84>
 8006a48:	6923      	ldr	r3, [r4, #16]
 8006a4a:	b36b      	cbz	r3, 8006aa8 <__swbuf_r+0x84>
 8006a4c:	6923      	ldr	r3, [r4, #16]
 8006a4e:	6820      	ldr	r0, [r4, #0]
 8006a50:	1ac0      	subs	r0, r0, r3
 8006a52:	6963      	ldr	r3, [r4, #20]
 8006a54:	b2f6      	uxtb	r6, r6
 8006a56:	4283      	cmp	r3, r0
 8006a58:	4637      	mov	r7, r6
 8006a5a:	dc04      	bgt.n	8006a66 <__swbuf_r+0x42>
 8006a5c:	4621      	mov	r1, r4
 8006a5e:	4628      	mov	r0, r5
 8006a60:	f000 f926 	bl	8006cb0 <_fflush_r>
 8006a64:	bb30      	cbnz	r0, 8006ab4 <__swbuf_r+0x90>
 8006a66:	68a3      	ldr	r3, [r4, #8]
 8006a68:	3b01      	subs	r3, #1
 8006a6a:	60a3      	str	r3, [r4, #8]
 8006a6c:	6823      	ldr	r3, [r4, #0]
 8006a6e:	1c5a      	adds	r2, r3, #1
 8006a70:	6022      	str	r2, [r4, #0]
 8006a72:	701e      	strb	r6, [r3, #0]
 8006a74:	6963      	ldr	r3, [r4, #20]
 8006a76:	3001      	adds	r0, #1
 8006a78:	4283      	cmp	r3, r0
 8006a7a:	d004      	beq.n	8006a86 <__swbuf_r+0x62>
 8006a7c:	89a3      	ldrh	r3, [r4, #12]
 8006a7e:	07db      	lsls	r3, r3, #31
 8006a80:	d506      	bpl.n	8006a90 <__swbuf_r+0x6c>
 8006a82:	2e0a      	cmp	r6, #10
 8006a84:	d104      	bne.n	8006a90 <__swbuf_r+0x6c>
 8006a86:	4621      	mov	r1, r4
 8006a88:	4628      	mov	r0, r5
 8006a8a:	f000 f911 	bl	8006cb0 <_fflush_r>
 8006a8e:	b988      	cbnz	r0, 8006ab4 <__swbuf_r+0x90>
 8006a90:	4638      	mov	r0, r7
 8006a92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a94:	4b0a      	ldr	r3, [pc, #40]	; (8006ac0 <__swbuf_r+0x9c>)
 8006a96:	429c      	cmp	r4, r3
 8006a98:	d101      	bne.n	8006a9e <__swbuf_r+0x7a>
 8006a9a:	68ac      	ldr	r4, [r5, #8]
 8006a9c:	e7cf      	b.n	8006a3e <__swbuf_r+0x1a>
 8006a9e:	4b09      	ldr	r3, [pc, #36]	; (8006ac4 <__swbuf_r+0xa0>)
 8006aa0:	429c      	cmp	r4, r3
 8006aa2:	bf08      	it	eq
 8006aa4:	68ec      	ldreq	r4, [r5, #12]
 8006aa6:	e7ca      	b.n	8006a3e <__swbuf_r+0x1a>
 8006aa8:	4621      	mov	r1, r4
 8006aaa:	4628      	mov	r0, r5
 8006aac:	f000 f80c 	bl	8006ac8 <__swsetup_r>
 8006ab0:	2800      	cmp	r0, #0
 8006ab2:	d0cb      	beq.n	8006a4c <__swbuf_r+0x28>
 8006ab4:	f04f 37ff 	mov.w	r7, #4294967295
 8006ab8:	e7ea      	b.n	8006a90 <__swbuf_r+0x6c>
 8006aba:	bf00      	nop
 8006abc:	08007ed8 	.word	0x08007ed8
 8006ac0:	08007ef8 	.word	0x08007ef8
 8006ac4:	08007eb8 	.word	0x08007eb8

08006ac8 <__swsetup_r>:
 8006ac8:	4b32      	ldr	r3, [pc, #200]	; (8006b94 <__swsetup_r+0xcc>)
 8006aca:	b570      	push	{r4, r5, r6, lr}
 8006acc:	681d      	ldr	r5, [r3, #0]
 8006ace:	4606      	mov	r6, r0
 8006ad0:	460c      	mov	r4, r1
 8006ad2:	b125      	cbz	r5, 8006ade <__swsetup_r+0x16>
 8006ad4:	69ab      	ldr	r3, [r5, #24]
 8006ad6:	b913      	cbnz	r3, 8006ade <__swsetup_r+0x16>
 8006ad8:	4628      	mov	r0, r5
 8006ada:	f000 f97d 	bl	8006dd8 <__sinit>
 8006ade:	4b2e      	ldr	r3, [pc, #184]	; (8006b98 <__swsetup_r+0xd0>)
 8006ae0:	429c      	cmp	r4, r3
 8006ae2:	d10f      	bne.n	8006b04 <__swsetup_r+0x3c>
 8006ae4:	686c      	ldr	r4, [r5, #4]
 8006ae6:	89a3      	ldrh	r3, [r4, #12]
 8006ae8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006aec:	0719      	lsls	r1, r3, #28
 8006aee:	d42c      	bmi.n	8006b4a <__swsetup_r+0x82>
 8006af0:	06dd      	lsls	r5, r3, #27
 8006af2:	d411      	bmi.n	8006b18 <__swsetup_r+0x50>
 8006af4:	2309      	movs	r3, #9
 8006af6:	6033      	str	r3, [r6, #0]
 8006af8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006afc:	81a3      	strh	r3, [r4, #12]
 8006afe:	f04f 30ff 	mov.w	r0, #4294967295
 8006b02:	e03e      	b.n	8006b82 <__swsetup_r+0xba>
 8006b04:	4b25      	ldr	r3, [pc, #148]	; (8006b9c <__swsetup_r+0xd4>)
 8006b06:	429c      	cmp	r4, r3
 8006b08:	d101      	bne.n	8006b0e <__swsetup_r+0x46>
 8006b0a:	68ac      	ldr	r4, [r5, #8]
 8006b0c:	e7eb      	b.n	8006ae6 <__swsetup_r+0x1e>
 8006b0e:	4b24      	ldr	r3, [pc, #144]	; (8006ba0 <__swsetup_r+0xd8>)
 8006b10:	429c      	cmp	r4, r3
 8006b12:	bf08      	it	eq
 8006b14:	68ec      	ldreq	r4, [r5, #12]
 8006b16:	e7e6      	b.n	8006ae6 <__swsetup_r+0x1e>
 8006b18:	0758      	lsls	r0, r3, #29
 8006b1a:	d512      	bpl.n	8006b42 <__swsetup_r+0x7a>
 8006b1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b1e:	b141      	cbz	r1, 8006b32 <__swsetup_r+0x6a>
 8006b20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b24:	4299      	cmp	r1, r3
 8006b26:	d002      	beq.n	8006b2e <__swsetup_r+0x66>
 8006b28:	4630      	mov	r0, r6
 8006b2a:	f000 fa5b 	bl	8006fe4 <_free_r>
 8006b2e:	2300      	movs	r3, #0
 8006b30:	6363      	str	r3, [r4, #52]	; 0x34
 8006b32:	89a3      	ldrh	r3, [r4, #12]
 8006b34:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006b38:	81a3      	strh	r3, [r4, #12]
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	6063      	str	r3, [r4, #4]
 8006b3e:	6923      	ldr	r3, [r4, #16]
 8006b40:	6023      	str	r3, [r4, #0]
 8006b42:	89a3      	ldrh	r3, [r4, #12]
 8006b44:	f043 0308 	orr.w	r3, r3, #8
 8006b48:	81a3      	strh	r3, [r4, #12]
 8006b4a:	6923      	ldr	r3, [r4, #16]
 8006b4c:	b94b      	cbnz	r3, 8006b62 <__swsetup_r+0x9a>
 8006b4e:	89a3      	ldrh	r3, [r4, #12]
 8006b50:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006b54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b58:	d003      	beq.n	8006b62 <__swsetup_r+0x9a>
 8006b5a:	4621      	mov	r1, r4
 8006b5c:	4630      	mov	r0, r6
 8006b5e:	f000 fa01 	bl	8006f64 <__smakebuf_r>
 8006b62:	89a0      	ldrh	r0, [r4, #12]
 8006b64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006b68:	f010 0301 	ands.w	r3, r0, #1
 8006b6c:	d00a      	beq.n	8006b84 <__swsetup_r+0xbc>
 8006b6e:	2300      	movs	r3, #0
 8006b70:	60a3      	str	r3, [r4, #8]
 8006b72:	6963      	ldr	r3, [r4, #20]
 8006b74:	425b      	negs	r3, r3
 8006b76:	61a3      	str	r3, [r4, #24]
 8006b78:	6923      	ldr	r3, [r4, #16]
 8006b7a:	b943      	cbnz	r3, 8006b8e <__swsetup_r+0xc6>
 8006b7c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006b80:	d1ba      	bne.n	8006af8 <__swsetup_r+0x30>
 8006b82:	bd70      	pop	{r4, r5, r6, pc}
 8006b84:	0781      	lsls	r1, r0, #30
 8006b86:	bf58      	it	pl
 8006b88:	6963      	ldrpl	r3, [r4, #20]
 8006b8a:	60a3      	str	r3, [r4, #8]
 8006b8c:	e7f4      	b.n	8006b78 <__swsetup_r+0xb0>
 8006b8e:	2000      	movs	r0, #0
 8006b90:	e7f7      	b.n	8006b82 <__swsetup_r+0xba>
 8006b92:	bf00      	nop
 8006b94:	20000018 	.word	0x20000018
 8006b98:	08007ed8 	.word	0x08007ed8
 8006b9c:	08007ef8 	.word	0x08007ef8
 8006ba0:	08007eb8 	.word	0x08007eb8

08006ba4 <__sflush_r>:
 8006ba4:	898a      	ldrh	r2, [r1, #12]
 8006ba6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006baa:	4605      	mov	r5, r0
 8006bac:	0710      	lsls	r0, r2, #28
 8006bae:	460c      	mov	r4, r1
 8006bb0:	d458      	bmi.n	8006c64 <__sflush_r+0xc0>
 8006bb2:	684b      	ldr	r3, [r1, #4]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	dc05      	bgt.n	8006bc4 <__sflush_r+0x20>
 8006bb8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	dc02      	bgt.n	8006bc4 <__sflush_r+0x20>
 8006bbe:	2000      	movs	r0, #0
 8006bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006bc6:	2e00      	cmp	r6, #0
 8006bc8:	d0f9      	beq.n	8006bbe <__sflush_r+0x1a>
 8006bca:	2300      	movs	r3, #0
 8006bcc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006bd0:	682f      	ldr	r7, [r5, #0]
 8006bd2:	602b      	str	r3, [r5, #0]
 8006bd4:	d032      	beq.n	8006c3c <__sflush_r+0x98>
 8006bd6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006bd8:	89a3      	ldrh	r3, [r4, #12]
 8006bda:	075a      	lsls	r2, r3, #29
 8006bdc:	d505      	bpl.n	8006bea <__sflush_r+0x46>
 8006bde:	6863      	ldr	r3, [r4, #4]
 8006be0:	1ac0      	subs	r0, r0, r3
 8006be2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006be4:	b10b      	cbz	r3, 8006bea <__sflush_r+0x46>
 8006be6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006be8:	1ac0      	subs	r0, r0, r3
 8006bea:	2300      	movs	r3, #0
 8006bec:	4602      	mov	r2, r0
 8006bee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006bf0:	6a21      	ldr	r1, [r4, #32]
 8006bf2:	4628      	mov	r0, r5
 8006bf4:	47b0      	blx	r6
 8006bf6:	1c43      	adds	r3, r0, #1
 8006bf8:	89a3      	ldrh	r3, [r4, #12]
 8006bfa:	d106      	bne.n	8006c0a <__sflush_r+0x66>
 8006bfc:	6829      	ldr	r1, [r5, #0]
 8006bfe:	291d      	cmp	r1, #29
 8006c00:	d82c      	bhi.n	8006c5c <__sflush_r+0xb8>
 8006c02:	4a2a      	ldr	r2, [pc, #168]	; (8006cac <__sflush_r+0x108>)
 8006c04:	40ca      	lsrs	r2, r1
 8006c06:	07d6      	lsls	r6, r2, #31
 8006c08:	d528      	bpl.n	8006c5c <__sflush_r+0xb8>
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	6062      	str	r2, [r4, #4]
 8006c0e:	04d9      	lsls	r1, r3, #19
 8006c10:	6922      	ldr	r2, [r4, #16]
 8006c12:	6022      	str	r2, [r4, #0]
 8006c14:	d504      	bpl.n	8006c20 <__sflush_r+0x7c>
 8006c16:	1c42      	adds	r2, r0, #1
 8006c18:	d101      	bne.n	8006c1e <__sflush_r+0x7a>
 8006c1a:	682b      	ldr	r3, [r5, #0]
 8006c1c:	b903      	cbnz	r3, 8006c20 <__sflush_r+0x7c>
 8006c1e:	6560      	str	r0, [r4, #84]	; 0x54
 8006c20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c22:	602f      	str	r7, [r5, #0]
 8006c24:	2900      	cmp	r1, #0
 8006c26:	d0ca      	beq.n	8006bbe <__sflush_r+0x1a>
 8006c28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c2c:	4299      	cmp	r1, r3
 8006c2e:	d002      	beq.n	8006c36 <__sflush_r+0x92>
 8006c30:	4628      	mov	r0, r5
 8006c32:	f000 f9d7 	bl	8006fe4 <_free_r>
 8006c36:	2000      	movs	r0, #0
 8006c38:	6360      	str	r0, [r4, #52]	; 0x34
 8006c3a:	e7c1      	b.n	8006bc0 <__sflush_r+0x1c>
 8006c3c:	6a21      	ldr	r1, [r4, #32]
 8006c3e:	2301      	movs	r3, #1
 8006c40:	4628      	mov	r0, r5
 8006c42:	47b0      	blx	r6
 8006c44:	1c41      	adds	r1, r0, #1
 8006c46:	d1c7      	bne.n	8006bd8 <__sflush_r+0x34>
 8006c48:	682b      	ldr	r3, [r5, #0]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d0c4      	beq.n	8006bd8 <__sflush_r+0x34>
 8006c4e:	2b1d      	cmp	r3, #29
 8006c50:	d001      	beq.n	8006c56 <__sflush_r+0xb2>
 8006c52:	2b16      	cmp	r3, #22
 8006c54:	d101      	bne.n	8006c5a <__sflush_r+0xb6>
 8006c56:	602f      	str	r7, [r5, #0]
 8006c58:	e7b1      	b.n	8006bbe <__sflush_r+0x1a>
 8006c5a:	89a3      	ldrh	r3, [r4, #12]
 8006c5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c60:	81a3      	strh	r3, [r4, #12]
 8006c62:	e7ad      	b.n	8006bc0 <__sflush_r+0x1c>
 8006c64:	690f      	ldr	r7, [r1, #16]
 8006c66:	2f00      	cmp	r7, #0
 8006c68:	d0a9      	beq.n	8006bbe <__sflush_r+0x1a>
 8006c6a:	0793      	lsls	r3, r2, #30
 8006c6c:	680e      	ldr	r6, [r1, #0]
 8006c6e:	bf08      	it	eq
 8006c70:	694b      	ldreq	r3, [r1, #20]
 8006c72:	600f      	str	r7, [r1, #0]
 8006c74:	bf18      	it	ne
 8006c76:	2300      	movne	r3, #0
 8006c78:	eba6 0807 	sub.w	r8, r6, r7
 8006c7c:	608b      	str	r3, [r1, #8]
 8006c7e:	f1b8 0f00 	cmp.w	r8, #0
 8006c82:	dd9c      	ble.n	8006bbe <__sflush_r+0x1a>
 8006c84:	6a21      	ldr	r1, [r4, #32]
 8006c86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006c88:	4643      	mov	r3, r8
 8006c8a:	463a      	mov	r2, r7
 8006c8c:	4628      	mov	r0, r5
 8006c8e:	47b0      	blx	r6
 8006c90:	2800      	cmp	r0, #0
 8006c92:	dc06      	bgt.n	8006ca2 <__sflush_r+0xfe>
 8006c94:	89a3      	ldrh	r3, [r4, #12]
 8006c96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c9a:	81a3      	strh	r3, [r4, #12]
 8006c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8006ca0:	e78e      	b.n	8006bc0 <__sflush_r+0x1c>
 8006ca2:	4407      	add	r7, r0
 8006ca4:	eba8 0800 	sub.w	r8, r8, r0
 8006ca8:	e7e9      	b.n	8006c7e <__sflush_r+0xda>
 8006caa:	bf00      	nop
 8006cac:	20400001 	.word	0x20400001

08006cb0 <_fflush_r>:
 8006cb0:	b538      	push	{r3, r4, r5, lr}
 8006cb2:	690b      	ldr	r3, [r1, #16]
 8006cb4:	4605      	mov	r5, r0
 8006cb6:	460c      	mov	r4, r1
 8006cb8:	b913      	cbnz	r3, 8006cc0 <_fflush_r+0x10>
 8006cba:	2500      	movs	r5, #0
 8006cbc:	4628      	mov	r0, r5
 8006cbe:	bd38      	pop	{r3, r4, r5, pc}
 8006cc0:	b118      	cbz	r0, 8006cca <_fflush_r+0x1a>
 8006cc2:	6983      	ldr	r3, [r0, #24]
 8006cc4:	b90b      	cbnz	r3, 8006cca <_fflush_r+0x1a>
 8006cc6:	f000 f887 	bl	8006dd8 <__sinit>
 8006cca:	4b14      	ldr	r3, [pc, #80]	; (8006d1c <_fflush_r+0x6c>)
 8006ccc:	429c      	cmp	r4, r3
 8006cce:	d11b      	bne.n	8006d08 <_fflush_r+0x58>
 8006cd0:	686c      	ldr	r4, [r5, #4]
 8006cd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d0ef      	beq.n	8006cba <_fflush_r+0xa>
 8006cda:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006cdc:	07d0      	lsls	r0, r2, #31
 8006cde:	d404      	bmi.n	8006cea <_fflush_r+0x3a>
 8006ce0:	0599      	lsls	r1, r3, #22
 8006ce2:	d402      	bmi.n	8006cea <_fflush_r+0x3a>
 8006ce4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ce6:	f000 f915 	bl	8006f14 <__retarget_lock_acquire_recursive>
 8006cea:	4628      	mov	r0, r5
 8006cec:	4621      	mov	r1, r4
 8006cee:	f7ff ff59 	bl	8006ba4 <__sflush_r>
 8006cf2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006cf4:	07da      	lsls	r2, r3, #31
 8006cf6:	4605      	mov	r5, r0
 8006cf8:	d4e0      	bmi.n	8006cbc <_fflush_r+0xc>
 8006cfa:	89a3      	ldrh	r3, [r4, #12]
 8006cfc:	059b      	lsls	r3, r3, #22
 8006cfe:	d4dd      	bmi.n	8006cbc <_fflush_r+0xc>
 8006d00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d02:	f000 f908 	bl	8006f16 <__retarget_lock_release_recursive>
 8006d06:	e7d9      	b.n	8006cbc <_fflush_r+0xc>
 8006d08:	4b05      	ldr	r3, [pc, #20]	; (8006d20 <_fflush_r+0x70>)
 8006d0a:	429c      	cmp	r4, r3
 8006d0c:	d101      	bne.n	8006d12 <_fflush_r+0x62>
 8006d0e:	68ac      	ldr	r4, [r5, #8]
 8006d10:	e7df      	b.n	8006cd2 <_fflush_r+0x22>
 8006d12:	4b04      	ldr	r3, [pc, #16]	; (8006d24 <_fflush_r+0x74>)
 8006d14:	429c      	cmp	r4, r3
 8006d16:	bf08      	it	eq
 8006d18:	68ec      	ldreq	r4, [r5, #12]
 8006d1a:	e7da      	b.n	8006cd2 <_fflush_r+0x22>
 8006d1c:	08007ed8 	.word	0x08007ed8
 8006d20:	08007ef8 	.word	0x08007ef8
 8006d24:	08007eb8 	.word	0x08007eb8

08006d28 <std>:
 8006d28:	2300      	movs	r3, #0
 8006d2a:	b510      	push	{r4, lr}
 8006d2c:	4604      	mov	r4, r0
 8006d2e:	e9c0 3300 	strd	r3, r3, [r0]
 8006d32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d36:	6083      	str	r3, [r0, #8]
 8006d38:	8181      	strh	r1, [r0, #12]
 8006d3a:	6643      	str	r3, [r0, #100]	; 0x64
 8006d3c:	81c2      	strh	r2, [r0, #14]
 8006d3e:	6183      	str	r3, [r0, #24]
 8006d40:	4619      	mov	r1, r3
 8006d42:	2208      	movs	r2, #8
 8006d44:	305c      	adds	r0, #92	; 0x5c
 8006d46:	f7ff fd8d 	bl	8006864 <memset>
 8006d4a:	4b05      	ldr	r3, [pc, #20]	; (8006d60 <std+0x38>)
 8006d4c:	6263      	str	r3, [r4, #36]	; 0x24
 8006d4e:	4b05      	ldr	r3, [pc, #20]	; (8006d64 <std+0x3c>)
 8006d50:	62a3      	str	r3, [r4, #40]	; 0x28
 8006d52:	4b05      	ldr	r3, [pc, #20]	; (8006d68 <std+0x40>)
 8006d54:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006d56:	4b05      	ldr	r3, [pc, #20]	; (8006d6c <std+0x44>)
 8006d58:	6224      	str	r4, [r4, #32]
 8006d5a:	6323      	str	r3, [r4, #48]	; 0x30
 8006d5c:	bd10      	pop	{r4, pc}
 8006d5e:	bf00      	nop
 8006d60:	08007a59 	.word	0x08007a59
 8006d64:	08007a7b 	.word	0x08007a7b
 8006d68:	08007ab3 	.word	0x08007ab3
 8006d6c:	08007ad7 	.word	0x08007ad7

08006d70 <_cleanup_r>:
 8006d70:	4901      	ldr	r1, [pc, #4]	; (8006d78 <_cleanup_r+0x8>)
 8006d72:	f000 b8af 	b.w	8006ed4 <_fwalk_reent>
 8006d76:	bf00      	nop
 8006d78:	08006cb1 	.word	0x08006cb1

08006d7c <__sfmoreglue>:
 8006d7c:	b570      	push	{r4, r5, r6, lr}
 8006d7e:	2268      	movs	r2, #104	; 0x68
 8006d80:	1e4d      	subs	r5, r1, #1
 8006d82:	4355      	muls	r5, r2
 8006d84:	460e      	mov	r6, r1
 8006d86:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006d8a:	f000 f997 	bl	80070bc <_malloc_r>
 8006d8e:	4604      	mov	r4, r0
 8006d90:	b140      	cbz	r0, 8006da4 <__sfmoreglue+0x28>
 8006d92:	2100      	movs	r1, #0
 8006d94:	e9c0 1600 	strd	r1, r6, [r0]
 8006d98:	300c      	adds	r0, #12
 8006d9a:	60a0      	str	r0, [r4, #8]
 8006d9c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006da0:	f7ff fd60 	bl	8006864 <memset>
 8006da4:	4620      	mov	r0, r4
 8006da6:	bd70      	pop	{r4, r5, r6, pc}

08006da8 <__sfp_lock_acquire>:
 8006da8:	4801      	ldr	r0, [pc, #4]	; (8006db0 <__sfp_lock_acquire+0x8>)
 8006daa:	f000 b8b3 	b.w	8006f14 <__retarget_lock_acquire_recursive>
 8006dae:	bf00      	nop
 8006db0:	20004435 	.word	0x20004435

08006db4 <__sfp_lock_release>:
 8006db4:	4801      	ldr	r0, [pc, #4]	; (8006dbc <__sfp_lock_release+0x8>)
 8006db6:	f000 b8ae 	b.w	8006f16 <__retarget_lock_release_recursive>
 8006dba:	bf00      	nop
 8006dbc:	20004435 	.word	0x20004435

08006dc0 <__sinit_lock_acquire>:
 8006dc0:	4801      	ldr	r0, [pc, #4]	; (8006dc8 <__sinit_lock_acquire+0x8>)
 8006dc2:	f000 b8a7 	b.w	8006f14 <__retarget_lock_acquire_recursive>
 8006dc6:	bf00      	nop
 8006dc8:	20004436 	.word	0x20004436

08006dcc <__sinit_lock_release>:
 8006dcc:	4801      	ldr	r0, [pc, #4]	; (8006dd4 <__sinit_lock_release+0x8>)
 8006dce:	f000 b8a2 	b.w	8006f16 <__retarget_lock_release_recursive>
 8006dd2:	bf00      	nop
 8006dd4:	20004436 	.word	0x20004436

08006dd8 <__sinit>:
 8006dd8:	b510      	push	{r4, lr}
 8006dda:	4604      	mov	r4, r0
 8006ddc:	f7ff fff0 	bl	8006dc0 <__sinit_lock_acquire>
 8006de0:	69a3      	ldr	r3, [r4, #24]
 8006de2:	b11b      	cbz	r3, 8006dec <__sinit+0x14>
 8006de4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006de8:	f7ff bff0 	b.w	8006dcc <__sinit_lock_release>
 8006dec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006df0:	6523      	str	r3, [r4, #80]	; 0x50
 8006df2:	4b13      	ldr	r3, [pc, #76]	; (8006e40 <__sinit+0x68>)
 8006df4:	4a13      	ldr	r2, [pc, #76]	; (8006e44 <__sinit+0x6c>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	62a2      	str	r2, [r4, #40]	; 0x28
 8006dfa:	42a3      	cmp	r3, r4
 8006dfc:	bf04      	itt	eq
 8006dfe:	2301      	moveq	r3, #1
 8006e00:	61a3      	streq	r3, [r4, #24]
 8006e02:	4620      	mov	r0, r4
 8006e04:	f000 f820 	bl	8006e48 <__sfp>
 8006e08:	6060      	str	r0, [r4, #4]
 8006e0a:	4620      	mov	r0, r4
 8006e0c:	f000 f81c 	bl	8006e48 <__sfp>
 8006e10:	60a0      	str	r0, [r4, #8]
 8006e12:	4620      	mov	r0, r4
 8006e14:	f000 f818 	bl	8006e48 <__sfp>
 8006e18:	2200      	movs	r2, #0
 8006e1a:	60e0      	str	r0, [r4, #12]
 8006e1c:	2104      	movs	r1, #4
 8006e1e:	6860      	ldr	r0, [r4, #4]
 8006e20:	f7ff ff82 	bl	8006d28 <std>
 8006e24:	68a0      	ldr	r0, [r4, #8]
 8006e26:	2201      	movs	r2, #1
 8006e28:	2109      	movs	r1, #9
 8006e2a:	f7ff ff7d 	bl	8006d28 <std>
 8006e2e:	68e0      	ldr	r0, [r4, #12]
 8006e30:	2202      	movs	r2, #2
 8006e32:	2112      	movs	r1, #18
 8006e34:	f7ff ff78 	bl	8006d28 <std>
 8006e38:	2301      	movs	r3, #1
 8006e3a:	61a3      	str	r3, [r4, #24]
 8006e3c:	e7d2      	b.n	8006de4 <__sinit+0xc>
 8006e3e:	bf00      	nop
 8006e40:	08007db0 	.word	0x08007db0
 8006e44:	08006d71 	.word	0x08006d71

08006e48 <__sfp>:
 8006e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e4a:	4607      	mov	r7, r0
 8006e4c:	f7ff ffac 	bl	8006da8 <__sfp_lock_acquire>
 8006e50:	4b1e      	ldr	r3, [pc, #120]	; (8006ecc <__sfp+0x84>)
 8006e52:	681e      	ldr	r6, [r3, #0]
 8006e54:	69b3      	ldr	r3, [r6, #24]
 8006e56:	b913      	cbnz	r3, 8006e5e <__sfp+0x16>
 8006e58:	4630      	mov	r0, r6
 8006e5a:	f7ff ffbd 	bl	8006dd8 <__sinit>
 8006e5e:	3648      	adds	r6, #72	; 0x48
 8006e60:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006e64:	3b01      	subs	r3, #1
 8006e66:	d503      	bpl.n	8006e70 <__sfp+0x28>
 8006e68:	6833      	ldr	r3, [r6, #0]
 8006e6a:	b30b      	cbz	r3, 8006eb0 <__sfp+0x68>
 8006e6c:	6836      	ldr	r6, [r6, #0]
 8006e6e:	e7f7      	b.n	8006e60 <__sfp+0x18>
 8006e70:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006e74:	b9d5      	cbnz	r5, 8006eac <__sfp+0x64>
 8006e76:	4b16      	ldr	r3, [pc, #88]	; (8006ed0 <__sfp+0x88>)
 8006e78:	60e3      	str	r3, [r4, #12]
 8006e7a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006e7e:	6665      	str	r5, [r4, #100]	; 0x64
 8006e80:	f000 f847 	bl	8006f12 <__retarget_lock_init_recursive>
 8006e84:	f7ff ff96 	bl	8006db4 <__sfp_lock_release>
 8006e88:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006e8c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006e90:	6025      	str	r5, [r4, #0]
 8006e92:	61a5      	str	r5, [r4, #24]
 8006e94:	2208      	movs	r2, #8
 8006e96:	4629      	mov	r1, r5
 8006e98:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006e9c:	f7ff fce2 	bl	8006864 <memset>
 8006ea0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006ea4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006ea8:	4620      	mov	r0, r4
 8006eaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006eac:	3468      	adds	r4, #104	; 0x68
 8006eae:	e7d9      	b.n	8006e64 <__sfp+0x1c>
 8006eb0:	2104      	movs	r1, #4
 8006eb2:	4638      	mov	r0, r7
 8006eb4:	f7ff ff62 	bl	8006d7c <__sfmoreglue>
 8006eb8:	4604      	mov	r4, r0
 8006eba:	6030      	str	r0, [r6, #0]
 8006ebc:	2800      	cmp	r0, #0
 8006ebe:	d1d5      	bne.n	8006e6c <__sfp+0x24>
 8006ec0:	f7ff ff78 	bl	8006db4 <__sfp_lock_release>
 8006ec4:	230c      	movs	r3, #12
 8006ec6:	603b      	str	r3, [r7, #0]
 8006ec8:	e7ee      	b.n	8006ea8 <__sfp+0x60>
 8006eca:	bf00      	nop
 8006ecc:	08007db0 	.word	0x08007db0
 8006ed0:	ffff0001 	.word	0xffff0001

08006ed4 <_fwalk_reent>:
 8006ed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ed8:	4606      	mov	r6, r0
 8006eda:	4688      	mov	r8, r1
 8006edc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006ee0:	2700      	movs	r7, #0
 8006ee2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006ee6:	f1b9 0901 	subs.w	r9, r9, #1
 8006eea:	d505      	bpl.n	8006ef8 <_fwalk_reent+0x24>
 8006eec:	6824      	ldr	r4, [r4, #0]
 8006eee:	2c00      	cmp	r4, #0
 8006ef0:	d1f7      	bne.n	8006ee2 <_fwalk_reent+0xe>
 8006ef2:	4638      	mov	r0, r7
 8006ef4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ef8:	89ab      	ldrh	r3, [r5, #12]
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d907      	bls.n	8006f0e <_fwalk_reent+0x3a>
 8006efe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f02:	3301      	adds	r3, #1
 8006f04:	d003      	beq.n	8006f0e <_fwalk_reent+0x3a>
 8006f06:	4629      	mov	r1, r5
 8006f08:	4630      	mov	r0, r6
 8006f0a:	47c0      	blx	r8
 8006f0c:	4307      	orrs	r7, r0
 8006f0e:	3568      	adds	r5, #104	; 0x68
 8006f10:	e7e9      	b.n	8006ee6 <_fwalk_reent+0x12>

08006f12 <__retarget_lock_init_recursive>:
 8006f12:	4770      	bx	lr

08006f14 <__retarget_lock_acquire_recursive>:
 8006f14:	4770      	bx	lr

08006f16 <__retarget_lock_release_recursive>:
 8006f16:	4770      	bx	lr

08006f18 <__swhatbuf_r>:
 8006f18:	b570      	push	{r4, r5, r6, lr}
 8006f1a:	460e      	mov	r6, r1
 8006f1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f20:	2900      	cmp	r1, #0
 8006f22:	b096      	sub	sp, #88	; 0x58
 8006f24:	4614      	mov	r4, r2
 8006f26:	461d      	mov	r5, r3
 8006f28:	da08      	bge.n	8006f3c <__swhatbuf_r+0x24>
 8006f2a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	602a      	str	r2, [r5, #0]
 8006f32:	061a      	lsls	r2, r3, #24
 8006f34:	d410      	bmi.n	8006f58 <__swhatbuf_r+0x40>
 8006f36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f3a:	e00e      	b.n	8006f5a <__swhatbuf_r+0x42>
 8006f3c:	466a      	mov	r2, sp
 8006f3e:	f000 fdf1 	bl	8007b24 <_fstat_r>
 8006f42:	2800      	cmp	r0, #0
 8006f44:	dbf1      	blt.n	8006f2a <__swhatbuf_r+0x12>
 8006f46:	9a01      	ldr	r2, [sp, #4]
 8006f48:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006f4c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006f50:	425a      	negs	r2, r3
 8006f52:	415a      	adcs	r2, r3
 8006f54:	602a      	str	r2, [r5, #0]
 8006f56:	e7ee      	b.n	8006f36 <__swhatbuf_r+0x1e>
 8006f58:	2340      	movs	r3, #64	; 0x40
 8006f5a:	2000      	movs	r0, #0
 8006f5c:	6023      	str	r3, [r4, #0]
 8006f5e:	b016      	add	sp, #88	; 0x58
 8006f60:	bd70      	pop	{r4, r5, r6, pc}
	...

08006f64 <__smakebuf_r>:
 8006f64:	898b      	ldrh	r3, [r1, #12]
 8006f66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006f68:	079d      	lsls	r5, r3, #30
 8006f6a:	4606      	mov	r6, r0
 8006f6c:	460c      	mov	r4, r1
 8006f6e:	d507      	bpl.n	8006f80 <__smakebuf_r+0x1c>
 8006f70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006f74:	6023      	str	r3, [r4, #0]
 8006f76:	6123      	str	r3, [r4, #16]
 8006f78:	2301      	movs	r3, #1
 8006f7a:	6163      	str	r3, [r4, #20]
 8006f7c:	b002      	add	sp, #8
 8006f7e:	bd70      	pop	{r4, r5, r6, pc}
 8006f80:	ab01      	add	r3, sp, #4
 8006f82:	466a      	mov	r2, sp
 8006f84:	f7ff ffc8 	bl	8006f18 <__swhatbuf_r>
 8006f88:	9900      	ldr	r1, [sp, #0]
 8006f8a:	4605      	mov	r5, r0
 8006f8c:	4630      	mov	r0, r6
 8006f8e:	f000 f895 	bl	80070bc <_malloc_r>
 8006f92:	b948      	cbnz	r0, 8006fa8 <__smakebuf_r+0x44>
 8006f94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f98:	059a      	lsls	r2, r3, #22
 8006f9a:	d4ef      	bmi.n	8006f7c <__smakebuf_r+0x18>
 8006f9c:	f023 0303 	bic.w	r3, r3, #3
 8006fa0:	f043 0302 	orr.w	r3, r3, #2
 8006fa4:	81a3      	strh	r3, [r4, #12]
 8006fa6:	e7e3      	b.n	8006f70 <__smakebuf_r+0xc>
 8006fa8:	4b0d      	ldr	r3, [pc, #52]	; (8006fe0 <__smakebuf_r+0x7c>)
 8006faa:	62b3      	str	r3, [r6, #40]	; 0x28
 8006fac:	89a3      	ldrh	r3, [r4, #12]
 8006fae:	6020      	str	r0, [r4, #0]
 8006fb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fb4:	81a3      	strh	r3, [r4, #12]
 8006fb6:	9b00      	ldr	r3, [sp, #0]
 8006fb8:	6163      	str	r3, [r4, #20]
 8006fba:	9b01      	ldr	r3, [sp, #4]
 8006fbc:	6120      	str	r0, [r4, #16]
 8006fbe:	b15b      	cbz	r3, 8006fd8 <__smakebuf_r+0x74>
 8006fc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006fc4:	4630      	mov	r0, r6
 8006fc6:	f000 fdbf 	bl	8007b48 <_isatty_r>
 8006fca:	b128      	cbz	r0, 8006fd8 <__smakebuf_r+0x74>
 8006fcc:	89a3      	ldrh	r3, [r4, #12]
 8006fce:	f023 0303 	bic.w	r3, r3, #3
 8006fd2:	f043 0301 	orr.w	r3, r3, #1
 8006fd6:	81a3      	strh	r3, [r4, #12]
 8006fd8:	89a0      	ldrh	r0, [r4, #12]
 8006fda:	4305      	orrs	r5, r0
 8006fdc:	81a5      	strh	r5, [r4, #12]
 8006fde:	e7cd      	b.n	8006f7c <__smakebuf_r+0x18>
 8006fe0:	08006d71 	.word	0x08006d71

08006fe4 <_free_r>:
 8006fe4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006fe6:	2900      	cmp	r1, #0
 8006fe8:	d044      	beq.n	8007074 <_free_r+0x90>
 8006fea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fee:	9001      	str	r0, [sp, #4]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	f1a1 0404 	sub.w	r4, r1, #4
 8006ff6:	bfb8      	it	lt
 8006ff8:	18e4      	addlt	r4, r4, r3
 8006ffa:	f000 fde1 	bl	8007bc0 <__malloc_lock>
 8006ffe:	4a1e      	ldr	r2, [pc, #120]	; (8007078 <_free_r+0x94>)
 8007000:	9801      	ldr	r0, [sp, #4]
 8007002:	6813      	ldr	r3, [r2, #0]
 8007004:	b933      	cbnz	r3, 8007014 <_free_r+0x30>
 8007006:	6063      	str	r3, [r4, #4]
 8007008:	6014      	str	r4, [r2, #0]
 800700a:	b003      	add	sp, #12
 800700c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007010:	f000 bddc 	b.w	8007bcc <__malloc_unlock>
 8007014:	42a3      	cmp	r3, r4
 8007016:	d908      	bls.n	800702a <_free_r+0x46>
 8007018:	6825      	ldr	r5, [r4, #0]
 800701a:	1961      	adds	r1, r4, r5
 800701c:	428b      	cmp	r3, r1
 800701e:	bf01      	itttt	eq
 8007020:	6819      	ldreq	r1, [r3, #0]
 8007022:	685b      	ldreq	r3, [r3, #4]
 8007024:	1949      	addeq	r1, r1, r5
 8007026:	6021      	streq	r1, [r4, #0]
 8007028:	e7ed      	b.n	8007006 <_free_r+0x22>
 800702a:	461a      	mov	r2, r3
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	b10b      	cbz	r3, 8007034 <_free_r+0x50>
 8007030:	42a3      	cmp	r3, r4
 8007032:	d9fa      	bls.n	800702a <_free_r+0x46>
 8007034:	6811      	ldr	r1, [r2, #0]
 8007036:	1855      	adds	r5, r2, r1
 8007038:	42a5      	cmp	r5, r4
 800703a:	d10b      	bne.n	8007054 <_free_r+0x70>
 800703c:	6824      	ldr	r4, [r4, #0]
 800703e:	4421      	add	r1, r4
 8007040:	1854      	adds	r4, r2, r1
 8007042:	42a3      	cmp	r3, r4
 8007044:	6011      	str	r1, [r2, #0]
 8007046:	d1e0      	bne.n	800700a <_free_r+0x26>
 8007048:	681c      	ldr	r4, [r3, #0]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	6053      	str	r3, [r2, #4]
 800704e:	4421      	add	r1, r4
 8007050:	6011      	str	r1, [r2, #0]
 8007052:	e7da      	b.n	800700a <_free_r+0x26>
 8007054:	d902      	bls.n	800705c <_free_r+0x78>
 8007056:	230c      	movs	r3, #12
 8007058:	6003      	str	r3, [r0, #0]
 800705a:	e7d6      	b.n	800700a <_free_r+0x26>
 800705c:	6825      	ldr	r5, [r4, #0]
 800705e:	1961      	adds	r1, r4, r5
 8007060:	428b      	cmp	r3, r1
 8007062:	bf04      	itt	eq
 8007064:	6819      	ldreq	r1, [r3, #0]
 8007066:	685b      	ldreq	r3, [r3, #4]
 8007068:	6063      	str	r3, [r4, #4]
 800706a:	bf04      	itt	eq
 800706c:	1949      	addeq	r1, r1, r5
 800706e:	6021      	streq	r1, [r4, #0]
 8007070:	6054      	str	r4, [r2, #4]
 8007072:	e7ca      	b.n	800700a <_free_r+0x26>
 8007074:	b003      	add	sp, #12
 8007076:	bd30      	pop	{r4, r5, pc}
 8007078:	20004438 	.word	0x20004438

0800707c <sbrk_aligned>:
 800707c:	b570      	push	{r4, r5, r6, lr}
 800707e:	4e0e      	ldr	r6, [pc, #56]	; (80070b8 <sbrk_aligned+0x3c>)
 8007080:	460c      	mov	r4, r1
 8007082:	6831      	ldr	r1, [r6, #0]
 8007084:	4605      	mov	r5, r0
 8007086:	b911      	cbnz	r1, 800708e <sbrk_aligned+0x12>
 8007088:	f000 fcd6 	bl	8007a38 <_sbrk_r>
 800708c:	6030      	str	r0, [r6, #0]
 800708e:	4621      	mov	r1, r4
 8007090:	4628      	mov	r0, r5
 8007092:	f000 fcd1 	bl	8007a38 <_sbrk_r>
 8007096:	1c43      	adds	r3, r0, #1
 8007098:	d00a      	beq.n	80070b0 <sbrk_aligned+0x34>
 800709a:	1cc4      	adds	r4, r0, #3
 800709c:	f024 0403 	bic.w	r4, r4, #3
 80070a0:	42a0      	cmp	r0, r4
 80070a2:	d007      	beq.n	80070b4 <sbrk_aligned+0x38>
 80070a4:	1a21      	subs	r1, r4, r0
 80070a6:	4628      	mov	r0, r5
 80070a8:	f000 fcc6 	bl	8007a38 <_sbrk_r>
 80070ac:	3001      	adds	r0, #1
 80070ae:	d101      	bne.n	80070b4 <sbrk_aligned+0x38>
 80070b0:	f04f 34ff 	mov.w	r4, #4294967295
 80070b4:	4620      	mov	r0, r4
 80070b6:	bd70      	pop	{r4, r5, r6, pc}
 80070b8:	2000443c 	.word	0x2000443c

080070bc <_malloc_r>:
 80070bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070c0:	1ccd      	adds	r5, r1, #3
 80070c2:	f025 0503 	bic.w	r5, r5, #3
 80070c6:	3508      	adds	r5, #8
 80070c8:	2d0c      	cmp	r5, #12
 80070ca:	bf38      	it	cc
 80070cc:	250c      	movcc	r5, #12
 80070ce:	2d00      	cmp	r5, #0
 80070d0:	4607      	mov	r7, r0
 80070d2:	db01      	blt.n	80070d8 <_malloc_r+0x1c>
 80070d4:	42a9      	cmp	r1, r5
 80070d6:	d905      	bls.n	80070e4 <_malloc_r+0x28>
 80070d8:	230c      	movs	r3, #12
 80070da:	603b      	str	r3, [r7, #0]
 80070dc:	2600      	movs	r6, #0
 80070de:	4630      	mov	r0, r6
 80070e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070e4:	4e2e      	ldr	r6, [pc, #184]	; (80071a0 <_malloc_r+0xe4>)
 80070e6:	f000 fd6b 	bl	8007bc0 <__malloc_lock>
 80070ea:	6833      	ldr	r3, [r6, #0]
 80070ec:	461c      	mov	r4, r3
 80070ee:	bb34      	cbnz	r4, 800713e <_malloc_r+0x82>
 80070f0:	4629      	mov	r1, r5
 80070f2:	4638      	mov	r0, r7
 80070f4:	f7ff ffc2 	bl	800707c <sbrk_aligned>
 80070f8:	1c43      	adds	r3, r0, #1
 80070fa:	4604      	mov	r4, r0
 80070fc:	d14d      	bne.n	800719a <_malloc_r+0xde>
 80070fe:	6834      	ldr	r4, [r6, #0]
 8007100:	4626      	mov	r6, r4
 8007102:	2e00      	cmp	r6, #0
 8007104:	d140      	bne.n	8007188 <_malloc_r+0xcc>
 8007106:	6823      	ldr	r3, [r4, #0]
 8007108:	4631      	mov	r1, r6
 800710a:	4638      	mov	r0, r7
 800710c:	eb04 0803 	add.w	r8, r4, r3
 8007110:	f000 fc92 	bl	8007a38 <_sbrk_r>
 8007114:	4580      	cmp	r8, r0
 8007116:	d13a      	bne.n	800718e <_malloc_r+0xd2>
 8007118:	6821      	ldr	r1, [r4, #0]
 800711a:	3503      	adds	r5, #3
 800711c:	1a6d      	subs	r5, r5, r1
 800711e:	f025 0503 	bic.w	r5, r5, #3
 8007122:	3508      	adds	r5, #8
 8007124:	2d0c      	cmp	r5, #12
 8007126:	bf38      	it	cc
 8007128:	250c      	movcc	r5, #12
 800712a:	4629      	mov	r1, r5
 800712c:	4638      	mov	r0, r7
 800712e:	f7ff ffa5 	bl	800707c <sbrk_aligned>
 8007132:	3001      	adds	r0, #1
 8007134:	d02b      	beq.n	800718e <_malloc_r+0xd2>
 8007136:	6823      	ldr	r3, [r4, #0]
 8007138:	442b      	add	r3, r5
 800713a:	6023      	str	r3, [r4, #0]
 800713c:	e00e      	b.n	800715c <_malloc_r+0xa0>
 800713e:	6822      	ldr	r2, [r4, #0]
 8007140:	1b52      	subs	r2, r2, r5
 8007142:	d41e      	bmi.n	8007182 <_malloc_r+0xc6>
 8007144:	2a0b      	cmp	r2, #11
 8007146:	d916      	bls.n	8007176 <_malloc_r+0xba>
 8007148:	1961      	adds	r1, r4, r5
 800714a:	42a3      	cmp	r3, r4
 800714c:	6025      	str	r5, [r4, #0]
 800714e:	bf18      	it	ne
 8007150:	6059      	strne	r1, [r3, #4]
 8007152:	6863      	ldr	r3, [r4, #4]
 8007154:	bf08      	it	eq
 8007156:	6031      	streq	r1, [r6, #0]
 8007158:	5162      	str	r2, [r4, r5]
 800715a:	604b      	str	r3, [r1, #4]
 800715c:	4638      	mov	r0, r7
 800715e:	f104 060b 	add.w	r6, r4, #11
 8007162:	f000 fd33 	bl	8007bcc <__malloc_unlock>
 8007166:	f026 0607 	bic.w	r6, r6, #7
 800716a:	1d23      	adds	r3, r4, #4
 800716c:	1af2      	subs	r2, r6, r3
 800716e:	d0b6      	beq.n	80070de <_malloc_r+0x22>
 8007170:	1b9b      	subs	r3, r3, r6
 8007172:	50a3      	str	r3, [r4, r2]
 8007174:	e7b3      	b.n	80070de <_malloc_r+0x22>
 8007176:	6862      	ldr	r2, [r4, #4]
 8007178:	42a3      	cmp	r3, r4
 800717a:	bf0c      	ite	eq
 800717c:	6032      	streq	r2, [r6, #0]
 800717e:	605a      	strne	r2, [r3, #4]
 8007180:	e7ec      	b.n	800715c <_malloc_r+0xa0>
 8007182:	4623      	mov	r3, r4
 8007184:	6864      	ldr	r4, [r4, #4]
 8007186:	e7b2      	b.n	80070ee <_malloc_r+0x32>
 8007188:	4634      	mov	r4, r6
 800718a:	6876      	ldr	r6, [r6, #4]
 800718c:	e7b9      	b.n	8007102 <_malloc_r+0x46>
 800718e:	230c      	movs	r3, #12
 8007190:	603b      	str	r3, [r7, #0]
 8007192:	4638      	mov	r0, r7
 8007194:	f000 fd1a 	bl	8007bcc <__malloc_unlock>
 8007198:	e7a1      	b.n	80070de <_malloc_r+0x22>
 800719a:	6025      	str	r5, [r4, #0]
 800719c:	e7de      	b.n	800715c <_malloc_r+0xa0>
 800719e:	bf00      	nop
 80071a0:	20004438 	.word	0x20004438

080071a4 <__ssputs_r>:
 80071a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071a8:	688e      	ldr	r6, [r1, #8]
 80071aa:	429e      	cmp	r6, r3
 80071ac:	4682      	mov	sl, r0
 80071ae:	460c      	mov	r4, r1
 80071b0:	4690      	mov	r8, r2
 80071b2:	461f      	mov	r7, r3
 80071b4:	d838      	bhi.n	8007228 <__ssputs_r+0x84>
 80071b6:	898a      	ldrh	r2, [r1, #12]
 80071b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80071bc:	d032      	beq.n	8007224 <__ssputs_r+0x80>
 80071be:	6825      	ldr	r5, [r4, #0]
 80071c0:	6909      	ldr	r1, [r1, #16]
 80071c2:	eba5 0901 	sub.w	r9, r5, r1
 80071c6:	6965      	ldr	r5, [r4, #20]
 80071c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80071cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80071d0:	3301      	adds	r3, #1
 80071d2:	444b      	add	r3, r9
 80071d4:	106d      	asrs	r5, r5, #1
 80071d6:	429d      	cmp	r5, r3
 80071d8:	bf38      	it	cc
 80071da:	461d      	movcc	r5, r3
 80071dc:	0553      	lsls	r3, r2, #21
 80071de:	d531      	bpl.n	8007244 <__ssputs_r+0xa0>
 80071e0:	4629      	mov	r1, r5
 80071e2:	f7ff ff6b 	bl	80070bc <_malloc_r>
 80071e6:	4606      	mov	r6, r0
 80071e8:	b950      	cbnz	r0, 8007200 <__ssputs_r+0x5c>
 80071ea:	230c      	movs	r3, #12
 80071ec:	f8ca 3000 	str.w	r3, [sl]
 80071f0:	89a3      	ldrh	r3, [r4, #12]
 80071f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071f6:	81a3      	strh	r3, [r4, #12]
 80071f8:	f04f 30ff 	mov.w	r0, #4294967295
 80071fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007200:	6921      	ldr	r1, [r4, #16]
 8007202:	464a      	mov	r2, r9
 8007204:	f7ff fb20 	bl	8006848 <memcpy>
 8007208:	89a3      	ldrh	r3, [r4, #12]
 800720a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800720e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007212:	81a3      	strh	r3, [r4, #12]
 8007214:	6126      	str	r6, [r4, #16]
 8007216:	6165      	str	r5, [r4, #20]
 8007218:	444e      	add	r6, r9
 800721a:	eba5 0509 	sub.w	r5, r5, r9
 800721e:	6026      	str	r6, [r4, #0]
 8007220:	60a5      	str	r5, [r4, #8]
 8007222:	463e      	mov	r6, r7
 8007224:	42be      	cmp	r6, r7
 8007226:	d900      	bls.n	800722a <__ssputs_r+0x86>
 8007228:	463e      	mov	r6, r7
 800722a:	6820      	ldr	r0, [r4, #0]
 800722c:	4632      	mov	r2, r6
 800722e:	4641      	mov	r1, r8
 8007230:	f000 fcac 	bl	8007b8c <memmove>
 8007234:	68a3      	ldr	r3, [r4, #8]
 8007236:	1b9b      	subs	r3, r3, r6
 8007238:	60a3      	str	r3, [r4, #8]
 800723a:	6823      	ldr	r3, [r4, #0]
 800723c:	4433      	add	r3, r6
 800723e:	6023      	str	r3, [r4, #0]
 8007240:	2000      	movs	r0, #0
 8007242:	e7db      	b.n	80071fc <__ssputs_r+0x58>
 8007244:	462a      	mov	r2, r5
 8007246:	f000 fcc7 	bl	8007bd8 <_realloc_r>
 800724a:	4606      	mov	r6, r0
 800724c:	2800      	cmp	r0, #0
 800724e:	d1e1      	bne.n	8007214 <__ssputs_r+0x70>
 8007250:	6921      	ldr	r1, [r4, #16]
 8007252:	4650      	mov	r0, sl
 8007254:	f7ff fec6 	bl	8006fe4 <_free_r>
 8007258:	e7c7      	b.n	80071ea <__ssputs_r+0x46>
	...

0800725c <_svfiprintf_r>:
 800725c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007260:	4698      	mov	r8, r3
 8007262:	898b      	ldrh	r3, [r1, #12]
 8007264:	061b      	lsls	r3, r3, #24
 8007266:	b09d      	sub	sp, #116	; 0x74
 8007268:	4607      	mov	r7, r0
 800726a:	460d      	mov	r5, r1
 800726c:	4614      	mov	r4, r2
 800726e:	d50e      	bpl.n	800728e <_svfiprintf_r+0x32>
 8007270:	690b      	ldr	r3, [r1, #16]
 8007272:	b963      	cbnz	r3, 800728e <_svfiprintf_r+0x32>
 8007274:	2140      	movs	r1, #64	; 0x40
 8007276:	f7ff ff21 	bl	80070bc <_malloc_r>
 800727a:	6028      	str	r0, [r5, #0]
 800727c:	6128      	str	r0, [r5, #16]
 800727e:	b920      	cbnz	r0, 800728a <_svfiprintf_r+0x2e>
 8007280:	230c      	movs	r3, #12
 8007282:	603b      	str	r3, [r7, #0]
 8007284:	f04f 30ff 	mov.w	r0, #4294967295
 8007288:	e0d1      	b.n	800742e <_svfiprintf_r+0x1d2>
 800728a:	2340      	movs	r3, #64	; 0x40
 800728c:	616b      	str	r3, [r5, #20]
 800728e:	2300      	movs	r3, #0
 8007290:	9309      	str	r3, [sp, #36]	; 0x24
 8007292:	2320      	movs	r3, #32
 8007294:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007298:	f8cd 800c 	str.w	r8, [sp, #12]
 800729c:	2330      	movs	r3, #48	; 0x30
 800729e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007448 <_svfiprintf_r+0x1ec>
 80072a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80072a6:	f04f 0901 	mov.w	r9, #1
 80072aa:	4623      	mov	r3, r4
 80072ac:	469a      	mov	sl, r3
 80072ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80072b2:	b10a      	cbz	r2, 80072b8 <_svfiprintf_r+0x5c>
 80072b4:	2a25      	cmp	r2, #37	; 0x25
 80072b6:	d1f9      	bne.n	80072ac <_svfiprintf_r+0x50>
 80072b8:	ebba 0b04 	subs.w	fp, sl, r4
 80072bc:	d00b      	beq.n	80072d6 <_svfiprintf_r+0x7a>
 80072be:	465b      	mov	r3, fp
 80072c0:	4622      	mov	r2, r4
 80072c2:	4629      	mov	r1, r5
 80072c4:	4638      	mov	r0, r7
 80072c6:	f7ff ff6d 	bl	80071a4 <__ssputs_r>
 80072ca:	3001      	adds	r0, #1
 80072cc:	f000 80aa 	beq.w	8007424 <_svfiprintf_r+0x1c8>
 80072d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072d2:	445a      	add	r2, fp
 80072d4:	9209      	str	r2, [sp, #36]	; 0x24
 80072d6:	f89a 3000 	ldrb.w	r3, [sl]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	f000 80a2 	beq.w	8007424 <_svfiprintf_r+0x1c8>
 80072e0:	2300      	movs	r3, #0
 80072e2:	f04f 32ff 	mov.w	r2, #4294967295
 80072e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072ea:	f10a 0a01 	add.w	sl, sl, #1
 80072ee:	9304      	str	r3, [sp, #16]
 80072f0:	9307      	str	r3, [sp, #28]
 80072f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80072f6:	931a      	str	r3, [sp, #104]	; 0x68
 80072f8:	4654      	mov	r4, sl
 80072fa:	2205      	movs	r2, #5
 80072fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007300:	4851      	ldr	r0, [pc, #324]	; (8007448 <_svfiprintf_r+0x1ec>)
 8007302:	f7f8 ff85 	bl	8000210 <memchr>
 8007306:	9a04      	ldr	r2, [sp, #16]
 8007308:	b9d8      	cbnz	r0, 8007342 <_svfiprintf_r+0xe6>
 800730a:	06d0      	lsls	r0, r2, #27
 800730c:	bf44      	itt	mi
 800730e:	2320      	movmi	r3, #32
 8007310:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007314:	0711      	lsls	r1, r2, #28
 8007316:	bf44      	itt	mi
 8007318:	232b      	movmi	r3, #43	; 0x2b
 800731a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800731e:	f89a 3000 	ldrb.w	r3, [sl]
 8007322:	2b2a      	cmp	r3, #42	; 0x2a
 8007324:	d015      	beq.n	8007352 <_svfiprintf_r+0xf6>
 8007326:	9a07      	ldr	r2, [sp, #28]
 8007328:	4654      	mov	r4, sl
 800732a:	2000      	movs	r0, #0
 800732c:	f04f 0c0a 	mov.w	ip, #10
 8007330:	4621      	mov	r1, r4
 8007332:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007336:	3b30      	subs	r3, #48	; 0x30
 8007338:	2b09      	cmp	r3, #9
 800733a:	d94e      	bls.n	80073da <_svfiprintf_r+0x17e>
 800733c:	b1b0      	cbz	r0, 800736c <_svfiprintf_r+0x110>
 800733e:	9207      	str	r2, [sp, #28]
 8007340:	e014      	b.n	800736c <_svfiprintf_r+0x110>
 8007342:	eba0 0308 	sub.w	r3, r0, r8
 8007346:	fa09 f303 	lsl.w	r3, r9, r3
 800734a:	4313      	orrs	r3, r2
 800734c:	9304      	str	r3, [sp, #16]
 800734e:	46a2      	mov	sl, r4
 8007350:	e7d2      	b.n	80072f8 <_svfiprintf_r+0x9c>
 8007352:	9b03      	ldr	r3, [sp, #12]
 8007354:	1d19      	adds	r1, r3, #4
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	9103      	str	r1, [sp, #12]
 800735a:	2b00      	cmp	r3, #0
 800735c:	bfbb      	ittet	lt
 800735e:	425b      	neglt	r3, r3
 8007360:	f042 0202 	orrlt.w	r2, r2, #2
 8007364:	9307      	strge	r3, [sp, #28]
 8007366:	9307      	strlt	r3, [sp, #28]
 8007368:	bfb8      	it	lt
 800736a:	9204      	strlt	r2, [sp, #16]
 800736c:	7823      	ldrb	r3, [r4, #0]
 800736e:	2b2e      	cmp	r3, #46	; 0x2e
 8007370:	d10c      	bne.n	800738c <_svfiprintf_r+0x130>
 8007372:	7863      	ldrb	r3, [r4, #1]
 8007374:	2b2a      	cmp	r3, #42	; 0x2a
 8007376:	d135      	bne.n	80073e4 <_svfiprintf_r+0x188>
 8007378:	9b03      	ldr	r3, [sp, #12]
 800737a:	1d1a      	adds	r2, r3, #4
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	9203      	str	r2, [sp, #12]
 8007380:	2b00      	cmp	r3, #0
 8007382:	bfb8      	it	lt
 8007384:	f04f 33ff 	movlt.w	r3, #4294967295
 8007388:	3402      	adds	r4, #2
 800738a:	9305      	str	r3, [sp, #20]
 800738c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007458 <_svfiprintf_r+0x1fc>
 8007390:	7821      	ldrb	r1, [r4, #0]
 8007392:	2203      	movs	r2, #3
 8007394:	4650      	mov	r0, sl
 8007396:	f7f8 ff3b 	bl	8000210 <memchr>
 800739a:	b140      	cbz	r0, 80073ae <_svfiprintf_r+0x152>
 800739c:	2340      	movs	r3, #64	; 0x40
 800739e:	eba0 000a 	sub.w	r0, r0, sl
 80073a2:	fa03 f000 	lsl.w	r0, r3, r0
 80073a6:	9b04      	ldr	r3, [sp, #16]
 80073a8:	4303      	orrs	r3, r0
 80073aa:	3401      	adds	r4, #1
 80073ac:	9304      	str	r3, [sp, #16]
 80073ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073b2:	4826      	ldr	r0, [pc, #152]	; (800744c <_svfiprintf_r+0x1f0>)
 80073b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80073b8:	2206      	movs	r2, #6
 80073ba:	f7f8 ff29 	bl	8000210 <memchr>
 80073be:	2800      	cmp	r0, #0
 80073c0:	d038      	beq.n	8007434 <_svfiprintf_r+0x1d8>
 80073c2:	4b23      	ldr	r3, [pc, #140]	; (8007450 <_svfiprintf_r+0x1f4>)
 80073c4:	bb1b      	cbnz	r3, 800740e <_svfiprintf_r+0x1b2>
 80073c6:	9b03      	ldr	r3, [sp, #12]
 80073c8:	3307      	adds	r3, #7
 80073ca:	f023 0307 	bic.w	r3, r3, #7
 80073ce:	3308      	adds	r3, #8
 80073d0:	9303      	str	r3, [sp, #12]
 80073d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073d4:	4433      	add	r3, r6
 80073d6:	9309      	str	r3, [sp, #36]	; 0x24
 80073d8:	e767      	b.n	80072aa <_svfiprintf_r+0x4e>
 80073da:	fb0c 3202 	mla	r2, ip, r2, r3
 80073de:	460c      	mov	r4, r1
 80073e0:	2001      	movs	r0, #1
 80073e2:	e7a5      	b.n	8007330 <_svfiprintf_r+0xd4>
 80073e4:	2300      	movs	r3, #0
 80073e6:	3401      	adds	r4, #1
 80073e8:	9305      	str	r3, [sp, #20]
 80073ea:	4619      	mov	r1, r3
 80073ec:	f04f 0c0a 	mov.w	ip, #10
 80073f0:	4620      	mov	r0, r4
 80073f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073f6:	3a30      	subs	r2, #48	; 0x30
 80073f8:	2a09      	cmp	r2, #9
 80073fa:	d903      	bls.n	8007404 <_svfiprintf_r+0x1a8>
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d0c5      	beq.n	800738c <_svfiprintf_r+0x130>
 8007400:	9105      	str	r1, [sp, #20]
 8007402:	e7c3      	b.n	800738c <_svfiprintf_r+0x130>
 8007404:	fb0c 2101 	mla	r1, ip, r1, r2
 8007408:	4604      	mov	r4, r0
 800740a:	2301      	movs	r3, #1
 800740c:	e7f0      	b.n	80073f0 <_svfiprintf_r+0x194>
 800740e:	ab03      	add	r3, sp, #12
 8007410:	9300      	str	r3, [sp, #0]
 8007412:	462a      	mov	r2, r5
 8007414:	4b0f      	ldr	r3, [pc, #60]	; (8007454 <_svfiprintf_r+0x1f8>)
 8007416:	a904      	add	r1, sp, #16
 8007418:	4638      	mov	r0, r7
 800741a:	f3af 8000 	nop.w
 800741e:	1c42      	adds	r2, r0, #1
 8007420:	4606      	mov	r6, r0
 8007422:	d1d6      	bne.n	80073d2 <_svfiprintf_r+0x176>
 8007424:	89ab      	ldrh	r3, [r5, #12]
 8007426:	065b      	lsls	r3, r3, #25
 8007428:	f53f af2c 	bmi.w	8007284 <_svfiprintf_r+0x28>
 800742c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800742e:	b01d      	add	sp, #116	; 0x74
 8007430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007434:	ab03      	add	r3, sp, #12
 8007436:	9300      	str	r3, [sp, #0]
 8007438:	462a      	mov	r2, r5
 800743a:	4b06      	ldr	r3, [pc, #24]	; (8007454 <_svfiprintf_r+0x1f8>)
 800743c:	a904      	add	r1, sp, #16
 800743e:	4638      	mov	r0, r7
 8007440:	f000 f9d4 	bl	80077ec <_printf_i>
 8007444:	e7eb      	b.n	800741e <_svfiprintf_r+0x1c2>
 8007446:	bf00      	nop
 8007448:	08007f18 	.word	0x08007f18
 800744c:	08007f22 	.word	0x08007f22
 8007450:	00000000 	.word	0x00000000
 8007454:	080071a5 	.word	0x080071a5
 8007458:	08007f1e 	.word	0x08007f1e

0800745c <__sfputc_r>:
 800745c:	6893      	ldr	r3, [r2, #8]
 800745e:	3b01      	subs	r3, #1
 8007460:	2b00      	cmp	r3, #0
 8007462:	b410      	push	{r4}
 8007464:	6093      	str	r3, [r2, #8]
 8007466:	da08      	bge.n	800747a <__sfputc_r+0x1e>
 8007468:	6994      	ldr	r4, [r2, #24]
 800746a:	42a3      	cmp	r3, r4
 800746c:	db01      	blt.n	8007472 <__sfputc_r+0x16>
 800746e:	290a      	cmp	r1, #10
 8007470:	d103      	bne.n	800747a <__sfputc_r+0x1e>
 8007472:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007476:	f7ff bad5 	b.w	8006a24 <__swbuf_r>
 800747a:	6813      	ldr	r3, [r2, #0]
 800747c:	1c58      	adds	r0, r3, #1
 800747e:	6010      	str	r0, [r2, #0]
 8007480:	7019      	strb	r1, [r3, #0]
 8007482:	4608      	mov	r0, r1
 8007484:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007488:	4770      	bx	lr

0800748a <__sfputs_r>:
 800748a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800748c:	4606      	mov	r6, r0
 800748e:	460f      	mov	r7, r1
 8007490:	4614      	mov	r4, r2
 8007492:	18d5      	adds	r5, r2, r3
 8007494:	42ac      	cmp	r4, r5
 8007496:	d101      	bne.n	800749c <__sfputs_r+0x12>
 8007498:	2000      	movs	r0, #0
 800749a:	e007      	b.n	80074ac <__sfputs_r+0x22>
 800749c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074a0:	463a      	mov	r2, r7
 80074a2:	4630      	mov	r0, r6
 80074a4:	f7ff ffda 	bl	800745c <__sfputc_r>
 80074a8:	1c43      	adds	r3, r0, #1
 80074aa:	d1f3      	bne.n	8007494 <__sfputs_r+0xa>
 80074ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080074b0 <_vfiprintf_r>:
 80074b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074b4:	460d      	mov	r5, r1
 80074b6:	b09d      	sub	sp, #116	; 0x74
 80074b8:	4614      	mov	r4, r2
 80074ba:	4698      	mov	r8, r3
 80074bc:	4606      	mov	r6, r0
 80074be:	b118      	cbz	r0, 80074c8 <_vfiprintf_r+0x18>
 80074c0:	6983      	ldr	r3, [r0, #24]
 80074c2:	b90b      	cbnz	r3, 80074c8 <_vfiprintf_r+0x18>
 80074c4:	f7ff fc88 	bl	8006dd8 <__sinit>
 80074c8:	4b89      	ldr	r3, [pc, #548]	; (80076f0 <_vfiprintf_r+0x240>)
 80074ca:	429d      	cmp	r5, r3
 80074cc:	d11b      	bne.n	8007506 <_vfiprintf_r+0x56>
 80074ce:	6875      	ldr	r5, [r6, #4]
 80074d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80074d2:	07d9      	lsls	r1, r3, #31
 80074d4:	d405      	bmi.n	80074e2 <_vfiprintf_r+0x32>
 80074d6:	89ab      	ldrh	r3, [r5, #12]
 80074d8:	059a      	lsls	r2, r3, #22
 80074da:	d402      	bmi.n	80074e2 <_vfiprintf_r+0x32>
 80074dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80074de:	f7ff fd19 	bl	8006f14 <__retarget_lock_acquire_recursive>
 80074e2:	89ab      	ldrh	r3, [r5, #12]
 80074e4:	071b      	lsls	r3, r3, #28
 80074e6:	d501      	bpl.n	80074ec <_vfiprintf_r+0x3c>
 80074e8:	692b      	ldr	r3, [r5, #16]
 80074ea:	b9eb      	cbnz	r3, 8007528 <_vfiprintf_r+0x78>
 80074ec:	4629      	mov	r1, r5
 80074ee:	4630      	mov	r0, r6
 80074f0:	f7ff faea 	bl	8006ac8 <__swsetup_r>
 80074f4:	b1c0      	cbz	r0, 8007528 <_vfiprintf_r+0x78>
 80074f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80074f8:	07dc      	lsls	r4, r3, #31
 80074fa:	d50e      	bpl.n	800751a <_vfiprintf_r+0x6a>
 80074fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007500:	b01d      	add	sp, #116	; 0x74
 8007502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007506:	4b7b      	ldr	r3, [pc, #492]	; (80076f4 <_vfiprintf_r+0x244>)
 8007508:	429d      	cmp	r5, r3
 800750a:	d101      	bne.n	8007510 <_vfiprintf_r+0x60>
 800750c:	68b5      	ldr	r5, [r6, #8]
 800750e:	e7df      	b.n	80074d0 <_vfiprintf_r+0x20>
 8007510:	4b79      	ldr	r3, [pc, #484]	; (80076f8 <_vfiprintf_r+0x248>)
 8007512:	429d      	cmp	r5, r3
 8007514:	bf08      	it	eq
 8007516:	68f5      	ldreq	r5, [r6, #12]
 8007518:	e7da      	b.n	80074d0 <_vfiprintf_r+0x20>
 800751a:	89ab      	ldrh	r3, [r5, #12]
 800751c:	0598      	lsls	r0, r3, #22
 800751e:	d4ed      	bmi.n	80074fc <_vfiprintf_r+0x4c>
 8007520:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007522:	f7ff fcf8 	bl	8006f16 <__retarget_lock_release_recursive>
 8007526:	e7e9      	b.n	80074fc <_vfiprintf_r+0x4c>
 8007528:	2300      	movs	r3, #0
 800752a:	9309      	str	r3, [sp, #36]	; 0x24
 800752c:	2320      	movs	r3, #32
 800752e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007532:	f8cd 800c 	str.w	r8, [sp, #12]
 8007536:	2330      	movs	r3, #48	; 0x30
 8007538:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80076fc <_vfiprintf_r+0x24c>
 800753c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007540:	f04f 0901 	mov.w	r9, #1
 8007544:	4623      	mov	r3, r4
 8007546:	469a      	mov	sl, r3
 8007548:	f813 2b01 	ldrb.w	r2, [r3], #1
 800754c:	b10a      	cbz	r2, 8007552 <_vfiprintf_r+0xa2>
 800754e:	2a25      	cmp	r2, #37	; 0x25
 8007550:	d1f9      	bne.n	8007546 <_vfiprintf_r+0x96>
 8007552:	ebba 0b04 	subs.w	fp, sl, r4
 8007556:	d00b      	beq.n	8007570 <_vfiprintf_r+0xc0>
 8007558:	465b      	mov	r3, fp
 800755a:	4622      	mov	r2, r4
 800755c:	4629      	mov	r1, r5
 800755e:	4630      	mov	r0, r6
 8007560:	f7ff ff93 	bl	800748a <__sfputs_r>
 8007564:	3001      	adds	r0, #1
 8007566:	f000 80aa 	beq.w	80076be <_vfiprintf_r+0x20e>
 800756a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800756c:	445a      	add	r2, fp
 800756e:	9209      	str	r2, [sp, #36]	; 0x24
 8007570:	f89a 3000 	ldrb.w	r3, [sl]
 8007574:	2b00      	cmp	r3, #0
 8007576:	f000 80a2 	beq.w	80076be <_vfiprintf_r+0x20e>
 800757a:	2300      	movs	r3, #0
 800757c:	f04f 32ff 	mov.w	r2, #4294967295
 8007580:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007584:	f10a 0a01 	add.w	sl, sl, #1
 8007588:	9304      	str	r3, [sp, #16]
 800758a:	9307      	str	r3, [sp, #28]
 800758c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007590:	931a      	str	r3, [sp, #104]	; 0x68
 8007592:	4654      	mov	r4, sl
 8007594:	2205      	movs	r2, #5
 8007596:	f814 1b01 	ldrb.w	r1, [r4], #1
 800759a:	4858      	ldr	r0, [pc, #352]	; (80076fc <_vfiprintf_r+0x24c>)
 800759c:	f7f8 fe38 	bl	8000210 <memchr>
 80075a0:	9a04      	ldr	r2, [sp, #16]
 80075a2:	b9d8      	cbnz	r0, 80075dc <_vfiprintf_r+0x12c>
 80075a4:	06d1      	lsls	r1, r2, #27
 80075a6:	bf44      	itt	mi
 80075a8:	2320      	movmi	r3, #32
 80075aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075ae:	0713      	lsls	r3, r2, #28
 80075b0:	bf44      	itt	mi
 80075b2:	232b      	movmi	r3, #43	; 0x2b
 80075b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075b8:	f89a 3000 	ldrb.w	r3, [sl]
 80075bc:	2b2a      	cmp	r3, #42	; 0x2a
 80075be:	d015      	beq.n	80075ec <_vfiprintf_r+0x13c>
 80075c0:	9a07      	ldr	r2, [sp, #28]
 80075c2:	4654      	mov	r4, sl
 80075c4:	2000      	movs	r0, #0
 80075c6:	f04f 0c0a 	mov.w	ip, #10
 80075ca:	4621      	mov	r1, r4
 80075cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80075d0:	3b30      	subs	r3, #48	; 0x30
 80075d2:	2b09      	cmp	r3, #9
 80075d4:	d94e      	bls.n	8007674 <_vfiprintf_r+0x1c4>
 80075d6:	b1b0      	cbz	r0, 8007606 <_vfiprintf_r+0x156>
 80075d8:	9207      	str	r2, [sp, #28]
 80075da:	e014      	b.n	8007606 <_vfiprintf_r+0x156>
 80075dc:	eba0 0308 	sub.w	r3, r0, r8
 80075e0:	fa09 f303 	lsl.w	r3, r9, r3
 80075e4:	4313      	orrs	r3, r2
 80075e6:	9304      	str	r3, [sp, #16]
 80075e8:	46a2      	mov	sl, r4
 80075ea:	e7d2      	b.n	8007592 <_vfiprintf_r+0xe2>
 80075ec:	9b03      	ldr	r3, [sp, #12]
 80075ee:	1d19      	adds	r1, r3, #4
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	9103      	str	r1, [sp, #12]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	bfbb      	ittet	lt
 80075f8:	425b      	neglt	r3, r3
 80075fa:	f042 0202 	orrlt.w	r2, r2, #2
 80075fe:	9307      	strge	r3, [sp, #28]
 8007600:	9307      	strlt	r3, [sp, #28]
 8007602:	bfb8      	it	lt
 8007604:	9204      	strlt	r2, [sp, #16]
 8007606:	7823      	ldrb	r3, [r4, #0]
 8007608:	2b2e      	cmp	r3, #46	; 0x2e
 800760a:	d10c      	bne.n	8007626 <_vfiprintf_r+0x176>
 800760c:	7863      	ldrb	r3, [r4, #1]
 800760e:	2b2a      	cmp	r3, #42	; 0x2a
 8007610:	d135      	bne.n	800767e <_vfiprintf_r+0x1ce>
 8007612:	9b03      	ldr	r3, [sp, #12]
 8007614:	1d1a      	adds	r2, r3, #4
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	9203      	str	r2, [sp, #12]
 800761a:	2b00      	cmp	r3, #0
 800761c:	bfb8      	it	lt
 800761e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007622:	3402      	adds	r4, #2
 8007624:	9305      	str	r3, [sp, #20]
 8007626:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800770c <_vfiprintf_r+0x25c>
 800762a:	7821      	ldrb	r1, [r4, #0]
 800762c:	2203      	movs	r2, #3
 800762e:	4650      	mov	r0, sl
 8007630:	f7f8 fdee 	bl	8000210 <memchr>
 8007634:	b140      	cbz	r0, 8007648 <_vfiprintf_r+0x198>
 8007636:	2340      	movs	r3, #64	; 0x40
 8007638:	eba0 000a 	sub.w	r0, r0, sl
 800763c:	fa03 f000 	lsl.w	r0, r3, r0
 8007640:	9b04      	ldr	r3, [sp, #16]
 8007642:	4303      	orrs	r3, r0
 8007644:	3401      	adds	r4, #1
 8007646:	9304      	str	r3, [sp, #16]
 8007648:	f814 1b01 	ldrb.w	r1, [r4], #1
 800764c:	482c      	ldr	r0, [pc, #176]	; (8007700 <_vfiprintf_r+0x250>)
 800764e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007652:	2206      	movs	r2, #6
 8007654:	f7f8 fddc 	bl	8000210 <memchr>
 8007658:	2800      	cmp	r0, #0
 800765a:	d03f      	beq.n	80076dc <_vfiprintf_r+0x22c>
 800765c:	4b29      	ldr	r3, [pc, #164]	; (8007704 <_vfiprintf_r+0x254>)
 800765e:	bb1b      	cbnz	r3, 80076a8 <_vfiprintf_r+0x1f8>
 8007660:	9b03      	ldr	r3, [sp, #12]
 8007662:	3307      	adds	r3, #7
 8007664:	f023 0307 	bic.w	r3, r3, #7
 8007668:	3308      	adds	r3, #8
 800766a:	9303      	str	r3, [sp, #12]
 800766c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800766e:	443b      	add	r3, r7
 8007670:	9309      	str	r3, [sp, #36]	; 0x24
 8007672:	e767      	b.n	8007544 <_vfiprintf_r+0x94>
 8007674:	fb0c 3202 	mla	r2, ip, r2, r3
 8007678:	460c      	mov	r4, r1
 800767a:	2001      	movs	r0, #1
 800767c:	e7a5      	b.n	80075ca <_vfiprintf_r+0x11a>
 800767e:	2300      	movs	r3, #0
 8007680:	3401      	adds	r4, #1
 8007682:	9305      	str	r3, [sp, #20]
 8007684:	4619      	mov	r1, r3
 8007686:	f04f 0c0a 	mov.w	ip, #10
 800768a:	4620      	mov	r0, r4
 800768c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007690:	3a30      	subs	r2, #48	; 0x30
 8007692:	2a09      	cmp	r2, #9
 8007694:	d903      	bls.n	800769e <_vfiprintf_r+0x1ee>
 8007696:	2b00      	cmp	r3, #0
 8007698:	d0c5      	beq.n	8007626 <_vfiprintf_r+0x176>
 800769a:	9105      	str	r1, [sp, #20]
 800769c:	e7c3      	b.n	8007626 <_vfiprintf_r+0x176>
 800769e:	fb0c 2101 	mla	r1, ip, r1, r2
 80076a2:	4604      	mov	r4, r0
 80076a4:	2301      	movs	r3, #1
 80076a6:	e7f0      	b.n	800768a <_vfiprintf_r+0x1da>
 80076a8:	ab03      	add	r3, sp, #12
 80076aa:	9300      	str	r3, [sp, #0]
 80076ac:	462a      	mov	r2, r5
 80076ae:	4b16      	ldr	r3, [pc, #88]	; (8007708 <_vfiprintf_r+0x258>)
 80076b0:	a904      	add	r1, sp, #16
 80076b2:	4630      	mov	r0, r6
 80076b4:	f3af 8000 	nop.w
 80076b8:	4607      	mov	r7, r0
 80076ba:	1c78      	adds	r0, r7, #1
 80076bc:	d1d6      	bne.n	800766c <_vfiprintf_r+0x1bc>
 80076be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80076c0:	07d9      	lsls	r1, r3, #31
 80076c2:	d405      	bmi.n	80076d0 <_vfiprintf_r+0x220>
 80076c4:	89ab      	ldrh	r3, [r5, #12]
 80076c6:	059a      	lsls	r2, r3, #22
 80076c8:	d402      	bmi.n	80076d0 <_vfiprintf_r+0x220>
 80076ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80076cc:	f7ff fc23 	bl	8006f16 <__retarget_lock_release_recursive>
 80076d0:	89ab      	ldrh	r3, [r5, #12]
 80076d2:	065b      	lsls	r3, r3, #25
 80076d4:	f53f af12 	bmi.w	80074fc <_vfiprintf_r+0x4c>
 80076d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80076da:	e711      	b.n	8007500 <_vfiprintf_r+0x50>
 80076dc:	ab03      	add	r3, sp, #12
 80076de:	9300      	str	r3, [sp, #0]
 80076e0:	462a      	mov	r2, r5
 80076e2:	4b09      	ldr	r3, [pc, #36]	; (8007708 <_vfiprintf_r+0x258>)
 80076e4:	a904      	add	r1, sp, #16
 80076e6:	4630      	mov	r0, r6
 80076e8:	f000 f880 	bl	80077ec <_printf_i>
 80076ec:	e7e4      	b.n	80076b8 <_vfiprintf_r+0x208>
 80076ee:	bf00      	nop
 80076f0:	08007ed8 	.word	0x08007ed8
 80076f4:	08007ef8 	.word	0x08007ef8
 80076f8:	08007eb8 	.word	0x08007eb8
 80076fc:	08007f18 	.word	0x08007f18
 8007700:	08007f22 	.word	0x08007f22
 8007704:	00000000 	.word	0x00000000
 8007708:	0800748b 	.word	0x0800748b
 800770c:	08007f1e 	.word	0x08007f1e

08007710 <_printf_common>:
 8007710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007714:	4616      	mov	r6, r2
 8007716:	4699      	mov	r9, r3
 8007718:	688a      	ldr	r2, [r1, #8]
 800771a:	690b      	ldr	r3, [r1, #16]
 800771c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007720:	4293      	cmp	r3, r2
 8007722:	bfb8      	it	lt
 8007724:	4613      	movlt	r3, r2
 8007726:	6033      	str	r3, [r6, #0]
 8007728:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800772c:	4607      	mov	r7, r0
 800772e:	460c      	mov	r4, r1
 8007730:	b10a      	cbz	r2, 8007736 <_printf_common+0x26>
 8007732:	3301      	adds	r3, #1
 8007734:	6033      	str	r3, [r6, #0]
 8007736:	6823      	ldr	r3, [r4, #0]
 8007738:	0699      	lsls	r1, r3, #26
 800773a:	bf42      	ittt	mi
 800773c:	6833      	ldrmi	r3, [r6, #0]
 800773e:	3302      	addmi	r3, #2
 8007740:	6033      	strmi	r3, [r6, #0]
 8007742:	6825      	ldr	r5, [r4, #0]
 8007744:	f015 0506 	ands.w	r5, r5, #6
 8007748:	d106      	bne.n	8007758 <_printf_common+0x48>
 800774a:	f104 0a19 	add.w	sl, r4, #25
 800774e:	68e3      	ldr	r3, [r4, #12]
 8007750:	6832      	ldr	r2, [r6, #0]
 8007752:	1a9b      	subs	r3, r3, r2
 8007754:	42ab      	cmp	r3, r5
 8007756:	dc26      	bgt.n	80077a6 <_printf_common+0x96>
 8007758:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800775c:	1e13      	subs	r3, r2, #0
 800775e:	6822      	ldr	r2, [r4, #0]
 8007760:	bf18      	it	ne
 8007762:	2301      	movne	r3, #1
 8007764:	0692      	lsls	r2, r2, #26
 8007766:	d42b      	bmi.n	80077c0 <_printf_common+0xb0>
 8007768:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800776c:	4649      	mov	r1, r9
 800776e:	4638      	mov	r0, r7
 8007770:	47c0      	blx	r8
 8007772:	3001      	adds	r0, #1
 8007774:	d01e      	beq.n	80077b4 <_printf_common+0xa4>
 8007776:	6823      	ldr	r3, [r4, #0]
 8007778:	68e5      	ldr	r5, [r4, #12]
 800777a:	6832      	ldr	r2, [r6, #0]
 800777c:	f003 0306 	and.w	r3, r3, #6
 8007780:	2b04      	cmp	r3, #4
 8007782:	bf08      	it	eq
 8007784:	1aad      	subeq	r5, r5, r2
 8007786:	68a3      	ldr	r3, [r4, #8]
 8007788:	6922      	ldr	r2, [r4, #16]
 800778a:	bf0c      	ite	eq
 800778c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007790:	2500      	movne	r5, #0
 8007792:	4293      	cmp	r3, r2
 8007794:	bfc4      	itt	gt
 8007796:	1a9b      	subgt	r3, r3, r2
 8007798:	18ed      	addgt	r5, r5, r3
 800779a:	2600      	movs	r6, #0
 800779c:	341a      	adds	r4, #26
 800779e:	42b5      	cmp	r5, r6
 80077a0:	d11a      	bne.n	80077d8 <_printf_common+0xc8>
 80077a2:	2000      	movs	r0, #0
 80077a4:	e008      	b.n	80077b8 <_printf_common+0xa8>
 80077a6:	2301      	movs	r3, #1
 80077a8:	4652      	mov	r2, sl
 80077aa:	4649      	mov	r1, r9
 80077ac:	4638      	mov	r0, r7
 80077ae:	47c0      	blx	r8
 80077b0:	3001      	adds	r0, #1
 80077b2:	d103      	bne.n	80077bc <_printf_common+0xac>
 80077b4:	f04f 30ff 	mov.w	r0, #4294967295
 80077b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077bc:	3501      	adds	r5, #1
 80077be:	e7c6      	b.n	800774e <_printf_common+0x3e>
 80077c0:	18e1      	adds	r1, r4, r3
 80077c2:	1c5a      	adds	r2, r3, #1
 80077c4:	2030      	movs	r0, #48	; 0x30
 80077c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80077ca:	4422      	add	r2, r4
 80077cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80077d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80077d4:	3302      	adds	r3, #2
 80077d6:	e7c7      	b.n	8007768 <_printf_common+0x58>
 80077d8:	2301      	movs	r3, #1
 80077da:	4622      	mov	r2, r4
 80077dc:	4649      	mov	r1, r9
 80077de:	4638      	mov	r0, r7
 80077e0:	47c0      	blx	r8
 80077e2:	3001      	adds	r0, #1
 80077e4:	d0e6      	beq.n	80077b4 <_printf_common+0xa4>
 80077e6:	3601      	adds	r6, #1
 80077e8:	e7d9      	b.n	800779e <_printf_common+0x8e>
	...

080077ec <_printf_i>:
 80077ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80077f0:	7e0f      	ldrb	r7, [r1, #24]
 80077f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80077f4:	2f78      	cmp	r7, #120	; 0x78
 80077f6:	4691      	mov	r9, r2
 80077f8:	4680      	mov	r8, r0
 80077fa:	460c      	mov	r4, r1
 80077fc:	469a      	mov	sl, r3
 80077fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007802:	d807      	bhi.n	8007814 <_printf_i+0x28>
 8007804:	2f62      	cmp	r7, #98	; 0x62
 8007806:	d80a      	bhi.n	800781e <_printf_i+0x32>
 8007808:	2f00      	cmp	r7, #0
 800780a:	f000 80d8 	beq.w	80079be <_printf_i+0x1d2>
 800780e:	2f58      	cmp	r7, #88	; 0x58
 8007810:	f000 80a3 	beq.w	800795a <_printf_i+0x16e>
 8007814:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007818:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800781c:	e03a      	b.n	8007894 <_printf_i+0xa8>
 800781e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007822:	2b15      	cmp	r3, #21
 8007824:	d8f6      	bhi.n	8007814 <_printf_i+0x28>
 8007826:	a101      	add	r1, pc, #4	; (adr r1, 800782c <_printf_i+0x40>)
 8007828:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800782c:	08007885 	.word	0x08007885
 8007830:	08007899 	.word	0x08007899
 8007834:	08007815 	.word	0x08007815
 8007838:	08007815 	.word	0x08007815
 800783c:	08007815 	.word	0x08007815
 8007840:	08007815 	.word	0x08007815
 8007844:	08007899 	.word	0x08007899
 8007848:	08007815 	.word	0x08007815
 800784c:	08007815 	.word	0x08007815
 8007850:	08007815 	.word	0x08007815
 8007854:	08007815 	.word	0x08007815
 8007858:	080079a5 	.word	0x080079a5
 800785c:	080078c9 	.word	0x080078c9
 8007860:	08007987 	.word	0x08007987
 8007864:	08007815 	.word	0x08007815
 8007868:	08007815 	.word	0x08007815
 800786c:	080079c7 	.word	0x080079c7
 8007870:	08007815 	.word	0x08007815
 8007874:	080078c9 	.word	0x080078c9
 8007878:	08007815 	.word	0x08007815
 800787c:	08007815 	.word	0x08007815
 8007880:	0800798f 	.word	0x0800798f
 8007884:	682b      	ldr	r3, [r5, #0]
 8007886:	1d1a      	adds	r2, r3, #4
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	602a      	str	r2, [r5, #0]
 800788c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007890:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007894:	2301      	movs	r3, #1
 8007896:	e0a3      	b.n	80079e0 <_printf_i+0x1f4>
 8007898:	6820      	ldr	r0, [r4, #0]
 800789a:	6829      	ldr	r1, [r5, #0]
 800789c:	0606      	lsls	r6, r0, #24
 800789e:	f101 0304 	add.w	r3, r1, #4
 80078a2:	d50a      	bpl.n	80078ba <_printf_i+0xce>
 80078a4:	680e      	ldr	r6, [r1, #0]
 80078a6:	602b      	str	r3, [r5, #0]
 80078a8:	2e00      	cmp	r6, #0
 80078aa:	da03      	bge.n	80078b4 <_printf_i+0xc8>
 80078ac:	232d      	movs	r3, #45	; 0x2d
 80078ae:	4276      	negs	r6, r6
 80078b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078b4:	485e      	ldr	r0, [pc, #376]	; (8007a30 <_printf_i+0x244>)
 80078b6:	230a      	movs	r3, #10
 80078b8:	e019      	b.n	80078ee <_printf_i+0x102>
 80078ba:	680e      	ldr	r6, [r1, #0]
 80078bc:	602b      	str	r3, [r5, #0]
 80078be:	f010 0f40 	tst.w	r0, #64	; 0x40
 80078c2:	bf18      	it	ne
 80078c4:	b236      	sxthne	r6, r6
 80078c6:	e7ef      	b.n	80078a8 <_printf_i+0xbc>
 80078c8:	682b      	ldr	r3, [r5, #0]
 80078ca:	6820      	ldr	r0, [r4, #0]
 80078cc:	1d19      	adds	r1, r3, #4
 80078ce:	6029      	str	r1, [r5, #0]
 80078d0:	0601      	lsls	r1, r0, #24
 80078d2:	d501      	bpl.n	80078d8 <_printf_i+0xec>
 80078d4:	681e      	ldr	r6, [r3, #0]
 80078d6:	e002      	b.n	80078de <_printf_i+0xf2>
 80078d8:	0646      	lsls	r6, r0, #25
 80078da:	d5fb      	bpl.n	80078d4 <_printf_i+0xe8>
 80078dc:	881e      	ldrh	r6, [r3, #0]
 80078de:	4854      	ldr	r0, [pc, #336]	; (8007a30 <_printf_i+0x244>)
 80078e0:	2f6f      	cmp	r7, #111	; 0x6f
 80078e2:	bf0c      	ite	eq
 80078e4:	2308      	moveq	r3, #8
 80078e6:	230a      	movne	r3, #10
 80078e8:	2100      	movs	r1, #0
 80078ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80078ee:	6865      	ldr	r5, [r4, #4]
 80078f0:	60a5      	str	r5, [r4, #8]
 80078f2:	2d00      	cmp	r5, #0
 80078f4:	bfa2      	ittt	ge
 80078f6:	6821      	ldrge	r1, [r4, #0]
 80078f8:	f021 0104 	bicge.w	r1, r1, #4
 80078fc:	6021      	strge	r1, [r4, #0]
 80078fe:	b90e      	cbnz	r6, 8007904 <_printf_i+0x118>
 8007900:	2d00      	cmp	r5, #0
 8007902:	d04d      	beq.n	80079a0 <_printf_i+0x1b4>
 8007904:	4615      	mov	r5, r2
 8007906:	fbb6 f1f3 	udiv	r1, r6, r3
 800790a:	fb03 6711 	mls	r7, r3, r1, r6
 800790e:	5dc7      	ldrb	r7, [r0, r7]
 8007910:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007914:	4637      	mov	r7, r6
 8007916:	42bb      	cmp	r3, r7
 8007918:	460e      	mov	r6, r1
 800791a:	d9f4      	bls.n	8007906 <_printf_i+0x11a>
 800791c:	2b08      	cmp	r3, #8
 800791e:	d10b      	bne.n	8007938 <_printf_i+0x14c>
 8007920:	6823      	ldr	r3, [r4, #0]
 8007922:	07de      	lsls	r6, r3, #31
 8007924:	d508      	bpl.n	8007938 <_printf_i+0x14c>
 8007926:	6923      	ldr	r3, [r4, #16]
 8007928:	6861      	ldr	r1, [r4, #4]
 800792a:	4299      	cmp	r1, r3
 800792c:	bfde      	ittt	le
 800792e:	2330      	movle	r3, #48	; 0x30
 8007930:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007934:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007938:	1b52      	subs	r2, r2, r5
 800793a:	6122      	str	r2, [r4, #16]
 800793c:	f8cd a000 	str.w	sl, [sp]
 8007940:	464b      	mov	r3, r9
 8007942:	aa03      	add	r2, sp, #12
 8007944:	4621      	mov	r1, r4
 8007946:	4640      	mov	r0, r8
 8007948:	f7ff fee2 	bl	8007710 <_printf_common>
 800794c:	3001      	adds	r0, #1
 800794e:	d14c      	bne.n	80079ea <_printf_i+0x1fe>
 8007950:	f04f 30ff 	mov.w	r0, #4294967295
 8007954:	b004      	add	sp, #16
 8007956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800795a:	4835      	ldr	r0, [pc, #212]	; (8007a30 <_printf_i+0x244>)
 800795c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007960:	6829      	ldr	r1, [r5, #0]
 8007962:	6823      	ldr	r3, [r4, #0]
 8007964:	f851 6b04 	ldr.w	r6, [r1], #4
 8007968:	6029      	str	r1, [r5, #0]
 800796a:	061d      	lsls	r5, r3, #24
 800796c:	d514      	bpl.n	8007998 <_printf_i+0x1ac>
 800796e:	07df      	lsls	r7, r3, #31
 8007970:	bf44      	itt	mi
 8007972:	f043 0320 	orrmi.w	r3, r3, #32
 8007976:	6023      	strmi	r3, [r4, #0]
 8007978:	b91e      	cbnz	r6, 8007982 <_printf_i+0x196>
 800797a:	6823      	ldr	r3, [r4, #0]
 800797c:	f023 0320 	bic.w	r3, r3, #32
 8007980:	6023      	str	r3, [r4, #0]
 8007982:	2310      	movs	r3, #16
 8007984:	e7b0      	b.n	80078e8 <_printf_i+0xfc>
 8007986:	6823      	ldr	r3, [r4, #0]
 8007988:	f043 0320 	orr.w	r3, r3, #32
 800798c:	6023      	str	r3, [r4, #0]
 800798e:	2378      	movs	r3, #120	; 0x78
 8007990:	4828      	ldr	r0, [pc, #160]	; (8007a34 <_printf_i+0x248>)
 8007992:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007996:	e7e3      	b.n	8007960 <_printf_i+0x174>
 8007998:	0659      	lsls	r1, r3, #25
 800799a:	bf48      	it	mi
 800799c:	b2b6      	uxthmi	r6, r6
 800799e:	e7e6      	b.n	800796e <_printf_i+0x182>
 80079a0:	4615      	mov	r5, r2
 80079a2:	e7bb      	b.n	800791c <_printf_i+0x130>
 80079a4:	682b      	ldr	r3, [r5, #0]
 80079a6:	6826      	ldr	r6, [r4, #0]
 80079a8:	6961      	ldr	r1, [r4, #20]
 80079aa:	1d18      	adds	r0, r3, #4
 80079ac:	6028      	str	r0, [r5, #0]
 80079ae:	0635      	lsls	r5, r6, #24
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	d501      	bpl.n	80079b8 <_printf_i+0x1cc>
 80079b4:	6019      	str	r1, [r3, #0]
 80079b6:	e002      	b.n	80079be <_printf_i+0x1d2>
 80079b8:	0670      	lsls	r0, r6, #25
 80079ba:	d5fb      	bpl.n	80079b4 <_printf_i+0x1c8>
 80079bc:	8019      	strh	r1, [r3, #0]
 80079be:	2300      	movs	r3, #0
 80079c0:	6123      	str	r3, [r4, #16]
 80079c2:	4615      	mov	r5, r2
 80079c4:	e7ba      	b.n	800793c <_printf_i+0x150>
 80079c6:	682b      	ldr	r3, [r5, #0]
 80079c8:	1d1a      	adds	r2, r3, #4
 80079ca:	602a      	str	r2, [r5, #0]
 80079cc:	681d      	ldr	r5, [r3, #0]
 80079ce:	6862      	ldr	r2, [r4, #4]
 80079d0:	2100      	movs	r1, #0
 80079d2:	4628      	mov	r0, r5
 80079d4:	f7f8 fc1c 	bl	8000210 <memchr>
 80079d8:	b108      	cbz	r0, 80079de <_printf_i+0x1f2>
 80079da:	1b40      	subs	r0, r0, r5
 80079dc:	6060      	str	r0, [r4, #4]
 80079de:	6863      	ldr	r3, [r4, #4]
 80079e0:	6123      	str	r3, [r4, #16]
 80079e2:	2300      	movs	r3, #0
 80079e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079e8:	e7a8      	b.n	800793c <_printf_i+0x150>
 80079ea:	6923      	ldr	r3, [r4, #16]
 80079ec:	462a      	mov	r2, r5
 80079ee:	4649      	mov	r1, r9
 80079f0:	4640      	mov	r0, r8
 80079f2:	47d0      	blx	sl
 80079f4:	3001      	adds	r0, #1
 80079f6:	d0ab      	beq.n	8007950 <_printf_i+0x164>
 80079f8:	6823      	ldr	r3, [r4, #0]
 80079fa:	079b      	lsls	r3, r3, #30
 80079fc:	d413      	bmi.n	8007a26 <_printf_i+0x23a>
 80079fe:	68e0      	ldr	r0, [r4, #12]
 8007a00:	9b03      	ldr	r3, [sp, #12]
 8007a02:	4298      	cmp	r0, r3
 8007a04:	bfb8      	it	lt
 8007a06:	4618      	movlt	r0, r3
 8007a08:	e7a4      	b.n	8007954 <_printf_i+0x168>
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	4632      	mov	r2, r6
 8007a0e:	4649      	mov	r1, r9
 8007a10:	4640      	mov	r0, r8
 8007a12:	47d0      	blx	sl
 8007a14:	3001      	adds	r0, #1
 8007a16:	d09b      	beq.n	8007950 <_printf_i+0x164>
 8007a18:	3501      	adds	r5, #1
 8007a1a:	68e3      	ldr	r3, [r4, #12]
 8007a1c:	9903      	ldr	r1, [sp, #12]
 8007a1e:	1a5b      	subs	r3, r3, r1
 8007a20:	42ab      	cmp	r3, r5
 8007a22:	dcf2      	bgt.n	8007a0a <_printf_i+0x21e>
 8007a24:	e7eb      	b.n	80079fe <_printf_i+0x212>
 8007a26:	2500      	movs	r5, #0
 8007a28:	f104 0619 	add.w	r6, r4, #25
 8007a2c:	e7f5      	b.n	8007a1a <_printf_i+0x22e>
 8007a2e:	bf00      	nop
 8007a30:	08007f29 	.word	0x08007f29
 8007a34:	08007f3a 	.word	0x08007f3a

08007a38 <_sbrk_r>:
 8007a38:	b538      	push	{r3, r4, r5, lr}
 8007a3a:	4d06      	ldr	r5, [pc, #24]	; (8007a54 <_sbrk_r+0x1c>)
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	4604      	mov	r4, r0
 8007a40:	4608      	mov	r0, r1
 8007a42:	602b      	str	r3, [r5, #0]
 8007a44:	f7f9 fe34 	bl	80016b0 <_sbrk>
 8007a48:	1c43      	adds	r3, r0, #1
 8007a4a:	d102      	bne.n	8007a52 <_sbrk_r+0x1a>
 8007a4c:	682b      	ldr	r3, [r5, #0]
 8007a4e:	b103      	cbz	r3, 8007a52 <_sbrk_r+0x1a>
 8007a50:	6023      	str	r3, [r4, #0]
 8007a52:	bd38      	pop	{r3, r4, r5, pc}
 8007a54:	20004440 	.word	0x20004440

08007a58 <__sread>:
 8007a58:	b510      	push	{r4, lr}
 8007a5a:	460c      	mov	r4, r1
 8007a5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a60:	f000 f8ea 	bl	8007c38 <_read_r>
 8007a64:	2800      	cmp	r0, #0
 8007a66:	bfab      	itete	ge
 8007a68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007a6a:	89a3      	ldrhlt	r3, [r4, #12]
 8007a6c:	181b      	addge	r3, r3, r0
 8007a6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007a72:	bfac      	ite	ge
 8007a74:	6563      	strge	r3, [r4, #84]	; 0x54
 8007a76:	81a3      	strhlt	r3, [r4, #12]
 8007a78:	bd10      	pop	{r4, pc}

08007a7a <__swrite>:
 8007a7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a7e:	461f      	mov	r7, r3
 8007a80:	898b      	ldrh	r3, [r1, #12]
 8007a82:	05db      	lsls	r3, r3, #23
 8007a84:	4605      	mov	r5, r0
 8007a86:	460c      	mov	r4, r1
 8007a88:	4616      	mov	r6, r2
 8007a8a:	d505      	bpl.n	8007a98 <__swrite+0x1e>
 8007a8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a90:	2302      	movs	r3, #2
 8007a92:	2200      	movs	r2, #0
 8007a94:	f000 f868 	bl	8007b68 <_lseek_r>
 8007a98:	89a3      	ldrh	r3, [r4, #12]
 8007a9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007aa2:	81a3      	strh	r3, [r4, #12]
 8007aa4:	4632      	mov	r2, r6
 8007aa6:	463b      	mov	r3, r7
 8007aa8:	4628      	mov	r0, r5
 8007aaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007aae:	f000 b817 	b.w	8007ae0 <_write_r>

08007ab2 <__sseek>:
 8007ab2:	b510      	push	{r4, lr}
 8007ab4:	460c      	mov	r4, r1
 8007ab6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007aba:	f000 f855 	bl	8007b68 <_lseek_r>
 8007abe:	1c43      	adds	r3, r0, #1
 8007ac0:	89a3      	ldrh	r3, [r4, #12]
 8007ac2:	bf15      	itete	ne
 8007ac4:	6560      	strne	r0, [r4, #84]	; 0x54
 8007ac6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007aca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007ace:	81a3      	strheq	r3, [r4, #12]
 8007ad0:	bf18      	it	ne
 8007ad2:	81a3      	strhne	r3, [r4, #12]
 8007ad4:	bd10      	pop	{r4, pc}

08007ad6 <__sclose>:
 8007ad6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ada:	f000 b813 	b.w	8007b04 <_close_r>
	...

08007ae0 <_write_r>:
 8007ae0:	b538      	push	{r3, r4, r5, lr}
 8007ae2:	4d07      	ldr	r5, [pc, #28]	; (8007b00 <_write_r+0x20>)
 8007ae4:	4604      	mov	r4, r0
 8007ae6:	4608      	mov	r0, r1
 8007ae8:	4611      	mov	r1, r2
 8007aea:	2200      	movs	r2, #0
 8007aec:	602a      	str	r2, [r5, #0]
 8007aee:	461a      	mov	r2, r3
 8007af0:	f7f9 fd8d 	bl	800160e <_write>
 8007af4:	1c43      	adds	r3, r0, #1
 8007af6:	d102      	bne.n	8007afe <_write_r+0x1e>
 8007af8:	682b      	ldr	r3, [r5, #0]
 8007afa:	b103      	cbz	r3, 8007afe <_write_r+0x1e>
 8007afc:	6023      	str	r3, [r4, #0]
 8007afe:	bd38      	pop	{r3, r4, r5, pc}
 8007b00:	20004440 	.word	0x20004440

08007b04 <_close_r>:
 8007b04:	b538      	push	{r3, r4, r5, lr}
 8007b06:	4d06      	ldr	r5, [pc, #24]	; (8007b20 <_close_r+0x1c>)
 8007b08:	2300      	movs	r3, #0
 8007b0a:	4604      	mov	r4, r0
 8007b0c:	4608      	mov	r0, r1
 8007b0e:	602b      	str	r3, [r5, #0]
 8007b10:	f7f9 fd99 	bl	8001646 <_close>
 8007b14:	1c43      	adds	r3, r0, #1
 8007b16:	d102      	bne.n	8007b1e <_close_r+0x1a>
 8007b18:	682b      	ldr	r3, [r5, #0]
 8007b1a:	b103      	cbz	r3, 8007b1e <_close_r+0x1a>
 8007b1c:	6023      	str	r3, [r4, #0]
 8007b1e:	bd38      	pop	{r3, r4, r5, pc}
 8007b20:	20004440 	.word	0x20004440

08007b24 <_fstat_r>:
 8007b24:	b538      	push	{r3, r4, r5, lr}
 8007b26:	4d07      	ldr	r5, [pc, #28]	; (8007b44 <_fstat_r+0x20>)
 8007b28:	2300      	movs	r3, #0
 8007b2a:	4604      	mov	r4, r0
 8007b2c:	4608      	mov	r0, r1
 8007b2e:	4611      	mov	r1, r2
 8007b30:	602b      	str	r3, [r5, #0]
 8007b32:	f7f9 fd94 	bl	800165e <_fstat>
 8007b36:	1c43      	adds	r3, r0, #1
 8007b38:	d102      	bne.n	8007b40 <_fstat_r+0x1c>
 8007b3a:	682b      	ldr	r3, [r5, #0]
 8007b3c:	b103      	cbz	r3, 8007b40 <_fstat_r+0x1c>
 8007b3e:	6023      	str	r3, [r4, #0]
 8007b40:	bd38      	pop	{r3, r4, r5, pc}
 8007b42:	bf00      	nop
 8007b44:	20004440 	.word	0x20004440

08007b48 <_isatty_r>:
 8007b48:	b538      	push	{r3, r4, r5, lr}
 8007b4a:	4d06      	ldr	r5, [pc, #24]	; (8007b64 <_isatty_r+0x1c>)
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	4604      	mov	r4, r0
 8007b50:	4608      	mov	r0, r1
 8007b52:	602b      	str	r3, [r5, #0]
 8007b54:	f7f9 fd93 	bl	800167e <_isatty>
 8007b58:	1c43      	adds	r3, r0, #1
 8007b5a:	d102      	bne.n	8007b62 <_isatty_r+0x1a>
 8007b5c:	682b      	ldr	r3, [r5, #0]
 8007b5e:	b103      	cbz	r3, 8007b62 <_isatty_r+0x1a>
 8007b60:	6023      	str	r3, [r4, #0]
 8007b62:	bd38      	pop	{r3, r4, r5, pc}
 8007b64:	20004440 	.word	0x20004440

08007b68 <_lseek_r>:
 8007b68:	b538      	push	{r3, r4, r5, lr}
 8007b6a:	4d07      	ldr	r5, [pc, #28]	; (8007b88 <_lseek_r+0x20>)
 8007b6c:	4604      	mov	r4, r0
 8007b6e:	4608      	mov	r0, r1
 8007b70:	4611      	mov	r1, r2
 8007b72:	2200      	movs	r2, #0
 8007b74:	602a      	str	r2, [r5, #0]
 8007b76:	461a      	mov	r2, r3
 8007b78:	f7f9 fd8c 	bl	8001694 <_lseek>
 8007b7c:	1c43      	adds	r3, r0, #1
 8007b7e:	d102      	bne.n	8007b86 <_lseek_r+0x1e>
 8007b80:	682b      	ldr	r3, [r5, #0]
 8007b82:	b103      	cbz	r3, 8007b86 <_lseek_r+0x1e>
 8007b84:	6023      	str	r3, [r4, #0]
 8007b86:	bd38      	pop	{r3, r4, r5, pc}
 8007b88:	20004440 	.word	0x20004440

08007b8c <memmove>:
 8007b8c:	4288      	cmp	r0, r1
 8007b8e:	b510      	push	{r4, lr}
 8007b90:	eb01 0402 	add.w	r4, r1, r2
 8007b94:	d902      	bls.n	8007b9c <memmove+0x10>
 8007b96:	4284      	cmp	r4, r0
 8007b98:	4623      	mov	r3, r4
 8007b9a:	d807      	bhi.n	8007bac <memmove+0x20>
 8007b9c:	1e43      	subs	r3, r0, #1
 8007b9e:	42a1      	cmp	r1, r4
 8007ba0:	d008      	beq.n	8007bb4 <memmove+0x28>
 8007ba2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ba6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007baa:	e7f8      	b.n	8007b9e <memmove+0x12>
 8007bac:	4402      	add	r2, r0
 8007bae:	4601      	mov	r1, r0
 8007bb0:	428a      	cmp	r2, r1
 8007bb2:	d100      	bne.n	8007bb6 <memmove+0x2a>
 8007bb4:	bd10      	pop	{r4, pc}
 8007bb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007bba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007bbe:	e7f7      	b.n	8007bb0 <memmove+0x24>

08007bc0 <__malloc_lock>:
 8007bc0:	4801      	ldr	r0, [pc, #4]	; (8007bc8 <__malloc_lock+0x8>)
 8007bc2:	f7ff b9a7 	b.w	8006f14 <__retarget_lock_acquire_recursive>
 8007bc6:	bf00      	nop
 8007bc8:	20004434 	.word	0x20004434

08007bcc <__malloc_unlock>:
 8007bcc:	4801      	ldr	r0, [pc, #4]	; (8007bd4 <__malloc_unlock+0x8>)
 8007bce:	f7ff b9a2 	b.w	8006f16 <__retarget_lock_release_recursive>
 8007bd2:	bf00      	nop
 8007bd4:	20004434 	.word	0x20004434

08007bd8 <_realloc_r>:
 8007bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bdc:	4680      	mov	r8, r0
 8007bde:	4614      	mov	r4, r2
 8007be0:	460e      	mov	r6, r1
 8007be2:	b921      	cbnz	r1, 8007bee <_realloc_r+0x16>
 8007be4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007be8:	4611      	mov	r1, r2
 8007bea:	f7ff ba67 	b.w	80070bc <_malloc_r>
 8007bee:	b92a      	cbnz	r2, 8007bfc <_realloc_r+0x24>
 8007bf0:	f7ff f9f8 	bl	8006fe4 <_free_r>
 8007bf4:	4625      	mov	r5, r4
 8007bf6:	4628      	mov	r0, r5
 8007bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bfc:	f000 f82e 	bl	8007c5c <_malloc_usable_size_r>
 8007c00:	4284      	cmp	r4, r0
 8007c02:	4607      	mov	r7, r0
 8007c04:	d802      	bhi.n	8007c0c <_realloc_r+0x34>
 8007c06:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007c0a:	d812      	bhi.n	8007c32 <_realloc_r+0x5a>
 8007c0c:	4621      	mov	r1, r4
 8007c0e:	4640      	mov	r0, r8
 8007c10:	f7ff fa54 	bl	80070bc <_malloc_r>
 8007c14:	4605      	mov	r5, r0
 8007c16:	2800      	cmp	r0, #0
 8007c18:	d0ed      	beq.n	8007bf6 <_realloc_r+0x1e>
 8007c1a:	42bc      	cmp	r4, r7
 8007c1c:	4622      	mov	r2, r4
 8007c1e:	4631      	mov	r1, r6
 8007c20:	bf28      	it	cs
 8007c22:	463a      	movcs	r2, r7
 8007c24:	f7fe fe10 	bl	8006848 <memcpy>
 8007c28:	4631      	mov	r1, r6
 8007c2a:	4640      	mov	r0, r8
 8007c2c:	f7ff f9da 	bl	8006fe4 <_free_r>
 8007c30:	e7e1      	b.n	8007bf6 <_realloc_r+0x1e>
 8007c32:	4635      	mov	r5, r6
 8007c34:	e7df      	b.n	8007bf6 <_realloc_r+0x1e>
	...

08007c38 <_read_r>:
 8007c38:	b538      	push	{r3, r4, r5, lr}
 8007c3a:	4d07      	ldr	r5, [pc, #28]	; (8007c58 <_read_r+0x20>)
 8007c3c:	4604      	mov	r4, r0
 8007c3e:	4608      	mov	r0, r1
 8007c40:	4611      	mov	r1, r2
 8007c42:	2200      	movs	r2, #0
 8007c44:	602a      	str	r2, [r5, #0]
 8007c46:	461a      	mov	r2, r3
 8007c48:	f7f9 fcc4 	bl	80015d4 <_read>
 8007c4c:	1c43      	adds	r3, r0, #1
 8007c4e:	d102      	bne.n	8007c56 <_read_r+0x1e>
 8007c50:	682b      	ldr	r3, [r5, #0]
 8007c52:	b103      	cbz	r3, 8007c56 <_read_r+0x1e>
 8007c54:	6023      	str	r3, [r4, #0]
 8007c56:	bd38      	pop	{r3, r4, r5, pc}
 8007c58:	20004440 	.word	0x20004440

08007c5c <_malloc_usable_size_r>:
 8007c5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c60:	1f18      	subs	r0, r3, #4
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	bfbc      	itt	lt
 8007c66:	580b      	ldrlt	r3, [r1, r0]
 8007c68:	18c0      	addlt	r0, r0, r3
 8007c6a:	4770      	bx	lr

08007c6c <_init>:
 8007c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c6e:	bf00      	nop
 8007c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c72:	bc08      	pop	{r3}
 8007c74:	469e      	mov	lr, r3
 8007c76:	4770      	bx	lr

08007c78 <_fini>:
 8007c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c7a:	bf00      	nop
 8007c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c7e:	bc08      	pop	{r3}
 8007c80:	469e      	mov	lr, r3
 8007c82:	4770      	bx	lr

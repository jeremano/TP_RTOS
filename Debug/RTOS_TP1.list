
RTOS_TP1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061bc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  0800638c  0800638c  0001638c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006550  08006550  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08006550  08006550  00016550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006558  08006558  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006558  08006558  00016558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800655c  0800655c  0001655c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08006560  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000043c4  2000007c  080065dc  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004440  080065dc  00024440  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010a91  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bd8  00000000  00000000  00030b3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d48  00000000  00000000  00033718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c10  00000000  00000000  00034460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000287ec  00000000  00000000  00035070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010cab  00000000  00000000  0005d85c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1bcb  00000000  00000000  0006e507  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001600d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d44  00000000  00000000  00160124  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006374 	.word	0x08006374

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000080 	.word	0x20000080
 800020c:	08006374 	.word	0x08006374

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005b4:	b480      	push	{r7}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	4a07      	ldr	r2, [pc, #28]	; (80005e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80005c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	4a06      	ldr	r2, [pc, #24]	; (80005e4 <vApplicationGetIdleTaskMemory+0x30>)
 80005ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2280      	movs	r2, #128	; 0x80
 80005d0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005d2:	bf00      	nop
 80005d4:	3714      	adds	r7, #20
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	2000009c 	.word	0x2000009c
 80005e4:	200000f0 	.word	0x200000f0

080005e8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005e8:	b5b0      	push	{r4, r5, r7, lr}
 80005ea:	b088      	sub	sp, #32
 80005ec:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005ee:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <MX_FREERTOS_Init+0x30>)
 80005f0:	1d3c      	adds	r4, r7, #4
 80005f2:	461d      	mov	r5, r3
 80005f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000600:	1d3b      	adds	r3, r7, #4
 8000602:	2100      	movs	r1, #0
 8000604:	4618      	mov	r0, r3
 8000606:	f003 fac5 	bl	8003b94 <osThreadCreate>
 800060a:	4603      	mov	r3, r0
 800060c:	4a03      	ldr	r2, [pc, #12]	; (800061c <MX_FREERTOS_Init+0x34>)
 800060e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000610:	bf00      	nop
 8000612:	3720      	adds	r7, #32
 8000614:	46bd      	mov	sp, r7
 8000616:	bdb0      	pop	{r4, r5, r7, pc}
 8000618:	08006398 	.word	0x08006398
 800061c:	20000098 	.word	0x20000098

08000620 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000628:	2001      	movs	r0, #1
 800062a:	f003 faff 	bl	8003c2c <osDelay>
 800062e:	e7fb      	b.n	8000628 <StartDefaultTask+0x8>

08000630 <MX_GPIO_Init>:
     PB11   ------> USB_OTG_HS_ULPI_D4
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
void MX_GPIO_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b090      	sub	sp, #64	; 0x40
 8000634:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000636:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]
 8000644:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000646:	4bad      	ldr	r3, [pc, #692]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	4aac      	ldr	r2, [pc, #688]	; (80008fc <MX_GPIO_Init+0x2cc>)
 800064c:	f043 0310 	orr.w	r3, r3, #16
 8000650:	6313      	str	r3, [r2, #48]	; 0x30
 8000652:	4baa      	ldr	r3, [pc, #680]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	f003 0310 	and.w	r3, r3, #16
 800065a:	62bb      	str	r3, [r7, #40]	; 0x28
 800065c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800065e:	4ba7      	ldr	r3, [pc, #668]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	4aa6      	ldr	r2, [pc, #664]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000664:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000668:	6313      	str	r3, [r2, #48]	; 0x30
 800066a:	4ba4      	ldr	r3, [pc, #656]	; (80008fc <MX_GPIO_Init+0x2cc>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000672:	627b      	str	r3, [r7, #36]	; 0x24
 8000674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000676:	4ba1      	ldr	r3, [pc, #644]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	4aa0      	ldr	r2, [pc, #640]	; (80008fc <MX_GPIO_Init+0x2cc>)
 800067c:	f043 0302 	orr.w	r3, r3, #2
 8000680:	6313      	str	r3, [r2, #48]	; 0x30
 8000682:	4b9e      	ldr	r3, [pc, #632]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	f003 0302 	and.w	r3, r3, #2
 800068a:	623b      	str	r3, [r7, #32]
 800068c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800068e:	4b9b      	ldr	r3, [pc, #620]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	4a9a      	ldr	r2, [pc, #616]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000694:	f043 0308 	orr.w	r3, r3, #8
 8000698:	6313      	str	r3, [r2, #48]	; 0x30
 800069a:	4b98      	ldr	r3, [pc, #608]	; (80008fc <MX_GPIO_Init+0x2cc>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	f003 0308 	and.w	r3, r3, #8
 80006a2:	61fb      	str	r3, [r7, #28]
 80006a4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006a6:	4b95      	ldr	r3, [pc, #596]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	4a94      	ldr	r2, [pc, #592]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006ac:	f043 0304 	orr.w	r3, r3, #4
 80006b0:	6313      	str	r3, [r2, #48]	; 0x30
 80006b2:	4b92      	ldr	r3, [pc, #584]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	f003 0304 	and.w	r3, r3, #4
 80006ba:	61bb      	str	r3, [r7, #24]
 80006bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006be:	4b8f      	ldr	r3, [pc, #572]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4a8e      	ldr	r2, [pc, #568]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006c4:	f043 0301 	orr.w	r3, r3, #1
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ca:	4b8c      	ldr	r3, [pc, #560]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	617b      	str	r3, [r7, #20]
 80006d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80006d6:	4b89      	ldr	r3, [pc, #548]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	4a88      	ldr	r2, [pc, #544]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006e0:	6313      	str	r3, [r2, #48]	; 0x30
 80006e2:	4b86      	ldr	r3, [pc, #536]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80006ea:	613b      	str	r3, [r7, #16]
 80006ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80006ee:	4b83      	ldr	r3, [pc, #524]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	4a82      	ldr	r2, [pc, #520]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006f8:	6313      	str	r3, [r2, #48]	; 0x30
 80006fa:	4b80      	ldr	r3, [pc, #512]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000706:	4b7d      	ldr	r3, [pc, #500]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a7c      	ldr	r2, [pc, #496]	; (80008fc <MX_GPIO_Init+0x2cc>)
 800070c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b7a      	ldr	r3, [pc, #488]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800071a:	60bb      	str	r3, [r7, #8]
 800071c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800071e:	4b77      	ldr	r3, [pc, #476]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a76      	ldr	r2, [pc, #472]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000724:	f043 0320 	orr.w	r3, r3, #32
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b74      	ldr	r3, [pc, #464]	; (80008fc <MX_GPIO_Init+0x2cc>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0320 	and.w	r3, r3, #32
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000736:	4b71      	ldr	r3, [pc, #452]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a70      	ldr	r2, [pc, #448]	; (80008fc <MX_GPIO_Init+0x2cc>)
 800073c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b6e      	ldr	r3, [pc, #440]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800074a:	603b      	str	r3, [r7, #0]
 800074c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800074e:	2201      	movs	r2, #1
 8000750:	2120      	movs	r1, #32
 8000752:	486b      	ldr	r0, [pc, #428]	; (8000900 <MX_GPIO_Init+0x2d0>)
 8000754:	f001 fb68 	bl	8001e28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LED_Green_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8000758:	2200      	movs	r2, #0
 800075a:	f241 010e 	movw	r1, #4110	; 0x100e
 800075e:	4869      	ldr	r0, [pc, #420]	; (8000904 <MX_GPIO_Init+0x2d4>)
 8000760:	f001 fb62 	bl	8001e28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000764:	2200      	movs	r2, #0
 8000766:	2108      	movs	r1, #8
 8000768:	4867      	ldr	r0, [pc, #412]	; (8000908 <MX_GPIO_Init+0x2d8>)
 800076a:	f001 fb5d 	bl	8001e28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 800076e:	2200      	movs	r2, #0
 8000770:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000774:	4865      	ldr	r0, [pc, #404]	; (800090c <MX_GPIO_Init+0x2dc>)
 8000776:	f001 fb57 	bl	8001e28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	21c8      	movs	r1, #200	; 0xc8
 800077e:	4864      	ldr	r0, [pc, #400]	; (8000910 <MX_GPIO_Init+0x2e0>)
 8000780:	f001 fb52 	bl	8001e28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 8000784:	2310      	movs	r3, #16
 8000786:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000788:	2302      	movs	r3, #2
 800078a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	2300      	movs	r3, #0
 800078e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000790:	2300      	movs	r3, #0
 8000792:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000794:	230e      	movs	r3, #14
 8000796:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8000798:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800079c:	4619      	mov	r1, r3
 800079e:	485d      	ldr	r0, [pc, #372]	; (8000914 <MX_GPIO_Init+0x2e4>)
 80007a0:	f001 f996 	bl	8001ad0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80007a4:	2308      	movs	r3, #8
 80007a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007a8:	2300      	movs	r3, #0
 80007aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007b4:	4619      	mov	r1, r3
 80007b6:	4857      	ldr	r0, [pc, #348]	; (8000914 <MX_GPIO_Init+0x2e4>)
 80007b8:	f001 f98a 	bl	8001ad0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80007bc:	2304      	movs	r3, #4
 80007be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c0:	2302      	movs	r3, #2
 80007c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007c8:	2303      	movs	r3, #3
 80007ca:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80007cc:	2309      	movs	r3, #9
 80007ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80007d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007d4:	4619      	mov	r1, r3
 80007d6:	484f      	ldr	r0, [pc, #316]	; (8000914 <MX_GPIO_Init+0x2e4>)
 80007d8:	f001 f97a 	bl	8001ad0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80007dc:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80007e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e2:	2302      	movs	r3, #2
 80007e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ea:	2303      	movs	r3, #3
 80007ec:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007ee:	230b      	movs	r3, #11
 80007f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007f6:	4619      	mov	r1, r3
 80007f8:	4845      	ldr	r0, [pc, #276]	; (8000910 <MX_GPIO_Init+0x2e0>)
 80007fa:	f001 f969 	bl	8001ad0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80007fe:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000802:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000804:	2302      	movs	r3, #2
 8000806:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800080c:	2303      	movs	r3, #3
 800080e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000810:	230c      	movs	r3, #12
 8000812:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000814:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000818:	4619      	mov	r1, r3
 800081a:	483e      	ldr	r0, [pc, #248]	; (8000914 <MX_GPIO_Init+0x2e4>)
 800081c:	f001 f958 	bl	8001ad0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8000820:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000824:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000826:	2312      	movs	r3, #18
 8000828:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082e:	2300      	movs	r3, #0
 8000830:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000832:	2304      	movs	r3, #4
 8000834:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000836:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800083a:	4619      	mov	r1, r3
 800083c:	4836      	ldr	r0, [pc, #216]	; (8000918 <MX_GPIO_Init+0x2e8>)
 800083e:	f001 f947 	bl	8001ad0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8000842:	f643 4321 	movw	r3, #15393	; 0x3c21
 8000846:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000848:	2302      	movs	r3, #2
 800084a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	2300      	movs	r3, #0
 800084e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000850:	2303      	movs	r3, #3
 8000852:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000854:	230a      	movs	r3, #10
 8000856:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000858:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800085c:	4619      	mov	r1, r3
 800085e:	482e      	ldr	r0, [pc, #184]	; (8000918 <MX_GPIO_Init+0x2e8>)
 8000860:	f001 f936 	bl	8001ad0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8000864:	2310      	movs	r3, #16
 8000866:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000868:	2302      	movs	r3, #2
 800086a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000870:	2300      	movs	r3, #0
 8000872:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000874:	2302      	movs	r3, #2
 8000876:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8000878:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800087c:	4619      	mov	r1, r3
 800087e:	4826      	ldr	r0, [pc, #152]	; (8000918 <MX_GPIO_Init+0x2e8>)
 8000880:	f001 f926 	bl	8001ad0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8000884:	2380      	movs	r3, #128	; 0x80
 8000886:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000888:	2302      	movs	r3, #2
 800088a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000890:	2300      	movs	r3, #0
 8000892:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8000894:	2308      	movs	r3, #8
 8000896:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8000898:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800089c:	4619      	mov	r1, r3
 800089e:	4818      	ldr	r0, [pc, #96]	; (8000900 <MX_GPIO_Init+0x2d0>)
 80008a0:	f001 f916 	bl	8001ad0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 80008a4:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80008a8:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008aa:	2302      	movs	r3, #2
 80008ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b2:	2303      	movs	r3, #3
 80008b4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80008b6:	230c      	movs	r3, #12
 80008b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008be:	4619      	mov	r1, r3
 80008c0:	4816      	ldr	r0, [pc, #88]	; (800091c <MX_GPIO_Init+0x2ec>)
 80008c2:	f001 f905 	bl	8001ad0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80008c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008cc:	2302      	movs	r3, #2
 80008ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d4:	2300      	movs	r3, #0
 80008d6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80008d8:	2301      	movs	r3, #1
 80008da:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 80008dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008e0:	4619      	mov	r1, r3
 80008e2:	480f      	ldr	r0, [pc, #60]	; (8000920 <MX_GPIO_Init+0x2f0>)
 80008e4:	f001 f8f4 	bl	8001ad0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80008e8:	2360      	movs	r3, #96	; 0x60
 80008ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ec:	2302      	movs	r3, #2
 80008ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f4:	2300      	movs	r3, #0
 80008f6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80008f8:	230d      	movs	r3, #13
 80008fa:	e013      	b.n	8000924 <MX_GPIO_Init+0x2f4>
 80008fc:	40023800 	.word	0x40023800
 8000900:	40020c00 	.word	0x40020c00
 8000904:	40022000 	.word	0x40022000
 8000908:	40022800 	.word	0x40022800
 800090c:	40021c00 	.word	0x40021c00
 8000910:	40021800 	.word	0x40021800
 8000914:	40021000 	.word	0x40021000
 8000918:	40020400 	.word	0x40020400
 800091c:	40020800 	.word	0x40020800
 8000920:	40020000 	.word	0x40020000
 8000924:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000926:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800092a:	4619      	mov	r1, r3
 800092c:	48bc      	ldr	r0, [pc, #752]	; (8000c20 <MX_GPIO_Init+0x5f0>)
 800092e:	f001 f8cf 	bl	8001ad0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8000932:	2340      	movs	r3, #64	; 0x40
 8000934:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000936:	2302      	movs	r3, #2
 8000938:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800093e:	2303      	movs	r3, #3
 8000940:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000942:	230a      	movs	r3, #10
 8000944:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8000946:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800094a:	4619      	mov	r1, r3
 800094c:	48b5      	ldr	r0, [pc, #724]	; (8000c24 <MX_GPIO_Init+0x5f4>)
 800094e:	f001 f8bf 	bl	8001ad0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8000952:	f248 1333 	movw	r3, #33075	; 0x8133
 8000956:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000958:	2302      	movs	r3, #2
 800095a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000960:	2303      	movs	r3, #3
 8000962:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000964:	230c      	movs	r3, #12
 8000966:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000968:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800096c:	4619      	mov	r1, r3
 800096e:	48ae      	ldr	r0, [pc, #696]	; (8000c28 <MX_GPIO_Init+0x5f8>)
 8000970:	f001 f8ae 	bl	8001ad0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8000974:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8000978:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097a:	2302      	movs	r3, #2
 800097c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2300      	movs	r3, #0
 8000984:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000986:	230e      	movs	r3, #14
 8000988:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800098a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800098e:	4619      	mov	r1, r3
 8000990:	48a6      	ldr	r0, [pc, #664]	; (8000c2c <MX_GPIO_Init+0x5fc>)
 8000992:	f001 f89d 	bl	8001ad0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000996:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800099a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800099c:	2300      	movs	r3, #0
 800099e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80009a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009a8:	4619      	mov	r1, r3
 80009aa:	48a0      	ldr	r0, [pc, #640]	; (8000c2c <MX_GPIO_Init+0x5fc>)
 80009ac:	f001 f890 	bl	8001ad0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80009b0:	2340      	movs	r3, #64	; 0x40
 80009b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009b4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80009be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009c2:	4619      	mov	r1, r3
 80009c4:	489a      	ldr	r0, [pc, #616]	; (8000c30 <MX_GPIO_Init+0x600>)
 80009c6:	f001 f883 	bl	8001ad0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80009ca:	f24c 7303 	movw	r3, #50947	; 0xc703
 80009ce:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d0:	2302      	movs	r3, #2
 80009d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d8:	2303      	movs	r3, #3
 80009da:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009dc:	230c      	movs	r3, #12
 80009de:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009e4:	4619      	mov	r1, r3
 80009e6:	4892      	ldr	r0, [pc, #584]	; (8000c30 <MX_GPIO_Init+0x600>)
 80009e8:	f001 f872 	bl	8001ad0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 80009ec:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80009f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f2:	2302      	movs	r3, #2
 80009f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fa:	2303      	movs	r3, #3
 80009fc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009fe:	230a      	movs	r3, #10
 8000a00:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a06:	4619      	mov	r1, r3
 8000a08:	488a      	ldr	r0, [pc, #552]	; (8000c34 <MX_GPIO_Init+0x604>)
 8000a0a:	f001 f861 	bl	8001ad0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8000a0e:	23f0      	movs	r3, #240	; 0xf0
 8000a10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a12:	2302      	movs	r3, #2
 8000a14:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000a1e:	230a      	movs	r3, #10
 8000a20:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a26:	4619      	mov	r1, r3
 8000a28:	4883      	ldr	r0, [pc, #524]	; (8000c38 <MX_GPIO_Init+0x608>)
 8000a2a:	f001 f851 	bl	8001ad0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PKPin PKPin PKPin PKPin
                           PKPin PKPin PKPin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8000a2e:	23f7      	movs	r3, #247	; 0xf7
 8000a30:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a32:	2302      	movs	r3, #2
 8000a34:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a3e:	230e      	movs	r3, #14
 8000a40:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000a42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a46:	4619      	mov	r1, r3
 8000a48:	487c      	ldr	r0, [pc, #496]	; (8000c3c <MX_GPIO_Init+0x60c>)
 8000a4a:	f001 f841 	bl	8001ad0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8000a4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a54:	2302      	movs	r3, #2
 8000a56:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000a60:	2309      	movs	r3, #9
 8000a62:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8000a64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a68:	4619      	mov	r1, r3
 8000a6a:	486f      	ldr	r0, [pc, #444]	; (8000c28 <MX_GPIO_Init+0x5f8>)
 8000a6c:	f001 f830 	bl	8001ad0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8000a70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a76:	2302      	movs	r3, #2
 8000a78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000a82:	230a      	movs	r3, #10
 8000a84:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8000a86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4866      	ldr	r0, [pc, #408]	; (8000c28 <MX_GPIO_Init+0x5f8>)
 8000a8e:	f001 f81f 	bl	8001ad0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a92:	2320      	movs	r3, #32
 8000a94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a96:	2301      	movs	r3, #1
 8000a98:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000aa2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4861      	ldr	r0, [pc, #388]	; (8000c30 <MX_GPIO_Init+0x600>)
 8000aaa:	f001 f811 	bl	8001ad0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000aae:	2308      	movs	r3, #8
 8000ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aba:	2300      	movs	r3, #0
 8000abc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000abe:	230d      	movs	r3, #13
 8000ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000ac2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4859      	ldr	r0, [pc, #356]	; (8000c30 <MX_GPIO_Init+0x600>)
 8000aca:	f001 f801 	bl	8001ad0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LED_Green_Pin|LCD_DISP_Pin;
 8000ace:	f241 030e 	movw	r3, #4110	; 0x100e
 8000ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000adc:	2300      	movs	r3, #0
 8000ade:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000ae0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4854      	ldr	r0, [pc, #336]	; (8000c38 <MX_GPIO_Init+0x608>)
 8000ae8:	f000 fff2 	bl	8001ad0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000aec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000af0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af2:	2300      	movs	r3, #0
 8000af4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000afa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000afe:	4619      	mov	r1, r3
 8000b00:	484f      	ldr	r0, [pc, #316]	; (8000c40 <MX_GPIO_Init+0x610>)
 8000b02:	f000 ffe5 	bl	8001ad0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000b06:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b14:	2303      	movs	r3, #3
 8000b16:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b18:	230c      	movs	r3, #12
 8000b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b20:	4619      	mov	r1, r3
 8000b22:	4848      	ldr	r0, [pc, #288]	; (8000c44 <MX_GPIO_Init+0x614>)
 8000b24:	f000 ffd4 	bl	8001ad0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8000b28:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8000b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b36:	2300      	movs	r3, #0
 8000b38:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b3a:	230e      	movs	r3, #14
 8000b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000b3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b42:	4619      	mov	r1, r3
 8000b44:	483c      	ldr	r0, [pc, #240]	; (8000c38 <MX_GPIO_Init+0x608>)
 8000b46:	f000 ffc3 	bl	8001ad0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000b4a:	2308      	movs	r3, #8
 8000b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b56:	2300      	movs	r3, #0
 8000b58:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000b5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4836      	ldr	r0, [pc, #216]	; (8000c3c <MX_GPIO_Init+0x60c>)
 8000b62:	f000 ffb5 	bl	8001ad0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000b66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b74:	2300      	movs	r3, #0
 8000b76:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000b78:	230d      	movs	r3, #13
 8000b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000b7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b80:	4619      	mov	r1, r3
 8000b82:	4829      	ldr	r0, [pc, #164]	; (8000c28 <MX_GPIO_Init+0x5f8>)
 8000b84:	f000 ffa4 	bl	8001ad0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b88:	2310      	movs	r3, #16
 8000b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4825      	ldr	r0, [pc, #148]	; (8000c30 <MX_GPIO_Init+0x600>)
 8000b9c:	f000 ff98 	bl	8001ad0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8000ba0:	2304      	movs	r3, #4
 8000ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bac:	2303      	movs	r3, #3
 8000bae:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000bb0:	230c      	movs	r3, #12
 8000bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8000bb4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bb8:	4619      	mov	r1, r3
 8000bba:	481d      	ldr	r0, [pc, #116]	; (8000c30 <MX_GPIO_Init+0x600>)
 8000bbc:	f000 ff88 	bl	8001ad0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000bc0:	f248 0304 	movw	r3, #32772	; 0x8004
 8000bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000bce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	481c      	ldr	r0, [pc, #112]	; (8000c48 <MX_GPIO_Init+0x618>)
 8000bd6:	f000 ff7b 	bl	8001ad0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000bda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bde:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be0:	2301      	movs	r3, #1
 8000be2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be8:	2300      	movs	r3, #0
 8000bea:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000bec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4815      	ldr	r0, [pc, #84]	; (8000c48 <MX_GPIO_Init+0x618>)
 8000bf4:	f000 ff6c 	bl	8001ad0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin
                           PHPin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000bf8:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8000bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c06:	2300      	movs	r3, #0
 8000c08:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000c0a:	230d      	movs	r3, #13
 8000c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c12:	4619      	mov	r1, r3
 8000c14:	480c      	ldr	r0, [pc, #48]	; (8000c48 <MX_GPIO_Init+0x618>)
 8000c16:	f000 ff5b 	bl	8001ad0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	e016      	b.n	8000c4c <MX_GPIO_Init+0x61c>
 8000c1e:	bf00      	nop
 8000c20:	40021000 	.word	0x40021000
 8000c24:	40020400 	.word	0x40020400
 8000c28:	40021800 	.word	0x40021800
 8000c2c:	40022400 	.word	0x40022400
 8000c30:	40020c00 	.word	0x40020c00
 8000c34:	40020000 	.word	0x40020000
 8000c38:	40022000 	.word	0x40022000
 8000c3c:	40022800 	.word	0x40022800
 8000c40:	40020800 	.word	0x40020800
 8000c44:	40021400 	.word	0x40021400
 8000c48:	40021c00 	.word	0x40021c00
 8000c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c56:	2300      	movs	r3, #0
 8000c58:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8000c5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c62:	4619      	mov	r1, r3
 8000c64:	48a4      	ldr	r0, [pc, #656]	; (8000ef8 <MX_GPIO_Init+0x8c8>)
 8000c66:	f000 ff33 	bl	8001ad0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PUSH_Pin;
 8000c6a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c70:	2300      	movs	r3, #0
 8000c72:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(PUSH_GPIO_Port, &GPIO_InitStruct);
 8000c78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	489e      	ldr	r0, [pc, #632]	; (8000ef8 <MX_GPIO_Init+0x8c8>)
 8000c80:	f000 ff26 	bl	8001ad0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8000c84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c92:	2300      	movs	r3, #0
 8000c94:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000c96:	2301      	movs	r3, #1
 8000c98:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8000c9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4896      	ldr	r0, [pc, #600]	; (8000efc <MX_GPIO_Init+0x8cc>)
 8000ca2:	f000 ff15 	bl	8001ad0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000ca6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000caa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000cac:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000cb0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000cb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cba:	4619      	mov	r1, r3
 8000cbc:	488e      	ldr	r0, [pc, #568]	; (8000ef8 <MX_GPIO_Init+0x8c8>)
 8000cbe:	f000 ff07 	bl	8001ad0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8000cc2:	23c0      	movs	r3, #192	; 0xc0
 8000cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cce:	2303      	movs	r3, #3
 8000cd0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000cd2:	2308      	movs	r3, #8
 8000cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4888      	ldr	r0, [pc, #544]	; (8000f00 <MX_GPIO_Init+0x8d0>)
 8000cde:	f000 fef7 	bl	8001ad0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000ce2:	2310      	movs	r3, #16
 8000ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cee:	2303      	movs	r3, #3
 8000cf0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000cf2:	230a      	movs	r3, #10
 8000cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000cf6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4881      	ldr	r0, [pc, #516]	; (8000f04 <MX_GPIO_Init+0x8d4>)
 8000cfe:	f000 fee7 	bl	8001ad0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000d02:	2328      	movs	r3, #40	; 0x28
 8000d04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d06:	2302      	movs	r3, #2
 8000d08:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0e:	2303      	movs	r3, #3
 8000d10:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d12:	230c      	movs	r3, #12
 8000d14:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4879      	ldr	r0, [pc, #484]	; (8000f04 <MX_GPIO_Init+0x8d4>)
 8000d1e:	f000 fed7 	bl	8001ad0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8000d22:	23c8      	movs	r3, #200	; 0xc8
 8000d24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d26:	2301      	movs	r3, #1
 8000d28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d36:	4619      	mov	r1, r3
 8000d38:	4873      	ldr	r0, [pc, #460]	; (8000f08 <MX_GPIO_Init+0x8d8>)
 8000d3a:	f000 fec9 	bl	8001ad0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8000d3e:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8000d42:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d44:	2303      	movs	r3, #3
 8000d46:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d50:	4619      	mov	r1, r3
 8000d52:	486e      	ldr	r0, [pc, #440]	; (8000f0c <MX_GPIO_Init+0x8dc>)
 8000d54:	f000 febc 	bl	8001ad0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000d58:	2308      	movs	r3, #8
 8000d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d64:	2303      	movs	r3, #3
 8000d66:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d68:	230c      	movs	r3, #12
 8000d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000d6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d70:	4619      	mov	r1, r3
 8000d72:	4863      	ldr	r0, [pc, #396]	; (8000f00 <MX_GPIO_Init+0x8d0>)
 8000d74:	f000 feac 	bl	8001ad0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8000d78:	2305      	movs	r3, #5
 8000d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d84:	2303      	movs	r3, #3
 8000d86:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000d88:	230a      	movs	r3, #10
 8000d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d90:	4619      	mov	r1, r3
 8000d92:	485b      	ldr	r0, [pc, #364]	; (8000f00 <MX_GPIO_Init+0x8d0>)
 8000d94:	f000 fe9c 	bl	8001ad0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000d98:	2332      	movs	r3, #50	; 0x32
 8000d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da4:	2303      	movs	r3, #3
 8000da6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000da8:	230b      	movs	r3, #11
 8000daa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000db0:	4619      	mov	r1, r3
 8000db2:	4853      	ldr	r0, [pc, #332]	; (8000f00 <MX_GPIO_Init+0x8d0>)
 8000db4:	f000 fe8c 	bl	8001ad0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000db8:	2304      	movs	r3, #4
 8000dba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc4:	2303      	movs	r3, #3
 8000dc6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000dc8:	2309      	movs	r3, #9
 8000dca:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dcc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	484f      	ldr	r0, [pc, #316]	; (8000f10 <MX_GPIO_Init+0x8e0>)
 8000dd4:	f000 fe7c 	bl	8001ad0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8000dd8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dde:	2302      	movs	r3, #2
 8000de0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	2300      	movs	r3, #0
 8000de4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de6:	2303      	movs	r3, #3
 8000de8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000dea:	2309      	movs	r3, #9
 8000dec:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000df2:	4619      	mov	r1, r3
 8000df4:	4847      	ldr	r0, [pc, #284]	; (8000f14 <MX_GPIO_Init+0x8e4>)
 8000df6:	f000 fe6b 	bl	8001ad0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8000dfa:	2304      	movs	r3, #4
 8000dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8000e06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	483e      	ldr	r0, [pc, #248]	; (8000f08 <MX_GPIO_Init+0x8d8>)
 8000e0e:	f000 fe5f 	bl	8001ad0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000e12:	2386      	movs	r3, #134	; 0x86
 8000e14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e16:	2302      	movs	r3, #2
 8000e18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e22:	230b      	movs	r3, #11
 8000e24:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4833      	ldr	r0, [pc, #204]	; (8000efc <MX_GPIO_Init+0x8cc>)
 8000e2e:	f000 fe4f 	bl	8001ad0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8000e32:	2301      	movs	r3, #1
 8000e34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e36:	2303      	movs	r3, #3
 8000e38:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8000e3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e42:	4619      	mov	r1, r3
 8000e44:	482d      	ldr	r0, [pc, #180]	; (8000efc <MX_GPIO_Init+0x8cc>)
 8000e46:	f000 fe43 	bl	8001ad0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8000e4a:	2350      	movs	r3, #80	; 0x50
 8000e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e56:	2300      	movs	r3, #0
 8000e58:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000e5a:	230d      	movs	r3, #13
 8000e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e62:	4619      	mov	r1, r3
 8000e64:	4825      	ldr	r0, [pc, #148]	; (8000efc <MX_GPIO_Init+0x8cc>)
 8000e66:	f000 fe33 	bl	8001ad0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8000e6a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e70:	2312      	movs	r3, #18
 8000e72:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e7c:	2304      	movs	r3, #4
 8000e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000e80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e84:	4619      	mov	r1, r3
 8000e86:	481f      	ldr	r0, [pc, #124]	; (8000f04 <MX_GPIO_Init+0x8d4>)
 8000e88:	f000 fe22 	bl	8001ad0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8000e8c:	2328      	movs	r3, #40	; 0x28
 8000e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e90:	2302      	movs	r3, #2
 8000e92:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e98:	2303      	movs	r3, #3
 8000e9a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000e9c:	230a      	movs	r3, #10
 8000e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4815      	ldr	r0, [pc, #84]	; (8000efc <MX_GPIO_Init+0x8cc>)
 8000ea8:	f000 fe12 	bl	8001ad0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8000eac:	2340      	movs	r3, #64	; 0x40
 8000eae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8000ebc:	2309      	movs	r3, #9
 8000ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8000ec0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	480f      	ldr	r0, [pc, #60]	; (8000f04 <MX_GPIO_Init+0x8d4>)
 8000ec8:	f000 fe02 	bl	8001ad0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8000ecc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eda:	2300      	movs	r3, #0
 8000edc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ede:	2305      	movs	r3, #5
 8000ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4809      	ldr	r0, [pc, #36]	; (8000f10 <MX_GPIO_Init+0x8e0>)
 8000eea:	f000 fdf1 	bl	8001ad0 <HAL_GPIO_Init>

}
 8000eee:	bf00      	nop
 8000ef0:	3740      	adds	r7, #64	; 0x40
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40022000 	.word	0x40022000
 8000efc:	40020000 	.word	0x40020000
 8000f00:	40020800 	.word	0x40020800
 8000f04:	40021c00 	.word	0x40021c00
 8000f08:	40021800 	.word	0x40021800
 8000f0c:	40021400 	.word	0x40021400
 8000f10:	40020400 	.word	0x40020400
 8000f14:	40020c00 	.word	0x40020c00

08000f18 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000f20:	1d39      	adds	r1, r7, #4
 8000f22:	f04f 33ff 	mov.w	r3, #4294967295
 8000f26:	2201      	movs	r2, #1
 8000f28:	4803      	ldr	r0, [pc, #12]	; (8000f38 <__io_putchar+0x20>)
 8000f2a:	f002 f8c9 	bl	80030c0 <HAL_UART_Transmit>
	return ch;
 8000f2e:	687b      	ldr	r3, [r7, #4]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20000658 	.word	0x20000658

08000f3c <fonction>:

int fonction(int argc, char ** argv)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < argc; ++i) {
 8000f46:	2300      	movs	r3, #0
 8000f48:	60fb      	str	r3, [r7, #12]
 8000f4a:	e00c      	b.n	8000f66 <fonction+0x2a>
		printf("argument %d = %s \r\n",i,argv[i]);
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	683a      	ldr	r2, [r7, #0]
 8000f52:	4413      	add	r3, r2
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	461a      	mov	r2, r3
 8000f58:	68f9      	ldr	r1, [r7, #12]
 8000f5a:	4807      	ldr	r0, [pc, #28]	; (8000f78 <fonction+0x3c>)
 8000f5c:	f004 f89a 	bl	8005094 <iprintf>
	for (int i = 0; i < argc; ++i) {
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	3301      	adds	r3, #1
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	68fa      	ldr	r2, [r7, #12]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	429a      	cmp	r2, r3
 8000f6c:	dbee      	blt.n	8000f4c <fonction+0x10>
	}


	return 0;
 8000f6e:	2300      	movs	r3, #0
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	080063b4 	.word	0x080063b4

08000f7c <gereLed>:
		printf("%d\r\n", RxBuffer);
	}
}

void gereLed(void * unused)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]

	HAL_GPIO_TogglePin(LED_Green_GPIO_Port, LED_Green_Pin);
 8000f84:	2102      	movs	r1, #2
 8000f86:	4805      	ldr	r0, [pc, #20]	; (8000f9c <gereLed+0x20>)
 8000f88:	f000 ff67 	bl	8001e5a <HAL_GPIO_TogglePin>
	vTaskDelay(500);
 8000f8c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f90:	f003 f8b0 	bl	80040f4 <vTaskDelay>
}
 8000f94:	bf00      	nop
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40022000 	.word	0x40022000

08000fa0 <shell>:

void shell(void * unused)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
	shell_init();
 8000fa8:	f000 f93c 	bl	8001224 <shell_init>
	shell_run();
 8000fac:	f000 fa08 	bl	80013c0 <shell_run>
}
 8000fb0:	bf00      	nop
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <led>:

int led(int argc, char ** argv)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	6039      	str	r1, [r7, #0]
	activate = 1;
 8000fc2:	4b07      	ldr	r3, [pc, #28]	; (8000fe0 <led+0x28>)
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	601a      	str	r2, [r3, #0]
	delai = 500;
 8000fc8:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <led+0x2c>)
 8000fca:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000fce:	601a      	str	r2, [r3, #0]
	return 0;
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	200002f4 	.word	0x200002f4
 8000fe4:	200002f0 	.word	0x200002f0

08000fe8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fee:	f000 fc2c 	bl	800184a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ff2:	f000 f83f 	bl	8001074 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ff6:	f7ff fb1b 	bl	8000630 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000ffa:	f000 fb4b 	bl	8001694 <MX_USART1_UART_Init>

//****************************************//

//****************************************//

  	xTaskCreate(gereLed, "gereled", 1000, NULL, 6, &xHandle3);
 8000ffe:	4b13      	ldr	r3, [pc, #76]	; (800104c <main+0x64>)
 8001000:	9301      	str	r3, [sp, #4]
 8001002:	2306      	movs	r3, #6
 8001004:	9300      	str	r3, [sp, #0]
 8001006:	2300      	movs	r3, #0
 8001008:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800100c:	4910      	ldr	r1, [pc, #64]	; (8001050 <main+0x68>)
 800100e:	4811      	ldr	r0, [pc, #68]	; (8001054 <main+0x6c>)
 8001010:	f002 ff37 	bl	8003e82 <xTaskCreate>
  	xTaskCreate(shell, "shell", 1000, NULL, 10, &xHandle4);
 8001014:	4b10      	ldr	r3, [pc, #64]	; (8001058 <main+0x70>)
 8001016:	9301      	str	r3, [sp, #4]
 8001018:	230a      	movs	r3, #10
 800101a:	9300      	str	r3, [sp, #0]
 800101c:	2300      	movs	r3, #0
 800101e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001022:	490e      	ldr	r1, [pc, #56]	; (800105c <main+0x74>)
 8001024:	480e      	ldr	r0, [pc, #56]	; (8001060 <main+0x78>)
 8001026:	f002 ff2c 	bl	8003e82 <xTaskCreate>
	shell_add('f', fonction, "Une fonction inutile");
 800102a:	4a0e      	ldr	r2, [pc, #56]	; (8001064 <main+0x7c>)
 800102c:	490e      	ldr	r1, [pc, #56]	; (8001068 <main+0x80>)
 800102e:	2066      	movs	r0, #102	; 0x66
 8001030:	f000 f91a 	bl	8001268 <shell_add>
	shell_add('l', led, "j'allume le led");
 8001034:	4a0d      	ldr	r2, [pc, #52]	; (800106c <main+0x84>)
 8001036:	490e      	ldr	r1, [pc, #56]	; (8001070 <main+0x88>)
 8001038:	206c      	movs	r0, #108	; 0x6c
 800103a:	f000 f915 	bl	8001268 <shell_add>

	//configASSERT(pdTRUE==xReturned);

	vTaskStartScheduler();
 800103e:	f003 f88f 	bl	8004160 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001042:	f7ff fad1 	bl	80005e8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001046:	f002 fd9e 	bl	8003b86 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 800104a:	e7fe      	b.n	800104a <main+0x62>
 800104c:	200002f8 	.word	0x200002f8
 8001050:	08006400 	.word	0x08006400
 8001054:	08000f7d 	.word	0x08000f7d
 8001058:	200002fc 	.word	0x200002fc
 800105c:	08006408 	.word	0x08006408
 8001060:	08000fa1 	.word	0x08000fa1
 8001064:	08006410 	.word	0x08006410
 8001068:	08000f3d 	.word	0x08000f3d
 800106c:	08006428 	.word	0x08006428
 8001070:	08000fb9 	.word	0x08000fb9

08001074 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b094      	sub	sp, #80	; 0x50
 8001078:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800107a:	f107 0320 	add.w	r3, r7, #32
 800107e:	2230      	movs	r2, #48	; 0x30
 8001080:	2100      	movs	r1, #0
 8001082:	4618      	mov	r0, r3
 8001084:	f003 fffe 	bl	8005084 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001088:	f107 030c 	add.w	r3, r7, #12
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]
 8001096:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001098:	4b2b      	ldr	r3, [pc, #172]	; (8001148 <SystemClock_Config+0xd4>)
 800109a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109c:	4a2a      	ldr	r2, [pc, #168]	; (8001148 <SystemClock_Config+0xd4>)
 800109e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010a2:	6413      	str	r3, [r2, #64]	; 0x40
 80010a4:	4b28      	ldr	r3, [pc, #160]	; (8001148 <SystemClock_Config+0xd4>)
 80010a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ac:	60bb      	str	r3, [r7, #8]
 80010ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010b0:	4b26      	ldr	r3, [pc, #152]	; (800114c <SystemClock_Config+0xd8>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a25      	ldr	r2, [pc, #148]	; (800114c <SystemClock_Config+0xd8>)
 80010b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010ba:	6013      	str	r3, [r2, #0]
 80010bc:	4b23      	ldr	r3, [pc, #140]	; (800114c <SystemClock_Config+0xd8>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010c4:	607b      	str	r3, [r7, #4]
 80010c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010c8:	2301      	movs	r3, #1
 80010ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010d2:	2302      	movs	r3, #2
 80010d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80010dc:	2319      	movs	r3, #25
 80010de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 80010e0:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80010e4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010e6:	2302      	movs	r3, #2
 80010e8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80010ea:	2302      	movs	r3, #2
 80010ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ee:	f107 0320 	add.w	r3, r7, #32
 80010f2:	4618      	mov	r0, r3
 80010f4:	f000 ff1c 	bl	8001f30 <HAL_RCC_OscConfig>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80010fe:	f000 f827 	bl	8001150 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001102:	f000 fec5 	bl	8001e90 <HAL_PWREx_EnableOverDrive>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800110c:	f000 f820 	bl	8001150 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001110:	230f      	movs	r3, #15
 8001112:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001114:	2302      	movs	r3, #2
 8001116:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001118:	2300      	movs	r3, #0
 800111a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800111c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001120:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001122:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001126:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001128:	f107 030c 	add.w	r3, r7, #12
 800112c:	2107      	movs	r1, #7
 800112e:	4618      	mov	r0, r3
 8001130:	f001 f9a2 	bl	8002478 <HAL_RCC_ClockConfig>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800113a:	f000 f809 	bl	8001150 <Error_Handler>
  }
}
 800113e:	bf00      	nop
 8001140:	3750      	adds	r7, #80	; 0x50
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40023800 	.word	0x40023800
 800114c:	40007000 	.word	0x40007000

08001150 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001154:	b672      	cpsid	i
}
 8001156:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001158:	e7fe      	b.n	8001158 <Error_Handler+0x8>
	...

0800115c <uart_read>:
static int shell_func_list_size = 0;
static shell_func_t shell_func_list[SHELL_FUNC_LIST_MAX_SIZE];

static char print_buffer[BUFFER_SIZE];

static char uart_read() {
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
	char c;

	HAL_UART_Receive(&UART_DEVICE, (uint8_t*)(&c), 1, HAL_MAX_DELAY);
 8001162:	1df9      	adds	r1, r7, #7
 8001164:	f04f 33ff 	mov.w	r3, #4294967295
 8001168:	2201      	movs	r2, #1
 800116a:	4804      	ldr	r0, [pc, #16]	; (800117c <uart_read+0x20>)
 800116c:	f002 f82b 	bl	80031c6 <HAL_UART_Receive>

	return c;
 8001170:	79fb      	ldrb	r3, [r7, #7]
}
 8001172:	4618      	mov	r0, r3
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20000658 	.word	0x20000658

08001180 <uart_write>:

static int uart_write(char * s, uint16_t size) {
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	460b      	mov	r3, r1
 800118a:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&UART_DEVICE, (uint8_t*)s, size, HAL_MAX_DELAY);
 800118c:	887a      	ldrh	r2, [r7, #2]
 800118e:	f04f 33ff 	mov.w	r3, #4294967295
 8001192:	6879      	ldr	r1, [r7, #4]
 8001194:	4803      	ldr	r0, [pc, #12]	; (80011a4 <uart_write+0x24>)
 8001196:	f001 ff93 	bl	80030c0 <HAL_UART_Transmit>
	return size;
 800119a:	887b      	ldrh	r3, [r7, #2]
}
 800119c:	4618      	mov	r0, r3
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	20000658 	.word	0x20000658

080011a8 <sh_help>:

static int sh_help(int argc, char ** argv) {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af02      	add	r7, sp, #8
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	6039      	str	r1, [r7, #0]
	int i;
	for(i = 0 ; i < shell_func_list_size ; i++) {
 80011b2:	2300      	movs	r3, #0
 80011b4:	60fb      	str	r3, [r7, #12]
 80011b6:	e022      	b.n	80011fe <sh_help+0x56>
		int size;
		size = snprintf (print_buffer, BUFFER_SIZE, "%c: %s\r\n", shell_func_list[i].c, shell_func_list[i].description);
 80011b8:	4916      	ldr	r1, [pc, #88]	; (8001214 <sh_help+0x6c>)
 80011ba:	68fa      	ldr	r2, [r7, #12]
 80011bc:	4613      	mov	r3, r2
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	4413      	add	r3, r2
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	440b      	add	r3, r1
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	4618      	mov	r0, r3
 80011ca:	4912      	ldr	r1, [pc, #72]	; (8001214 <sh_help+0x6c>)
 80011cc:	68fa      	ldr	r2, [r7, #12]
 80011ce:	4613      	mov	r3, r2
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	4413      	add	r3, r2
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	440b      	add	r3, r1
 80011d8:	3308      	adds	r3, #8
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	9300      	str	r3, [sp, #0]
 80011de:	4603      	mov	r3, r0
 80011e0:	4a0d      	ldr	r2, [pc, #52]	; (8001218 <sh_help+0x70>)
 80011e2:	2128      	movs	r1, #40	; 0x28
 80011e4:	480d      	ldr	r0, [pc, #52]	; (800121c <sh_help+0x74>)
 80011e6:	f003 ff6d 	bl	80050c4 <sniprintf>
 80011ea:	60b8      	str	r0, [r7, #8]
		uart_write(print_buffer, size);
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	4619      	mov	r1, r3
 80011f2:	480a      	ldr	r0, [pc, #40]	; (800121c <sh_help+0x74>)
 80011f4:	f7ff ffc4 	bl	8001180 <uart_write>
	for(i = 0 ; i < shell_func_list_size ; i++) {
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	3301      	adds	r3, #1
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	4b08      	ldr	r3, [pc, #32]	; (8001220 <sh_help+0x78>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	68fa      	ldr	r2, [r7, #12]
 8001204:	429a      	cmp	r2, r3
 8001206:	dbd7      	blt.n	80011b8 <sh_help+0x10>
	}

	return 0;
 8001208:	2300      	movs	r3, #0
}
 800120a:	4618      	mov	r0, r3
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20000304 	.word	0x20000304
 8001218:	08006438 	.word	0x08006438
 800121c:	20000604 	.word	0x20000604
 8001220:	20000300 	.word	0x20000300

08001224 <shell_init>:

void shell_init() {
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
	int size = 0;
 800122a:	2300      	movs	r3, #0
 800122c:	607b      	str	r3, [r7, #4]

	size = snprintf (print_buffer, BUFFER_SIZE, "\r\n\r\n===== Monsieur Shell v0.2 =====\r\n");
 800122e:	4a0a      	ldr	r2, [pc, #40]	; (8001258 <shell_init+0x34>)
 8001230:	2128      	movs	r1, #40	; 0x28
 8001232:	480a      	ldr	r0, [pc, #40]	; (800125c <shell_init+0x38>)
 8001234:	f003 ff46 	bl	80050c4 <sniprintf>
 8001238:	6078      	str	r0, [r7, #4]
	uart_write(print_buffer, size);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	b29b      	uxth	r3, r3
 800123e:	4619      	mov	r1, r3
 8001240:	4806      	ldr	r0, [pc, #24]	; (800125c <shell_init+0x38>)
 8001242:	f7ff ff9d 	bl	8001180 <uart_write>

	shell_add('h', sh_help, "Help");
 8001246:	4a06      	ldr	r2, [pc, #24]	; (8001260 <shell_init+0x3c>)
 8001248:	4906      	ldr	r1, [pc, #24]	; (8001264 <shell_init+0x40>)
 800124a:	2068      	movs	r0, #104	; 0x68
 800124c:	f000 f80c 	bl	8001268 <shell_add>
}
 8001250:	bf00      	nop
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	08006444 	.word	0x08006444
 800125c:	20000604 	.word	0x20000604
 8001260:	0800646c 	.word	0x0800646c
 8001264:	080011a9 	.word	0x080011a9

08001268 <shell_add>:

int shell_add(char c, int (* pfunc)(int argc, char ** argv), char * description) {
 8001268:	b480      	push	{r7}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	60b9      	str	r1, [r7, #8]
 8001272:	607a      	str	r2, [r7, #4]
 8001274:	73fb      	strb	r3, [r7, #15]
	if (shell_func_list_size < SHELL_FUNC_LIST_MAX_SIZE) {
 8001276:	4b19      	ldr	r3, [pc, #100]	; (80012dc <shell_add+0x74>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	2b3f      	cmp	r3, #63	; 0x3f
 800127c:	dc26      	bgt.n	80012cc <shell_add+0x64>
		shell_func_list[shell_func_list_size].c = c;
 800127e:	4b17      	ldr	r3, [pc, #92]	; (80012dc <shell_add+0x74>)
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	4917      	ldr	r1, [pc, #92]	; (80012e0 <shell_add+0x78>)
 8001284:	4613      	mov	r3, r2
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	4413      	add	r3, r2
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	440b      	add	r3, r1
 800128e:	7bfa      	ldrb	r2, [r7, #15]
 8001290:	701a      	strb	r2, [r3, #0]
		shell_func_list[shell_func_list_size].func = pfunc;
 8001292:	4b12      	ldr	r3, [pc, #72]	; (80012dc <shell_add+0x74>)
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	4912      	ldr	r1, [pc, #72]	; (80012e0 <shell_add+0x78>)
 8001298:	4613      	mov	r3, r2
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	4413      	add	r3, r2
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	440b      	add	r3, r1
 80012a2:	3304      	adds	r3, #4
 80012a4:	68ba      	ldr	r2, [r7, #8]
 80012a6:	601a      	str	r2, [r3, #0]
		shell_func_list[shell_func_list_size].description = description;
 80012a8:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <shell_add+0x74>)
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	490c      	ldr	r1, [pc, #48]	; (80012e0 <shell_add+0x78>)
 80012ae:	4613      	mov	r3, r2
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	4413      	add	r3, r2
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	440b      	add	r3, r1
 80012b8:	3308      	adds	r3, #8
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	601a      	str	r2, [r3, #0]
		shell_func_list_size++;
 80012be:	4b07      	ldr	r3, [pc, #28]	; (80012dc <shell_add+0x74>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	3301      	adds	r3, #1
 80012c4:	4a05      	ldr	r2, [pc, #20]	; (80012dc <shell_add+0x74>)
 80012c6:	6013      	str	r3, [r2, #0]
		return 0;
 80012c8:	2300      	movs	r3, #0
 80012ca:	e001      	b.n	80012d0 <shell_add+0x68>
	}

	return -1;
 80012cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3714      	adds	r7, #20
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	20000300 	.word	0x20000300
 80012e0:	20000304 	.word	0x20000304

080012e4 <shell_exec>:

static int shell_exec(char * buf) {
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b090      	sub	sp, #64	; 0x40
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
	int i;

	char c = buf[0];
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	int argc;
	char * argv[ARGC_MAX];
	char *p;

	for(i = 0 ; i < shell_func_list_size ; i++) {
 80012f4:	2300      	movs	r3, #0
 80012f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80012f8:	e040      	b.n	800137c <shell_exec+0x98>
		if (shell_func_list[i].c == c) {
 80012fa:	492d      	ldr	r1, [pc, #180]	; (80013b0 <shell_exec+0xcc>)
 80012fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80012fe:	4613      	mov	r3, r2
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	4413      	add	r3, r2
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	440b      	add	r3, r1
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800130e:	429a      	cmp	r2, r3
 8001310:	d131      	bne.n	8001376 <shell_exec+0x92>
			argc = 1;
 8001312:	2301      	movs	r3, #1
 8001314:	63bb      	str	r3, [r7, #56]	; 0x38
			argv[0] = buf;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	60fb      	str	r3, [r7, #12]

			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	637b      	str	r3, [r7, #52]	; 0x34
 800131e:	e013      	b.n	8001348 <shell_exec+0x64>
				if(*p == ' ') {
 8001320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	2b20      	cmp	r3, #32
 8001326:	d10c      	bne.n	8001342 <shell_exec+0x5e>
					*p = '\0';
 8001328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800132a:	2200      	movs	r2, #0
 800132c:	701a      	strb	r2, [r3, #0]
					argv[argc++] = p+1;
 800132e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001330:	1c5a      	adds	r2, r3, #1
 8001332:	63ba      	str	r2, [r7, #56]	; 0x38
 8001334:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001336:	3201      	adds	r2, #1
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	3340      	adds	r3, #64	; 0x40
 800133c:	443b      	add	r3, r7
 800133e:	f843 2c34 	str.w	r2, [r3, #-52]
			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 8001342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001344:	3301      	adds	r3, #1
 8001346:	637b      	str	r3, [r7, #52]	; 0x34
 8001348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d002      	beq.n	8001356 <shell_exec+0x72>
 8001350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001352:	2b07      	cmp	r3, #7
 8001354:	dde4      	ble.n	8001320 <shell_exec+0x3c>
				}
			}

			return shell_func_list[i].func(argc, argv);
 8001356:	4916      	ldr	r1, [pc, #88]	; (80013b0 <shell_exec+0xcc>)
 8001358:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800135a:	4613      	mov	r3, r2
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	4413      	add	r3, r2
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	440b      	add	r3, r1
 8001364:	3304      	adds	r3, #4
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f107 020c 	add.w	r2, r7, #12
 800136c:	4611      	mov	r1, r2
 800136e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001370:	4798      	blx	r3
 8001372:	4603      	mov	r3, r0
 8001374:	e017      	b.n	80013a6 <shell_exec+0xc2>
	for(i = 0 ; i < shell_func_list_size ; i++) {
 8001376:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001378:	3301      	adds	r3, #1
 800137a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800137c:	4b0d      	ldr	r3, [pc, #52]	; (80013b4 <shell_exec+0xd0>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001382:	429a      	cmp	r2, r3
 8001384:	dbb9      	blt.n	80012fa <shell_exec+0x16>
		}
	}

	int size;
	size = snprintf (print_buffer, BUFFER_SIZE, "%c: no such command\r\n", c);
 8001386:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800138a:	4a0b      	ldr	r2, [pc, #44]	; (80013b8 <shell_exec+0xd4>)
 800138c:	2128      	movs	r1, #40	; 0x28
 800138e:	480b      	ldr	r0, [pc, #44]	; (80013bc <shell_exec+0xd8>)
 8001390:	f003 fe98 	bl	80050c4 <sniprintf>
 8001394:	62f8      	str	r0, [r7, #44]	; 0x2c
	uart_write(print_buffer, size);
 8001396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001398:	b29b      	uxth	r3, r3
 800139a:	4619      	mov	r1, r3
 800139c:	4807      	ldr	r0, [pc, #28]	; (80013bc <shell_exec+0xd8>)
 800139e:	f7ff feef 	bl	8001180 <uart_write>
	return -1;
 80013a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3740      	adds	r7, #64	; 0x40
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	20000304 	.word	0x20000304
 80013b4:	20000300 	.word	0x20000300
 80013b8:	08006474 	.word	0x08006474
 80013bc:	20000604 	.word	0x20000604

080013c0 <shell_run>:

static char backspace[] = "\b \b";
static char prompt[] = "> ";

int shell_run() {
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
	int reading = 0;
 80013c6:	2300      	movs	r3, #0
 80013c8:	60fb      	str	r3, [r7, #12]
	int pos = 0;
 80013ca:	2300      	movs	r3, #0
 80013cc:	60bb      	str	r3, [r7, #8]

	static char cmd_buffer[BUFFER_SIZE];

	while (1) {
		uart_write(prompt, 2);
 80013ce:	2102      	movs	r1, #2
 80013d0:	482a      	ldr	r0, [pc, #168]	; (800147c <shell_run+0xbc>)
 80013d2:	f7ff fed5 	bl	8001180 <uart_write>
		reading = 1;
 80013d6:	2301      	movs	r3, #1
 80013d8:	60fb      	str	r3, [r7, #12]

		while(reading) {
 80013da:	e047      	b.n	800146c <shell_run+0xac>
			char c = uart_read();
 80013dc:	f7ff febe 	bl	800115c <uart_read>
 80013e0:	4603      	mov	r3, r0
 80013e2:	70fb      	strb	r3, [r7, #3]
			int size;

			switch (c) {
 80013e4:	78fb      	ldrb	r3, [r7, #3]
 80013e6:	2b08      	cmp	r3, #8
 80013e8:	d025      	beq.n	8001436 <shell_run+0x76>
 80013ea:	2b0d      	cmp	r3, #13
 80013ec:	d12e      	bne.n	800144c <shell_run+0x8c>
			//process RETURN key
			case '\r':
				//case '\n':
				size = snprintf (print_buffer, BUFFER_SIZE, "\r\n");
 80013ee:	4a24      	ldr	r2, [pc, #144]	; (8001480 <shell_run+0xc0>)
 80013f0:	2128      	movs	r1, #40	; 0x28
 80013f2:	4824      	ldr	r0, [pc, #144]	; (8001484 <shell_run+0xc4>)
 80013f4:	f003 fe66 	bl	80050c4 <sniprintf>
 80013f8:	6078      	str	r0, [r7, #4]
				uart_write(print_buffer, size);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	b29b      	uxth	r3, r3
 80013fe:	4619      	mov	r1, r3
 8001400:	4820      	ldr	r0, [pc, #128]	; (8001484 <shell_run+0xc4>)
 8001402:	f7ff febd 	bl	8001180 <uart_write>
				cmd_buffer[pos++] = 0;     //add \0 char at end of string
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	1c5a      	adds	r2, r3, #1
 800140a:	60ba      	str	r2, [r7, #8]
 800140c:	4a1e      	ldr	r2, [pc, #120]	; (8001488 <shell_run+0xc8>)
 800140e:	2100      	movs	r1, #0
 8001410:	54d1      	strb	r1, [r2, r3]
				size = snprintf (print_buffer, BUFFER_SIZE, ":%s\r\n", cmd_buffer);
 8001412:	4b1d      	ldr	r3, [pc, #116]	; (8001488 <shell_run+0xc8>)
 8001414:	4a1d      	ldr	r2, [pc, #116]	; (800148c <shell_run+0xcc>)
 8001416:	2128      	movs	r1, #40	; 0x28
 8001418:	481a      	ldr	r0, [pc, #104]	; (8001484 <shell_run+0xc4>)
 800141a:	f003 fe53 	bl	80050c4 <sniprintf>
 800141e:	6078      	str	r0, [r7, #4]
				uart_write(print_buffer, size);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	b29b      	uxth	r3, r3
 8001424:	4619      	mov	r1, r3
 8001426:	4817      	ldr	r0, [pc, #92]	; (8001484 <shell_run+0xc4>)
 8001428:	f7ff feaa 	bl	8001180 <uart_write>
				reading = 0;        //exit read loop
 800142c:	2300      	movs	r3, #0
 800142e:	60fb      	str	r3, [r7, #12]
				pos = 0;            //reset buffer
 8001430:	2300      	movs	r3, #0
 8001432:	60bb      	str	r3, [r7, #8]
				break;
 8001434:	e01a      	b.n	800146c <shell_run+0xac>
				//backspace
			case '\b':
				if (pos > 0) {      //is there a char to delete?
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	2b00      	cmp	r3, #0
 800143a:	dd16      	ble.n	800146a <shell_run+0xaa>
					pos--;          //remove it in buffer
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	3b01      	subs	r3, #1
 8001440:	60bb      	str	r3, [r7, #8]

					uart_write(backspace, 3);	// delete the char on the terminal
 8001442:	2103      	movs	r1, #3
 8001444:	4812      	ldr	r0, [pc, #72]	; (8001490 <shell_run+0xd0>)
 8001446:	f7ff fe9b 	bl	8001180 <uart_write>
				}
				break;
 800144a:	e00e      	b.n	800146a <shell_run+0xaa>
				//other characters
			default:
				//only store characters if buffer has space
				if (pos < BUFFER_SIZE) {
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	2b27      	cmp	r3, #39	; 0x27
 8001450:	dc0c      	bgt.n	800146c <shell_run+0xac>
					uart_write(&c, 1);
 8001452:	1cfb      	adds	r3, r7, #3
 8001454:	2101      	movs	r1, #1
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff fe92 	bl	8001180 <uart_write>
					cmd_buffer[pos++] = c; //store
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	1c5a      	adds	r2, r3, #1
 8001460:	60ba      	str	r2, [r7, #8]
 8001462:	78f9      	ldrb	r1, [r7, #3]
 8001464:	4a08      	ldr	r2, [pc, #32]	; (8001488 <shell_run+0xc8>)
 8001466:	54d1      	strb	r1, [r2, r3]
 8001468:	e000      	b.n	800146c <shell_run+0xac>
				break;
 800146a:	bf00      	nop
		while(reading) {
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d1b4      	bne.n	80013dc <shell_run+0x1c>
				}
			}
		}
		shell_exec(cmd_buffer);
 8001472:	4805      	ldr	r0, [pc, #20]	; (8001488 <shell_run+0xc8>)
 8001474:	f7ff ff36 	bl	80012e4 <shell_exec>
		uart_write(prompt, 2);
 8001478:	e7a9      	b.n	80013ce <shell_run+0xe>
 800147a:	bf00      	nop
 800147c:	20000004 	.word	0x20000004
 8001480:	0800648c 	.word	0x0800648c
 8001484:	20000604 	.word	0x20000604
 8001488:	2000062c 	.word	0x2000062c
 800148c:	08006490 	.word	0x08006490
 8001490:	20000000 	.word	0x20000000

08001494 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800149a:	4b11      	ldr	r3, [pc, #68]	; (80014e0 <HAL_MspInit+0x4c>)
 800149c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149e:	4a10      	ldr	r2, [pc, #64]	; (80014e0 <HAL_MspInit+0x4c>)
 80014a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014a4:	6413      	str	r3, [r2, #64]	; 0x40
 80014a6:	4b0e      	ldr	r3, [pc, #56]	; (80014e0 <HAL_MspInit+0x4c>)
 80014a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ae:	607b      	str	r3, [r7, #4]
 80014b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014b2:	4b0b      	ldr	r3, [pc, #44]	; (80014e0 <HAL_MspInit+0x4c>)
 80014b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b6:	4a0a      	ldr	r2, [pc, #40]	; (80014e0 <HAL_MspInit+0x4c>)
 80014b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014bc:	6453      	str	r3, [r2, #68]	; 0x44
 80014be:	4b08      	ldr	r3, [pc, #32]	; (80014e0 <HAL_MspInit+0x4c>)
 80014c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014c6:	603b      	str	r3, [r7, #0]
 80014c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014ca:	2200      	movs	r2, #0
 80014cc:	210f      	movs	r1, #15
 80014ce:	f06f 0001 	mvn.w	r0, #1
 80014d2:	f000 fad4 	bl	8001a7e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40023800 	.word	0x40023800

080014e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014e8:	e7fe      	b.n	80014e8 <NMI_Handler+0x4>

080014ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ea:	b480      	push	{r7}
 80014ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ee:	e7fe      	b.n	80014ee <HardFault_Handler+0x4>

080014f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014f4:	e7fe      	b.n	80014f4 <MemManage_Handler+0x4>

080014f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014f6:	b480      	push	{r7}
 80014f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014fa:	e7fe      	b.n	80014fa <BusFault_Handler+0x4>

080014fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001500:	e7fe      	b.n	8001500 <UsageFault_Handler+0x4>

08001502 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001502:	b480      	push	{r7}
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001506:	bf00      	nop
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001514:	f000 f9d6 	bl	80018c4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001518:	f003 f922 	bl	8004760 <xTaskGetSchedulerState>
 800151c:	4603      	mov	r3, r0
 800151e:	2b01      	cmp	r3, #1
 8001520:	d001      	beq.n	8001526 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001522:	f003 fb41 	bl	8004ba8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}

0800152a <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b086      	sub	sp, #24
 800152e:	af00      	add	r7, sp, #0
 8001530:	60f8      	str	r0, [r7, #12]
 8001532:	60b9      	str	r1, [r7, #8]
 8001534:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001536:	2300      	movs	r3, #0
 8001538:	617b      	str	r3, [r7, #20]
 800153a:	e00a      	b.n	8001552 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800153c:	f3af 8000 	nop.w
 8001540:	4601      	mov	r1, r0
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	1c5a      	adds	r2, r3, #1
 8001546:	60ba      	str	r2, [r7, #8]
 8001548:	b2ca      	uxtb	r2, r1
 800154a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	3301      	adds	r3, #1
 8001550:	617b      	str	r3, [r7, #20]
 8001552:	697a      	ldr	r2, [r7, #20]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	429a      	cmp	r2, r3
 8001558:	dbf0      	blt.n	800153c <_read+0x12>
	}

return len;
 800155a:	687b      	ldr	r3, [r7, #4]
}
 800155c:	4618      	mov	r0, r3
 800155e:	3718      	adds	r7, #24
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}

08001564 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	60b9      	str	r1, [r7, #8]
 800156e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001570:	2300      	movs	r3, #0
 8001572:	617b      	str	r3, [r7, #20]
 8001574:	e009      	b.n	800158a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	1c5a      	adds	r2, r3, #1
 800157a:	60ba      	str	r2, [r7, #8]
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff fcca 	bl	8000f18 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	3301      	adds	r3, #1
 8001588:	617b      	str	r3, [r7, #20]
 800158a:	697a      	ldr	r2, [r7, #20]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	429a      	cmp	r2, r3
 8001590:	dbf1      	blt.n	8001576 <_write+0x12>
	}
	return len;
 8001592:	687b      	ldr	r3, [r7, #4]
}
 8001594:	4618      	mov	r0, r3
 8001596:	3718      	adds	r7, #24
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <_close>:

int _close(int file)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
	return -1;
 80015a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015c4:	605a      	str	r2, [r3, #4]
	return 0;
 80015c6:	2300      	movs	r3, #0
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <_isatty>:

int _isatty(int file)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
	return 1;
 80015dc:	2301      	movs	r3, #1
}
 80015de:	4618      	mov	r0, r3
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr

080015ea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015ea:	b480      	push	{r7}
 80015ec:	b085      	sub	sp, #20
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	60f8      	str	r0, [r7, #12]
 80015f2:	60b9      	str	r1, [r7, #8]
 80015f4:	607a      	str	r2, [r7, #4]
	return 0;
 80015f6:	2300      	movs	r3, #0
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3714      	adds	r7, #20
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800160c:	4a14      	ldr	r2, [pc, #80]	; (8001660 <_sbrk+0x5c>)
 800160e:	4b15      	ldr	r3, [pc, #84]	; (8001664 <_sbrk+0x60>)
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001618:	4b13      	ldr	r3, [pc, #76]	; (8001668 <_sbrk+0x64>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d102      	bne.n	8001626 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001620:	4b11      	ldr	r3, [pc, #68]	; (8001668 <_sbrk+0x64>)
 8001622:	4a12      	ldr	r2, [pc, #72]	; (800166c <_sbrk+0x68>)
 8001624:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001626:	4b10      	ldr	r3, [pc, #64]	; (8001668 <_sbrk+0x64>)
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4413      	add	r3, r2
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	429a      	cmp	r2, r3
 8001632:	d207      	bcs.n	8001644 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001634:	f003 fcee 	bl	8005014 <__errno>
 8001638:	4603      	mov	r3, r0
 800163a:	220c      	movs	r2, #12
 800163c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800163e:	f04f 33ff 	mov.w	r3, #4294967295
 8001642:	e009      	b.n	8001658 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001644:	4b08      	ldr	r3, [pc, #32]	; (8001668 <_sbrk+0x64>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800164a:	4b07      	ldr	r3, [pc, #28]	; (8001668 <_sbrk+0x64>)
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4413      	add	r3, r2
 8001652:	4a05      	ldr	r2, [pc, #20]	; (8001668 <_sbrk+0x64>)
 8001654:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001656:	68fb      	ldr	r3, [r7, #12]
}
 8001658:	4618      	mov	r0, r3
 800165a:	3718      	adds	r7, #24
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	20050000 	.word	0x20050000
 8001664:	00000400 	.word	0x00000400
 8001668:	20000654 	.word	0x20000654
 800166c:	20004440 	.word	0x20004440

08001670 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001674:	4b06      	ldr	r3, [pc, #24]	; (8001690 <SystemInit+0x20>)
 8001676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800167a:	4a05      	ldr	r2, [pc, #20]	; (8001690 <SystemInit+0x20>)
 800167c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001680:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001684:	bf00      	nop
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	e000ed00 	.word	0xe000ed00

08001694 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001698:	4b14      	ldr	r3, [pc, #80]	; (80016ec <MX_USART1_UART_Init+0x58>)
 800169a:	4a15      	ldr	r2, [pc, #84]	; (80016f0 <MX_USART1_UART_Init+0x5c>)
 800169c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800169e:	4b13      	ldr	r3, [pc, #76]	; (80016ec <MX_USART1_UART_Init+0x58>)
 80016a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016a6:	4b11      	ldr	r3, [pc, #68]	; (80016ec <MX_USART1_UART_Init+0x58>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016ac:	4b0f      	ldr	r3, [pc, #60]	; (80016ec <MX_USART1_UART_Init+0x58>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016b2:	4b0e      	ldr	r3, [pc, #56]	; (80016ec <MX_USART1_UART_Init+0x58>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016b8:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <MX_USART1_UART_Init+0x58>)
 80016ba:	220c      	movs	r2, #12
 80016bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016be:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <MX_USART1_UART_Init+0x58>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016c4:	4b09      	ldr	r3, [pc, #36]	; (80016ec <MX_USART1_UART_Init+0x58>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016ca:	4b08      	ldr	r3, [pc, #32]	; (80016ec <MX_USART1_UART_Init+0x58>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016d0:	4b06      	ldr	r3, [pc, #24]	; (80016ec <MX_USART1_UART_Init+0x58>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016d6:	4805      	ldr	r0, [pc, #20]	; (80016ec <MX_USART1_UART_Init+0x58>)
 80016d8:	f001 fca4 	bl	8003024 <HAL_UART_Init>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80016e2:	f7ff fd35 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20000658 	.word	0x20000658
 80016f0:	40011000 	.word	0x40011000

080016f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b0ac      	sub	sp, #176	; 0xb0
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	605a      	str	r2, [r3, #4]
 8001706:	609a      	str	r2, [r3, #8]
 8001708:	60da      	str	r2, [r3, #12]
 800170a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800170c:	f107 0318 	add.w	r3, r7, #24
 8001710:	2284      	movs	r2, #132	; 0x84
 8001712:	2100      	movs	r1, #0
 8001714:	4618      	mov	r0, r3
 8001716:	f003 fcb5 	bl	8005084 <memset>
  if(uartHandle->Instance==USART1)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a32      	ldr	r2, [pc, #200]	; (80017e8 <HAL_UART_MspInit+0xf4>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d15c      	bne.n	80017de <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001724:	2340      	movs	r3, #64	; 0x40
 8001726:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001728:	2300      	movs	r3, #0
 800172a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800172c:	f107 0318 	add.w	r3, r7, #24
 8001730:	4618      	mov	r0, r3
 8001732:	f001 f887 	bl	8002844 <HAL_RCCEx_PeriphCLKConfig>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800173c:	f7ff fd08 	bl	8001150 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001740:	4b2a      	ldr	r3, [pc, #168]	; (80017ec <HAL_UART_MspInit+0xf8>)
 8001742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001744:	4a29      	ldr	r2, [pc, #164]	; (80017ec <HAL_UART_MspInit+0xf8>)
 8001746:	f043 0310 	orr.w	r3, r3, #16
 800174a:	6453      	str	r3, [r2, #68]	; 0x44
 800174c:	4b27      	ldr	r3, [pc, #156]	; (80017ec <HAL_UART_MspInit+0xf8>)
 800174e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001750:	f003 0310 	and.w	r3, r3, #16
 8001754:	617b      	str	r3, [r7, #20]
 8001756:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001758:	4b24      	ldr	r3, [pc, #144]	; (80017ec <HAL_UART_MspInit+0xf8>)
 800175a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175c:	4a23      	ldr	r2, [pc, #140]	; (80017ec <HAL_UART_MspInit+0xf8>)
 800175e:	f043 0302 	orr.w	r3, r3, #2
 8001762:	6313      	str	r3, [r2, #48]	; 0x30
 8001764:	4b21      	ldr	r3, [pc, #132]	; (80017ec <HAL_UART_MspInit+0xf8>)
 8001766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001768:	f003 0302 	and.w	r3, r3, #2
 800176c:	613b      	str	r3, [r7, #16]
 800176e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001770:	4b1e      	ldr	r3, [pc, #120]	; (80017ec <HAL_UART_MspInit+0xf8>)
 8001772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001774:	4a1d      	ldr	r2, [pc, #116]	; (80017ec <HAL_UART_MspInit+0xf8>)
 8001776:	f043 0301 	orr.w	r3, r3, #1
 800177a:	6313      	str	r3, [r2, #48]	; 0x30
 800177c:	4b1b      	ldr	r3, [pc, #108]	; (80017ec <HAL_UART_MspInit+0xf8>)
 800177e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001780:	f003 0301 	and.w	r3, r3, #1
 8001784:	60fb      	str	r3, [r7, #12]
 8001786:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001788:	2380      	movs	r3, #128	; 0x80
 800178a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178e:	2302      	movs	r3, #2
 8001790:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001794:	2300      	movs	r3, #0
 8001796:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179a:	2300      	movs	r3, #0
 800179c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017a0:	2307      	movs	r3, #7
 80017a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80017a6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017aa:	4619      	mov	r1, r3
 80017ac:	4810      	ldr	r0, [pc, #64]	; (80017f0 <HAL_UART_MspInit+0xfc>)
 80017ae:	f000 f98f 	bl	8001ad0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80017b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ba:	2302      	movs	r3, #2
 80017bc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c0:	2300      	movs	r3, #0
 80017c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c6:	2300      	movs	r3, #0
 80017c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017cc:	2307      	movs	r3, #7
 80017ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80017d2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017d6:	4619      	mov	r1, r3
 80017d8:	4806      	ldr	r0, [pc, #24]	; (80017f4 <HAL_UART_MspInit+0x100>)
 80017da:	f000 f979 	bl	8001ad0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80017de:	bf00      	nop
 80017e0:	37b0      	adds	r7, #176	; 0xb0
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40011000 	.word	0x40011000
 80017ec:	40023800 	.word	0x40023800
 80017f0:	40020400 	.word	0x40020400
 80017f4:	40020000 	.word	0x40020000

080017f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001830 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017fc:	480d      	ldr	r0, [pc, #52]	; (8001834 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017fe:	490e      	ldr	r1, [pc, #56]	; (8001838 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001800:	4a0e      	ldr	r2, [pc, #56]	; (800183c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001802:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001804:	e002      	b.n	800180c <LoopCopyDataInit>

08001806 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001806:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001808:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800180a:	3304      	adds	r3, #4

0800180c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800180c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800180e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001810:	d3f9      	bcc.n	8001806 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001812:	4a0b      	ldr	r2, [pc, #44]	; (8001840 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001814:	4c0b      	ldr	r4, [pc, #44]	; (8001844 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001816:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001818:	e001      	b.n	800181e <LoopFillZerobss>

0800181a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800181a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800181c:	3204      	adds	r2, #4

0800181e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800181e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001820:	d3fb      	bcc.n	800181a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001822:	f7ff ff25 	bl	8001670 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001826:	f003 fbfb 	bl	8005020 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800182a:	f7ff fbdd 	bl	8000fe8 <main>
  bx  lr    
 800182e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001830:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001834:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001838:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 800183c:	08006560 	.word	0x08006560
  ldr r2, =_sbss
 8001840:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001844:	20004440 	.word	0x20004440

08001848 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001848:	e7fe      	b.n	8001848 <ADC_IRQHandler>

0800184a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800184e:	2003      	movs	r0, #3
 8001850:	f000 f90a 	bl	8001a68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001854:	200f      	movs	r0, #15
 8001856:	f000 f805 	bl	8001864 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800185a:	f7ff fe1b 	bl	8001494 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800185e:	2300      	movs	r3, #0
}
 8001860:	4618      	mov	r0, r3
 8001862:	bd80      	pop	{r7, pc}

08001864 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800186c:	4b12      	ldr	r3, [pc, #72]	; (80018b8 <HAL_InitTick+0x54>)
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	4b12      	ldr	r3, [pc, #72]	; (80018bc <HAL_InitTick+0x58>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	4619      	mov	r1, r3
 8001876:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800187a:	fbb3 f3f1 	udiv	r3, r3, r1
 800187e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001882:	4618      	mov	r0, r3
 8001884:	f000 f917 	bl	8001ab6 <HAL_SYSTICK_Config>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e00e      	b.n	80018b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2b0f      	cmp	r3, #15
 8001896:	d80a      	bhi.n	80018ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001898:	2200      	movs	r2, #0
 800189a:	6879      	ldr	r1, [r7, #4]
 800189c:	f04f 30ff 	mov.w	r0, #4294967295
 80018a0:	f000 f8ed 	bl	8001a7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018a4:	4a06      	ldr	r2, [pc, #24]	; (80018c0 <HAL_InitTick+0x5c>)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018aa:	2300      	movs	r3, #0
 80018ac:	e000      	b.n	80018b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3708      	adds	r7, #8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	20000008 	.word	0x20000008
 80018bc:	20000010 	.word	0x20000010
 80018c0:	2000000c 	.word	0x2000000c

080018c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018c8:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <HAL_IncTick+0x20>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	461a      	mov	r2, r3
 80018ce:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <HAL_IncTick+0x24>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4413      	add	r3, r2
 80018d4:	4a04      	ldr	r2, [pc, #16]	; (80018e8 <HAL_IncTick+0x24>)
 80018d6:	6013      	str	r3, [r2, #0]
}
 80018d8:	bf00      	nop
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	20000010 	.word	0x20000010
 80018e8:	200006e0 	.word	0x200006e0

080018ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  return uwTick;
 80018f0:	4b03      	ldr	r3, [pc, #12]	; (8001900 <HAL_GetTick+0x14>)
 80018f2:	681b      	ldr	r3, [r3, #0]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	200006e0 	.word	0x200006e0

08001904 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f003 0307 	and.w	r3, r3, #7
 8001912:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001914:	4b0b      	ldr	r3, [pc, #44]	; (8001944 <__NVIC_SetPriorityGrouping+0x40>)
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800191a:	68ba      	ldr	r2, [r7, #8]
 800191c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001920:	4013      	ands	r3, r2
 8001922:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800192c:	4b06      	ldr	r3, [pc, #24]	; (8001948 <__NVIC_SetPriorityGrouping+0x44>)
 800192e:	4313      	orrs	r3, r2
 8001930:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001932:	4a04      	ldr	r2, [pc, #16]	; (8001944 <__NVIC_SetPriorityGrouping+0x40>)
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	60d3      	str	r3, [r2, #12]
}
 8001938:	bf00      	nop
 800193a:	3714      	adds	r7, #20
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	e000ed00 	.word	0xe000ed00
 8001948:	05fa0000 	.word	0x05fa0000

0800194c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001950:	4b04      	ldr	r3, [pc, #16]	; (8001964 <__NVIC_GetPriorityGrouping+0x18>)
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	0a1b      	lsrs	r3, r3, #8
 8001956:	f003 0307 	and.w	r3, r3, #7
}
 800195a:	4618      	mov	r0, r3
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	e000ed00 	.word	0xe000ed00

08001968 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	6039      	str	r1, [r7, #0]
 8001972:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001978:	2b00      	cmp	r3, #0
 800197a:	db0a      	blt.n	8001992 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	b2da      	uxtb	r2, r3
 8001980:	490c      	ldr	r1, [pc, #48]	; (80019b4 <__NVIC_SetPriority+0x4c>)
 8001982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001986:	0112      	lsls	r2, r2, #4
 8001988:	b2d2      	uxtb	r2, r2
 800198a:	440b      	add	r3, r1
 800198c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001990:	e00a      	b.n	80019a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	b2da      	uxtb	r2, r3
 8001996:	4908      	ldr	r1, [pc, #32]	; (80019b8 <__NVIC_SetPriority+0x50>)
 8001998:	79fb      	ldrb	r3, [r7, #7]
 800199a:	f003 030f 	and.w	r3, r3, #15
 800199e:	3b04      	subs	r3, #4
 80019a0:	0112      	lsls	r2, r2, #4
 80019a2:	b2d2      	uxtb	r2, r2
 80019a4:	440b      	add	r3, r1
 80019a6:	761a      	strb	r2, [r3, #24]
}
 80019a8:	bf00      	nop
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr
 80019b4:	e000e100 	.word	0xe000e100
 80019b8:	e000ed00 	.word	0xe000ed00

080019bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019bc:	b480      	push	{r7}
 80019be:	b089      	sub	sp, #36	; 0x24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f003 0307 	and.w	r3, r3, #7
 80019ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	f1c3 0307 	rsb	r3, r3, #7
 80019d6:	2b04      	cmp	r3, #4
 80019d8:	bf28      	it	cs
 80019da:	2304      	movcs	r3, #4
 80019dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	3304      	adds	r3, #4
 80019e2:	2b06      	cmp	r3, #6
 80019e4:	d902      	bls.n	80019ec <NVIC_EncodePriority+0x30>
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	3b03      	subs	r3, #3
 80019ea:	e000      	b.n	80019ee <NVIC_EncodePriority+0x32>
 80019ec:	2300      	movs	r3, #0
 80019ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f0:	f04f 32ff 	mov.w	r2, #4294967295
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	fa02 f303 	lsl.w	r3, r2, r3
 80019fa:	43da      	mvns	r2, r3
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	401a      	ands	r2, r3
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a04:	f04f 31ff 	mov.w	r1, #4294967295
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a0e:	43d9      	mvns	r1, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a14:	4313      	orrs	r3, r2
         );
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3724      	adds	r7, #36	; 0x24
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
	...

08001a24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a34:	d301      	bcc.n	8001a3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a36:	2301      	movs	r3, #1
 8001a38:	e00f      	b.n	8001a5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a3a:	4a0a      	ldr	r2, [pc, #40]	; (8001a64 <SysTick_Config+0x40>)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a42:	210f      	movs	r1, #15
 8001a44:	f04f 30ff 	mov.w	r0, #4294967295
 8001a48:	f7ff ff8e 	bl	8001968 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a4c:	4b05      	ldr	r3, [pc, #20]	; (8001a64 <SysTick_Config+0x40>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a52:	4b04      	ldr	r3, [pc, #16]	; (8001a64 <SysTick_Config+0x40>)
 8001a54:	2207      	movs	r2, #7
 8001a56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	e000e010 	.word	0xe000e010

08001a68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f7ff ff47 	bl	8001904 <__NVIC_SetPriorityGrouping>
}
 8001a76:	bf00      	nop
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b086      	sub	sp, #24
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	4603      	mov	r3, r0
 8001a86:	60b9      	str	r1, [r7, #8]
 8001a88:	607a      	str	r2, [r7, #4]
 8001a8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a90:	f7ff ff5c 	bl	800194c <__NVIC_GetPriorityGrouping>
 8001a94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	68b9      	ldr	r1, [r7, #8]
 8001a9a:	6978      	ldr	r0, [r7, #20]
 8001a9c:	f7ff ff8e 	bl	80019bc <NVIC_EncodePriority>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aa6:	4611      	mov	r1, r2
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff ff5d 	bl	8001968 <__NVIC_SetPriority>
}
 8001aae:	bf00      	nop
 8001ab0:	3718      	adds	r7, #24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b082      	sub	sp, #8
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f7ff ffb0 	bl	8001a24 <SysTick_Config>
 8001ac4:	4603      	mov	r3, r0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
	...

08001ad0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b089      	sub	sp, #36	; 0x24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001ada:	2300      	movs	r3, #0
 8001adc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001aea:	2300      	movs	r3, #0
 8001aec:	61fb      	str	r3, [r7, #28]
 8001aee:	e175      	b.n	8001ddc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001af0:	2201      	movs	r2, #1
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	697a      	ldr	r2, [r7, #20]
 8001b00:	4013      	ands	r3, r2
 8001b02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b04:	693a      	ldr	r2, [r7, #16]
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	f040 8164 	bne.w	8001dd6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f003 0303 	and.w	r3, r3, #3
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d005      	beq.n	8001b26 <HAL_GPIO_Init+0x56>
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f003 0303 	and.w	r3, r3, #3
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d130      	bne.n	8001b88 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	2203      	movs	r2, #3
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	43db      	mvns	r3, r3
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	68da      	ldr	r2, [r3, #12]
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	43db      	mvns	r3, r3
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	091b      	lsrs	r3, r3, #4
 8001b72:	f003 0201 	and.w	r2, r3, #1
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f003 0303 	and.w	r3, r3, #3
 8001b90:	2b03      	cmp	r3, #3
 8001b92:	d017      	beq.n	8001bc4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	2203      	movs	r2, #3
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	689a      	ldr	r2, [r3, #8]
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f003 0303 	and.w	r3, r3, #3
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d123      	bne.n	8001c18 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	08da      	lsrs	r2, r3, #3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	3208      	adds	r2, #8
 8001bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	f003 0307 	and.w	r3, r3, #7
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	220f      	movs	r2, #15
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	43db      	mvns	r3, r3
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	691a      	ldr	r2, [r3, #16]
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	f003 0307 	and.w	r3, r3, #7
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	08da      	lsrs	r2, r3, #3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	3208      	adds	r2, #8
 8001c12:	69b9      	ldr	r1, [r7, #24]
 8001c14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	2203      	movs	r2, #3
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	43db      	mvns	r3, r3
 8001c2a:	69ba      	ldr	r2, [r7, #24]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f003 0203 	and.w	r2, r3, #3
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	f000 80be 	beq.w	8001dd6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c5a:	4b66      	ldr	r3, [pc, #408]	; (8001df4 <HAL_GPIO_Init+0x324>)
 8001c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5e:	4a65      	ldr	r2, [pc, #404]	; (8001df4 <HAL_GPIO_Init+0x324>)
 8001c60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c64:	6453      	str	r3, [r2, #68]	; 0x44
 8001c66:	4b63      	ldr	r3, [pc, #396]	; (8001df4 <HAL_GPIO_Init+0x324>)
 8001c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001c72:	4a61      	ldr	r2, [pc, #388]	; (8001df8 <HAL_GPIO_Init+0x328>)
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	089b      	lsrs	r3, r3, #2
 8001c78:	3302      	adds	r3, #2
 8001c7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	f003 0303 	and.w	r3, r3, #3
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	220f      	movs	r2, #15
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	43db      	mvns	r3, r3
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	4013      	ands	r3, r2
 8001c94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a58      	ldr	r2, [pc, #352]	; (8001dfc <HAL_GPIO_Init+0x32c>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d037      	beq.n	8001d0e <HAL_GPIO_Init+0x23e>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a57      	ldr	r2, [pc, #348]	; (8001e00 <HAL_GPIO_Init+0x330>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d031      	beq.n	8001d0a <HAL_GPIO_Init+0x23a>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a56      	ldr	r2, [pc, #344]	; (8001e04 <HAL_GPIO_Init+0x334>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d02b      	beq.n	8001d06 <HAL_GPIO_Init+0x236>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a55      	ldr	r2, [pc, #340]	; (8001e08 <HAL_GPIO_Init+0x338>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d025      	beq.n	8001d02 <HAL_GPIO_Init+0x232>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a54      	ldr	r2, [pc, #336]	; (8001e0c <HAL_GPIO_Init+0x33c>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d01f      	beq.n	8001cfe <HAL_GPIO_Init+0x22e>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a53      	ldr	r2, [pc, #332]	; (8001e10 <HAL_GPIO_Init+0x340>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d019      	beq.n	8001cfa <HAL_GPIO_Init+0x22a>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a52      	ldr	r2, [pc, #328]	; (8001e14 <HAL_GPIO_Init+0x344>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d013      	beq.n	8001cf6 <HAL_GPIO_Init+0x226>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a51      	ldr	r2, [pc, #324]	; (8001e18 <HAL_GPIO_Init+0x348>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d00d      	beq.n	8001cf2 <HAL_GPIO_Init+0x222>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a50      	ldr	r2, [pc, #320]	; (8001e1c <HAL_GPIO_Init+0x34c>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d007      	beq.n	8001cee <HAL_GPIO_Init+0x21e>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a4f      	ldr	r2, [pc, #316]	; (8001e20 <HAL_GPIO_Init+0x350>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d101      	bne.n	8001cea <HAL_GPIO_Init+0x21a>
 8001ce6:	2309      	movs	r3, #9
 8001ce8:	e012      	b.n	8001d10 <HAL_GPIO_Init+0x240>
 8001cea:	230a      	movs	r3, #10
 8001cec:	e010      	b.n	8001d10 <HAL_GPIO_Init+0x240>
 8001cee:	2308      	movs	r3, #8
 8001cf0:	e00e      	b.n	8001d10 <HAL_GPIO_Init+0x240>
 8001cf2:	2307      	movs	r3, #7
 8001cf4:	e00c      	b.n	8001d10 <HAL_GPIO_Init+0x240>
 8001cf6:	2306      	movs	r3, #6
 8001cf8:	e00a      	b.n	8001d10 <HAL_GPIO_Init+0x240>
 8001cfa:	2305      	movs	r3, #5
 8001cfc:	e008      	b.n	8001d10 <HAL_GPIO_Init+0x240>
 8001cfe:	2304      	movs	r3, #4
 8001d00:	e006      	b.n	8001d10 <HAL_GPIO_Init+0x240>
 8001d02:	2303      	movs	r3, #3
 8001d04:	e004      	b.n	8001d10 <HAL_GPIO_Init+0x240>
 8001d06:	2302      	movs	r3, #2
 8001d08:	e002      	b.n	8001d10 <HAL_GPIO_Init+0x240>
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e000      	b.n	8001d10 <HAL_GPIO_Init+0x240>
 8001d0e:	2300      	movs	r3, #0
 8001d10:	69fa      	ldr	r2, [r7, #28]
 8001d12:	f002 0203 	and.w	r2, r2, #3
 8001d16:	0092      	lsls	r2, r2, #2
 8001d18:	4093      	lsls	r3, r2
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001d20:	4935      	ldr	r1, [pc, #212]	; (8001df8 <HAL_GPIO_Init+0x328>)
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	089b      	lsrs	r3, r3, #2
 8001d26:	3302      	adds	r3, #2
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d2e:	4b3d      	ldr	r3, [pc, #244]	; (8001e24 <HAL_GPIO_Init+0x354>)
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	43db      	mvns	r3, r3
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d003      	beq.n	8001d52 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d52:	4a34      	ldr	r2, [pc, #208]	; (8001e24 <HAL_GPIO_Init+0x354>)
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d58:	4b32      	ldr	r3, [pc, #200]	; (8001e24 <HAL_GPIO_Init+0x354>)
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	43db      	mvns	r3, r3
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	4013      	ands	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d003      	beq.n	8001d7c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d7c:	4a29      	ldr	r2, [pc, #164]	; (8001e24 <HAL_GPIO_Init+0x354>)
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d82:	4b28      	ldr	r3, [pc, #160]	; (8001e24 <HAL_GPIO_Init+0x354>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	43db      	mvns	r3, r3
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	4013      	ands	r3, r2
 8001d90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d003      	beq.n	8001da6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001da6:	4a1f      	ldr	r2, [pc, #124]	; (8001e24 <HAL_GPIO_Init+0x354>)
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dac:	4b1d      	ldr	r3, [pc, #116]	; (8001e24 <HAL_GPIO_Init+0x354>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	43db      	mvns	r3, r3
 8001db6:	69ba      	ldr	r2, [r7, #24]
 8001db8:	4013      	ands	r3, r2
 8001dba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d003      	beq.n	8001dd0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001dd0:	4a14      	ldr	r2, [pc, #80]	; (8001e24 <HAL_GPIO_Init+0x354>)
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	61fb      	str	r3, [r7, #28]
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	2b0f      	cmp	r3, #15
 8001de0:	f67f ae86 	bls.w	8001af0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001de4:	bf00      	nop
 8001de6:	bf00      	nop
 8001de8:	3724      	adds	r7, #36	; 0x24
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	40023800 	.word	0x40023800
 8001df8:	40013800 	.word	0x40013800
 8001dfc:	40020000 	.word	0x40020000
 8001e00:	40020400 	.word	0x40020400
 8001e04:	40020800 	.word	0x40020800
 8001e08:	40020c00 	.word	0x40020c00
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	40021400 	.word	0x40021400
 8001e14:	40021800 	.word	0x40021800
 8001e18:	40021c00 	.word	0x40021c00
 8001e1c:	40022000 	.word	0x40022000
 8001e20:	40022400 	.word	0x40022400
 8001e24:	40013c00 	.word	0x40013c00

08001e28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	460b      	mov	r3, r1
 8001e32:	807b      	strh	r3, [r7, #2]
 8001e34:	4613      	mov	r3, r2
 8001e36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e38:	787b      	ldrb	r3, [r7, #1]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d003      	beq.n	8001e46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e3e:	887a      	ldrh	r2, [r7, #2]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001e44:	e003      	b.n	8001e4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001e46:	887b      	ldrh	r3, [r7, #2]
 8001e48:	041a      	lsls	r2, r3, #16
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	619a      	str	r2, [r3, #24]
}
 8001e4e:	bf00      	nop
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr

08001e5a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	b085      	sub	sp, #20
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
 8001e62:	460b      	mov	r3, r1
 8001e64:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	695b      	ldr	r3, [r3, #20]
 8001e6a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e6c:	887a      	ldrh	r2, [r7, #2]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	4013      	ands	r3, r2
 8001e72:	041a      	lsls	r2, r3, #16
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	43d9      	mvns	r1, r3
 8001e78:	887b      	ldrh	r3, [r7, #2]
 8001e7a:	400b      	ands	r3, r1
 8001e7c:	431a      	orrs	r2, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	619a      	str	r2, [r3, #24]
}
 8001e82:	bf00      	nop
 8001e84:	3714      	adds	r7, #20
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
	...

08001e90 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001e96:	2300      	movs	r3, #0
 8001e98:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001e9a:	4b23      	ldr	r3, [pc, #140]	; (8001f28 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9e:	4a22      	ldr	r2, [pc, #136]	; (8001f28 <HAL_PWREx_EnableOverDrive+0x98>)
 8001ea0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ea4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ea6:	4b20      	ldr	r3, [pc, #128]	; (8001f28 <HAL_PWREx_EnableOverDrive+0x98>)
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eae:	603b      	str	r3, [r7, #0]
 8001eb0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001eb2:	4b1e      	ldr	r3, [pc, #120]	; (8001f2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a1d      	ldr	r2, [pc, #116]	; (8001f2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ebc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ebe:	f7ff fd15 	bl	80018ec <HAL_GetTick>
 8001ec2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001ec4:	e009      	b.n	8001eda <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001ec6:	f7ff fd11 	bl	80018ec <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ed4:	d901      	bls.n	8001eda <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e022      	b.n	8001f20 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001eda:	4b14      	ldr	r3, [pc, #80]	; (8001f2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ee2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ee6:	d1ee      	bne.n	8001ec6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001ee8:	4b10      	ldr	r3, [pc, #64]	; (8001f2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a0f      	ldr	r2, [pc, #60]	; (8001f2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001eee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ef2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ef4:	f7ff fcfa 	bl	80018ec <HAL_GetTick>
 8001ef8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001efa:	e009      	b.n	8001f10 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001efc:	f7ff fcf6 	bl	80018ec <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f0a:	d901      	bls.n	8001f10 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e007      	b.n	8001f20 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001f10:	4b06      	ldr	r3, [pc, #24]	; (8001f2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001f1c:	d1ee      	bne.n	8001efc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001f1e:	2300      	movs	r3, #0
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3708      	adds	r7, #8
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	40023800 	.word	0x40023800
 8001f2c:	40007000 	.word	0x40007000

08001f30 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d101      	bne.n	8001f46 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e291      	b.n	800246a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	f000 8087 	beq.w	8002062 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f54:	4b96      	ldr	r3, [pc, #600]	; (80021b0 <HAL_RCC_OscConfig+0x280>)
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	f003 030c 	and.w	r3, r3, #12
 8001f5c:	2b04      	cmp	r3, #4
 8001f5e:	d00c      	beq.n	8001f7a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f60:	4b93      	ldr	r3, [pc, #588]	; (80021b0 <HAL_RCC_OscConfig+0x280>)
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f003 030c 	and.w	r3, r3, #12
 8001f68:	2b08      	cmp	r3, #8
 8001f6a:	d112      	bne.n	8001f92 <HAL_RCC_OscConfig+0x62>
 8001f6c:	4b90      	ldr	r3, [pc, #576]	; (80021b0 <HAL_RCC_OscConfig+0x280>)
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f78:	d10b      	bne.n	8001f92 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f7a:	4b8d      	ldr	r3, [pc, #564]	; (80021b0 <HAL_RCC_OscConfig+0x280>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d06c      	beq.n	8002060 <HAL_RCC_OscConfig+0x130>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d168      	bne.n	8002060 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e26b      	b.n	800246a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f9a:	d106      	bne.n	8001faa <HAL_RCC_OscConfig+0x7a>
 8001f9c:	4b84      	ldr	r3, [pc, #528]	; (80021b0 <HAL_RCC_OscConfig+0x280>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a83      	ldr	r2, [pc, #524]	; (80021b0 <HAL_RCC_OscConfig+0x280>)
 8001fa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fa6:	6013      	str	r3, [r2, #0]
 8001fa8:	e02e      	b.n	8002008 <HAL_RCC_OscConfig+0xd8>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d10c      	bne.n	8001fcc <HAL_RCC_OscConfig+0x9c>
 8001fb2:	4b7f      	ldr	r3, [pc, #508]	; (80021b0 <HAL_RCC_OscConfig+0x280>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a7e      	ldr	r2, [pc, #504]	; (80021b0 <HAL_RCC_OscConfig+0x280>)
 8001fb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fbc:	6013      	str	r3, [r2, #0]
 8001fbe:	4b7c      	ldr	r3, [pc, #496]	; (80021b0 <HAL_RCC_OscConfig+0x280>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a7b      	ldr	r2, [pc, #492]	; (80021b0 <HAL_RCC_OscConfig+0x280>)
 8001fc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fc8:	6013      	str	r3, [r2, #0]
 8001fca:	e01d      	b.n	8002008 <HAL_RCC_OscConfig+0xd8>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fd4:	d10c      	bne.n	8001ff0 <HAL_RCC_OscConfig+0xc0>
 8001fd6:	4b76      	ldr	r3, [pc, #472]	; (80021b0 <HAL_RCC_OscConfig+0x280>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a75      	ldr	r2, [pc, #468]	; (80021b0 <HAL_RCC_OscConfig+0x280>)
 8001fdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fe0:	6013      	str	r3, [r2, #0]
 8001fe2:	4b73      	ldr	r3, [pc, #460]	; (80021b0 <HAL_RCC_OscConfig+0x280>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a72      	ldr	r2, [pc, #456]	; (80021b0 <HAL_RCC_OscConfig+0x280>)
 8001fe8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fec:	6013      	str	r3, [r2, #0]
 8001fee:	e00b      	b.n	8002008 <HAL_RCC_OscConfig+0xd8>
 8001ff0:	4b6f      	ldr	r3, [pc, #444]	; (80021b0 <HAL_RCC_OscConfig+0x280>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a6e      	ldr	r2, [pc, #440]	; (80021b0 <HAL_RCC_OscConfig+0x280>)
 8001ff6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ffa:	6013      	str	r3, [r2, #0]
 8001ffc:	4b6c      	ldr	r3, [pc, #432]	; (80021b0 <HAL_RCC_OscConfig+0x280>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a6b      	ldr	r2, [pc, #428]	; (80021b0 <HAL_RCC_OscConfig+0x280>)
 8002002:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002006:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d013      	beq.n	8002038 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002010:	f7ff fc6c 	bl	80018ec <HAL_GetTick>
 8002014:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002016:	e008      	b.n	800202a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002018:	f7ff fc68 	bl	80018ec <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	2b64      	cmp	r3, #100	; 0x64
 8002024:	d901      	bls.n	800202a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e21f      	b.n	800246a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800202a:	4b61      	ldr	r3, [pc, #388]	; (80021b0 <HAL_RCC_OscConfig+0x280>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d0f0      	beq.n	8002018 <HAL_RCC_OscConfig+0xe8>
 8002036:	e014      	b.n	8002062 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002038:	f7ff fc58 	bl	80018ec <HAL_GetTick>
 800203c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800203e:	e008      	b.n	8002052 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002040:	f7ff fc54 	bl	80018ec <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b64      	cmp	r3, #100	; 0x64
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e20b      	b.n	800246a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002052:	4b57      	ldr	r3, [pc, #348]	; (80021b0 <HAL_RCC_OscConfig+0x280>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d1f0      	bne.n	8002040 <HAL_RCC_OscConfig+0x110>
 800205e:	e000      	b.n	8002062 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002060:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	2b00      	cmp	r3, #0
 800206c:	d069      	beq.n	8002142 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800206e:	4b50      	ldr	r3, [pc, #320]	; (80021b0 <HAL_RCC_OscConfig+0x280>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f003 030c 	and.w	r3, r3, #12
 8002076:	2b00      	cmp	r3, #0
 8002078:	d00b      	beq.n	8002092 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800207a:	4b4d      	ldr	r3, [pc, #308]	; (80021b0 <HAL_RCC_OscConfig+0x280>)
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f003 030c 	and.w	r3, r3, #12
 8002082:	2b08      	cmp	r3, #8
 8002084:	d11c      	bne.n	80020c0 <HAL_RCC_OscConfig+0x190>
 8002086:	4b4a      	ldr	r3, [pc, #296]	; (80021b0 <HAL_RCC_OscConfig+0x280>)
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d116      	bne.n	80020c0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002092:	4b47      	ldr	r3, [pc, #284]	; (80021b0 <HAL_RCC_OscConfig+0x280>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d005      	beq.n	80020aa <HAL_RCC_OscConfig+0x17a>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d001      	beq.n	80020aa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e1df      	b.n	800246a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020aa:	4b41      	ldr	r3, [pc, #260]	; (80021b0 <HAL_RCC_OscConfig+0x280>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	493d      	ldr	r1, [pc, #244]	; (80021b0 <HAL_RCC_OscConfig+0x280>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020be:	e040      	b.n	8002142 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d023      	beq.n	8002110 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020c8:	4b39      	ldr	r3, [pc, #228]	; (80021b0 <HAL_RCC_OscConfig+0x280>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a38      	ldr	r2, [pc, #224]	; (80021b0 <HAL_RCC_OscConfig+0x280>)
 80020ce:	f043 0301 	orr.w	r3, r3, #1
 80020d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d4:	f7ff fc0a 	bl	80018ec <HAL_GetTick>
 80020d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020da:	e008      	b.n	80020ee <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020dc:	f7ff fc06 	bl	80018ec <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e1bd      	b.n	800246a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ee:	4b30      	ldr	r3, [pc, #192]	; (80021b0 <HAL_RCC_OscConfig+0x280>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d0f0      	beq.n	80020dc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020fa:	4b2d      	ldr	r3, [pc, #180]	; (80021b0 <HAL_RCC_OscConfig+0x280>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	4929      	ldr	r1, [pc, #164]	; (80021b0 <HAL_RCC_OscConfig+0x280>)
 800210a:	4313      	orrs	r3, r2
 800210c:	600b      	str	r3, [r1, #0]
 800210e:	e018      	b.n	8002142 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002110:	4b27      	ldr	r3, [pc, #156]	; (80021b0 <HAL_RCC_OscConfig+0x280>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a26      	ldr	r2, [pc, #152]	; (80021b0 <HAL_RCC_OscConfig+0x280>)
 8002116:	f023 0301 	bic.w	r3, r3, #1
 800211a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800211c:	f7ff fbe6 	bl	80018ec <HAL_GetTick>
 8002120:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002122:	e008      	b.n	8002136 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002124:	f7ff fbe2 	bl	80018ec <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b02      	cmp	r3, #2
 8002130:	d901      	bls.n	8002136 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e199      	b.n	800246a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002136:	4b1e      	ldr	r3, [pc, #120]	; (80021b0 <HAL_RCC_OscConfig+0x280>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	2b00      	cmp	r3, #0
 8002140:	d1f0      	bne.n	8002124 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0308 	and.w	r3, r3, #8
 800214a:	2b00      	cmp	r3, #0
 800214c:	d038      	beq.n	80021c0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	695b      	ldr	r3, [r3, #20]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d019      	beq.n	800218a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002156:	4b16      	ldr	r3, [pc, #88]	; (80021b0 <HAL_RCC_OscConfig+0x280>)
 8002158:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800215a:	4a15      	ldr	r2, [pc, #84]	; (80021b0 <HAL_RCC_OscConfig+0x280>)
 800215c:	f043 0301 	orr.w	r3, r3, #1
 8002160:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002162:	f7ff fbc3 	bl	80018ec <HAL_GetTick>
 8002166:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002168:	e008      	b.n	800217c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800216a:	f7ff fbbf 	bl	80018ec <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	2b02      	cmp	r3, #2
 8002176:	d901      	bls.n	800217c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	e176      	b.n	800246a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800217c:	4b0c      	ldr	r3, [pc, #48]	; (80021b0 <HAL_RCC_OscConfig+0x280>)
 800217e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002180:	f003 0302 	and.w	r3, r3, #2
 8002184:	2b00      	cmp	r3, #0
 8002186:	d0f0      	beq.n	800216a <HAL_RCC_OscConfig+0x23a>
 8002188:	e01a      	b.n	80021c0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800218a:	4b09      	ldr	r3, [pc, #36]	; (80021b0 <HAL_RCC_OscConfig+0x280>)
 800218c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800218e:	4a08      	ldr	r2, [pc, #32]	; (80021b0 <HAL_RCC_OscConfig+0x280>)
 8002190:	f023 0301 	bic.w	r3, r3, #1
 8002194:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002196:	f7ff fba9 	bl	80018ec <HAL_GetTick>
 800219a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800219c:	e00a      	b.n	80021b4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800219e:	f7ff fba5 	bl	80018ec <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d903      	bls.n	80021b4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e15c      	b.n	800246a <HAL_RCC_OscConfig+0x53a>
 80021b0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021b4:	4b91      	ldr	r3, [pc, #580]	; (80023fc <HAL_RCC_OscConfig+0x4cc>)
 80021b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1ee      	bne.n	800219e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0304 	and.w	r3, r3, #4
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	f000 80a4 	beq.w	8002316 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021ce:	4b8b      	ldr	r3, [pc, #556]	; (80023fc <HAL_RCC_OscConfig+0x4cc>)
 80021d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d10d      	bne.n	80021f6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80021da:	4b88      	ldr	r3, [pc, #544]	; (80023fc <HAL_RCC_OscConfig+0x4cc>)
 80021dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021de:	4a87      	ldr	r2, [pc, #540]	; (80023fc <HAL_RCC_OscConfig+0x4cc>)
 80021e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021e4:	6413      	str	r3, [r2, #64]	; 0x40
 80021e6:	4b85      	ldr	r3, [pc, #532]	; (80023fc <HAL_RCC_OscConfig+0x4cc>)
 80021e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ee:	60bb      	str	r3, [r7, #8]
 80021f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021f2:	2301      	movs	r3, #1
 80021f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021f6:	4b82      	ldr	r3, [pc, #520]	; (8002400 <HAL_RCC_OscConfig+0x4d0>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d118      	bne.n	8002234 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002202:	4b7f      	ldr	r3, [pc, #508]	; (8002400 <HAL_RCC_OscConfig+0x4d0>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a7e      	ldr	r2, [pc, #504]	; (8002400 <HAL_RCC_OscConfig+0x4d0>)
 8002208:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800220c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800220e:	f7ff fb6d 	bl	80018ec <HAL_GetTick>
 8002212:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002214:	e008      	b.n	8002228 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002216:	f7ff fb69 	bl	80018ec <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	2b64      	cmp	r3, #100	; 0x64
 8002222:	d901      	bls.n	8002228 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e120      	b.n	800246a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002228:	4b75      	ldr	r3, [pc, #468]	; (8002400 <HAL_RCC_OscConfig+0x4d0>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002230:	2b00      	cmp	r3, #0
 8002232:	d0f0      	beq.n	8002216 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	2b01      	cmp	r3, #1
 800223a:	d106      	bne.n	800224a <HAL_RCC_OscConfig+0x31a>
 800223c:	4b6f      	ldr	r3, [pc, #444]	; (80023fc <HAL_RCC_OscConfig+0x4cc>)
 800223e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002240:	4a6e      	ldr	r2, [pc, #440]	; (80023fc <HAL_RCC_OscConfig+0x4cc>)
 8002242:	f043 0301 	orr.w	r3, r3, #1
 8002246:	6713      	str	r3, [r2, #112]	; 0x70
 8002248:	e02d      	b.n	80022a6 <HAL_RCC_OscConfig+0x376>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d10c      	bne.n	800226c <HAL_RCC_OscConfig+0x33c>
 8002252:	4b6a      	ldr	r3, [pc, #424]	; (80023fc <HAL_RCC_OscConfig+0x4cc>)
 8002254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002256:	4a69      	ldr	r2, [pc, #420]	; (80023fc <HAL_RCC_OscConfig+0x4cc>)
 8002258:	f023 0301 	bic.w	r3, r3, #1
 800225c:	6713      	str	r3, [r2, #112]	; 0x70
 800225e:	4b67      	ldr	r3, [pc, #412]	; (80023fc <HAL_RCC_OscConfig+0x4cc>)
 8002260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002262:	4a66      	ldr	r2, [pc, #408]	; (80023fc <HAL_RCC_OscConfig+0x4cc>)
 8002264:	f023 0304 	bic.w	r3, r3, #4
 8002268:	6713      	str	r3, [r2, #112]	; 0x70
 800226a:	e01c      	b.n	80022a6 <HAL_RCC_OscConfig+0x376>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	2b05      	cmp	r3, #5
 8002272:	d10c      	bne.n	800228e <HAL_RCC_OscConfig+0x35e>
 8002274:	4b61      	ldr	r3, [pc, #388]	; (80023fc <HAL_RCC_OscConfig+0x4cc>)
 8002276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002278:	4a60      	ldr	r2, [pc, #384]	; (80023fc <HAL_RCC_OscConfig+0x4cc>)
 800227a:	f043 0304 	orr.w	r3, r3, #4
 800227e:	6713      	str	r3, [r2, #112]	; 0x70
 8002280:	4b5e      	ldr	r3, [pc, #376]	; (80023fc <HAL_RCC_OscConfig+0x4cc>)
 8002282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002284:	4a5d      	ldr	r2, [pc, #372]	; (80023fc <HAL_RCC_OscConfig+0x4cc>)
 8002286:	f043 0301 	orr.w	r3, r3, #1
 800228a:	6713      	str	r3, [r2, #112]	; 0x70
 800228c:	e00b      	b.n	80022a6 <HAL_RCC_OscConfig+0x376>
 800228e:	4b5b      	ldr	r3, [pc, #364]	; (80023fc <HAL_RCC_OscConfig+0x4cc>)
 8002290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002292:	4a5a      	ldr	r2, [pc, #360]	; (80023fc <HAL_RCC_OscConfig+0x4cc>)
 8002294:	f023 0301 	bic.w	r3, r3, #1
 8002298:	6713      	str	r3, [r2, #112]	; 0x70
 800229a:	4b58      	ldr	r3, [pc, #352]	; (80023fc <HAL_RCC_OscConfig+0x4cc>)
 800229c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800229e:	4a57      	ldr	r2, [pc, #348]	; (80023fc <HAL_RCC_OscConfig+0x4cc>)
 80022a0:	f023 0304 	bic.w	r3, r3, #4
 80022a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d015      	beq.n	80022da <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ae:	f7ff fb1d 	bl	80018ec <HAL_GetTick>
 80022b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022b4:	e00a      	b.n	80022cc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022b6:	f7ff fb19 	bl	80018ec <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d901      	bls.n	80022cc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e0ce      	b.n	800246a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022cc:	4b4b      	ldr	r3, [pc, #300]	; (80023fc <HAL_RCC_OscConfig+0x4cc>)
 80022ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022d0:	f003 0302 	and.w	r3, r3, #2
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d0ee      	beq.n	80022b6 <HAL_RCC_OscConfig+0x386>
 80022d8:	e014      	b.n	8002304 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022da:	f7ff fb07 	bl	80018ec <HAL_GetTick>
 80022de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022e0:	e00a      	b.n	80022f8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022e2:	f7ff fb03 	bl	80018ec <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d901      	bls.n	80022f8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e0b8      	b.n	800246a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022f8:	4b40      	ldr	r3, [pc, #256]	; (80023fc <HAL_RCC_OscConfig+0x4cc>)
 80022fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022fc:	f003 0302 	and.w	r3, r3, #2
 8002300:	2b00      	cmp	r3, #0
 8002302:	d1ee      	bne.n	80022e2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002304:	7dfb      	ldrb	r3, [r7, #23]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d105      	bne.n	8002316 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800230a:	4b3c      	ldr	r3, [pc, #240]	; (80023fc <HAL_RCC_OscConfig+0x4cc>)
 800230c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230e:	4a3b      	ldr	r2, [pc, #236]	; (80023fc <HAL_RCC_OscConfig+0x4cc>)
 8002310:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002314:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	699b      	ldr	r3, [r3, #24]
 800231a:	2b00      	cmp	r3, #0
 800231c:	f000 80a4 	beq.w	8002468 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002320:	4b36      	ldr	r3, [pc, #216]	; (80023fc <HAL_RCC_OscConfig+0x4cc>)
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f003 030c 	and.w	r3, r3, #12
 8002328:	2b08      	cmp	r3, #8
 800232a:	d06b      	beq.n	8002404 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	699b      	ldr	r3, [r3, #24]
 8002330:	2b02      	cmp	r3, #2
 8002332:	d149      	bne.n	80023c8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002334:	4b31      	ldr	r3, [pc, #196]	; (80023fc <HAL_RCC_OscConfig+0x4cc>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a30      	ldr	r2, [pc, #192]	; (80023fc <HAL_RCC_OscConfig+0x4cc>)
 800233a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800233e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002340:	f7ff fad4 	bl	80018ec <HAL_GetTick>
 8002344:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002346:	e008      	b.n	800235a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002348:	f7ff fad0 	bl	80018ec <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b02      	cmp	r3, #2
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e087      	b.n	800246a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800235a:	4b28      	ldr	r3, [pc, #160]	; (80023fc <HAL_RCC_OscConfig+0x4cc>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d1f0      	bne.n	8002348 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	69da      	ldr	r2, [r3, #28]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6a1b      	ldr	r3, [r3, #32]
 800236e:	431a      	orrs	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002374:	019b      	lsls	r3, r3, #6
 8002376:	431a      	orrs	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237c:	085b      	lsrs	r3, r3, #1
 800237e:	3b01      	subs	r3, #1
 8002380:	041b      	lsls	r3, r3, #16
 8002382:	431a      	orrs	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002388:	061b      	lsls	r3, r3, #24
 800238a:	4313      	orrs	r3, r2
 800238c:	4a1b      	ldr	r2, [pc, #108]	; (80023fc <HAL_RCC_OscConfig+0x4cc>)
 800238e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002392:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002394:	4b19      	ldr	r3, [pc, #100]	; (80023fc <HAL_RCC_OscConfig+0x4cc>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a18      	ldr	r2, [pc, #96]	; (80023fc <HAL_RCC_OscConfig+0x4cc>)
 800239a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800239e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a0:	f7ff faa4 	bl	80018ec <HAL_GetTick>
 80023a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023a6:	e008      	b.n	80023ba <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023a8:	f7ff faa0 	bl	80018ec <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e057      	b.n	800246a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ba:	4b10      	ldr	r3, [pc, #64]	; (80023fc <HAL_RCC_OscConfig+0x4cc>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d0f0      	beq.n	80023a8 <HAL_RCC_OscConfig+0x478>
 80023c6:	e04f      	b.n	8002468 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023c8:	4b0c      	ldr	r3, [pc, #48]	; (80023fc <HAL_RCC_OscConfig+0x4cc>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a0b      	ldr	r2, [pc, #44]	; (80023fc <HAL_RCC_OscConfig+0x4cc>)
 80023ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d4:	f7ff fa8a 	bl	80018ec <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023dc:	f7ff fa86 	bl	80018ec <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e03d      	b.n	800246a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ee:	4b03      	ldr	r3, [pc, #12]	; (80023fc <HAL_RCC_OscConfig+0x4cc>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1f0      	bne.n	80023dc <HAL_RCC_OscConfig+0x4ac>
 80023fa:	e035      	b.n	8002468 <HAL_RCC_OscConfig+0x538>
 80023fc:	40023800 	.word	0x40023800
 8002400:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002404:	4b1b      	ldr	r3, [pc, #108]	; (8002474 <HAL_RCC_OscConfig+0x544>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	699b      	ldr	r3, [r3, #24]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d028      	beq.n	8002464 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800241c:	429a      	cmp	r2, r3
 800241e:	d121      	bne.n	8002464 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800242a:	429a      	cmp	r2, r3
 800242c:	d11a      	bne.n	8002464 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800242e:	68fa      	ldr	r2, [r7, #12]
 8002430:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002434:	4013      	ands	r3, r2
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800243a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800243c:	4293      	cmp	r3, r2
 800243e:	d111      	bne.n	8002464 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800244a:	085b      	lsrs	r3, r3, #1
 800244c:	3b01      	subs	r3, #1
 800244e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002450:	429a      	cmp	r2, r3
 8002452:	d107      	bne.n	8002464 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800245e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002460:	429a      	cmp	r2, r3
 8002462:	d001      	beq.n	8002468 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e000      	b.n	800246a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	3718      	adds	r7, #24
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	40023800 	.word	0x40023800

08002478 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002482:	2300      	movs	r3, #0
 8002484:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d101      	bne.n	8002490 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e0d0      	b.n	8002632 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002490:	4b6a      	ldr	r3, [pc, #424]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 030f 	and.w	r3, r3, #15
 8002498:	683a      	ldr	r2, [r7, #0]
 800249a:	429a      	cmp	r2, r3
 800249c:	d910      	bls.n	80024c0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800249e:	4b67      	ldr	r3, [pc, #412]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f023 020f 	bic.w	r2, r3, #15
 80024a6:	4965      	ldr	r1, [pc, #404]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ae:	4b63      	ldr	r3, [pc, #396]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 030f 	and.w	r3, r3, #15
 80024b6:	683a      	ldr	r2, [r7, #0]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d001      	beq.n	80024c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e0b8      	b.n	8002632 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0302 	and.w	r3, r3, #2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d020      	beq.n	800250e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0304 	and.w	r3, r3, #4
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d005      	beq.n	80024e4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024d8:	4b59      	ldr	r3, [pc, #356]	; (8002640 <HAL_RCC_ClockConfig+0x1c8>)
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	4a58      	ldr	r2, [pc, #352]	; (8002640 <HAL_RCC_ClockConfig+0x1c8>)
 80024de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80024e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0308 	and.w	r3, r3, #8
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d005      	beq.n	80024fc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024f0:	4b53      	ldr	r3, [pc, #332]	; (8002640 <HAL_RCC_ClockConfig+0x1c8>)
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	4a52      	ldr	r2, [pc, #328]	; (8002640 <HAL_RCC_ClockConfig+0x1c8>)
 80024f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80024fa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024fc:	4b50      	ldr	r3, [pc, #320]	; (8002640 <HAL_RCC_ClockConfig+0x1c8>)
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	494d      	ldr	r1, [pc, #308]	; (8002640 <HAL_RCC_ClockConfig+0x1c8>)
 800250a:	4313      	orrs	r3, r2
 800250c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	2b00      	cmp	r3, #0
 8002518:	d040      	beq.n	800259c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d107      	bne.n	8002532 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002522:	4b47      	ldr	r3, [pc, #284]	; (8002640 <HAL_RCC_ClockConfig+0x1c8>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d115      	bne.n	800255a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e07f      	b.n	8002632 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	2b02      	cmp	r3, #2
 8002538:	d107      	bne.n	800254a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800253a:	4b41      	ldr	r3, [pc, #260]	; (8002640 <HAL_RCC_ClockConfig+0x1c8>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d109      	bne.n	800255a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e073      	b.n	8002632 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800254a:	4b3d      	ldr	r3, [pc, #244]	; (8002640 <HAL_RCC_ClockConfig+0x1c8>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d101      	bne.n	800255a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e06b      	b.n	8002632 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800255a:	4b39      	ldr	r3, [pc, #228]	; (8002640 <HAL_RCC_ClockConfig+0x1c8>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f023 0203 	bic.w	r2, r3, #3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	4936      	ldr	r1, [pc, #216]	; (8002640 <HAL_RCC_ClockConfig+0x1c8>)
 8002568:	4313      	orrs	r3, r2
 800256a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800256c:	f7ff f9be 	bl	80018ec <HAL_GetTick>
 8002570:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002572:	e00a      	b.n	800258a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002574:	f7ff f9ba 	bl	80018ec <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002582:	4293      	cmp	r3, r2
 8002584:	d901      	bls.n	800258a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e053      	b.n	8002632 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800258a:	4b2d      	ldr	r3, [pc, #180]	; (8002640 <HAL_RCC_ClockConfig+0x1c8>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f003 020c 	and.w	r2, r3, #12
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	429a      	cmp	r2, r3
 800259a:	d1eb      	bne.n	8002574 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800259c:	4b27      	ldr	r3, [pc, #156]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 030f 	and.w	r3, r3, #15
 80025a4:	683a      	ldr	r2, [r7, #0]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d210      	bcs.n	80025cc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025aa:	4b24      	ldr	r3, [pc, #144]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f023 020f 	bic.w	r2, r3, #15
 80025b2:	4922      	ldr	r1, [pc, #136]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ba:	4b20      	ldr	r3, [pc, #128]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 030f 	and.w	r3, r3, #15
 80025c2:	683a      	ldr	r2, [r7, #0]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d001      	beq.n	80025cc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e032      	b.n	8002632 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0304 	and.w	r3, r3, #4
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d008      	beq.n	80025ea <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025d8:	4b19      	ldr	r3, [pc, #100]	; (8002640 <HAL_RCC_ClockConfig+0x1c8>)
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	4916      	ldr	r1, [pc, #88]	; (8002640 <HAL_RCC_ClockConfig+0x1c8>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0308 	and.w	r3, r3, #8
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d009      	beq.n	800260a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025f6:	4b12      	ldr	r3, [pc, #72]	; (8002640 <HAL_RCC_ClockConfig+0x1c8>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	490e      	ldr	r1, [pc, #56]	; (8002640 <HAL_RCC_ClockConfig+0x1c8>)
 8002606:	4313      	orrs	r3, r2
 8002608:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800260a:	f000 f821 	bl	8002650 <HAL_RCC_GetSysClockFreq>
 800260e:	4602      	mov	r2, r0
 8002610:	4b0b      	ldr	r3, [pc, #44]	; (8002640 <HAL_RCC_ClockConfig+0x1c8>)
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	091b      	lsrs	r3, r3, #4
 8002616:	f003 030f 	and.w	r3, r3, #15
 800261a:	490a      	ldr	r1, [pc, #40]	; (8002644 <HAL_RCC_ClockConfig+0x1cc>)
 800261c:	5ccb      	ldrb	r3, [r1, r3]
 800261e:	fa22 f303 	lsr.w	r3, r2, r3
 8002622:	4a09      	ldr	r2, [pc, #36]	; (8002648 <HAL_RCC_ClockConfig+0x1d0>)
 8002624:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002626:	4b09      	ldr	r3, [pc, #36]	; (800264c <HAL_RCC_ClockConfig+0x1d4>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4618      	mov	r0, r3
 800262c:	f7ff f91a 	bl	8001864 <HAL_InitTick>

  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3710      	adds	r7, #16
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	40023c00 	.word	0x40023c00
 8002640:	40023800 	.word	0x40023800
 8002644:	080064a0 	.word	0x080064a0
 8002648:	20000008 	.word	0x20000008
 800264c:	2000000c 	.word	0x2000000c

08002650 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002650:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002654:	b090      	sub	sp, #64	; 0x40
 8002656:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002658:	2300      	movs	r3, #0
 800265a:	637b      	str	r3, [r7, #52]	; 0x34
 800265c:	2300      	movs	r3, #0
 800265e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002660:	2300      	movs	r3, #0
 8002662:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8002664:	2300      	movs	r3, #0
 8002666:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002668:	4b59      	ldr	r3, [pc, #356]	; (80027d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f003 030c 	and.w	r3, r3, #12
 8002670:	2b08      	cmp	r3, #8
 8002672:	d00d      	beq.n	8002690 <HAL_RCC_GetSysClockFreq+0x40>
 8002674:	2b08      	cmp	r3, #8
 8002676:	f200 80a1 	bhi.w	80027bc <HAL_RCC_GetSysClockFreq+0x16c>
 800267a:	2b00      	cmp	r3, #0
 800267c:	d002      	beq.n	8002684 <HAL_RCC_GetSysClockFreq+0x34>
 800267e:	2b04      	cmp	r3, #4
 8002680:	d003      	beq.n	800268a <HAL_RCC_GetSysClockFreq+0x3a>
 8002682:	e09b      	b.n	80027bc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002684:	4b53      	ldr	r3, [pc, #332]	; (80027d4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002686:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002688:	e09b      	b.n	80027c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800268a:	4b53      	ldr	r3, [pc, #332]	; (80027d8 <HAL_RCC_GetSysClockFreq+0x188>)
 800268c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800268e:	e098      	b.n	80027c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002690:	4b4f      	ldr	r3, [pc, #316]	; (80027d0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002698:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800269a:	4b4d      	ldr	r3, [pc, #308]	; (80027d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d028      	beq.n	80026f8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026a6:	4b4a      	ldr	r3, [pc, #296]	; (80027d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	099b      	lsrs	r3, r3, #6
 80026ac:	2200      	movs	r2, #0
 80026ae:	623b      	str	r3, [r7, #32]
 80026b0:	627a      	str	r2, [r7, #36]	; 0x24
 80026b2:	6a3b      	ldr	r3, [r7, #32]
 80026b4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80026b8:	2100      	movs	r1, #0
 80026ba:	4b47      	ldr	r3, [pc, #284]	; (80027d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80026bc:	fb03 f201 	mul.w	r2, r3, r1
 80026c0:	2300      	movs	r3, #0
 80026c2:	fb00 f303 	mul.w	r3, r0, r3
 80026c6:	4413      	add	r3, r2
 80026c8:	4a43      	ldr	r2, [pc, #268]	; (80027d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80026ca:	fba0 1202 	umull	r1, r2, r0, r2
 80026ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80026d0:	460a      	mov	r2, r1
 80026d2:	62ba      	str	r2, [r7, #40]	; 0x28
 80026d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026d6:	4413      	add	r3, r2
 80026d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026dc:	2200      	movs	r2, #0
 80026de:	61bb      	str	r3, [r7, #24]
 80026e0:	61fa      	str	r2, [r7, #28]
 80026e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026e6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80026ea:	f7fd fde1 	bl	80002b0 <__aeabi_uldivmod>
 80026ee:	4602      	mov	r2, r0
 80026f0:	460b      	mov	r3, r1
 80026f2:	4613      	mov	r3, r2
 80026f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026f6:	e053      	b.n	80027a0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026f8:	4b35      	ldr	r3, [pc, #212]	; (80027d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	099b      	lsrs	r3, r3, #6
 80026fe:	2200      	movs	r2, #0
 8002700:	613b      	str	r3, [r7, #16]
 8002702:	617a      	str	r2, [r7, #20]
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800270a:	f04f 0b00 	mov.w	fp, #0
 800270e:	4652      	mov	r2, sl
 8002710:	465b      	mov	r3, fp
 8002712:	f04f 0000 	mov.w	r0, #0
 8002716:	f04f 0100 	mov.w	r1, #0
 800271a:	0159      	lsls	r1, r3, #5
 800271c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002720:	0150      	lsls	r0, r2, #5
 8002722:	4602      	mov	r2, r0
 8002724:	460b      	mov	r3, r1
 8002726:	ebb2 080a 	subs.w	r8, r2, sl
 800272a:	eb63 090b 	sbc.w	r9, r3, fp
 800272e:	f04f 0200 	mov.w	r2, #0
 8002732:	f04f 0300 	mov.w	r3, #0
 8002736:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800273a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800273e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002742:	ebb2 0408 	subs.w	r4, r2, r8
 8002746:	eb63 0509 	sbc.w	r5, r3, r9
 800274a:	f04f 0200 	mov.w	r2, #0
 800274e:	f04f 0300 	mov.w	r3, #0
 8002752:	00eb      	lsls	r3, r5, #3
 8002754:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002758:	00e2      	lsls	r2, r4, #3
 800275a:	4614      	mov	r4, r2
 800275c:	461d      	mov	r5, r3
 800275e:	eb14 030a 	adds.w	r3, r4, sl
 8002762:	603b      	str	r3, [r7, #0]
 8002764:	eb45 030b 	adc.w	r3, r5, fp
 8002768:	607b      	str	r3, [r7, #4]
 800276a:	f04f 0200 	mov.w	r2, #0
 800276e:	f04f 0300 	mov.w	r3, #0
 8002772:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002776:	4629      	mov	r1, r5
 8002778:	028b      	lsls	r3, r1, #10
 800277a:	4621      	mov	r1, r4
 800277c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002780:	4621      	mov	r1, r4
 8002782:	028a      	lsls	r2, r1, #10
 8002784:	4610      	mov	r0, r2
 8002786:	4619      	mov	r1, r3
 8002788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800278a:	2200      	movs	r2, #0
 800278c:	60bb      	str	r3, [r7, #8]
 800278e:	60fa      	str	r2, [r7, #12]
 8002790:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002794:	f7fd fd8c 	bl	80002b0 <__aeabi_uldivmod>
 8002798:	4602      	mov	r2, r0
 800279a:	460b      	mov	r3, r1
 800279c:	4613      	mov	r3, r2
 800279e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80027a0:	4b0b      	ldr	r3, [pc, #44]	; (80027d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	0c1b      	lsrs	r3, r3, #16
 80027a6:	f003 0303 	and.w	r3, r3, #3
 80027aa:	3301      	adds	r3, #1
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80027b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80027b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027b8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80027ba:	e002      	b.n	80027c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027bc:	4b05      	ldr	r3, [pc, #20]	; (80027d4 <HAL_RCC_GetSysClockFreq+0x184>)
 80027be:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80027c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3740      	adds	r7, #64	; 0x40
 80027c8:	46bd      	mov	sp, r7
 80027ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027ce:	bf00      	nop
 80027d0:	40023800 	.word	0x40023800
 80027d4:	00f42400 	.word	0x00f42400
 80027d8:	017d7840 	.word	0x017d7840

080027dc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027e0:	4b03      	ldr	r3, [pc, #12]	; (80027f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80027e2:	681b      	ldr	r3, [r3, #0]
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	20000008 	.word	0x20000008

080027f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027f8:	f7ff fff0 	bl	80027dc <HAL_RCC_GetHCLKFreq>
 80027fc:	4602      	mov	r2, r0
 80027fe:	4b05      	ldr	r3, [pc, #20]	; (8002814 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	0a9b      	lsrs	r3, r3, #10
 8002804:	f003 0307 	and.w	r3, r3, #7
 8002808:	4903      	ldr	r1, [pc, #12]	; (8002818 <HAL_RCC_GetPCLK1Freq+0x24>)
 800280a:	5ccb      	ldrb	r3, [r1, r3]
 800280c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002810:	4618      	mov	r0, r3
 8002812:	bd80      	pop	{r7, pc}
 8002814:	40023800 	.word	0x40023800
 8002818:	080064b0 	.word	0x080064b0

0800281c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002820:	f7ff ffdc 	bl	80027dc <HAL_RCC_GetHCLKFreq>
 8002824:	4602      	mov	r2, r0
 8002826:	4b05      	ldr	r3, [pc, #20]	; (800283c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	0b5b      	lsrs	r3, r3, #13
 800282c:	f003 0307 	and.w	r3, r3, #7
 8002830:	4903      	ldr	r1, [pc, #12]	; (8002840 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002832:	5ccb      	ldrb	r3, [r1, r3]
 8002834:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002838:	4618      	mov	r0, r3
 800283a:	bd80      	pop	{r7, pc}
 800283c:	40023800 	.word	0x40023800
 8002840:	080064b0 	.word	0x080064b0

08002844 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b088      	sub	sp, #32
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800284c:	2300      	movs	r3, #0
 800284e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002850:	2300      	movs	r3, #0
 8002852:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002854:	2300      	movs	r3, #0
 8002856:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002858:	2300      	movs	r3, #0
 800285a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800285c:	2300      	movs	r3, #0
 800285e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0301 	and.w	r3, r3, #1
 8002868:	2b00      	cmp	r3, #0
 800286a:	d012      	beq.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800286c:	4b69      	ldr	r3, [pc, #420]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	4a68      	ldr	r2, [pc, #416]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002872:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002876:	6093      	str	r3, [r2, #8]
 8002878:	4b66      	ldr	r3, [pc, #408]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800287a:	689a      	ldr	r2, [r3, #8]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002880:	4964      	ldr	r1, [pc, #400]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002882:	4313      	orrs	r3, r2
 8002884:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800288a:	2b00      	cmp	r3, #0
 800288c:	d101      	bne.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800288e:	2301      	movs	r3, #1
 8002890:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d017      	beq.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800289e:	4b5d      	ldr	r3, [pc, #372]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ac:	4959      	ldr	r1, [pc, #356]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028bc:	d101      	bne.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80028be:	2301      	movs	r3, #1
 80028c0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d101      	bne.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80028ca:	2301      	movs	r3, #1
 80028cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d017      	beq.n	800290a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80028da:	4b4e      	ldr	r3, [pc, #312]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028e0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e8:	494a      	ldr	r1, [pc, #296]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028f8:	d101      	bne.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80028fa:	2301      	movs	r3, #1
 80028fc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002902:	2b00      	cmp	r3, #0
 8002904:	d101      	bne.n	800290a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002906:	2301      	movs	r3, #1
 8002908:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002916:	2301      	movs	r3, #1
 8002918:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0320 	and.w	r3, r3, #32
 8002922:	2b00      	cmp	r3, #0
 8002924:	f000 808b 	beq.w	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002928:	4b3a      	ldr	r3, [pc, #232]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800292a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292c:	4a39      	ldr	r2, [pc, #228]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800292e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002932:	6413      	str	r3, [r2, #64]	; 0x40
 8002934:	4b37      	ldr	r3, [pc, #220]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002938:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800293c:	60bb      	str	r3, [r7, #8]
 800293e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002940:	4b35      	ldr	r3, [pc, #212]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a34      	ldr	r2, [pc, #208]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002946:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800294a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800294c:	f7fe ffce 	bl	80018ec <HAL_GetTick>
 8002950:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002952:	e008      	b.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002954:	f7fe ffca 	bl	80018ec <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b64      	cmp	r3, #100	; 0x64
 8002960:	d901      	bls.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e357      	b.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002966:	4b2c      	ldr	r3, [pc, #176]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800296e:	2b00      	cmp	r3, #0
 8002970:	d0f0      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002972:	4b28      	ldr	r3, [pc, #160]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002976:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800297a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d035      	beq.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002986:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	429a      	cmp	r2, r3
 800298e:	d02e      	beq.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002990:	4b20      	ldr	r3, [pc, #128]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002994:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002998:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800299a:	4b1e      	ldr	r3, [pc, #120]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800299c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800299e:	4a1d      	ldr	r2, [pc, #116]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029a4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029a6:	4b1b      	ldr	r3, [pc, #108]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029aa:	4a1a      	ldr	r2, [pc, #104]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029b0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80029b2:	4a18      	ldr	r2, [pc, #96]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80029b8:	4b16      	ldr	r3, [pc, #88]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029bc:	f003 0301 	and.w	r3, r3, #1
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d114      	bne.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c4:	f7fe ff92 	bl	80018ec <HAL_GetTick>
 80029c8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ca:	e00a      	b.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029cc:	f7fe ff8e 	bl	80018ec <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029da:	4293      	cmp	r3, r2
 80029dc:	d901      	bls.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e319      	b.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029e2:	4b0c      	ldr	r3, [pc, #48]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d0ee      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80029fa:	d111      	bne.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80029fc:	4b05      	ldr	r3, [pc, #20]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a08:	4b04      	ldr	r3, [pc, #16]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002a0a:	400b      	ands	r3, r1
 8002a0c:	4901      	ldr	r1, [pc, #4]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	608b      	str	r3, [r1, #8]
 8002a12:	e00b      	b.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002a14:	40023800 	.word	0x40023800
 8002a18:	40007000 	.word	0x40007000
 8002a1c:	0ffffcff 	.word	0x0ffffcff
 8002a20:	4baa      	ldr	r3, [pc, #680]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	4aa9      	ldr	r2, [pc, #676]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a26:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002a2a:	6093      	str	r3, [r2, #8]
 8002a2c:	4ba7      	ldr	r3, [pc, #668]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a2e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a38:	49a4      	ldr	r1, [pc, #656]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0310 	and.w	r3, r3, #16
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d010      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002a4a:	4ba0      	ldr	r3, [pc, #640]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a50:	4a9e      	ldr	r2, [pc, #632]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a56:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002a5a:	4b9c      	ldr	r3, [pc, #624]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a5c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a64:	4999      	ldr	r1, [pc, #612]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d00a      	beq.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a78:	4b94      	ldr	r3, [pc, #592]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a7e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a86:	4991      	ldr	r1, [pc, #580]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00a      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a9a:	4b8c      	ldr	r3, [pc, #560]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aa0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002aa8:	4988      	ldr	r1, [pc, #544]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d00a      	beq.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002abc:	4b83      	ldr	r3, [pc, #524]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ac2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002aca:	4980      	ldr	r1, [pc, #512]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00a      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002ade:	4b7b      	ldr	r3, [pc, #492]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ae4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aec:	4977      	ldr	r1, [pc, #476]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d00a      	beq.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b00:	4b72      	ldr	r3, [pc, #456]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b06:	f023 0203 	bic.w	r2, r3, #3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b0e:	496f      	ldr	r1, [pc, #444]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d00a      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b22:	4b6a      	ldr	r3, [pc, #424]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b28:	f023 020c 	bic.w	r2, r3, #12
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b30:	4966      	ldr	r1, [pc, #408]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d00a      	beq.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b44:	4b61      	ldr	r3, [pc, #388]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b4a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b52:	495e      	ldr	r1, [pc, #376]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00a      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b66:	4b59      	ldr	r3, [pc, #356]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b6c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b74:	4955      	ldr	r1, [pc, #340]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d00a      	beq.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b88:	4b50      	ldr	r3, [pc, #320]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b8e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b96:	494d      	ldr	r1, [pc, #308]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d00a      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002baa:	4b48      	ldr	r3, [pc, #288]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bb0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb8:	4944      	ldr	r1, [pc, #272]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d00a      	beq.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002bcc:	4b3f      	ldr	r3, [pc, #252]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bd2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bda:	493c      	ldr	r1, [pc, #240]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d00a      	beq.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002bee:	4b37      	ldr	r3, [pc, #220]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bf4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bfc:	4933      	ldr	r1, [pc, #204]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d00a      	beq.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002c10:	4b2e      	ldr	r3, [pc, #184]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c16:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c1e:	492b      	ldr	r1, [pc, #172]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c20:	4313      	orrs	r3, r2
 8002c22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d011      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002c32:	4b26      	ldr	r3, [pc, #152]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c38:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c40:	4922      	ldr	r1, [pc, #136]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c50:	d101      	bne.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002c52:	2301      	movs	r3, #1
 8002c54:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0308 	and.w	r3, r3, #8
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002c62:	2301      	movs	r3, #1
 8002c64:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00a      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c72:	4b16      	ldr	r3, [pc, #88]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c78:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c80:	4912      	ldr	r1, [pc, #72]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d00b      	beq.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002c94:	4b0d      	ldr	r3, [pc, #52]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c9a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ca4:	4909      	ldr	r1, [pc, #36]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d006      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	f000 80d9 	beq.w	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002cc0:	4b02      	ldr	r3, [pc, #8]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a01      	ldr	r2, [pc, #4]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cc6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002cca:	e001      	b.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002ccc:	40023800 	.word	0x40023800
 8002cd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cd2:	f7fe fe0b 	bl	80018ec <HAL_GetTick>
 8002cd6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002cd8:	e008      	b.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002cda:	f7fe fe07 	bl	80018ec <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	2b64      	cmp	r3, #100	; 0x64
 8002ce6:	d901      	bls.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e194      	b.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002cec:	4b6c      	ldr	r3, [pc, #432]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d1f0      	bne.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0301 	and.w	r3, r3, #1
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d021      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d11d      	bne.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002d0c:	4b64      	ldr	r3, [pc, #400]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d12:	0c1b      	lsrs	r3, r3, #16
 8002d14:	f003 0303 	and.w	r3, r3, #3
 8002d18:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002d1a:	4b61      	ldr	r3, [pc, #388]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d20:	0e1b      	lsrs	r3, r3, #24
 8002d22:	f003 030f 	and.w	r3, r3, #15
 8002d26:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	019a      	lsls	r2, r3, #6
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	041b      	lsls	r3, r3, #16
 8002d32:	431a      	orrs	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	061b      	lsls	r3, r3, #24
 8002d38:	431a      	orrs	r2, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	071b      	lsls	r3, r3, #28
 8002d40:	4957      	ldr	r1, [pc, #348]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d004      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d5c:	d00a      	beq.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d02e      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d72:	d129      	bne.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002d74:	4b4a      	ldr	r3, [pc, #296]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d7a:	0c1b      	lsrs	r3, r3, #16
 8002d7c:	f003 0303 	and.w	r3, r3, #3
 8002d80:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002d82:	4b47      	ldr	r3, [pc, #284]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d88:	0f1b      	lsrs	r3, r3, #28
 8002d8a:	f003 0307 	and.w	r3, r3, #7
 8002d8e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	019a      	lsls	r2, r3, #6
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	041b      	lsls	r3, r3, #16
 8002d9a:	431a      	orrs	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	061b      	lsls	r3, r3, #24
 8002da2:	431a      	orrs	r2, r3
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	071b      	lsls	r3, r3, #28
 8002da8:	493d      	ldr	r1, [pc, #244]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002db0:	4b3b      	ldr	r3, [pc, #236]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002db2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002db6:	f023 021f 	bic.w	r2, r3, #31
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbe:	3b01      	subs	r3, #1
 8002dc0:	4937      	ldr	r1, [pc, #220]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d01d      	beq.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002dd4:	4b32      	ldr	r3, [pc, #200]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002dd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dda:	0e1b      	lsrs	r3, r3, #24
 8002ddc:	f003 030f 	and.w	r3, r3, #15
 8002de0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002de2:	4b2f      	ldr	r3, [pc, #188]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002de4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002de8:	0f1b      	lsrs	r3, r3, #28
 8002dea:	f003 0307 	and.w	r3, r3, #7
 8002dee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	019a      	lsls	r2, r3, #6
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	041b      	lsls	r3, r3, #16
 8002dfc:	431a      	orrs	r2, r3
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	061b      	lsls	r3, r3, #24
 8002e02:	431a      	orrs	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	071b      	lsls	r3, r3, #28
 8002e08:	4925      	ldr	r1, [pc, #148]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d011      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	019a      	lsls	r2, r3, #6
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	041b      	lsls	r3, r3, #16
 8002e28:	431a      	orrs	r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	061b      	lsls	r3, r3, #24
 8002e30:	431a      	orrs	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	071b      	lsls	r3, r3, #28
 8002e38:	4919      	ldr	r1, [pc, #100]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002e40:	4b17      	ldr	r3, [pc, #92]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a16      	ldr	r2, [pc, #88]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e46:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e4c:	f7fe fd4e 	bl	80018ec <HAL_GetTick>
 8002e50:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e52:	e008      	b.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002e54:	f7fe fd4a 	bl	80018ec <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b64      	cmp	r3, #100	; 0x64
 8002e60:	d901      	bls.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e0d7      	b.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e66:	4b0e      	ldr	r3, [pc, #56]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d0f0      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	f040 80cd 	bne.w	8003014 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002e7a:	4b09      	ldr	r3, [pc, #36]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a08      	ldr	r2, [pc, #32]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e86:	f7fe fd31 	bl	80018ec <HAL_GetTick>
 8002e8a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002e8c:	e00a      	b.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002e8e:	f7fe fd2d 	bl	80018ec <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	2b64      	cmp	r3, #100	; 0x64
 8002e9a:	d903      	bls.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e0ba      	b.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002ea0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ea4:	4b5e      	ldr	r3, [pc, #376]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002eac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002eb0:	d0ed      	beq.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d003      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d009      	beq.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d02e      	beq.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d12a      	bne.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002eda:	4b51      	ldr	r3, [pc, #324]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ee0:	0c1b      	lsrs	r3, r3, #16
 8002ee2:	f003 0303 	and.w	r3, r3, #3
 8002ee6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002ee8:	4b4d      	ldr	r3, [pc, #308]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eee:	0f1b      	lsrs	r3, r3, #28
 8002ef0:	f003 0307 	and.w	r3, r3, #7
 8002ef4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	695b      	ldr	r3, [r3, #20]
 8002efa:	019a      	lsls	r2, r3, #6
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	041b      	lsls	r3, r3, #16
 8002f00:	431a      	orrs	r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	061b      	lsls	r3, r3, #24
 8002f08:	431a      	orrs	r2, r3
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	071b      	lsls	r3, r3, #28
 8002f0e:	4944      	ldr	r1, [pc, #272]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002f16:	4b42      	ldr	r3, [pc, #264]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f1c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f24:	3b01      	subs	r3, #1
 8002f26:	021b      	lsls	r3, r3, #8
 8002f28:	493d      	ldr	r1, [pc, #244]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d022      	beq.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f44:	d11d      	bne.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002f46:	4b36      	ldr	r3, [pc, #216]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f4c:	0e1b      	lsrs	r3, r3, #24
 8002f4e:	f003 030f 	and.w	r3, r3, #15
 8002f52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002f54:	4b32      	ldr	r3, [pc, #200]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f5a:	0f1b      	lsrs	r3, r3, #28
 8002f5c:	f003 0307 	and.w	r3, r3, #7
 8002f60:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	019a      	lsls	r2, r3, #6
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a1b      	ldr	r3, [r3, #32]
 8002f6c:	041b      	lsls	r3, r3, #16
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	061b      	lsls	r3, r3, #24
 8002f74:	431a      	orrs	r2, r3
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	071b      	lsls	r3, r3, #28
 8002f7a:	4929      	ldr	r1, [pc, #164]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0308 	and.w	r3, r3, #8
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d028      	beq.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002f8e:	4b24      	ldr	r3, [pc, #144]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f94:	0e1b      	lsrs	r3, r3, #24
 8002f96:	f003 030f 	and.w	r3, r3, #15
 8002f9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002f9c:	4b20      	ldr	r3, [pc, #128]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fa2:	0c1b      	lsrs	r3, r3, #16
 8002fa4:	f003 0303 	and.w	r3, r3, #3
 8002fa8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	695b      	ldr	r3, [r3, #20]
 8002fae:	019a      	lsls	r2, r3, #6
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	041b      	lsls	r3, r3, #16
 8002fb4:	431a      	orrs	r2, r3
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	061b      	lsls	r3, r3, #24
 8002fba:	431a      	orrs	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	69db      	ldr	r3, [r3, #28]
 8002fc0:	071b      	lsls	r3, r3, #28
 8002fc2:	4917      	ldr	r1, [pc, #92]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002fca:	4b15      	ldr	r3, [pc, #84]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002fcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fd0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd8:	4911      	ldr	r1, [pc, #68]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002fe0:	4b0f      	ldr	r3, [pc, #60]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a0e      	ldr	r2, [pc, #56]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002fe6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fec:	f7fe fc7e 	bl	80018ec <HAL_GetTick>
 8002ff0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002ff2:	e008      	b.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002ff4:	f7fe fc7a 	bl	80018ec <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b64      	cmp	r3, #100	; 0x64
 8003000:	d901      	bls.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e007      	b.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003006:	4b06      	ldr	r3, [pc, #24]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800300e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003012:	d1ef      	bne.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3720      	adds	r7, #32
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	40023800 	.word	0x40023800

08003024 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d101      	bne.n	8003036 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e040      	b.n	80030b8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800303a:	2b00      	cmp	r3, #0
 800303c:	d106      	bne.n	800304c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f7fe fb54 	bl	80016f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2224      	movs	r2, #36	; 0x24
 8003050:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f022 0201 	bic.w	r2, r2, #1
 8003060:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f000 f974 	bl	8003350 <UART_SetConfig>
 8003068:	4603      	mov	r3, r0
 800306a:	2b01      	cmp	r3, #1
 800306c:	d101      	bne.n	8003072 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e022      	b.n	80030b8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003076:	2b00      	cmp	r3, #0
 8003078:	d002      	beq.n	8003080 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f000 fbcc 	bl	8003818 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	685a      	ldr	r2, [r3, #4]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800308e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	689a      	ldr	r2, [r3, #8]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800309e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f042 0201 	orr.w	r2, r2, #1
 80030ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f000 fc53 	bl	800395c <UART_CheckIdleState>
 80030b6:	4603      	mov	r3, r0
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3708      	adds	r7, #8
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b08a      	sub	sp, #40	; 0x28
 80030c4:	af02      	add	r7, sp, #8
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	60b9      	str	r1, [r7, #8]
 80030ca:	603b      	str	r3, [r7, #0]
 80030cc:	4613      	mov	r3, r2
 80030ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030d4:	2b20      	cmp	r3, #32
 80030d6:	d171      	bne.n	80031bc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d002      	beq.n	80030e4 <HAL_UART_Transmit+0x24>
 80030de:	88fb      	ldrh	r3, [r7, #6]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d101      	bne.n	80030e8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e06a      	b.n	80031be <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2221      	movs	r2, #33	; 0x21
 80030f4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030f6:	f7fe fbf9 	bl	80018ec <HAL_GetTick>
 80030fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	88fa      	ldrh	r2, [r7, #6]
 8003100:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	88fa      	ldrh	r2, [r7, #6]
 8003108:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003114:	d108      	bne.n	8003128 <HAL_UART_Transmit+0x68>
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d104      	bne.n	8003128 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800311e:	2300      	movs	r3, #0
 8003120:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	61bb      	str	r3, [r7, #24]
 8003126:	e003      	b.n	8003130 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800312c:	2300      	movs	r3, #0
 800312e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003130:	e02c      	b.n	800318c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	9300      	str	r3, [sp, #0]
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	2200      	movs	r2, #0
 800313a:	2180      	movs	r1, #128	; 0x80
 800313c:	68f8      	ldr	r0, [r7, #12]
 800313e:	f000 fc44 	bl	80039ca <UART_WaitOnFlagUntilTimeout>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d001      	beq.n	800314c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e038      	b.n	80031be <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d10b      	bne.n	800316a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	881b      	ldrh	r3, [r3, #0]
 8003156:	461a      	mov	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003160:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	3302      	adds	r3, #2
 8003166:	61bb      	str	r3, [r7, #24]
 8003168:	e007      	b.n	800317a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	781a      	ldrb	r2, [r3, #0]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	3301      	adds	r3, #1
 8003178:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003180:	b29b      	uxth	r3, r3
 8003182:	3b01      	subs	r3, #1
 8003184:	b29a      	uxth	r2, r3
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003192:	b29b      	uxth	r3, r3
 8003194:	2b00      	cmp	r3, #0
 8003196:	d1cc      	bne.n	8003132 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	9300      	str	r3, [sp, #0]
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	2200      	movs	r2, #0
 80031a0:	2140      	movs	r1, #64	; 0x40
 80031a2:	68f8      	ldr	r0, [r7, #12]
 80031a4:	f000 fc11 	bl	80039ca <UART_WaitOnFlagUntilTimeout>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d001      	beq.n	80031b2 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e005      	b.n	80031be <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2220      	movs	r2, #32
 80031b6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80031b8:	2300      	movs	r3, #0
 80031ba:	e000      	b.n	80031be <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80031bc:	2302      	movs	r3, #2
  }
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3720      	adds	r7, #32
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b08a      	sub	sp, #40	; 0x28
 80031ca:	af02      	add	r7, sp, #8
 80031cc:	60f8      	str	r0, [r7, #12]
 80031ce:	60b9      	str	r1, [r7, #8]
 80031d0:	603b      	str	r3, [r7, #0]
 80031d2:	4613      	mov	r3, r2
 80031d4:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031dc:	2b20      	cmp	r3, #32
 80031de:	f040 80b1 	bne.w	8003344 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d002      	beq.n	80031ee <HAL_UART_Receive+0x28>
 80031e8:	88fb      	ldrh	r3, [r7, #6]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d101      	bne.n	80031f2 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e0a9      	b.n	8003346 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2222      	movs	r2, #34	; 0x22
 80031fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003208:	f7fe fb70 	bl	80018ec <HAL_GetTick>
 800320c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	88fa      	ldrh	r2, [r7, #6]
 8003212:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	88fa      	ldrh	r2, [r7, #6]
 800321a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003226:	d10e      	bne.n	8003246 <HAL_UART_Receive+0x80>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	691b      	ldr	r3, [r3, #16]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d105      	bne.n	800323c <HAL_UART_Receive+0x76>
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003236:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800323a:	e02d      	b.n	8003298 <HAL_UART_Receive+0xd2>
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	22ff      	movs	r2, #255	; 0xff
 8003240:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003244:	e028      	b.n	8003298 <HAL_UART_Receive+0xd2>
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d10d      	bne.n	800326a <HAL_UART_Receive+0xa4>
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	691b      	ldr	r3, [r3, #16]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d104      	bne.n	8003260 <HAL_UART_Receive+0x9a>
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	22ff      	movs	r2, #255	; 0xff
 800325a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800325e:	e01b      	b.n	8003298 <HAL_UART_Receive+0xd2>
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	227f      	movs	r2, #127	; 0x7f
 8003264:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003268:	e016      	b.n	8003298 <HAL_UART_Receive+0xd2>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003272:	d10d      	bne.n	8003290 <HAL_UART_Receive+0xca>
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	691b      	ldr	r3, [r3, #16]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d104      	bne.n	8003286 <HAL_UART_Receive+0xc0>
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	227f      	movs	r2, #127	; 0x7f
 8003280:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003284:	e008      	b.n	8003298 <HAL_UART_Receive+0xd2>
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	223f      	movs	r2, #63	; 0x3f
 800328a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800328e:	e003      	b.n	8003298 <HAL_UART_Receive+0xd2>
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2200      	movs	r2, #0
 8003294:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800329e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032a8:	d108      	bne.n	80032bc <HAL_UART_Receive+0xf6>
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d104      	bne.n	80032bc <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80032b2:	2300      	movs	r3, #0
 80032b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	61bb      	str	r3, [r7, #24]
 80032ba:	e003      	b.n	80032c4 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032c0:	2300      	movs	r3, #0
 80032c2:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80032c4:	e032      	b.n	800332c <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	9300      	str	r3, [sp, #0]
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	2200      	movs	r2, #0
 80032ce:	2120      	movs	r1, #32
 80032d0:	68f8      	ldr	r0, [r7, #12]
 80032d2:	f000 fb7a 	bl	80039ca <UART_WaitOnFlagUntilTimeout>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d001      	beq.n	80032e0 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e032      	b.n	8003346 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d10c      	bne.n	8003300 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ec:	b29a      	uxth	r2, r3
 80032ee:	8a7b      	ldrh	r3, [r7, #18]
 80032f0:	4013      	ands	r3, r2
 80032f2:	b29a      	uxth	r2, r3
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	3302      	adds	r3, #2
 80032fc:	61bb      	str	r3, [r7, #24]
 80032fe:	e00c      	b.n	800331a <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003306:	b2da      	uxtb	r2, r3
 8003308:	8a7b      	ldrh	r3, [r7, #18]
 800330a:	b2db      	uxtb	r3, r3
 800330c:	4013      	ands	r3, r2
 800330e:	b2da      	uxtb	r2, r3
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	3301      	adds	r3, #1
 8003318:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003320:	b29b      	uxth	r3, r3
 8003322:	3b01      	subs	r3, #1
 8003324:	b29a      	uxth	r2, r3
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003332:	b29b      	uxth	r3, r3
 8003334:	2b00      	cmp	r3, #0
 8003336:	d1c6      	bne.n	80032c6 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2220      	movs	r2, #32
 800333c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8003340:	2300      	movs	r3, #0
 8003342:	e000      	b.n	8003346 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8003344:	2302      	movs	r3, #2
  }
}
 8003346:	4618      	mov	r0, r3
 8003348:	3720      	adds	r7, #32
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
	...

08003350 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b088      	sub	sp, #32
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003358:	2300      	movs	r3, #0
 800335a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689a      	ldr	r2, [r3, #8]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	691b      	ldr	r3, [r3, #16]
 8003364:	431a      	orrs	r2, r3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	431a      	orrs	r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	69db      	ldr	r3, [r3, #28]
 8003370:	4313      	orrs	r3, r2
 8003372:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	4ba6      	ldr	r3, [pc, #664]	; (8003614 <UART_SetConfig+0x2c4>)
 800337c:	4013      	ands	r3, r2
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	6812      	ldr	r2, [r2, #0]
 8003382:	6979      	ldr	r1, [r7, #20]
 8003384:	430b      	orrs	r3, r1
 8003386:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	68da      	ldr	r2, [r3, #12]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	430a      	orrs	r2, r1
 800339c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a1b      	ldr	r3, [r3, #32]
 80033a8:	697a      	ldr	r2, [r7, #20]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	697a      	ldr	r2, [r7, #20]
 80033be:	430a      	orrs	r2, r1
 80033c0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a94      	ldr	r2, [pc, #592]	; (8003618 <UART_SetConfig+0x2c8>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d120      	bne.n	800340e <UART_SetConfig+0xbe>
 80033cc:	4b93      	ldr	r3, [pc, #588]	; (800361c <UART_SetConfig+0x2cc>)
 80033ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033d2:	f003 0303 	and.w	r3, r3, #3
 80033d6:	2b03      	cmp	r3, #3
 80033d8:	d816      	bhi.n	8003408 <UART_SetConfig+0xb8>
 80033da:	a201      	add	r2, pc, #4	; (adr r2, 80033e0 <UART_SetConfig+0x90>)
 80033dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033e0:	080033f1 	.word	0x080033f1
 80033e4:	080033fd 	.word	0x080033fd
 80033e8:	080033f7 	.word	0x080033f7
 80033ec:	08003403 	.word	0x08003403
 80033f0:	2301      	movs	r3, #1
 80033f2:	77fb      	strb	r3, [r7, #31]
 80033f4:	e150      	b.n	8003698 <UART_SetConfig+0x348>
 80033f6:	2302      	movs	r3, #2
 80033f8:	77fb      	strb	r3, [r7, #31]
 80033fa:	e14d      	b.n	8003698 <UART_SetConfig+0x348>
 80033fc:	2304      	movs	r3, #4
 80033fe:	77fb      	strb	r3, [r7, #31]
 8003400:	e14a      	b.n	8003698 <UART_SetConfig+0x348>
 8003402:	2308      	movs	r3, #8
 8003404:	77fb      	strb	r3, [r7, #31]
 8003406:	e147      	b.n	8003698 <UART_SetConfig+0x348>
 8003408:	2310      	movs	r3, #16
 800340a:	77fb      	strb	r3, [r7, #31]
 800340c:	e144      	b.n	8003698 <UART_SetConfig+0x348>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a83      	ldr	r2, [pc, #524]	; (8003620 <UART_SetConfig+0x2d0>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d132      	bne.n	800347e <UART_SetConfig+0x12e>
 8003418:	4b80      	ldr	r3, [pc, #512]	; (800361c <UART_SetConfig+0x2cc>)
 800341a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800341e:	f003 030c 	and.w	r3, r3, #12
 8003422:	2b0c      	cmp	r3, #12
 8003424:	d828      	bhi.n	8003478 <UART_SetConfig+0x128>
 8003426:	a201      	add	r2, pc, #4	; (adr r2, 800342c <UART_SetConfig+0xdc>)
 8003428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800342c:	08003461 	.word	0x08003461
 8003430:	08003479 	.word	0x08003479
 8003434:	08003479 	.word	0x08003479
 8003438:	08003479 	.word	0x08003479
 800343c:	0800346d 	.word	0x0800346d
 8003440:	08003479 	.word	0x08003479
 8003444:	08003479 	.word	0x08003479
 8003448:	08003479 	.word	0x08003479
 800344c:	08003467 	.word	0x08003467
 8003450:	08003479 	.word	0x08003479
 8003454:	08003479 	.word	0x08003479
 8003458:	08003479 	.word	0x08003479
 800345c:	08003473 	.word	0x08003473
 8003460:	2300      	movs	r3, #0
 8003462:	77fb      	strb	r3, [r7, #31]
 8003464:	e118      	b.n	8003698 <UART_SetConfig+0x348>
 8003466:	2302      	movs	r3, #2
 8003468:	77fb      	strb	r3, [r7, #31]
 800346a:	e115      	b.n	8003698 <UART_SetConfig+0x348>
 800346c:	2304      	movs	r3, #4
 800346e:	77fb      	strb	r3, [r7, #31]
 8003470:	e112      	b.n	8003698 <UART_SetConfig+0x348>
 8003472:	2308      	movs	r3, #8
 8003474:	77fb      	strb	r3, [r7, #31]
 8003476:	e10f      	b.n	8003698 <UART_SetConfig+0x348>
 8003478:	2310      	movs	r3, #16
 800347a:	77fb      	strb	r3, [r7, #31]
 800347c:	e10c      	b.n	8003698 <UART_SetConfig+0x348>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a68      	ldr	r2, [pc, #416]	; (8003624 <UART_SetConfig+0x2d4>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d120      	bne.n	80034ca <UART_SetConfig+0x17a>
 8003488:	4b64      	ldr	r3, [pc, #400]	; (800361c <UART_SetConfig+0x2cc>)
 800348a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800348e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003492:	2b30      	cmp	r3, #48	; 0x30
 8003494:	d013      	beq.n	80034be <UART_SetConfig+0x16e>
 8003496:	2b30      	cmp	r3, #48	; 0x30
 8003498:	d814      	bhi.n	80034c4 <UART_SetConfig+0x174>
 800349a:	2b20      	cmp	r3, #32
 800349c:	d009      	beq.n	80034b2 <UART_SetConfig+0x162>
 800349e:	2b20      	cmp	r3, #32
 80034a0:	d810      	bhi.n	80034c4 <UART_SetConfig+0x174>
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d002      	beq.n	80034ac <UART_SetConfig+0x15c>
 80034a6:	2b10      	cmp	r3, #16
 80034a8:	d006      	beq.n	80034b8 <UART_SetConfig+0x168>
 80034aa:	e00b      	b.n	80034c4 <UART_SetConfig+0x174>
 80034ac:	2300      	movs	r3, #0
 80034ae:	77fb      	strb	r3, [r7, #31]
 80034b0:	e0f2      	b.n	8003698 <UART_SetConfig+0x348>
 80034b2:	2302      	movs	r3, #2
 80034b4:	77fb      	strb	r3, [r7, #31]
 80034b6:	e0ef      	b.n	8003698 <UART_SetConfig+0x348>
 80034b8:	2304      	movs	r3, #4
 80034ba:	77fb      	strb	r3, [r7, #31]
 80034bc:	e0ec      	b.n	8003698 <UART_SetConfig+0x348>
 80034be:	2308      	movs	r3, #8
 80034c0:	77fb      	strb	r3, [r7, #31]
 80034c2:	e0e9      	b.n	8003698 <UART_SetConfig+0x348>
 80034c4:	2310      	movs	r3, #16
 80034c6:	77fb      	strb	r3, [r7, #31]
 80034c8:	e0e6      	b.n	8003698 <UART_SetConfig+0x348>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a56      	ldr	r2, [pc, #344]	; (8003628 <UART_SetConfig+0x2d8>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d120      	bne.n	8003516 <UART_SetConfig+0x1c6>
 80034d4:	4b51      	ldr	r3, [pc, #324]	; (800361c <UART_SetConfig+0x2cc>)
 80034d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034da:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80034de:	2bc0      	cmp	r3, #192	; 0xc0
 80034e0:	d013      	beq.n	800350a <UART_SetConfig+0x1ba>
 80034e2:	2bc0      	cmp	r3, #192	; 0xc0
 80034e4:	d814      	bhi.n	8003510 <UART_SetConfig+0x1c0>
 80034e6:	2b80      	cmp	r3, #128	; 0x80
 80034e8:	d009      	beq.n	80034fe <UART_SetConfig+0x1ae>
 80034ea:	2b80      	cmp	r3, #128	; 0x80
 80034ec:	d810      	bhi.n	8003510 <UART_SetConfig+0x1c0>
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d002      	beq.n	80034f8 <UART_SetConfig+0x1a8>
 80034f2:	2b40      	cmp	r3, #64	; 0x40
 80034f4:	d006      	beq.n	8003504 <UART_SetConfig+0x1b4>
 80034f6:	e00b      	b.n	8003510 <UART_SetConfig+0x1c0>
 80034f8:	2300      	movs	r3, #0
 80034fa:	77fb      	strb	r3, [r7, #31]
 80034fc:	e0cc      	b.n	8003698 <UART_SetConfig+0x348>
 80034fe:	2302      	movs	r3, #2
 8003500:	77fb      	strb	r3, [r7, #31]
 8003502:	e0c9      	b.n	8003698 <UART_SetConfig+0x348>
 8003504:	2304      	movs	r3, #4
 8003506:	77fb      	strb	r3, [r7, #31]
 8003508:	e0c6      	b.n	8003698 <UART_SetConfig+0x348>
 800350a:	2308      	movs	r3, #8
 800350c:	77fb      	strb	r3, [r7, #31]
 800350e:	e0c3      	b.n	8003698 <UART_SetConfig+0x348>
 8003510:	2310      	movs	r3, #16
 8003512:	77fb      	strb	r3, [r7, #31]
 8003514:	e0c0      	b.n	8003698 <UART_SetConfig+0x348>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a44      	ldr	r2, [pc, #272]	; (800362c <UART_SetConfig+0x2dc>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d125      	bne.n	800356c <UART_SetConfig+0x21c>
 8003520:	4b3e      	ldr	r3, [pc, #248]	; (800361c <UART_SetConfig+0x2cc>)
 8003522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003526:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800352a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800352e:	d017      	beq.n	8003560 <UART_SetConfig+0x210>
 8003530:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003534:	d817      	bhi.n	8003566 <UART_SetConfig+0x216>
 8003536:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800353a:	d00b      	beq.n	8003554 <UART_SetConfig+0x204>
 800353c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003540:	d811      	bhi.n	8003566 <UART_SetConfig+0x216>
 8003542:	2b00      	cmp	r3, #0
 8003544:	d003      	beq.n	800354e <UART_SetConfig+0x1fe>
 8003546:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800354a:	d006      	beq.n	800355a <UART_SetConfig+0x20a>
 800354c:	e00b      	b.n	8003566 <UART_SetConfig+0x216>
 800354e:	2300      	movs	r3, #0
 8003550:	77fb      	strb	r3, [r7, #31]
 8003552:	e0a1      	b.n	8003698 <UART_SetConfig+0x348>
 8003554:	2302      	movs	r3, #2
 8003556:	77fb      	strb	r3, [r7, #31]
 8003558:	e09e      	b.n	8003698 <UART_SetConfig+0x348>
 800355a:	2304      	movs	r3, #4
 800355c:	77fb      	strb	r3, [r7, #31]
 800355e:	e09b      	b.n	8003698 <UART_SetConfig+0x348>
 8003560:	2308      	movs	r3, #8
 8003562:	77fb      	strb	r3, [r7, #31]
 8003564:	e098      	b.n	8003698 <UART_SetConfig+0x348>
 8003566:	2310      	movs	r3, #16
 8003568:	77fb      	strb	r3, [r7, #31]
 800356a:	e095      	b.n	8003698 <UART_SetConfig+0x348>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a2f      	ldr	r2, [pc, #188]	; (8003630 <UART_SetConfig+0x2e0>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d125      	bne.n	80035c2 <UART_SetConfig+0x272>
 8003576:	4b29      	ldr	r3, [pc, #164]	; (800361c <UART_SetConfig+0x2cc>)
 8003578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800357c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003580:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003584:	d017      	beq.n	80035b6 <UART_SetConfig+0x266>
 8003586:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800358a:	d817      	bhi.n	80035bc <UART_SetConfig+0x26c>
 800358c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003590:	d00b      	beq.n	80035aa <UART_SetConfig+0x25a>
 8003592:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003596:	d811      	bhi.n	80035bc <UART_SetConfig+0x26c>
 8003598:	2b00      	cmp	r3, #0
 800359a:	d003      	beq.n	80035a4 <UART_SetConfig+0x254>
 800359c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035a0:	d006      	beq.n	80035b0 <UART_SetConfig+0x260>
 80035a2:	e00b      	b.n	80035bc <UART_SetConfig+0x26c>
 80035a4:	2301      	movs	r3, #1
 80035a6:	77fb      	strb	r3, [r7, #31]
 80035a8:	e076      	b.n	8003698 <UART_SetConfig+0x348>
 80035aa:	2302      	movs	r3, #2
 80035ac:	77fb      	strb	r3, [r7, #31]
 80035ae:	e073      	b.n	8003698 <UART_SetConfig+0x348>
 80035b0:	2304      	movs	r3, #4
 80035b2:	77fb      	strb	r3, [r7, #31]
 80035b4:	e070      	b.n	8003698 <UART_SetConfig+0x348>
 80035b6:	2308      	movs	r3, #8
 80035b8:	77fb      	strb	r3, [r7, #31]
 80035ba:	e06d      	b.n	8003698 <UART_SetConfig+0x348>
 80035bc:	2310      	movs	r3, #16
 80035be:	77fb      	strb	r3, [r7, #31]
 80035c0:	e06a      	b.n	8003698 <UART_SetConfig+0x348>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a1b      	ldr	r2, [pc, #108]	; (8003634 <UART_SetConfig+0x2e4>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d138      	bne.n	800363e <UART_SetConfig+0x2ee>
 80035cc:	4b13      	ldr	r3, [pc, #76]	; (800361c <UART_SetConfig+0x2cc>)
 80035ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035d2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80035d6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80035da:	d017      	beq.n	800360c <UART_SetConfig+0x2bc>
 80035dc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80035e0:	d82a      	bhi.n	8003638 <UART_SetConfig+0x2e8>
 80035e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035e6:	d00b      	beq.n	8003600 <UART_SetConfig+0x2b0>
 80035e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035ec:	d824      	bhi.n	8003638 <UART_SetConfig+0x2e8>
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d003      	beq.n	80035fa <UART_SetConfig+0x2aa>
 80035f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035f6:	d006      	beq.n	8003606 <UART_SetConfig+0x2b6>
 80035f8:	e01e      	b.n	8003638 <UART_SetConfig+0x2e8>
 80035fa:	2300      	movs	r3, #0
 80035fc:	77fb      	strb	r3, [r7, #31]
 80035fe:	e04b      	b.n	8003698 <UART_SetConfig+0x348>
 8003600:	2302      	movs	r3, #2
 8003602:	77fb      	strb	r3, [r7, #31]
 8003604:	e048      	b.n	8003698 <UART_SetConfig+0x348>
 8003606:	2304      	movs	r3, #4
 8003608:	77fb      	strb	r3, [r7, #31]
 800360a:	e045      	b.n	8003698 <UART_SetConfig+0x348>
 800360c:	2308      	movs	r3, #8
 800360e:	77fb      	strb	r3, [r7, #31]
 8003610:	e042      	b.n	8003698 <UART_SetConfig+0x348>
 8003612:	bf00      	nop
 8003614:	efff69f3 	.word	0xefff69f3
 8003618:	40011000 	.word	0x40011000
 800361c:	40023800 	.word	0x40023800
 8003620:	40004400 	.word	0x40004400
 8003624:	40004800 	.word	0x40004800
 8003628:	40004c00 	.word	0x40004c00
 800362c:	40005000 	.word	0x40005000
 8003630:	40011400 	.word	0x40011400
 8003634:	40007800 	.word	0x40007800
 8003638:	2310      	movs	r3, #16
 800363a:	77fb      	strb	r3, [r7, #31]
 800363c:	e02c      	b.n	8003698 <UART_SetConfig+0x348>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a72      	ldr	r2, [pc, #456]	; (800380c <UART_SetConfig+0x4bc>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d125      	bne.n	8003694 <UART_SetConfig+0x344>
 8003648:	4b71      	ldr	r3, [pc, #452]	; (8003810 <UART_SetConfig+0x4c0>)
 800364a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800364e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003652:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003656:	d017      	beq.n	8003688 <UART_SetConfig+0x338>
 8003658:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800365c:	d817      	bhi.n	800368e <UART_SetConfig+0x33e>
 800365e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003662:	d00b      	beq.n	800367c <UART_SetConfig+0x32c>
 8003664:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003668:	d811      	bhi.n	800368e <UART_SetConfig+0x33e>
 800366a:	2b00      	cmp	r3, #0
 800366c:	d003      	beq.n	8003676 <UART_SetConfig+0x326>
 800366e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003672:	d006      	beq.n	8003682 <UART_SetConfig+0x332>
 8003674:	e00b      	b.n	800368e <UART_SetConfig+0x33e>
 8003676:	2300      	movs	r3, #0
 8003678:	77fb      	strb	r3, [r7, #31]
 800367a:	e00d      	b.n	8003698 <UART_SetConfig+0x348>
 800367c:	2302      	movs	r3, #2
 800367e:	77fb      	strb	r3, [r7, #31]
 8003680:	e00a      	b.n	8003698 <UART_SetConfig+0x348>
 8003682:	2304      	movs	r3, #4
 8003684:	77fb      	strb	r3, [r7, #31]
 8003686:	e007      	b.n	8003698 <UART_SetConfig+0x348>
 8003688:	2308      	movs	r3, #8
 800368a:	77fb      	strb	r3, [r7, #31]
 800368c:	e004      	b.n	8003698 <UART_SetConfig+0x348>
 800368e:	2310      	movs	r3, #16
 8003690:	77fb      	strb	r3, [r7, #31]
 8003692:	e001      	b.n	8003698 <UART_SetConfig+0x348>
 8003694:	2310      	movs	r3, #16
 8003696:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	69db      	ldr	r3, [r3, #28]
 800369c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036a0:	d15b      	bne.n	800375a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80036a2:	7ffb      	ldrb	r3, [r7, #31]
 80036a4:	2b08      	cmp	r3, #8
 80036a6:	d828      	bhi.n	80036fa <UART_SetConfig+0x3aa>
 80036a8:	a201      	add	r2, pc, #4	; (adr r2, 80036b0 <UART_SetConfig+0x360>)
 80036aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ae:	bf00      	nop
 80036b0:	080036d5 	.word	0x080036d5
 80036b4:	080036dd 	.word	0x080036dd
 80036b8:	080036e5 	.word	0x080036e5
 80036bc:	080036fb 	.word	0x080036fb
 80036c0:	080036eb 	.word	0x080036eb
 80036c4:	080036fb 	.word	0x080036fb
 80036c8:	080036fb 	.word	0x080036fb
 80036cc:	080036fb 	.word	0x080036fb
 80036d0:	080036f3 	.word	0x080036f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036d4:	f7ff f88e 	bl	80027f4 <HAL_RCC_GetPCLK1Freq>
 80036d8:	61b8      	str	r0, [r7, #24]
        break;
 80036da:	e013      	b.n	8003704 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036dc:	f7ff f89e 	bl	800281c <HAL_RCC_GetPCLK2Freq>
 80036e0:	61b8      	str	r0, [r7, #24]
        break;
 80036e2:	e00f      	b.n	8003704 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036e4:	4b4b      	ldr	r3, [pc, #300]	; (8003814 <UART_SetConfig+0x4c4>)
 80036e6:	61bb      	str	r3, [r7, #24]
        break;
 80036e8:	e00c      	b.n	8003704 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036ea:	f7fe ffb1 	bl	8002650 <HAL_RCC_GetSysClockFreq>
 80036ee:	61b8      	str	r0, [r7, #24]
        break;
 80036f0:	e008      	b.n	8003704 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036f6:	61bb      	str	r3, [r7, #24]
        break;
 80036f8:	e004      	b.n	8003704 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80036fa:	2300      	movs	r3, #0
 80036fc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	77bb      	strb	r3, [r7, #30]
        break;
 8003702:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d074      	beq.n	80037f4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	005a      	lsls	r2, r3, #1
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	085b      	lsrs	r3, r3, #1
 8003714:	441a      	add	r2, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	fbb2 f3f3 	udiv	r3, r2, r3
 800371e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	2b0f      	cmp	r3, #15
 8003724:	d916      	bls.n	8003754 <UART_SetConfig+0x404>
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800372c:	d212      	bcs.n	8003754 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	b29b      	uxth	r3, r3
 8003732:	f023 030f 	bic.w	r3, r3, #15
 8003736:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	085b      	lsrs	r3, r3, #1
 800373c:	b29b      	uxth	r3, r3
 800373e:	f003 0307 	and.w	r3, r3, #7
 8003742:	b29a      	uxth	r2, r3
 8003744:	89fb      	ldrh	r3, [r7, #14]
 8003746:	4313      	orrs	r3, r2
 8003748:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	89fa      	ldrh	r2, [r7, #14]
 8003750:	60da      	str	r2, [r3, #12]
 8003752:	e04f      	b.n	80037f4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	77bb      	strb	r3, [r7, #30]
 8003758:	e04c      	b.n	80037f4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800375a:	7ffb      	ldrb	r3, [r7, #31]
 800375c:	2b08      	cmp	r3, #8
 800375e:	d828      	bhi.n	80037b2 <UART_SetConfig+0x462>
 8003760:	a201      	add	r2, pc, #4	; (adr r2, 8003768 <UART_SetConfig+0x418>)
 8003762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003766:	bf00      	nop
 8003768:	0800378d 	.word	0x0800378d
 800376c:	08003795 	.word	0x08003795
 8003770:	0800379d 	.word	0x0800379d
 8003774:	080037b3 	.word	0x080037b3
 8003778:	080037a3 	.word	0x080037a3
 800377c:	080037b3 	.word	0x080037b3
 8003780:	080037b3 	.word	0x080037b3
 8003784:	080037b3 	.word	0x080037b3
 8003788:	080037ab 	.word	0x080037ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800378c:	f7ff f832 	bl	80027f4 <HAL_RCC_GetPCLK1Freq>
 8003790:	61b8      	str	r0, [r7, #24]
        break;
 8003792:	e013      	b.n	80037bc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003794:	f7ff f842 	bl	800281c <HAL_RCC_GetPCLK2Freq>
 8003798:	61b8      	str	r0, [r7, #24]
        break;
 800379a:	e00f      	b.n	80037bc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800379c:	4b1d      	ldr	r3, [pc, #116]	; (8003814 <UART_SetConfig+0x4c4>)
 800379e:	61bb      	str	r3, [r7, #24]
        break;
 80037a0:	e00c      	b.n	80037bc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037a2:	f7fe ff55 	bl	8002650 <HAL_RCC_GetSysClockFreq>
 80037a6:	61b8      	str	r0, [r7, #24]
        break;
 80037a8:	e008      	b.n	80037bc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037ae:	61bb      	str	r3, [r7, #24]
        break;
 80037b0:	e004      	b.n	80037bc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80037b2:	2300      	movs	r3, #0
 80037b4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	77bb      	strb	r3, [r7, #30]
        break;
 80037ba:	bf00      	nop
    }

    if (pclk != 0U)
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d018      	beq.n	80037f4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	085a      	lsrs	r2, r3, #1
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	441a      	add	r2, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037d4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	2b0f      	cmp	r3, #15
 80037da:	d909      	bls.n	80037f0 <UART_SetConfig+0x4a0>
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037e2:	d205      	bcs.n	80037f0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	b29a      	uxth	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	60da      	str	r2, [r3, #12]
 80037ee:	e001      	b.n	80037f4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003800:	7fbb      	ldrb	r3, [r7, #30]
}
 8003802:	4618      	mov	r0, r3
 8003804:	3720      	adds	r7, #32
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	40007c00 	.word	0x40007c00
 8003810:	40023800 	.word	0x40023800
 8003814:	00f42400 	.word	0x00f42400

08003818 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003824:	f003 0301 	and.w	r3, r3, #1
 8003828:	2b00      	cmp	r3, #0
 800382a:	d00a      	beq.n	8003842 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	430a      	orrs	r2, r1
 8003840:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003846:	f003 0302 	and.w	r3, r3, #2
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00a      	beq.n	8003864 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	430a      	orrs	r2, r1
 8003862:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003868:	f003 0304 	and.w	r3, r3, #4
 800386c:	2b00      	cmp	r3, #0
 800386e:	d00a      	beq.n	8003886 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	430a      	orrs	r2, r1
 8003884:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388a:	f003 0308 	and.w	r3, r3, #8
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00a      	beq.n	80038a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	430a      	orrs	r2, r1
 80038a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ac:	f003 0310 	and.w	r3, r3, #16
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d00a      	beq.n	80038ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	430a      	orrs	r2, r1
 80038c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ce:	f003 0320 	and.w	r3, r3, #32
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d00a      	beq.n	80038ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	430a      	orrs	r2, r1
 80038ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d01a      	beq.n	800392e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	430a      	orrs	r2, r1
 800390c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003912:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003916:	d10a      	bne.n	800392e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	430a      	orrs	r2, r1
 800392c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00a      	beq.n	8003950 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	430a      	orrs	r2, r1
 800394e:	605a      	str	r2, [r3, #4]
  }
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b086      	sub	sp, #24
 8003960:	af02      	add	r7, sp, #8
 8003962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800396c:	f7fd ffbe 	bl	80018ec <HAL_GetTick>
 8003970:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0308 	and.w	r3, r3, #8
 800397c:	2b08      	cmp	r3, #8
 800397e:	d10e      	bne.n	800399e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003980:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003984:	9300      	str	r3, [sp, #0]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2200      	movs	r2, #0
 800398a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 f81b 	bl	80039ca <UART_WaitOnFlagUntilTimeout>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d001      	beq.n	800399e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e011      	b.n	80039c2 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2220      	movs	r2, #32
 80039a2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2220      	movs	r2, #32
 80039a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b09c      	sub	sp, #112	; 0x70
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	60f8      	str	r0, [r7, #12]
 80039d2:	60b9      	str	r1, [r7, #8]
 80039d4:	603b      	str	r3, [r7, #0]
 80039d6:	4613      	mov	r3, r2
 80039d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039da:	e0a7      	b.n	8003b2c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039e2:	f000 80a3 	beq.w	8003b2c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039e6:	f7fd ff81 	bl	80018ec <HAL_GetTick>
 80039ea:	4602      	mov	r2, r0
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d302      	bcc.n	80039fc <UART_WaitOnFlagUntilTimeout+0x32>
 80039f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d13f      	bne.n	8003a7c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a04:	e853 3f00 	ldrex	r3, [r3]
 8003a08:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003a0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a0c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a10:	667b      	str	r3, [r7, #100]	; 0x64
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	461a      	mov	r2, r3
 8003a18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a1a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a1c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a1e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003a20:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003a22:	e841 2300 	strex	r3, r2, [r1]
 8003a26:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003a28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1e6      	bne.n	80039fc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	3308      	adds	r3, #8
 8003a34:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a38:	e853 3f00 	ldrex	r3, [r3]
 8003a3c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a40:	f023 0301 	bic.w	r3, r3, #1
 8003a44:	663b      	str	r3, [r7, #96]	; 0x60
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	3308      	adds	r3, #8
 8003a4c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003a4e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003a50:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a52:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003a54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a56:	e841 2300 	strex	r3, r2, [r1]
 8003a5a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003a5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d1e5      	bne.n	8003a2e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2220      	movs	r2, #32
 8003a66:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2220      	movs	r2, #32
 8003a6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e068      	b.n	8003b4e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0304 	and.w	r3, r3, #4
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d050      	beq.n	8003b2c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	69db      	ldr	r3, [r3, #28]
 8003a90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a98:	d148      	bne.n	8003b2c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003aa2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aac:	e853 3f00 	ldrex	r3, [r3]
 8003ab0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ab8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	461a      	mov	r2, r3
 8003ac0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ac2:	637b      	str	r3, [r7, #52]	; 0x34
 8003ac4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ac8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003aca:	e841 2300 	strex	r3, r2, [r1]
 8003ace:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d1e6      	bne.n	8003aa4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	3308      	adds	r3, #8
 8003adc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	e853 3f00 	ldrex	r3, [r3]
 8003ae4:	613b      	str	r3, [r7, #16]
   return(result);
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	f023 0301 	bic.w	r3, r3, #1
 8003aec:	66bb      	str	r3, [r7, #104]	; 0x68
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	3308      	adds	r3, #8
 8003af4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003af6:	623a      	str	r2, [r7, #32]
 8003af8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003afa:	69f9      	ldr	r1, [r7, #28]
 8003afc:	6a3a      	ldr	r2, [r7, #32]
 8003afe:	e841 2300 	strex	r3, r2, [r1]
 8003b02:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1e5      	bne.n	8003ad6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2220      	movs	r2, #32
 8003b0e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2220      	movs	r2, #32
 8003b14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2220      	movs	r2, #32
 8003b1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	e010      	b.n	8003b4e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	69da      	ldr	r2, [r3, #28]
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	4013      	ands	r3, r2
 8003b36:	68ba      	ldr	r2, [r7, #8]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	bf0c      	ite	eq
 8003b3c:	2301      	moveq	r3, #1
 8003b3e:	2300      	movne	r3, #0
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	461a      	mov	r2, r3
 8003b44:	79fb      	ldrb	r3, [r7, #7]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	f43f af48 	beq.w	80039dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3770      	adds	r7, #112	; 0x70
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}

08003b56 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003b56:	b480      	push	{r7}
 8003b58:	b085      	sub	sp, #20
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003b60:	2300      	movs	r3, #0
 8003b62:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003b64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b68:	2b84      	cmp	r3, #132	; 0x84
 8003b6a:	d005      	beq.n	8003b78 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003b6c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	4413      	add	r3, r2
 8003b74:	3303      	adds	r3, #3
 8003b76:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003b78:	68fb      	ldr	r3, [r7, #12]
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3714      	adds	r7, #20
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr

08003b86 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003b86:	b580      	push	{r7, lr}
 8003b88:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003b8a:	f000 fae9 	bl	8004160 <vTaskStartScheduler>
  
  return osOK;
 8003b8e:	2300      	movs	r3, #0
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003b94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b96:	b089      	sub	sp, #36	; 0x24
 8003b98:	af04      	add	r7, sp, #16
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d020      	beq.n	8003be8 <osThreadCreate+0x54>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	699b      	ldr	r3, [r3, #24]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d01c      	beq.n	8003be8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685c      	ldr	r4, [r3, #4]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681d      	ldr	r5, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	691e      	ldr	r6, [r3, #16]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f7ff ffc8 	bl	8003b56 <makeFreeRtosPriority>
 8003bc6:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	695b      	ldr	r3, [r3, #20]
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003bd0:	9202      	str	r2, [sp, #8]
 8003bd2:	9301      	str	r3, [sp, #4]
 8003bd4:	9100      	str	r1, [sp, #0]
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	4632      	mov	r2, r6
 8003bda:	4629      	mov	r1, r5
 8003bdc:	4620      	mov	r0, r4
 8003bde:	f000 f8ed 	bl	8003dbc <xTaskCreateStatic>
 8003be2:	4603      	mov	r3, r0
 8003be4:	60fb      	str	r3, [r7, #12]
 8003be6:	e01c      	b.n	8003c22 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	685c      	ldr	r4, [r3, #4]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003bf4:	b29e      	uxth	r6, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f7ff ffaa 	bl	8003b56 <makeFreeRtosPriority>
 8003c02:	4602      	mov	r2, r0
 8003c04:	f107 030c 	add.w	r3, r7, #12
 8003c08:	9301      	str	r3, [sp, #4]
 8003c0a:	9200      	str	r2, [sp, #0]
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	4632      	mov	r2, r6
 8003c10:	4629      	mov	r1, r5
 8003c12:	4620      	mov	r0, r4
 8003c14:	f000 f935 	bl	8003e82 <xTaskCreate>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d001      	beq.n	8003c22 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	e000      	b.n	8003c24 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003c22:	68fb      	ldr	r3, [r7, #12]
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3714      	adds	r7, #20
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003c2c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d001      	beq.n	8003c42 <osDelay+0x16>
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	e000      	b.n	8003c44 <osDelay+0x18>
 8003c42:	2301      	movs	r3, #1
 8003c44:	4618      	mov	r0, r3
 8003c46:	f000 fa55 	bl	80040f4 <vTaskDelay>
  
  return osOK;
 8003c4a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3710      	adds	r7, #16
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f103 0208 	add.w	r2, r3, #8
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f04f 32ff 	mov.w	r2, #4294967295
 8003c6c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f103 0208 	add.w	r2, r3, #8
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f103 0208 	add.w	r2, r3, #8
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003c88:	bf00      	nop
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003ca2:	bf00      	nop
 8003ca4:	370c      	adds	r7, #12
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr

08003cae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003cae:	b480      	push	{r7}
 8003cb0:	b085      	sub	sp, #20
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
 8003cb6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	689a      	ldr	r2, [r3, #8]
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	683a      	ldr	r2, [r7, #0]
 8003cd2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	683a      	ldr	r2, [r7, #0]
 8003cd8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	1c5a      	adds	r2, r3, #1
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	601a      	str	r2, [r3, #0]
}
 8003cea:	bf00      	nop
 8003cec:	3714      	adds	r7, #20
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr

08003cf6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003cf6:	b480      	push	{r7}
 8003cf8:	b085      	sub	sp, #20
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
 8003cfe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d0c:	d103      	bne.n	8003d16 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	60fb      	str	r3, [r7, #12]
 8003d14:	e00c      	b.n	8003d30 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	3308      	adds	r3, #8
 8003d1a:	60fb      	str	r3, [r7, #12]
 8003d1c:	e002      	b.n	8003d24 <vListInsert+0x2e>
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	60fb      	str	r3, [r7, #12]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	68ba      	ldr	r2, [r7, #8]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d2f6      	bcs.n	8003d1e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	685a      	ldr	r2, [r3, #4]
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	683a      	ldr	r2, [r7, #0]
 8003d3e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	68fa      	ldr	r2, [r7, #12]
 8003d44:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	683a      	ldr	r2, [r7, #0]
 8003d4a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	1c5a      	adds	r2, r3, #1
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	601a      	str	r2, [r3, #0]
}
 8003d5c:	bf00      	nop
 8003d5e:	3714      	adds	r7, #20
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b085      	sub	sp, #20
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	691b      	ldr	r3, [r3, #16]
 8003d74:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	6892      	ldr	r2, [r2, #8]
 8003d7e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	6852      	ldr	r2, [r2, #4]
 8003d88:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d103      	bne.n	8003d9c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	689a      	ldr	r2, [r3, #8]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	1e5a      	subs	r2, r3, #1
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3714      	adds	r7, #20
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b08e      	sub	sp, #56	; 0x38
 8003dc0:	af04      	add	r7, sp, #16
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	607a      	str	r2, [r7, #4]
 8003dc8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d10c      	bne.n	8003dea <xTaskCreateStatic+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd4:	b672      	cpsid	i
 8003dd6:	f383 8811 	msr	BASEPRI, r3
 8003dda:	f3bf 8f6f 	isb	sy
 8003dde:	f3bf 8f4f 	dsb	sy
 8003de2:	b662      	cpsie	i
 8003de4:	623b      	str	r3, [r7, #32]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003de6:	bf00      	nop
 8003de8:	e7fe      	b.n	8003de8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8003dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d10c      	bne.n	8003e0a <xTaskCreateStatic+0x4e>
	__asm volatile
 8003df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df4:	b672      	cpsid	i
 8003df6:	f383 8811 	msr	BASEPRI, r3
 8003dfa:	f3bf 8f6f 	isb	sy
 8003dfe:	f3bf 8f4f 	dsb	sy
 8003e02:	b662      	cpsie	i
 8003e04:	61fb      	str	r3, [r7, #28]
}
 8003e06:	bf00      	nop
 8003e08:	e7fe      	b.n	8003e08 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003e0a:	2354      	movs	r3, #84	; 0x54
 8003e0c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	2b54      	cmp	r3, #84	; 0x54
 8003e12:	d00c      	beq.n	8003e2e <xTaskCreateStatic+0x72>
	__asm volatile
 8003e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e18:	b672      	cpsid	i
 8003e1a:	f383 8811 	msr	BASEPRI, r3
 8003e1e:	f3bf 8f6f 	isb	sy
 8003e22:	f3bf 8f4f 	dsb	sy
 8003e26:	b662      	cpsie	i
 8003e28:	61bb      	str	r3, [r7, #24]
}
 8003e2a:	bf00      	nop
 8003e2c:	e7fe      	b.n	8003e2c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003e2e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d01e      	beq.n	8003e74 <xTaskCreateStatic+0xb8>
 8003e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d01b      	beq.n	8003e74 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e3e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e44:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e48:	2202      	movs	r2, #2
 8003e4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003e4e:	2300      	movs	r3, #0
 8003e50:	9303      	str	r3, [sp, #12]
 8003e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e54:	9302      	str	r3, [sp, #8]
 8003e56:	f107 0314 	add.w	r3, r7, #20
 8003e5a:	9301      	str	r3, [sp, #4]
 8003e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e5e:	9300      	str	r3, [sp, #0]
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	68b9      	ldr	r1, [r7, #8]
 8003e66:	68f8      	ldr	r0, [r7, #12]
 8003e68:	f000 f850 	bl	8003f0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003e6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e6e:	f000 f8d7 	bl	8004020 <prvAddNewTaskToReadyList>
 8003e72:	e001      	b.n	8003e78 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8003e74:	2300      	movs	r3, #0
 8003e76:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003e78:	697b      	ldr	r3, [r7, #20]
	}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3728      	adds	r7, #40	; 0x28
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}

08003e82 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003e82:	b580      	push	{r7, lr}
 8003e84:	b08c      	sub	sp, #48	; 0x30
 8003e86:	af04      	add	r7, sp, #16
 8003e88:	60f8      	str	r0, [r7, #12]
 8003e8a:	60b9      	str	r1, [r7, #8]
 8003e8c:	603b      	str	r3, [r7, #0]
 8003e8e:	4613      	mov	r3, r2
 8003e90:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003e92:	88fb      	ldrh	r3, [r7, #6]
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	4618      	mov	r0, r3
 8003e98:	f000 fed8 	bl	8004c4c <pvPortMalloc>
 8003e9c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d00e      	beq.n	8003ec2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003ea4:	2054      	movs	r0, #84	; 0x54
 8003ea6:	f000 fed1 	bl	8004c4c <pvPortMalloc>
 8003eaa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d003      	beq.n	8003eba <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	697a      	ldr	r2, [r7, #20]
 8003eb6:	631a      	str	r2, [r3, #48]	; 0x30
 8003eb8:	e005      	b.n	8003ec6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003eba:	6978      	ldr	r0, [r7, #20]
 8003ebc:	f000 ff90 	bl	8004de0 <vPortFree>
 8003ec0:	e001      	b.n	8003ec6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d017      	beq.n	8003efc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003ed4:	88fa      	ldrh	r2, [r7, #6]
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	9303      	str	r3, [sp, #12]
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	9302      	str	r3, [sp, #8]
 8003ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ee0:	9301      	str	r3, [sp, #4]
 8003ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee4:	9300      	str	r3, [sp, #0]
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	68b9      	ldr	r1, [r7, #8]
 8003eea:	68f8      	ldr	r0, [r7, #12]
 8003eec:	f000 f80e 	bl	8003f0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003ef0:	69f8      	ldr	r0, [r7, #28]
 8003ef2:	f000 f895 	bl	8004020 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	61bb      	str	r3, [r7, #24]
 8003efa:	e002      	b.n	8003f02 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003efc:	f04f 33ff 	mov.w	r3, #4294967295
 8003f00:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003f02:	69bb      	ldr	r3, [r7, #24]
	}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3720      	adds	r7, #32
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b088      	sub	sp, #32
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	607a      	str	r2, [r7, #4]
 8003f18:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f1e:	6879      	ldr	r1, [r7, #4]
 8003f20:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8003f24:	440b      	add	r3, r1
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	4413      	add	r3, r2
 8003f2a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003f2c:	69bb      	ldr	r3, [r7, #24]
 8003f2e:	f023 0307 	bic.w	r3, r3, #7
 8003f32:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	f003 0307 	and.w	r3, r3, #7
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00c      	beq.n	8003f58 <prvInitialiseNewTask+0x4c>
	__asm volatile
 8003f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f42:	b672      	cpsid	i
 8003f44:	f383 8811 	msr	BASEPRI, r3
 8003f48:	f3bf 8f6f 	isb	sy
 8003f4c:	f3bf 8f4f 	dsb	sy
 8003f50:	b662      	cpsie	i
 8003f52:	617b      	str	r3, [r7, #20]
}
 8003f54:	bf00      	nop
 8003f56:	e7fe      	b.n	8003f56 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d01f      	beq.n	8003f9e <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f5e:	2300      	movs	r3, #0
 8003f60:	61fb      	str	r3, [r7, #28]
 8003f62:	e012      	b.n	8003f8a <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003f64:	68ba      	ldr	r2, [r7, #8]
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	4413      	add	r3, r2
 8003f6a:	7819      	ldrb	r1, [r3, #0]
 8003f6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	4413      	add	r3, r2
 8003f72:	3334      	adds	r3, #52	; 0x34
 8003f74:	460a      	mov	r2, r1
 8003f76:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003f78:	68ba      	ldr	r2, [r7, #8]
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d006      	beq.n	8003f92 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	3301      	adds	r3, #1
 8003f88:	61fb      	str	r3, [r7, #28]
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	2b0f      	cmp	r3, #15
 8003f8e:	d9e9      	bls.n	8003f64 <prvInitialiseNewTask+0x58>
 8003f90:	e000      	b.n	8003f94 <prvInitialiseNewTask+0x88>
			{
				break;
 8003f92:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f96:	2200      	movs	r2, #0
 8003f98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f9c:	e003      	b.n	8003fa6 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fa8:	2b06      	cmp	r3, #6
 8003faa:	d901      	bls.n	8003fb0 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003fac:	2306      	movs	r3, #6
 8003fae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fb4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fba:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc4:	3304      	adds	r3, #4
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f7ff fe64 	bl	8003c94 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fce:	3318      	adds	r3, #24
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f7ff fe5f 	bl	8003c94 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fda:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fde:	f1c3 0207 	rsb	r2, r3, #7
 8003fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fee:	2200      	movs	r2, #0
 8003ff0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003ffa:	683a      	ldr	r2, [r7, #0]
 8003ffc:	68f9      	ldr	r1, [r7, #12]
 8003ffe:	69b8      	ldr	r0, [r7, #24]
 8004000:	f000 fc32 	bl	8004868 <pxPortInitialiseStack>
 8004004:	4602      	mov	r2, r0
 8004006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004008:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800400a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800400c:	2b00      	cmp	r3, #0
 800400e:	d002      	beq.n	8004016 <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004012:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004014:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004016:	bf00      	nop
 8004018:	3720      	adds	r7, #32
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
	...

08004020 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004028:	f000 fd28 	bl	8004a7c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800402c:	4b2a      	ldr	r3, [pc, #168]	; (80040d8 <prvAddNewTaskToReadyList+0xb8>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	3301      	adds	r3, #1
 8004032:	4a29      	ldr	r2, [pc, #164]	; (80040d8 <prvAddNewTaskToReadyList+0xb8>)
 8004034:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004036:	4b29      	ldr	r3, [pc, #164]	; (80040dc <prvAddNewTaskToReadyList+0xbc>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d109      	bne.n	8004052 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800403e:	4a27      	ldr	r2, [pc, #156]	; (80040dc <prvAddNewTaskToReadyList+0xbc>)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004044:	4b24      	ldr	r3, [pc, #144]	; (80040d8 <prvAddNewTaskToReadyList+0xb8>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2b01      	cmp	r3, #1
 800404a:	d110      	bne.n	800406e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800404c:	f000 fac8 	bl	80045e0 <prvInitialiseTaskLists>
 8004050:	e00d      	b.n	800406e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004052:	4b23      	ldr	r3, [pc, #140]	; (80040e0 <prvAddNewTaskToReadyList+0xc0>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d109      	bne.n	800406e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800405a:	4b20      	ldr	r3, [pc, #128]	; (80040dc <prvAddNewTaskToReadyList+0xbc>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004064:	429a      	cmp	r2, r3
 8004066:	d802      	bhi.n	800406e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004068:	4a1c      	ldr	r2, [pc, #112]	; (80040dc <prvAddNewTaskToReadyList+0xbc>)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800406e:	4b1d      	ldr	r3, [pc, #116]	; (80040e4 <prvAddNewTaskToReadyList+0xc4>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	3301      	adds	r3, #1
 8004074:	4a1b      	ldr	r2, [pc, #108]	; (80040e4 <prvAddNewTaskToReadyList+0xc4>)
 8004076:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800407c:	2201      	movs	r2, #1
 800407e:	409a      	lsls	r2, r3
 8004080:	4b19      	ldr	r3, [pc, #100]	; (80040e8 <prvAddNewTaskToReadyList+0xc8>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4313      	orrs	r3, r2
 8004086:	4a18      	ldr	r2, [pc, #96]	; (80040e8 <prvAddNewTaskToReadyList+0xc8>)
 8004088:	6013      	str	r3, [r2, #0]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800408e:	4613      	mov	r3, r2
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	4413      	add	r3, r2
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	4a15      	ldr	r2, [pc, #84]	; (80040ec <prvAddNewTaskToReadyList+0xcc>)
 8004098:	441a      	add	r2, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	3304      	adds	r3, #4
 800409e:	4619      	mov	r1, r3
 80040a0:	4610      	mov	r0, r2
 80040a2:	f7ff fe04 	bl	8003cae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80040a6:	f000 fd1d 	bl	8004ae4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80040aa:	4b0d      	ldr	r3, [pc, #52]	; (80040e0 <prvAddNewTaskToReadyList+0xc0>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00e      	beq.n	80040d0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80040b2:	4b0a      	ldr	r3, [pc, #40]	; (80040dc <prvAddNewTaskToReadyList+0xbc>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040bc:	429a      	cmp	r2, r3
 80040be:	d207      	bcs.n	80040d0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80040c0:	4b0b      	ldr	r3, [pc, #44]	; (80040f0 <prvAddNewTaskToReadyList+0xd0>)
 80040c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040c6:	601a      	str	r2, [r3, #0]
 80040c8:	f3bf 8f4f 	dsb	sy
 80040cc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80040d0:	bf00      	nop
 80040d2:	3708      	adds	r7, #8
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	200007e4 	.word	0x200007e4
 80040dc:	200006e4 	.word	0x200006e4
 80040e0:	200007f0 	.word	0x200007f0
 80040e4:	20000800 	.word	0x20000800
 80040e8:	200007ec 	.word	0x200007ec
 80040ec:	200006e8 	.word	0x200006e8
 80040f0:	e000ed04 	.word	0xe000ed04

080040f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80040fc:	2300      	movs	r3, #0
 80040fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d019      	beq.n	800413a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004106:	4b14      	ldr	r3, [pc, #80]	; (8004158 <vTaskDelay+0x64>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d00c      	beq.n	8004128 <vTaskDelay+0x34>
	__asm volatile
 800410e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004112:	b672      	cpsid	i
 8004114:	f383 8811 	msr	BASEPRI, r3
 8004118:	f3bf 8f6f 	isb	sy
 800411c:	f3bf 8f4f 	dsb	sy
 8004120:	b662      	cpsie	i
 8004122:	60bb      	str	r3, [r7, #8]
}
 8004124:	bf00      	nop
 8004126:	e7fe      	b.n	8004126 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8004128:	f000 f87e 	bl	8004228 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800412c:	2100      	movs	r1, #0
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 fb34 	bl	800479c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004134:	f000 f886 	bl	8004244 <xTaskResumeAll>
 8004138:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d107      	bne.n	8004150 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8004140:	4b06      	ldr	r3, [pc, #24]	; (800415c <vTaskDelay+0x68>)
 8004142:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004146:	601a      	str	r2, [r3, #0]
 8004148:	f3bf 8f4f 	dsb	sy
 800414c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004150:	bf00      	nop
 8004152:	3710      	adds	r7, #16
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}
 8004158:	2000080c 	.word	0x2000080c
 800415c:	e000ed04 	.word	0xe000ed04

08004160 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b08a      	sub	sp, #40	; 0x28
 8004164:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004166:	2300      	movs	r3, #0
 8004168:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800416a:	2300      	movs	r3, #0
 800416c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800416e:	463a      	mov	r2, r7
 8004170:	1d39      	adds	r1, r7, #4
 8004172:	f107 0308 	add.w	r3, r7, #8
 8004176:	4618      	mov	r0, r3
 8004178:	f7fc fa1c 	bl	80005b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800417c:	6839      	ldr	r1, [r7, #0]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	68ba      	ldr	r2, [r7, #8]
 8004182:	9202      	str	r2, [sp, #8]
 8004184:	9301      	str	r3, [sp, #4]
 8004186:	2300      	movs	r3, #0
 8004188:	9300      	str	r3, [sp, #0]
 800418a:	2300      	movs	r3, #0
 800418c:	460a      	mov	r2, r1
 800418e:	4920      	ldr	r1, [pc, #128]	; (8004210 <vTaskStartScheduler+0xb0>)
 8004190:	4820      	ldr	r0, [pc, #128]	; (8004214 <vTaskStartScheduler+0xb4>)
 8004192:	f7ff fe13 	bl	8003dbc <xTaskCreateStatic>
 8004196:	4603      	mov	r3, r0
 8004198:	4a1f      	ldr	r2, [pc, #124]	; (8004218 <vTaskStartScheduler+0xb8>)
 800419a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800419c:	4b1e      	ldr	r3, [pc, #120]	; (8004218 <vTaskStartScheduler+0xb8>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d002      	beq.n	80041aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80041a4:	2301      	movs	r3, #1
 80041a6:	617b      	str	r3, [r7, #20]
 80041a8:	e001      	b.n	80041ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80041aa:	2300      	movs	r3, #0
 80041ac:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d118      	bne.n	80041e6 <vTaskStartScheduler+0x86>
	__asm volatile
 80041b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b8:	b672      	cpsid	i
 80041ba:	f383 8811 	msr	BASEPRI, r3
 80041be:	f3bf 8f6f 	isb	sy
 80041c2:	f3bf 8f4f 	dsb	sy
 80041c6:	b662      	cpsie	i
 80041c8:	613b      	str	r3, [r7, #16]
}
 80041ca:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80041cc:	4b13      	ldr	r3, [pc, #76]	; (800421c <vTaskStartScheduler+0xbc>)
 80041ce:	f04f 32ff 	mov.w	r2, #4294967295
 80041d2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80041d4:	4b12      	ldr	r3, [pc, #72]	; (8004220 <vTaskStartScheduler+0xc0>)
 80041d6:	2201      	movs	r2, #1
 80041d8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80041da:	4b12      	ldr	r3, [pc, #72]	; (8004224 <vTaskStartScheduler+0xc4>)
 80041dc:	2200      	movs	r2, #0
 80041de:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80041e0:	f000 fbce 	bl	8004980 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80041e4:	e010      	b.n	8004208 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ec:	d10c      	bne.n	8004208 <vTaskStartScheduler+0xa8>
	__asm volatile
 80041ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f2:	b672      	cpsid	i
 80041f4:	f383 8811 	msr	BASEPRI, r3
 80041f8:	f3bf 8f6f 	isb	sy
 80041fc:	f3bf 8f4f 	dsb	sy
 8004200:	b662      	cpsie	i
 8004202:	60fb      	str	r3, [r7, #12]
}
 8004204:	bf00      	nop
 8004206:	e7fe      	b.n	8004206 <vTaskStartScheduler+0xa6>
}
 8004208:	bf00      	nop
 800420a:	3718      	adds	r7, #24
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}
 8004210:	08006498 	.word	0x08006498
 8004214:	080045b1 	.word	0x080045b1
 8004218:	20000808 	.word	0x20000808
 800421c:	20000804 	.word	0x20000804
 8004220:	200007f0 	.word	0x200007f0
 8004224:	200007e8 	.word	0x200007e8

08004228 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004228:	b480      	push	{r7}
 800422a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800422c:	4b04      	ldr	r3, [pc, #16]	; (8004240 <vTaskSuspendAll+0x18>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	3301      	adds	r3, #1
 8004232:	4a03      	ldr	r2, [pc, #12]	; (8004240 <vTaskSuspendAll+0x18>)
 8004234:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004236:	bf00      	nop
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr
 8004240:	2000080c 	.word	0x2000080c

08004244 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800424a:	2300      	movs	r3, #0
 800424c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800424e:	2300      	movs	r3, #0
 8004250:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004252:	4b42      	ldr	r3, [pc, #264]	; (800435c <xTaskResumeAll+0x118>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d10c      	bne.n	8004274 <xTaskResumeAll+0x30>
	__asm volatile
 800425a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800425e:	b672      	cpsid	i
 8004260:	f383 8811 	msr	BASEPRI, r3
 8004264:	f3bf 8f6f 	isb	sy
 8004268:	f3bf 8f4f 	dsb	sy
 800426c:	b662      	cpsie	i
 800426e:	603b      	str	r3, [r7, #0]
}
 8004270:	bf00      	nop
 8004272:	e7fe      	b.n	8004272 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004274:	f000 fc02 	bl	8004a7c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004278:	4b38      	ldr	r3, [pc, #224]	; (800435c <xTaskResumeAll+0x118>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	3b01      	subs	r3, #1
 800427e:	4a37      	ldr	r2, [pc, #220]	; (800435c <xTaskResumeAll+0x118>)
 8004280:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004282:	4b36      	ldr	r3, [pc, #216]	; (800435c <xTaskResumeAll+0x118>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d161      	bne.n	800434e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800428a:	4b35      	ldr	r3, [pc, #212]	; (8004360 <xTaskResumeAll+0x11c>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d05d      	beq.n	800434e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004292:	e02e      	b.n	80042f2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004294:	4b33      	ldr	r3, [pc, #204]	; (8004364 <xTaskResumeAll+0x120>)
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	3318      	adds	r3, #24
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7ff fd61 	bl	8003d68 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	3304      	adds	r3, #4
 80042aa:	4618      	mov	r0, r3
 80042ac:	f7ff fd5c 	bl	8003d68 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b4:	2201      	movs	r2, #1
 80042b6:	409a      	lsls	r2, r3
 80042b8:	4b2b      	ldr	r3, [pc, #172]	; (8004368 <xTaskResumeAll+0x124>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4313      	orrs	r3, r2
 80042be:	4a2a      	ldr	r2, [pc, #168]	; (8004368 <xTaskResumeAll+0x124>)
 80042c0:	6013      	str	r3, [r2, #0]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042c6:	4613      	mov	r3, r2
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	4413      	add	r3, r2
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	4a27      	ldr	r2, [pc, #156]	; (800436c <xTaskResumeAll+0x128>)
 80042d0:	441a      	add	r2, r3
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	3304      	adds	r3, #4
 80042d6:	4619      	mov	r1, r3
 80042d8:	4610      	mov	r0, r2
 80042da:	f7ff fce8 	bl	8003cae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042e2:	4b23      	ldr	r3, [pc, #140]	; (8004370 <xTaskResumeAll+0x12c>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d302      	bcc.n	80042f2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80042ec:	4b21      	ldr	r3, [pc, #132]	; (8004374 <xTaskResumeAll+0x130>)
 80042ee:	2201      	movs	r2, #1
 80042f0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80042f2:	4b1c      	ldr	r3, [pc, #112]	; (8004364 <xTaskResumeAll+0x120>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d1cc      	bne.n	8004294 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d001      	beq.n	8004304 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004300:	f000 fa0e 	bl	8004720 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004304:	4b1c      	ldr	r3, [pc, #112]	; (8004378 <xTaskResumeAll+0x134>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d010      	beq.n	8004332 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004310:	f000 f836 	bl	8004380 <xTaskIncrementTick>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d002      	beq.n	8004320 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800431a:	4b16      	ldr	r3, [pc, #88]	; (8004374 <xTaskResumeAll+0x130>)
 800431c:	2201      	movs	r2, #1
 800431e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	3b01      	subs	r3, #1
 8004324:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d1f1      	bne.n	8004310 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800432c:	4b12      	ldr	r3, [pc, #72]	; (8004378 <xTaskResumeAll+0x134>)
 800432e:	2200      	movs	r2, #0
 8004330:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004332:	4b10      	ldr	r3, [pc, #64]	; (8004374 <xTaskResumeAll+0x130>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d009      	beq.n	800434e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800433a:	2301      	movs	r3, #1
 800433c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800433e:	4b0f      	ldr	r3, [pc, #60]	; (800437c <xTaskResumeAll+0x138>)
 8004340:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004344:	601a      	str	r2, [r3, #0]
 8004346:	f3bf 8f4f 	dsb	sy
 800434a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800434e:	f000 fbc9 	bl	8004ae4 <vPortExitCritical>

	return xAlreadyYielded;
 8004352:	68bb      	ldr	r3, [r7, #8]
}
 8004354:	4618      	mov	r0, r3
 8004356:	3710      	adds	r7, #16
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}
 800435c:	2000080c 	.word	0x2000080c
 8004360:	200007e4 	.word	0x200007e4
 8004364:	200007a4 	.word	0x200007a4
 8004368:	200007ec 	.word	0x200007ec
 800436c:	200006e8 	.word	0x200006e8
 8004370:	200006e4 	.word	0x200006e4
 8004374:	200007f8 	.word	0x200007f8
 8004378:	200007f4 	.word	0x200007f4
 800437c:	e000ed04 	.word	0xe000ed04

08004380 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b086      	sub	sp, #24
 8004384:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004386:	2300      	movs	r3, #0
 8004388:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800438a:	4b4f      	ldr	r3, [pc, #316]	; (80044c8 <xTaskIncrementTick+0x148>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2b00      	cmp	r3, #0
 8004390:	f040 808a 	bne.w	80044a8 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004394:	4b4d      	ldr	r3, [pc, #308]	; (80044cc <xTaskIncrementTick+0x14c>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	3301      	adds	r3, #1
 800439a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800439c:	4a4b      	ldr	r2, [pc, #300]	; (80044cc <xTaskIncrementTick+0x14c>)
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d122      	bne.n	80043ee <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80043a8:	4b49      	ldr	r3, [pc, #292]	; (80044d0 <xTaskIncrementTick+0x150>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d00c      	beq.n	80043cc <xTaskIncrementTick+0x4c>
	__asm volatile
 80043b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b6:	b672      	cpsid	i
 80043b8:	f383 8811 	msr	BASEPRI, r3
 80043bc:	f3bf 8f6f 	isb	sy
 80043c0:	f3bf 8f4f 	dsb	sy
 80043c4:	b662      	cpsie	i
 80043c6:	603b      	str	r3, [r7, #0]
}
 80043c8:	bf00      	nop
 80043ca:	e7fe      	b.n	80043ca <xTaskIncrementTick+0x4a>
 80043cc:	4b40      	ldr	r3, [pc, #256]	; (80044d0 <xTaskIncrementTick+0x150>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	60fb      	str	r3, [r7, #12]
 80043d2:	4b40      	ldr	r3, [pc, #256]	; (80044d4 <xTaskIncrementTick+0x154>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a3e      	ldr	r2, [pc, #248]	; (80044d0 <xTaskIncrementTick+0x150>)
 80043d8:	6013      	str	r3, [r2, #0]
 80043da:	4a3e      	ldr	r2, [pc, #248]	; (80044d4 <xTaskIncrementTick+0x154>)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6013      	str	r3, [r2, #0]
 80043e0:	4b3d      	ldr	r3, [pc, #244]	; (80044d8 <xTaskIncrementTick+0x158>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	3301      	adds	r3, #1
 80043e6:	4a3c      	ldr	r2, [pc, #240]	; (80044d8 <xTaskIncrementTick+0x158>)
 80043e8:	6013      	str	r3, [r2, #0]
 80043ea:	f000 f999 	bl	8004720 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80043ee:	4b3b      	ldr	r3, [pc, #236]	; (80044dc <xTaskIncrementTick+0x15c>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	693a      	ldr	r2, [r7, #16]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d348      	bcc.n	800448a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043f8:	4b35      	ldr	r3, [pc, #212]	; (80044d0 <xTaskIncrementTick+0x150>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d104      	bne.n	800440c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004402:	4b36      	ldr	r3, [pc, #216]	; (80044dc <xTaskIncrementTick+0x15c>)
 8004404:	f04f 32ff 	mov.w	r2, #4294967295
 8004408:	601a      	str	r2, [r3, #0]
					break;
 800440a:	e03e      	b.n	800448a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800440c:	4b30      	ldr	r3, [pc, #192]	; (80044d0 <xTaskIncrementTick+0x150>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800441c:	693a      	ldr	r2, [r7, #16]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	429a      	cmp	r2, r3
 8004422:	d203      	bcs.n	800442c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004424:	4a2d      	ldr	r2, [pc, #180]	; (80044dc <xTaskIncrementTick+0x15c>)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800442a:	e02e      	b.n	800448a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	3304      	adds	r3, #4
 8004430:	4618      	mov	r0, r3
 8004432:	f7ff fc99 	bl	8003d68 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800443a:	2b00      	cmp	r3, #0
 800443c:	d004      	beq.n	8004448 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	3318      	adds	r3, #24
 8004442:	4618      	mov	r0, r3
 8004444:	f7ff fc90 	bl	8003d68 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444c:	2201      	movs	r2, #1
 800444e:	409a      	lsls	r2, r3
 8004450:	4b23      	ldr	r3, [pc, #140]	; (80044e0 <xTaskIncrementTick+0x160>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4313      	orrs	r3, r2
 8004456:	4a22      	ldr	r2, [pc, #136]	; (80044e0 <xTaskIncrementTick+0x160>)
 8004458:	6013      	str	r3, [r2, #0]
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800445e:	4613      	mov	r3, r2
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	4413      	add	r3, r2
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	4a1f      	ldr	r2, [pc, #124]	; (80044e4 <xTaskIncrementTick+0x164>)
 8004468:	441a      	add	r2, r3
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	3304      	adds	r3, #4
 800446e:	4619      	mov	r1, r3
 8004470:	4610      	mov	r0, r2
 8004472:	f7ff fc1c 	bl	8003cae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800447a:	4b1b      	ldr	r3, [pc, #108]	; (80044e8 <xTaskIncrementTick+0x168>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004480:	429a      	cmp	r2, r3
 8004482:	d3b9      	bcc.n	80043f8 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8004484:	2301      	movs	r3, #1
 8004486:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004488:	e7b6      	b.n	80043f8 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800448a:	4b17      	ldr	r3, [pc, #92]	; (80044e8 <xTaskIncrementTick+0x168>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004490:	4914      	ldr	r1, [pc, #80]	; (80044e4 <xTaskIncrementTick+0x164>)
 8004492:	4613      	mov	r3, r2
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	4413      	add	r3, r2
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	440b      	add	r3, r1
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d907      	bls.n	80044b2 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 80044a2:	2301      	movs	r3, #1
 80044a4:	617b      	str	r3, [r7, #20]
 80044a6:	e004      	b.n	80044b2 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80044a8:	4b10      	ldr	r3, [pc, #64]	; (80044ec <xTaskIncrementTick+0x16c>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	3301      	adds	r3, #1
 80044ae:	4a0f      	ldr	r2, [pc, #60]	; (80044ec <xTaskIncrementTick+0x16c>)
 80044b0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80044b2:	4b0f      	ldr	r3, [pc, #60]	; (80044f0 <xTaskIncrementTick+0x170>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d001      	beq.n	80044be <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 80044ba:	2301      	movs	r3, #1
 80044bc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80044be:	697b      	ldr	r3, [r7, #20]
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3718      	adds	r7, #24
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	2000080c 	.word	0x2000080c
 80044cc:	200007e8 	.word	0x200007e8
 80044d0:	2000079c 	.word	0x2000079c
 80044d4:	200007a0 	.word	0x200007a0
 80044d8:	200007fc 	.word	0x200007fc
 80044dc:	20000804 	.word	0x20000804
 80044e0:	200007ec 	.word	0x200007ec
 80044e4:	200006e8 	.word	0x200006e8
 80044e8:	200006e4 	.word	0x200006e4
 80044ec:	200007f4 	.word	0x200007f4
 80044f0:	200007f8 	.word	0x200007f8

080044f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80044f4:	b480      	push	{r7}
 80044f6:	b087      	sub	sp, #28
 80044f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80044fa:	4b28      	ldr	r3, [pc, #160]	; (800459c <vTaskSwitchContext+0xa8>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d003      	beq.n	800450a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004502:	4b27      	ldr	r3, [pc, #156]	; (80045a0 <vTaskSwitchContext+0xac>)
 8004504:	2201      	movs	r2, #1
 8004506:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004508:	e041      	b.n	800458e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800450a:	4b25      	ldr	r3, [pc, #148]	; (80045a0 <vTaskSwitchContext+0xac>)
 800450c:	2200      	movs	r2, #0
 800450e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004510:	4b24      	ldr	r3, [pc, #144]	; (80045a4 <vTaskSwitchContext+0xb0>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	fab3 f383 	clz	r3, r3
 800451c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800451e:	7afb      	ldrb	r3, [r7, #11]
 8004520:	f1c3 031f 	rsb	r3, r3, #31
 8004524:	617b      	str	r3, [r7, #20]
 8004526:	4920      	ldr	r1, [pc, #128]	; (80045a8 <vTaskSwitchContext+0xb4>)
 8004528:	697a      	ldr	r2, [r7, #20]
 800452a:	4613      	mov	r3, r2
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	4413      	add	r3, r2
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	440b      	add	r3, r1
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d10c      	bne.n	8004554 <vTaskSwitchContext+0x60>
	__asm volatile
 800453a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800453e:	b672      	cpsid	i
 8004540:	f383 8811 	msr	BASEPRI, r3
 8004544:	f3bf 8f6f 	isb	sy
 8004548:	f3bf 8f4f 	dsb	sy
 800454c:	b662      	cpsie	i
 800454e:	607b      	str	r3, [r7, #4]
}
 8004550:	bf00      	nop
 8004552:	e7fe      	b.n	8004552 <vTaskSwitchContext+0x5e>
 8004554:	697a      	ldr	r2, [r7, #20]
 8004556:	4613      	mov	r3, r2
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	4413      	add	r3, r2
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	4a12      	ldr	r2, [pc, #72]	; (80045a8 <vTaskSwitchContext+0xb4>)
 8004560:	4413      	add	r3, r2
 8004562:	613b      	str	r3, [r7, #16]
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	685a      	ldr	r2, [r3, #4]
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	605a      	str	r2, [r3, #4]
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	685a      	ldr	r2, [r3, #4]
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	3308      	adds	r3, #8
 8004576:	429a      	cmp	r2, r3
 8004578:	d104      	bne.n	8004584 <vTaskSwitchContext+0x90>
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	685a      	ldr	r2, [r3, #4]
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	605a      	str	r2, [r3, #4]
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	4a08      	ldr	r2, [pc, #32]	; (80045ac <vTaskSwitchContext+0xb8>)
 800458c:	6013      	str	r3, [r2, #0]
}
 800458e:	bf00      	nop
 8004590:	371c      	adds	r7, #28
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr
 800459a:	bf00      	nop
 800459c:	2000080c 	.word	0x2000080c
 80045a0:	200007f8 	.word	0x200007f8
 80045a4:	200007ec 	.word	0x200007ec
 80045a8:	200006e8 	.word	0x200006e8
 80045ac:	200006e4 	.word	0x200006e4

080045b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80045b8:	f000 f852 	bl	8004660 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80045bc:	4b06      	ldr	r3, [pc, #24]	; (80045d8 <prvIdleTask+0x28>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d9f9      	bls.n	80045b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80045c4:	4b05      	ldr	r3, [pc, #20]	; (80045dc <prvIdleTask+0x2c>)
 80045c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045ca:	601a      	str	r2, [r3, #0]
 80045cc:	f3bf 8f4f 	dsb	sy
 80045d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80045d4:	e7f0      	b.n	80045b8 <prvIdleTask+0x8>
 80045d6:	bf00      	nop
 80045d8:	200006e8 	.word	0x200006e8
 80045dc:	e000ed04 	.word	0xe000ed04

080045e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b082      	sub	sp, #8
 80045e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80045e6:	2300      	movs	r3, #0
 80045e8:	607b      	str	r3, [r7, #4]
 80045ea:	e00c      	b.n	8004606 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	4613      	mov	r3, r2
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	4413      	add	r3, r2
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	4a12      	ldr	r2, [pc, #72]	; (8004640 <prvInitialiseTaskLists+0x60>)
 80045f8:	4413      	add	r3, r2
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7ff fb2a 	bl	8003c54 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	3301      	adds	r3, #1
 8004604:	607b      	str	r3, [r7, #4]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2b06      	cmp	r3, #6
 800460a:	d9ef      	bls.n	80045ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800460c:	480d      	ldr	r0, [pc, #52]	; (8004644 <prvInitialiseTaskLists+0x64>)
 800460e:	f7ff fb21 	bl	8003c54 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004612:	480d      	ldr	r0, [pc, #52]	; (8004648 <prvInitialiseTaskLists+0x68>)
 8004614:	f7ff fb1e 	bl	8003c54 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004618:	480c      	ldr	r0, [pc, #48]	; (800464c <prvInitialiseTaskLists+0x6c>)
 800461a:	f7ff fb1b 	bl	8003c54 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800461e:	480c      	ldr	r0, [pc, #48]	; (8004650 <prvInitialiseTaskLists+0x70>)
 8004620:	f7ff fb18 	bl	8003c54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004624:	480b      	ldr	r0, [pc, #44]	; (8004654 <prvInitialiseTaskLists+0x74>)
 8004626:	f7ff fb15 	bl	8003c54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800462a:	4b0b      	ldr	r3, [pc, #44]	; (8004658 <prvInitialiseTaskLists+0x78>)
 800462c:	4a05      	ldr	r2, [pc, #20]	; (8004644 <prvInitialiseTaskLists+0x64>)
 800462e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004630:	4b0a      	ldr	r3, [pc, #40]	; (800465c <prvInitialiseTaskLists+0x7c>)
 8004632:	4a05      	ldr	r2, [pc, #20]	; (8004648 <prvInitialiseTaskLists+0x68>)
 8004634:	601a      	str	r2, [r3, #0]
}
 8004636:	bf00      	nop
 8004638:	3708      	adds	r7, #8
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	200006e8 	.word	0x200006e8
 8004644:	20000774 	.word	0x20000774
 8004648:	20000788 	.word	0x20000788
 800464c:	200007a4 	.word	0x200007a4
 8004650:	200007b8 	.word	0x200007b8
 8004654:	200007d0 	.word	0x200007d0
 8004658:	2000079c 	.word	0x2000079c
 800465c:	200007a0 	.word	0x200007a0

08004660 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004666:	e019      	b.n	800469c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004668:	f000 fa08 	bl	8004a7c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800466c:	4b10      	ldr	r3, [pc, #64]	; (80046b0 <prvCheckTasksWaitingTermination+0x50>)
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	3304      	adds	r3, #4
 8004678:	4618      	mov	r0, r3
 800467a:	f7ff fb75 	bl	8003d68 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800467e:	4b0d      	ldr	r3, [pc, #52]	; (80046b4 <prvCheckTasksWaitingTermination+0x54>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	3b01      	subs	r3, #1
 8004684:	4a0b      	ldr	r2, [pc, #44]	; (80046b4 <prvCheckTasksWaitingTermination+0x54>)
 8004686:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004688:	4b0b      	ldr	r3, [pc, #44]	; (80046b8 <prvCheckTasksWaitingTermination+0x58>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	3b01      	subs	r3, #1
 800468e:	4a0a      	ldr	r2, [pc, #40]	; (80046b8 <prvCheckTasksWaitingTermination+0x58>)
 8004690:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004692:	f000 fa27 	bl	8004ae4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 f810 	bl	80046bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800469c:	4b06      	ldr	r3, [pc, #24]	; (80046b8 <prvCheckTasksWaitingTermination+0x58>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d1e1      	bne.n	8004668 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80046a4:	bf00      	nop
 80046a6:	bf00      	nop
 80046a8:	3708      	adds	r7, #8
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	200007b8 	.word	0x200007b8
 80046b4:	200007e4 	.word	0x200007e4
 80046b8:	200007cc 	.word	0x200007cc

080046bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d108      	bne.n	80046e0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d2:	4618      	mov	r0, r3
 80046d4:	f000 fb84 	bl	8004de0 <vPortFree>
				vPortFree( pxTCB );
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f000 fb81 	bl	8004de0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80046de:	e01a      	b.n	8004716 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d103      	bne.n	80046f2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 fb78 	bl	8004de0 <vPortFree>
	}
 80046f0:	e011      	b.n	8004716 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d00c      	beq.n	8004716 <prvDeleteTCB+0x5a>
	__asm volatile
 80046fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004700:	b672      	cpsid	i
 8004702:	f383 8811 	msr	BASEPRI, r3
 8004706:	f3bf 8f6f 	isb	sy
 800470a:	f3bf 8f4f 	dsb	sy
 800470e:	b662      	cpsie	i
 8004710:	60fb      	str	r3, [r7, #12]
}
 8004712:	bf00      	nop
 8004714:	e7fe      	b.n	8004714 <prvDeleteTCB+0x58>
	}
 8004716:	bf00      	nop
 8004718:	3710      	adds	r7, #16
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
	...

08004720 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004720:	b480      	push	{r7}
 8004722:	b083      	sub	sp, #12
 8004724:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004726:	4b0c      	ldr	r3, [pc, #48]	; (8004758 <prvResetNextTaskUnblockTime+0x38>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d104      	bne.n	800473a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004730:	4b0a      	ldr	r3, [pc, #40]	; (800475c <prvResetNextTaskUnblockTime+0x3c>)
 8004732:	f04f 32ff 	mov.w	r2, #4294967295
 8004736:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004738:	e008      	b.n	800474c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800473a:	4b07      	ldr	r3, [pc, #28]	; (8004758 <prvResetNextTaskUnblockTime+0x38>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	4a04      	ldr	r2, [pc, #16]	; (800475c <prvResetNextTaskUnblockTime+0x3c>)
 800474a:	6013      	str	r3, [r2, #0]
}
 800474c:	bf00      	nop
 800474e:	370c      	adds	r7, #12
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr
 8004758:	2000079c 	.word	0x2000079c
 800475c:	20000804 	.word	0x20000804

08004760 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004766:	4b0b      	ldr	r3, [pc, #44]	; (8004794 <xTaskGetSchedulerState+0x34>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d102      	bne.n	8004774 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800476e:	2301      	movs	r3, #1
 8004770:	607b      	str	r3, [r7, #4]
 8004772:	e008      	b.n	8004786 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004774:	4b08      	ldr	r3, [pc, #32]	; (8004798 <xTaskGetSchedulerState+0x38>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d102      	bne.n	8004782 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800477c:	2302      	movs	r3, #2
 800477e:	607b      	str	r3, [r7, #4]
 8004780:	e001      	b.n	8004786 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004782:	2300      	movs	r3, #0
 8004784:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004786:	687b      	ldr	r3, [r7, #4]
	}
 8004788:	4618      	mov	r0, r3
 800478a:	370c      	adds	r7, #12
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr
 8004794:	200007f0 	.word	0x200007f0
 8004798:	2000080c 	.word	0x2000080c

0800479c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80047a6:	4b29      	ldr	r3, [pc, #164]	; (800484c <prvAddCurrentTaskToDelayedList+0xb0>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047ac:	4b28      	ldr	r3, [pc, #160]	; (8004850 <prvAddCurrentTaskToDelayedList+0xb4>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	3304      	adds	r3, #4
 80047b2:	4618      	mov	r0, r3
 80047b4:	f7ff fad8 	bl	8003d68 <uxListRemove>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d10b      	bne.n	80047d6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80047be:	4b24      	ldr	r3, [pc, #144]	; (8004850 <prvAddCurrentTaskToDelayedList+0xb4>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c4:	2201      	movs	r2, #1
 80047c6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ca:	43da      	mvns	r2, r3
 80047cc:	4b21      	ldr	r3, [pc, #132]	; (8004854 <prvAddCurrentTaskToDelayedList+0xb8>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4013      	ands	r3, r2
 80047d2:	4a20      	ldr	r2, [pc, #128]	; (8004854 <prvAddCurrentTaskToDelayedList+0xb8>)
 80047d4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047dc:	d10a      	bne.n	80047f4 <prvAddCurrentTaskToDelayedList+0x58>
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d007      	beq.n	80047f4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047e4:	4b1a      	ldr	r3, [pc, #104]	; (8004850 <prvAddCurrentTaskToDelayedList+0xb4>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	3304      	adds	r3, #4
 80047ea:	4619      	mov	r1, r3
 80047ec:	481a      	ldr	r0, [pc, #104]	; (8004858 <prvAddCurrentTaskToDelayedList+0xbc>)
 80047ee:	f7ff fa5e 	bl	8003cae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80047f2:	e026      	b.n	8004842 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80047f4:	68fa      	ldr	r2, [r7, #12]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4413      	add	r3, r2
 80047fa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80047fc:	4b14      	ldr	r3, [pc, #80]	; (8004850 <prvAddCurrentTaskToDelayedList+0xb4>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	68ba      	ldr	r2, [r7, #8]
 8004802:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004804:	68ba      	ldr	r2, [r7, #8]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	429a      	cmp	r2, r3
 800480a:	d209      	bcs.n	8004820 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800480c:	4b13      	ldr	r3, [pc, #76]	; (800485c <prvAddCurrentTaskToDelayedList+0xc0>)
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	4b0f      	ldr	r3, [pc, #60]	; (8004850 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	3304      	adds	r3, #4
 8004816:	4619      	mov	r1, r3
 8004818:	4610      	mov	r0, r2
 800481a:	f7ff fa6c 	bl	8003cf6 <vListInsert>
}
 800481e:	e010      	b.n	8004842 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004820:	4b0f      	ldr	r3, [pc, #60]	; (8004860 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	4b0a      	ldr	r3, [pc, #40]	; (8004850 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	3304      	adds	r3, #4
 800482a:	4619      	mov	r1, r3
 800482c:	4610      	mov	r0, r2
 800482e:	f7ff fa62 	bl	8003cf6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004832:	4b0c      	ldr	r3, [pc, #48]	; (8004864 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	68ba      	ldr	r2, [r7, #8]
 8004838:	429a      	cmp	r2, r3
 800483a:	d202      	bcs.n	8004842 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800483c:	4a09      	ldr	r2, [pc, #36]	; (8004864 <prvAddCurrentTaskToDelayedList+0xc8>)
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	6013      	str	r3, [r2, #0]
}
 8004842:	bf00      	nop
 8004844:	3710      	adds	r7, #16
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	200007e8 	.word	0x200007e8
 8004850:	200006e4 	.word	0x200006e4
 8004854:	200007ec 	.word	0x200007ec
 8004858:	200007d0 	.word	0x200007d0
 800485c:	200007a0 	.word	0x200007a0
 8004860:	2000079c 	.word	0x2000079c
 8004864:	20000804 	.word	0x20000804

08004868 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004868:	b480      	push	{r7}
 800486a:	b085      	sub	sp, #20
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	3b04      	subs	r3, #4
 8004878:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004880:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	3b04      	subs	r3, #4
 8004886:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	f023 0201 	bic.w	r2, r3, #1
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	3b04      	subs	r3, #4
 8004896:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004898:	4a0c      	ldr	r2, [pc, #48]	; (80048cc <pxPortInitialiseStack+0x64>)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	3b14      	subs	r3, #20
 80048a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	3b04      	subs	r3, #4
 80048ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f06f 0202 	mvn.w	r2, #2
 80048b6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	3b20      	subs	r3, #32
 80048bc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80048be:	68fb      	ldr	r3, [r7, #12]
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3714      	adds	r7, #20
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr
 80048cc:	080048d1 	.word	0x080048d1

080048d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80048d0:	b480      	push	{r7}
 80048d2:	b085      	sub	sp, #20
 80048d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80048d6:	2300      	movs	r3, #0
 80048d8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80048da:	4b14      	ldr	r3, [pc, #80]	; (800492c <prvTaskExitError+0x5c>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048e2:	d00c      	beq.n	80048fe <prvTaskExitError+0x2e>
	__asm volatile
 80048e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e8:	b672      	cpsid	i
 80048ea:	f383 8811 	msr	BASEPRI, r3
 80048ee:	f3bf 8f6f 	isb	sy
 80048f2:	f3bf 8f4f 	dsb	sy
 80048f6:	b662      	cpsie	i
 80048f8:	60fb      	str	r3, [r7, #12]
}
 80048fa:	bf00      	nop
 80048fc:	e7fe      	b.n	80048fc <prvTaskExitError+0x2c>
	__asm volatile
 80048fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004902:	b672      	cpsid	i
 8004904:	f383 8811 	msr	BASEPRI, r3
 8004908:	f3bf 8f6f 	isb	sy
 800490c:	f3bf 8f4f 	dsb	sy
 8004910:	b662      	cpsie	i
 8004912:	60bb      	str	r3, [r7, #8]
}
 8004914:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004916:	bf00      	nop
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d0fc      	beq.n	8004918 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800491e:	bf00      	nop
 8004920:	bf00      	nop
 8004922:	3714      	adds	r7, #20
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr
 800492c:	20000014 	.word	0x20000014

08004930 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004930:	4b07      	ldr	r3, [pc, #28]	; (8004950 <pxCurrentTCBConst2>)
 8004932:	6819      	ldr	r1, [r3, #0]
 8004934:	6808      	ldr	r0, [r1, #0]
 8004936:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800493a:	f380 8809 	msr	PSP, r0
 800493e:	f3bf 8f6f 	isb	sy
 8004942:	f04f 0000 	mov.w	r0, #0
 8004946:	f380 8811 	msr	BASEPRI, r0
 800494a:	4770      	bx	lr
 800494c:	f3af 8000 	nop.w

08004950 <pxCurrentTCBConst2>:
 8004950:	200006e4 	.word	0x200006e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004954:	bf00      	nop
 8004956:	bf00      	nop

08004958 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004958:	4808      	ldr	r0, [pc, #32]	; (800497c <prvPortStartFirstTask+0x24>)
 800495a:	6800      	ldr	r0, [r0, #0]
 800495c:	6800      	ldr	r0, [r0, #0]
 800495e:	f380 8808 	msr	MSP, r0
 8004962:	f04f 0000 	mov.w	r0, #0
 8004966:	f380 8814 	msr	CONTROL, r0
 800496a:	b662      	cpsie	i
 800496c:	b661      	cpsie	f
 800496e:	f3bf 8f4f 	dsb	sy
 8004972:	f3bf 8f6f 	isb	sy
 8004976:	df00      	svc	0
 8004978:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800497a:	bf00      	nop
 800497c:	e000ed08 	.word	0xe000ed08

08004980 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004986:	4b37      	ldr	r3, [pc, #220]	; (8004a64 <xPortStartScheduler+0xe4>)
 8004988:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	781b      	ldrb	r3, [r3, #0]
 800498e:	b2db      	uxtb	r3, r3
 8004990:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	22ff      	movs	r2, #255	; 0xff
 8004996:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	b2db      	uxtb	r3, r3
 800499e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80049a0:	78fb      	ldrb	r3, [r7, #3]
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80049a8:	b2da      	uxtb	r2, r3
 80049aa:	4b2f      	ldr	r3, [pc, #188]	; (8004a68 <xPortStartScheduler+0xe8>)
 80049ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80049ae:	4b2f      	ldr	r3, [pc, #188]	; (8004a6c <xPortStartScheduler+0xec>)
 80049b0:	2207      	movs	r2, #7
 80049b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80049b4:	e009      	b.n	80049ca <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80049b6:	4b2d      	ldr	r3, [pc, #180]	; (8004a6c <xPortStartScheduler+0xec>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	3b01      	subs	r3, #1
 80049bc:	4a2b      	ldr	r2, [pc, #172]	; (8004a6c <xPortStartScheduler+0xec>)
 80049be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80049c0:	78fb      	ldrb	r3, [r7, #3]
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	005b      	lsls	r3, r3, #1
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80049ca:	78fb      	ldrb	r3, [r7, #3]
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049d2:	2b80      	cmp	r3, #128	; 0x80
 80049d4:	d0ef      	beq.n	80049b6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80049d6:	4b25      	ldr	r3, [pc, #148]	; (8004a6c <xPortStartScheduler+0xec>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f1c3 0307 	rsb	r3, r3, #7
 80049de:	2b04      	cmp	r3, #4
 80049e0:	d00c      	beq.n	80049fc <xPortStartScheduler+0x7c>
	__asm volatile
 80049e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e6:	b672      	cpsid	i
 80049e8:	f383 8811 	msr	BASEPRI, r3
 80049ec:	f3bf 8f6f 	isb	sy
 80049f0:	f3bf 8f4f 	dsb	sy
 80049f4:	b662      	cpsie	i
 80049f6:	60bb      	str	r3, [r7, #8]
}
 80049f8:	bf00      	nop
 80049fa:	e7fe      	b.n	80049fa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80049fc:	4b1b      	ldr	r3, [pc, #108]	; (8004a6c <xPortStartScheduler+0xec>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	021b      	lsls	r3, r3, #8
 8004a02:	4a1a      	ldr	r2, [pc, #104]	; (8004a6c <xPortStartScheduler+0xec>)
 8004a04:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004a06:	4b19      	ldr	r3, [pc, #100]	; (8004a6c <xPortStartScheduler+0xec>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a0e:	4a17      	ldr	r2, [pc, #92]	; (8004a6c <xPortStartScheduler+0xec>)
 8004a10:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	b2da      	uxtb	r2, r3
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004a1a:	4b15      	ldr	r3, [pc, #84]	; (8004a70 <xPortStartScheduler+0xf0>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a14      	ldr	r2, [pc, #80]	; (8004a70 <xPortStartScheduler+0xf0>)
 8004a20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004a24:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004a26:	4b12      	ldr	r3, [pc, #72]	; (8004a70 <xPortStartScheduler+0xf0>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a11      	ldr	r2, [pc, #68]	; (8004a70 <xPortStartScheduler+0xf0>)
 8004a2c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004a30:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004a32:	f000 f8dd 	bl	8004bf0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004a36:	4b0f      	ldr	r3, [pc, #60]	; (8004a74 <xPortStartScheduler+0xf4>)
 8004a38:	2200      	movs	r2, #0
 8004a3a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004a3c:	f000 f8fc 	bl	8004c38 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004a40:	4b0d      	ldr	r3, [pc, #52]	; (8004a78 <xPortStartScheduler+0xf8>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a0c      	ldr	r2, [pc, #48]	; (8004a78 <xPortStartScheduler+0xf8>)
 8004a46:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004a4a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004a4c:	f7ff ff84 	bl	8004958 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004a50:	f7ff fd50 	bl	80044f4 <vTaskSwitchContext>
	prvTaskExitError();
 8004a54:	f7ff ff3c 	bl	80048d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004a58:	2300      	movs	r3, #0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3710      	adds	r7, #16
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	e000e400 	.word	0xe000e400
 8004a68:	20000810 	.word	0x20000810
 8004a6c:	20000814 	.word	0x20000814
 8004a70:	e000ed20 	.word	0xe000ed20
 8004a74:	20000014 	.word	0x20000014
 8004a78:	e000ef34 	.word	0xe000ef34

08004a7c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
	__asm volatile
 8004a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a86:	b672      	cpsid	i
 8004a88:	f383 8811 	msr	BASEPRI, r3
 8004a8c:	f3bf 8f6f 	isb	sy
 8004a90:	f3bf 8f4f 	dsb	sy
 8004a94:	b662      	cpsie	i
 8004a96:	607b      	str	r3, [r7, #4]
}
 8004a98:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004a9a:	4b10      	ldr	r3, [pc, #64]	; (8004adc <vPortEnterCritical+0x60>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	4a0e      	ldr	r2, [pc, #56]	; (8004adc <vPortEnterCritical+0x60>)
 8004aa2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004aa4:	4b0d      	ldr	r3, [pc, #52]	; (8004adc <vPortEnterCritical+0x60>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d111      	bne.n	8004ad0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004aac:	4b0c      	ldr	r3, [pc, #48]	; (8004ae0 <vPortEnterCritical+0x64>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d00c      	beq.n	8004ad0 <vPortEnterCritical+0x54>
	__asm volatile
 8004ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aba:	b672      	cpsid	i
 8004abc:	f383 8811 	msr	BASEPRI, r3
 8004ac0:	f3bf 8f6f 	isb	sy
 8004ac4:	f3bf 8f4f 	dsb	sy
 8004ac8:	b662      	cpsie	i
 8004aca:	603b      	str	r3, [r7, #0]
}
 8004acc:	bf00      	nop
 8004ace:	e7fe      	b.n	8004ace <vPortEnterCritical+0x52>
	}
}
 8004ad0:	bf00      	nop
 8004ad2:	370c      	adds	r7, #12
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr
 8004adc:	20000014 	.word	0x20000014
 8004ae0:	e000ed04 	.word	0xe000ed04

08004ae4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004aea:	4b13      	ldr	r3, [pc, #76]	; (8004b38 <vPortExitCritical+0x54>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d10c      	bne.n	8004b0c <vPortExitCritical+0x28>
	__asm volatile
 8004af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af6:	b672      	cpsid	i
 8004af8:	f383 8811 	msr	BASEPRI, r3
 8004afc:	f3bf 8f6f 	isb	sy
 8004b00:	f3bf 8f4f 	dsb	sy
 8004b04:	b662      	cpsie	i
 8004b06:	607b      	str	r3, [r7, #4]
}
 8004b08:	bf00      	nop
 8004b0a:	e7fe      	b.n	8004b0a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8004b0c:	4b0a      	ldr	r3, [pc, #40]	; (8004b38 <vPortExitCritical+0x54>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	3b01      	subs	r3, #1
 8004b12:	4a09      	ldr	r2, [pc, #36]	; (8004b38 <vPortExitCritical+0x54>)
 8004b14:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004b16:	4b08      	ldr	r3, [pc, #32]	; (8004b38 <vPortExitCritical+0x54>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d105      	bne.n	8004b2a <vPortExitCritical+0x46>
 8004b1e:	2300      	movs	r3, #0
 8004b20:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004b28:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004b2a:	bf00      	nop
 8004b2c:	370c      	adds	r7, #12
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	20000014 	.word	0x20000014
 8004b3c:	00000000 	.word	0x00000000

08004b40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004b40:	f3ef 8009 	mrs	r0, PSP
 8004b44:	f3bf 8f6f 	isb	sy
 8004b48:	4b15      	ldr	r3, [pc, #84]	; (8004ba0 <pxCurrentTCBConst>)
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	f01e 0f10 	tst.w	lr, #16
 8004b50:	bf08      	it	eq
 8004b52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004b56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b5a:	6010      	str	r0, [r2, #0]
 8004b5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004b60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004b64:	b672      	cpsid	i
 8004b66:	f380 8811 	msr	BASEPRI, r0
 8004b6a:	f3bf 8f4f 	dsb	sy
 8004b6e:	f3bf 8f6f 	isb	sy
 8004b72:	b662      	cpsie	i
 8004b74:	f7ff fcbe 	bl	80044f4 <vTaskSwitchContext>
 8004b78:	f04f 0000 	mov.w	r0, #0
 8004b7c:	f380 8811 	msr	BASEPRI, r0
 8004b80:	bc09      	pop	{r0, r3}
 8004b82:	6819      	ldr	r1, [r3, #0]
 8004b84:	6808      	ldr	r0, [r1, #0]
 8004b86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b8a:	f01e 0f10 	tst.w	lr, #16
 8004b8e:	bf08      	it	eq
 8004b90:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004b94:	f380 8809 	msr	PSP, r0
 8004b98:	f3bf 8f6f 	isb	sy
 8004b9c:	4770      	bx	lr
 8004b9e:	bf00      	nop

08004ba0 <pxCurrentTCBConst>:
 8004ba0:	200006e4 	.word	0x200006e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004ba4:	bf00      	nop
 8004ba6:	bf00      	nop

08004ba8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b082      	sub	sp, #8
 8004bac:	af00      	add	r7, sp, #0
	__asm volatile
 8004bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb2:	b672      	cpsid	i
 8004bb4:	f383 8811 	msr	BASEPRI, r3
 8004bb8:	f3bf 8f6f 	isb	sy
 8004bbc:	f3bf 8f4f 	dsb	sy
 8004bc0:	b662      	cpsie	i
 8004bc2:	607b      	str	r3, [r7, #4]
}
 8004bc4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004bc6:	f7ff fbdb 	bl	8004380 <xTaskIncrementTick>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d003      	beq.n	8004bd8 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004bd0:	4b06      	ldr	r3, [pc, #24]	; (8004bec <xPortSysTickHandler+0x44>)
 8004bd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bd6:	601a      	str	r2, [r3, #0]
 8004bd8:	2300      	movs	r3, #0
 8004bda:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	f383 8811 	msr	BASEPRI, r3
}
 8004be2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004be4:	bf00      	nop
 8004be6:	3708      	adds	r7, #8
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	e000ed04 	.word	0xe000ed04

08004bf0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004bf4:	4b0b      	ldr	r3, [pc, #44]	; (8004c24 <vPortSetupTimerInterrupt+0x34>)
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004bfa:	4b0b      	ldr	r3, [pc, #44]	; (8004c28 <vPortSetupTimerInterrupt+0x38>)
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004c00:	4b0a      	ldr	r3, [pc, #40]	; (8004c2c <vPortSetupTimerInterrupt+0x3c>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a0a      	ldr	r2, [pc, #40]	; (8004c30 <vPortSetupTimerInterrupt+0x40>)
 8004c06:	fba2 2303 	umull	r2, r3, r2, r3
 8004c0a:	099b      	lsrs	r3, r3, #6
 8004c0c:	4a09      	ldr	r2, [pc, #36]	; (8004c34 <vPortSetupTimerInterrupt+0x44>)
 8004c0e:	3b01      	subs	r3, #1
 8004c10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004c12:	4b04      	ldr	r3, [pc, #16]	; (8004c24 <vPortSetupTimerInterrupt+0x34>)
 8004c14:	2207      	movs	r2, #7
 8004c16:	601a      	str	r2, [r3, #0]
}
 8004c18:	bf00      	nop
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr
 8004c22:	bf00      	nop
 8004c24:	e000e010 	.word	0xe000e010
 8004c28:	e000e018 	.word	0xe000e018
 8004c2c:	20000008 	.word	0x20000008
 8004c30:	10624dd3 	.word	0x10624dd3
 8004c34:	e000e014 	.word	0xe000e014

08004c38 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004c38:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004c48 <vPortEnableVFP+0x10>
 8004c3c:	6801      	ldr	r1, [r0, #0]
 8004c3e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004c42:	6001      	str	r1, [r0, #0]
 8004c44:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004c46:	bf00      	nop
 8004c48:	e000ed88 	.word	0xe000ed88

08004c4c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b08a      	sub	sp, #40	; 0x28
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004c54:	2300      	movs	r3, #0
 8004c56:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004c58:	f7ff fae6 	bl	8004228 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004c5c:	4b5b      	ldr	r3, [pc, #364]	; (8004dcc <pvPortMalloc+0x180>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d101      	bne.n	8004c68 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004c64:	f000 f91a 	bl	8004e9c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004c68:	4b59      	ldr	r3, [pc, #356]	; (8004dd0 <pvPortMalloc+0x184>)
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	4013      	ands	r3, r2
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	f040 8092 	bne.w	8004d9a <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d01f      	beq.n	8004cbc <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8004c7c:	2208      	movs	r2, #8
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4413      	add	r3, r2
 8004c82:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f003 0307 	and.w	r3, r3, #7
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d016      	beq.n	8004cbc <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f023 0307 	bic.w	r3, r3, #7
 8004c94:	3308      	adds	r3, #8
 8004c96:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f003 0307 	and.w	r3, r3, #7
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d00c      	beq.n	8004cbc <pvPortMalloc+0x70>
	__asm volatile
 8004ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca6:	b672      	cpsid	i
 8004ca8:	f383 8811 	msr	BASEPRI, r3
 8004cac:	f3bf 8f6f 	isb	sy
 8004cb0:	f3bf 8f4f 	dsb	sy
 8004cb4:	b662      	cpsie	i
 8004cb6:	617b      	str	r3, [r7, #20]
}
 8004cb8:	bf00      	nop
 8004cba:	e7fe      	b.n	8004cba <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d06b      	beq.n	8004d9a <pvPortMalloc+0x14e>
 8004cc2:	4b44      	ldr	r3, [pc, #272]	; (8004dd4 <pvPortMalloc+0x188>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d866      	bhi.n	8004d9a <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004ccc:	4b42      	ldr	r3, [pc, #264]	; (8004dd8 <pvPortMalloc+0x18c>)
 8004cce:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004cd0:	4b41      	ldr	r3, [pc, #260]	; (8004dd8 <pvPortMalloc+0x18c>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004cd6:	e004      	b.n	8004ce2 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8004cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cda:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d903      	bls.n	8004cf4 <pvPortMalloc+0xa8>
 8004cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d1f1      	bne.n	8004cd8 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004cf4:	4b35      	ldr	r3, [pc, #212]	; (8004dcc <pvPortMalloc+0x180>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d04d      	beq.n	8004d9a <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004cfe:	6a3b      	ldr	r3, [r7, #32]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2208      	movs	r2, #8
 8004d04:	4413      	add	r3, r2
 8004d06:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	6a3b      	ldr	r3, [r7, #32]
 8004d0e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d12:	685a      	ldr	r2, [r3, #4]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	1ad2      	subs	r2, r2, r3
 8004d18:	2308      	movs	r3, #8
 8004d1a:	005b      	lsls	r3, r3, #1
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d921      	bls.n	8004d64 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004d20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4413      	add	r3, r2
 8004d26:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d28:	69bb      	ldr	r3, [r7, #24]
 8004d2a:	f003 0307 	and.w	r3, r3, #7
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d00c      	beq.n	8004d4c <pvPortMalloc+0x100>
	__asm volatile
 8004d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d36:	b672      	cpsid	i
 8004d38:	f383 8811 	msr	BASEPRI, r3
 8004d3c:	f3bf 8f6f 	isb	sy
 8004d40:	f3bf 8f4f 	dsb	sy
 8004d44:	b662      	cpsie	i
 8004d46:	613b      	str	r3, [r7, #16]
}
 8004d48:	bf00      	nop
 8004d4a:	e7fe      	b.n	8004d4a <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4e:	685a      	ldr	r2, [r3, #4]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	1ad2      	subs	r2, r2, r3
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004d5e:	69b8      	ldr	r0, [r7, #24]
 8004d60:	f000 f8fe 	bl	8004f60 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004d64:	4b1b      	ldr	r3, [pc, #108]	; (8004dd4 <pvPortMalloc+0x188>)
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	4a19      	ldr	r2, [pc, #100]	; (8004dd4 <pvPortMalloc+0x188>)
 8004d70:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004d72:	4b18      	ldr	r3, [pc, #96]	; (8004dd4 <pvPortMalloc+0x188>)
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	4b19      	ldr	r3, [pc, #100]	; (8004ddc <pvPortMalloc+0x190>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d203      	bcs.n	8004d86 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004d7e:	4b15      	ldr	r3, [pc, #84]	; (8004dd4 <pvPortMalloc+0x188>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a16      	ldr	r2, [pc, #88]	; (8004ddc <pvPortMalloc+0x190>)
 8004d84:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d88:	685a      	ldr	r2, [r3, #4]
 8004d8a:	4b11      	ldr	r3, [pc, #68]	; (8004dd0 <pvPortMalloc+0x184>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	431a      	orrs	r2, r3
 8004d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d92:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d96:	2200      	movs	r2, #0
 8004d98:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004d9a:	f7ff fa53 	bl	8004244 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	f003 0307 	and.w	r3, r3, #7
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d00c      	beq.n	8004dc2 <pvPortMalloc+0x176>
	__asm volatile
 8004da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dac:	b672      	cpsid	i
 8004dae:	f383 8811 	msr	BASEPRI, r3
 8004db2:	f3bf 8f6f 	isb	sy
 8004db6:	f3bf 8f4f 	dsb	sy
 8004dba:	b662      	cpsie	i
 8004dbc:	60fb      	str	r3, [r7, #12]
}
 8004dbe:	bf00      	nop
 8004dc0:	e7fe      	b.n	8004dc0 <pvPortMalloc+0x174>
	return pvReturn;
 8004dc2:	69fb      	ldr	r3, [r7, #28]
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3728      	adds	r7, #40	; 0x28
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	20004420 	.word	0x20004420
 8004dd0:	2000442c 	.word	0x2000442c
 8004dd4:	20004424 	.word	0x20004424
 8004dd8:	20004418 	.word	0x20004418
 8004ddc:	20004428 	.word	0x20004428

08004de0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b086      	sub	sp, #24
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d04c      	beq.n	8004e8c <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004df2:	2308      	movs	r3, #8
 8004df4:	425b      	negs	r3, r3
 8004df6:	697a      	ldr	r2, [r7, #20]
 8004df8:	4413      	add	r3, r2
 8004dfa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	685a      	ldr	r2, [r3, #4]
 8004e04:	4b23      	ldr	r3, [pc, #140]	; (8004e94 <vPortFree+0xb4>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4013      	ands	r3, r2
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d10c      	bne.n	8004e28 <vPortFree+0x48>
	__asm volatile
 8004e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e12:	b672      	cpsid	i
 8004e14:	f383 8811 	msr	BASEPRI, r3
 8004e18:	f3bf 8f6f 	isb	sy
 8004e1c:	f3bf 8f4f 	dsb	sy
 8004e20:	b662      	cpsie	i
 8004e22:	60fb      	str	r3, [r7, #12]
}
 8004e24:	bf00      	nop
 8004e26:	e7fe      	b.n	8004e26 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d00c      	beq.n	8004e4a <vPortFree+0x6a>
	__asm volatile
 8004e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e34:	b672      	cpsid	i
 8004e36:	f383 8811 	msr	BASEPRI, r3
 8004e3a:	f3bf 8f6f 	isb	sy
 8004e3e:	f3bf 8f4f 	dsb	sy
 8004e42:	b662      	cpsie	i
 8004e44:	60bb      	str	r3, [r7, #8]
}
 8004e46:	bf00      	nop
 8004e48:	e7fe      	b.n	8004e48 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	685a      	ldr	r2, [r3, #4]
 8004e4e:	4b11      	ldr	r3, [pc, #68]	; (8004e94 <vPortFree+0xb4>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4013      	ands	r3, r2
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d019      	beq.n	8004e8c <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d115      	bne.n	8004e8c <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	685a      	ldr	r2, [r3, #4]
 8004e64:	4b0b      	ldr	r3, [pc, #44]	; (8004e94 <vPortFree+0xb4>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	43db      	mvns	r3, r3
 8004e6a:	401a      	ands	r2, r3
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004e70:	f7ff f9da 	bl	8004228 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	685a      	ldr	r2, [r3, #4]
 8004e78:	4b07      	ldr	r3, [pc, #28]	; (8004e98 <vPortFree+0xb8>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4413      	add	r3, r2
 8004e7e:	4a06      	ldr	r2, [pc, #24]	; (8004e98 <vPortFree+0xb8>)
 8004e80:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004e82:	6938      	ldr	r0, [r7, #16]
 8004e84:	f000 f86c 	bl	8004f60 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004e88:	f7ff f9dc 	bl	8004244 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004e8c:	bf00      	nop
 8004e8e:	3718      	adds	r7, #24
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}
 8004e94:	2000442c 	.word	0x2000442c
 8004e98:	20004424 	.word	0x20004424

08004e9c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b085      	sub	sp, #20
 8004ea0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004ea2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004ea6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004ea8:	4b27      	ldr	r3, [pc, #156]	; (8004f48 <prvHeapInit+0xac>)
 8004eaa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f003 0307 	and.w	r3, r3, #7
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00c      	beq.n	8004ed0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	3307      	adds	r3, #7
 8004eba:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f023 0307 	bic.w	r3, r3, #7
 8004ec2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004ec4:	68ba      	ldr	r2, [r7, #8]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	4a1f      	ldr	r2, [pc, #124]	; (8004f48 <prvHeapInit+0xac>)
 8004ecc:	4413      	add	r3, r2
 8004ece:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004ed4:	4a1d      	ldr	r2, [pc, #116]	; (8004f4c <prvHeapInit+0xb0>)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004eda:	4b1c      	ldr	r3, [pc, #112]	; (8004f4c <prvHeapInit+0xb0>)
 8004edc:	2200      	movs	r2, #0
 8004ede:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	68ba      	ldr	r2, [r7, #8]
 8004ee4:	4413      	add	r3, r2
 8004ee6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004ee8:	2208      	movs	r2, #8
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	1a9b      	subs	r3, r3, r2
 8004eee:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f023 0307 	bic.w	r3, r3, #7
 8004ef6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	4a15      	ldr	r2, [pc, #84]	; (8004f50 <prvHeapInit+0xb4>)
 8004efc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004efe:	4b14      	ldr	r3, [pc, #80]	; (8004f50 <prvHeapInit+0xb4>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2200      	movs	r2, #0
 8004f04:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004f06:	4b12      	ldr	r3, [pc, #72]	; (8004f50 <prvHeapInit+0xb4>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	68fa      	ldr	r2, [r7, #12]
 8004f16:	1ad2      	subs	r2, r2, r3
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004f1c:	4b0c      	ldr	r3, [pc, #48]	; (8004f50 <prvHeapInit+0xb4>)
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	4a0a      	ldr	r2, [pc, #40]	; (8004f54 <prvHeapInit+0xb8>)
 8004f2a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	4a09      	ldr	r2, [pc, #36]	; (8004f58 <prvHeapInit+0xbc>)
 8004f32:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004f34:	4b09      	ldr	r3, [pc, #36]	; (8004f5c <prvHeapInit+0xc0>)
 8004f36:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004f3a:	601a      	str	r2, [r3, #0]
}
 8004f3c:	bf00      	nop
 8004f3e:	3714      	adds	r7, #20
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr
 8004f48:	20000818 	.word	0x20000818
 8004f4c:	20004418 	.word	0x20004418
 8004f50:	20004420 	.word	0x20004420
 8004f54:	20004428 	.word	0x20004428
 8004f58:	20004424 	.word	0x20004424
 8004f5c:	2000442c 	.word	0x2000442c

08004f60 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004f60:	b480      	push	{r7}
 8004f62:	b085      	sub	sp, #20
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004f68:	4b28      	ldr	r3, [pc, #160]	; (800500c <prvInsertBlockIntoFreeList+0xac>)
 8004f6a:	60fb      	str	r3, [r7, #12]
 8004f6c:	e002      	b.n	8004f74 <prvInsertBlockIntoFreeList+0x14>
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	60fb      	str	r3, [r7, #12]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d8f7      	bhi.n	8004f6e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	68ba      	ldr	r2, [r7, #8]
 8004f88:	4413      	add	r3, r2
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d108      	bne.n	8004fa2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	685a      	ldr	r2, [r3, #4]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	441a      	add	r2, r3
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	68ba      	ldr	r2, [r7, #8]
 8004fac:	441a      	add	r2, r3
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d118      	bne.n	8004fe8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	4b15      	ldr	r3, [pc, #84]	; (8005010 <prvInsertBlockIntoFreeList+0xb0>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d00d      	beq.n	8004fde <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	685a      	ldr	r2, [r3, #4]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	441a      	add	r2, r3
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	601a      	str	r2, [r3, #0]
 8004fdc:	e008      	b.n	8004ff0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004fde:	4b0c      	ldr	r3, [pc, #48]	; (8005010 <prvInsertBlockIntoFreeList+0xb0>)
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	601a      	str	r2, [r3, #0]
 8004fe6:	e003      	b.n	8004ff0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004ff0:	68fa      	ldr	r2, [r7, #12]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d002      	beq.n	8004ffe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ffe:	bf00      	nop
 8005000:	3714      	adds	r7, #20
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	20004418 	.word	0x20004418
 8005010:	20004420 	.word	0x20004420

08005014 <__errno>:
 8005014:	4b01      	ldr	r3, [pc, #4]	; (800501c <__errno+0x8>)
 8005016:	6818      	ldr	r0, [r3, #0]
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop
 800501c:	20000018 	.word	0x20000018

08005020 <__libc_init_array>:
 8005020:	b570      	push	{r4, r5, r6, lr}
 8005022:	4d0d      	ldr	r5, [pc, #52]	; (8005058 <__libc_init_array+0x38>)
 8005024:	4c0d      	ldr	r4, [pc, #52]	; (800505c <__libc_init_array+0x3c>)
 8005026:	1b64      	subs	r4, r4, r5
 8005028:	10a4      	asrs	r4, r4, #2
 800502a:	2600      	movs	r6, #0
 800502c:	42a6      	cmp	r6, r4
 800502e:	d109      	bne.n	8005044 <__libc_init_array+0x24>
 8005030:	4d0b      	ldr	r5, [pc, #44]	; (8005060 <__libc_init_array+0x40>)
 8005032:	4c0c      	ldr	r4, [pc, #48]	; (8005064 <__libc_init_array+0x44>)
 8005034:	f001 f99e 	bl	8006374 <_init>
 8005038:	1b64      	subs	r4, r4, r5
 800503a:	10a4      	asrs	r4, r4, #2
 800503c:	2600      	movs	r6, #0
 800503e:	42a6      	cmp	r6, r4
 8005040:	d105      	bne.n	800504e <__libc_init_array+0x2e>
 8005042:	bd70      	pop	{r4, r5, r6, pc}
 8005044:	f855 3b04 	ldr.w	r3, [r5], #4
 8005048:	4798      	blx	r3
 800504a:	3601      	adds	r6, #1
 800504c:	e7ee      	b.n	800502c <__libc_init_array+0xc>
 800504e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005052:	4798      	blx	r3
 8005054:	3601      	adds	r6, #1
 8005056:	e7f2      	b.n	800503e <__libc_init_array+0x1e>
 8005058:	08006558 	.word	0x08006558
 800505c:	08006558 	.word	0x08006558
 8005060:	08006558 	.word	0x08006558
 8005064:	0800655c 	.word	0x0800655c

08005068 <memcpy>:
 8005068:	440a      	add	r2, r1
 800506a:	4291      	cmp	r1, r2
 800506c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005070:	d100      	bne.n	8005074 <memcpy+0xc>
 8005072:	4770      	bx	lr
 8005074:	b510      	push	{r4, lr}
 8005076:	f811 4b01 	ldrb.w	r4, [r1], #1
 800507a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800507e:	4291      	cmp	r1, r2
 8005080:	d1f9      	bne.n	8005076 <memcpy+0xe>
 8005082:	bd10      	pop	{r4, pc}

08005084 <memset>:
 8005084:	4402      	add	r2, r0
 8005086:	4603      	mov	r3, r0
 8005088:	4293      	cmp	r3, r2
 800508a:	d100      	bne.n	800508e <memset+0xa>
 800508c:	4770      	bx	lr
 800508e:	f803 1b01 	strb.w	r1, [r3], #1
 8005092:	e7f9      	b.n	8005088 <memset+0x4>

08005094 <iprintf>:
 8005094:	b40f      	push	{r0, r1, r2, r3}
 8005096:	4b0a      	ldr	r3, [pc, #40]	; (80050c0 <iprintf+0x2c>)
 8005098:	b513      	push	{r0, r1, r4, lr}
 800509a:	681c      	ldr	r4, [r3, #0]
 800509c:	b124      	cbz	r4, 80050a8 <iprintf+0x14>
 800509e:	69a3      	ldr	r3, [r4, #24]
 80050a0:	b913      	cbnz	r3, 80050a8 <iprintf+0x14>
 80050a2:	4620      	mov	r0, r4
 80050a4:	f000 fa1c 	bl	80054e0 <__sinit>
 80050a8:	ab05      	add	r3, sp, #20
 80050aa:	9a04      	ldr	r2, [sp, #16]
 80050ac:	68a1      	ldr	r1, [r4, #8]
 80050ae:	9301      	str	r3, [sp, #4]
 80050b0:	4620      	mov	r0, r4
 80050b2:	f000 fd81 	bl	8005bb8 <_vfiprintf_r>
 80050b6:	b002      	add	sp, #8
 80050b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050bc:	b004      	add	sp, #16
 80050be:	4770      	bx	lr
 80050c0:	20000018 	.word	0x20000018

080050c4 <sniprintf>:
 80050c4:	b40c      	push	{r2, r3}
 80050c6:	b530      	push	{r4, r5, lr}
 80050c8:	4b17      	ldr	r3, [pc, #92]	; (8005128 <sniprintf+0x64>)
 80050ca:	1e0c      	subs	r4, r1, #0
 80050cc:	681d      	ldr	r5, [r3, #0]
 80050ce:	b09d      	sub	sp, #116	; 0x74
 80050d0:	da08      	bge.n	80050e4 <sniprintf+0x20>
 80050d2:	238b      	movs	r3, #139	; 0x8b
 80050d4:	602b      	str	r3, [r5, #0]
 80050d6:	f04f 30ff 	mov.w	r0, #4294967295
 80050da:	b01d      	add	sp, #116	; 0x74
 80050dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80050e0:	b002      	add	sp, #8
 80050e2:	4770      	bx	lr
 80050e4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80050e8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80050ec:	bf14      	ite	ne
 80050ee:	f104 33ff 	addne.w	r3, r4, #4294967295
 80050f2:	4623      	moveq	r3, r4
 80050f4:	9304      	str	r3, [sp, #16]
 80050f6:	9307      	str	r3, [sp, #28]
 80050f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80050fc:	9002      	str	r0, [sp, #8]
 80050fe:	9006      	str	r0, [sp, #24]
 8005100:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005104:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005106:	ab21      	add	r3, sp, #132	; 0x84
 8005108:	a902      	add	r1, sp, #8
 800510a:	4628      	mov	r0, r5
 800510c:	9301      	str	r3, [sp, #4]
 800510e:	f000 fc29 	bl	8005964 <_svfiprintf_r>
 8005112:	1c43      	adds	r3, r0, #1
 8005114:	bfbc      	itt	lt
 8005116:	238b      	movlt	r3, #139	; 0x8b
 8005118:	602b      	strlt	r3, [r5, #0]
 800511a:	2c00      	cmp	r4, #0
 800511c:	d0dd      	beq.n	80050da <sniprintf+0x16>
 800511e:	9b02      	ldr	r3, [sp, #8]
 8005120:	2200      	movs	r2, #0
 8005122:	701a      	strb	r2, [r3, #0]
 8005124:	e7d9      	b.n	80050da <sniprintf+0x16>
 8005126:	bf00      	nop
 8005128:	20000018 	.word	0x20000018

0800512c <__swbuf_r>:
 800512c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800512e:	460e      	mov	r6, r1
 8005130:	4614      	mov	r4, r2
 8005132:	4605      	mov	r5, r0
 8005134:	b118      	cbz	r0, 800513e <__swbuf_r+0x12>
 8005136:	6983      	ldr	r3, [r0, #24]
 8005138:	b90b      	cbnz	r3, 800513e <__swbuf_r+0x12>
 800513a:	f000 f9d1 	bl	80054e0 <__sinit>
 800513e:	4b21      	ldr	r3, [pc, #132]	; (80051c4 <__swbuf_r+0x98>)
 8005140:	429c      	cmp	r4, r3
 8005142:	d12b      	bne.n	800519c <__swbuf_r+0x70>
 8005144:	686c      	ldr	r4, [r5, #4]
 8005146:	69a3      	ldr	r3, [r4, #24]
 8005148:	60a3      	str	r3, [r4, #8]
 800514a:	89a3      	ldrh	r3, [r4, #12]
 800514c:	071a      	lsls	r2, r3, #28
 800514e:	d52f      	bpl.n	80051b0 <__swbuf_r+0x84>
 8005150:	6923      	ldr	r3, [r4, #16]
 8005152:	b36b      	cbz	r3, 80051b0 <__swbuf_r+0x84>
 8005154:	6923      	ldr	r3, [r4, #16]
 8005156:	6820      	ldr	r0, [r4, #0]
 8005158:	1ac0      	subs	r0, r0, r3
 800515a:	6963      	ldr	r3, [r4, #20]
 800515c:	b2f6      	uxtb	r6, r6
 800515e:	4283      	cmp	r3, r0
 8005160:	4637      	mov	r7, r6
 8005162:	dc04      	bgt.n	800516e <__swbuf_r+0x42>
 8005164:	4621      	mov	r1, r4
 8005166:	4628      	mov	r0, r5
 8005168:	f000 f926 	bl	80053b8 <_fflush_r>
 800516c:	bb30      	cbnz	r0, 80051bc <__swbuf_r+0x90>
 800516e:	68a3      	ldr	r3, [r4, #8]
 8005170:	3b01      	subs	r3, #1
 8005172:	60a3      	str	r3, [r4, #8]
 8005174:	6823      	ldr	r3, [r4, #0]
 8005176:	1c5a      	adds	r2, r3, #1
 8005178:	6022      	str	r2, [r4, #0]
 800517a:	701e      	strb	r6, [r3, #0]
 800517c:	6963      	ldr	r3, [r4, #20]
 800517e:	3001      	adds	r0, #1
 8005180:	4283      	cmp	r3, r0
 8005182:	d004      	beq.n	800518e <__swbuf_r+0x62>
 8005184:	89a3      	ldrh	r3, [r4, #12]
 8005186:	07db      	lsls	r3, r3, #31
 8005188:	d506      	bpl.n	8005198 <__swbuf_r+0x6c>
 800518a:	2e0a      	cmp	r6, #10
 800518c:	d104      	bne.n	8005198 <__swbuf_r+0x6c>
 800518e:	4621      	mov	r1, r4
 8005190:	4628      	mov	r0, r5
 8005192:	f000 f911 	bl	80053b8 <_fflush_r>
 8005196:	b988      	cbnz	r0, 80051bc <__swbuf_r+0x90>
 8005198:	4638      	mov	r0, r7
 800519a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800519c:	4b0a      	ldr	r3, [pc, #40]	; (80051c8 <__swbuf_r+0x9c>)
 800519e:	429c      	cmp	r4, r3
 80051a0:	d101      	bne.n	80051a6 <__swbuf_r+0x7a>
 80051a2:	68ac      	ldr	r4, [r5, #8]
 80051a4:	e7cf      	b.n	8005146 <__swbuf_r+0x1a>
 80051a6:	4b09      	ldr	r3, [pc, #36]	; (80051cc <__swbuf_r+0xa0>)
 80051a8:	429c      	cmp	r4, r3
 80051aa:	bf08      	it	eq
 80051ac:	68ec      	ldreq	r4, [r5, #12]
 80051ae:	e7ca      	b.n	8005146 <__swbuf_r+0x1a>
 80051b0:	4621      	mov	r1, r4
 80051b2:	4628      	mov	r0, r5
 80051b4:	f000 f80c 	bl	80051d0 <__swsetup_r>
 80051b8:	2800      	cmp	r0, #0
 80051ba:	d0cb      	beq.n	8005154 <__swbuf_r+0x28>
 80051bc:	f04f 37ff 	mov.w	r7, #4294967295
 80051c0:	e7ea      	b.n	8005198 <__swbuf_r+0x6c>
 80051c2:	bf00      	nop
 80051c4:	080064dc 	.word	0x080064dc
 80051c8:	080064fc 	.word	0x080064fc
 80051cc:	080064bc 	.word	0x080064bc

080051d0 <__swsetup_r>:
 80051d0:	4b32      	ldr	r3, [pc, #200]	; (800529c <__swsetup_r+0xcc>)
 80051d2:	b570      	push	{r4, r5, r6, lr}
 80051d4:	681d      	ldr	r5, [r3, #0]
 80051d6:	4606      	mov	r6, r0
 80051d8:	460c      	mov	r4, r1
 80051da:	b125      	cbz	r5, 80051e6 <__swsetup_r+0x16>
 80051dc:	69ab      	ldr	r3, [r5, #24]
 80051de:	b913      	cbnz	r3, 80051e6 <__swsetup_r+0x16>
 80051e0:	4628      	mov	r0, r5
 80051e2:	f000 f97d 	bl	80054e0 <__sinit>
 80051e6:	4b2e      	ldr	r3, [pc, #184]	; (80052a0 <__swsetup_r+0xd0>)
 80051e8:	429c      	cmp	r4, r3
 80051ea:	d10f      	bne.n	800520c <__swsetup_r+0x3c>
 80051ec:	686c      	ldr	r4, [r5, #4]
 80051ee:	89a3      	ldrh	r3, [r4, #12]
 80051f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80051f4:	0719      	lsls	r1, r3, #28
 80051f6:	d42c      	bmi.n	8005252 <__swsetup_r+0x82>
 80051f8:	06dd      	lsls	r5, r3, #27
 80051fa:	d411      	bmi.n	8005220 <__swsetup_r+0x50>
 80051fc:	2309      	movs	r3, #9
 80051fe:	6033      	str	r3, [r6, #0]
 8005200:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005204:	81a3      	strh	r3, [r4, #12]
 8005206:	f04f 30ff 	mov.w	r0, #4294967295
 800520a:	e03e      	b.n	800528a <__swsetup_r+0xba>
 800520c:	4b25      	ldr	r3, [pc, #148]	; (80052a4 <__swsetup_r+0xd4>)
 800520e:	429c      	cmp	r4, r3
 8005210:	d101      	bne.n	8005216 <__swsetup_r+0x46>
 8005212:	68ac      	ldr	r4, [r5, #8]
 8005214:	e7eb      	b.n	80051ee <__swsetup_r+0x1e>
 8005216:	4b24      	ldr	r3, [pc, #144]	; (80052a8 <__swsetup_r+0xd8>)
 8005218:	429c      	cmp	r4, r3
 800521a:	bf08      	it	eq
 800521c:	68ec      	ldreq	r4, [r5, #12]
 800521e:	e7e6      	b.n	80051ee <__swsetup_r+0x1e>
 8005220:	0758      	lsls	r0, r3, #29
 8005222:	d512      	bpl.n	800524a <__swsetup_r+0x7a>
 8005224:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005226:	b141      	cbz	r1, 800523a <__swsetup_r+0x6a>
 8005228:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800522c:	4299      	cmp	r1, r3
 800522e:	d002      	beq.n	8005236 <__swsetup_r+0x66>
 8005230:	4630      	mov	r0, r6
 8005232:	f000 fa5b 	bl	80056ec <_free_r>
 8005236:	2300      	movs	r3, #0
 8005238:	6363      	str	r3, [r4, #52]	; 0x34
 800523a:	89a3      	ldrh	r3, [r4, #12]
 800523c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005240:	81a3      	strh	r3, [r4, #12]
 8005242:	2300      	movs	r3, #0
 8005244:	6063      	str	r3, [r4, #4]
 8005246:	6923      	ldr	r3, [r4, #16]
 8005248:	6023      	str	r3, [r4, #0]
 800524a:	89a3      	ldrh	r3, [r4, #12]
 800524c:	f043 0308 	orr.w	r3, r3, #8
 8005250:	81a3      	strh	r3, [r4, #12]
 8005252:	6923      	ldr	r3, [r4, #16]
 8005254:	b94b      	cbnz	r3, 800526a <__swsetup_r+0x9a>
 8005256:	89a3      	ldrh	r3, [r4, #12]
 8005258:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800525c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005260:	d003      	beq.n	800526a <__swsetup_r+0x9a>
 8005262:	4621      	mov	r1, r4
 8005264:	4630      	mov	r0, r6
 8005266:	f000 fa01 	bl	800566c <__smakebuf_r>
 800526a:	89a0      	ldrh	r0, [r4, #12]
 800526c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005270:	f010 0301 	ands.w	r3, r0, #1
 8005274:	d00a      	beq.n	800528c <__swsetup_r+0xbc>
 8005276:	2300      	movs	r3, #0
 8005278:	60a3      	str	r3, [r4, #8]
 800527a:	6963      	ldr	r3, [r4, #20]
 800527c:	425b      	negs	r3, r3
 800527e:	61a3      	str	r3, [r4, #24]
 8005280:	6923      	ldr	r3, [r4, #16]
 8005282:	b943      	cbnz	r3, 8005296 <__swsetup_r+0xc6>
 8005284:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005288:	d1ba      	bne.n	8005200 <__swsetup_r+0x30>
 800528a:	bd70      	pop	{r4, r5, r6, pc}
 800528c:	0781      	lsls	r1, r0, #30
 800528e:	bf58      	it	pl
 8005290:	6963      	ldrpl	r3, [r4, #20]
 8005292:	60a3      	str	r3, [r4, #8]
 8005294:	e7f4      	b.n	8005280 <__swsetup_r+0xb0>
 8005296:	2000      	movs	r0, #0
 8005298:	e7f7      	b.n	800528a <__swsetup_r+0xba>
 800529a:	bf00      	nop
 800529c:	20000018 	.word	0x20000018
 80052a0:	080064dc 	.word	0x080064dc
 80052a4:	080064fc 	.word	0x080064fc
 80052a8:	080064bc 	.word	0x080064bc

080052ac <__sflush_r>:
 80052ac:	898a      	ldrh	r2, [r1, #12]
 80052ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052b2:	4605      	mov	r5, r0
 80052b4:	0710      	lsls	r0, r2, #28
 80052b6:	460c      	mov	r4, r1
 80052b8:	d458      	bmi.n	800536c <__sflush_r+0xc0>
 80052ba:	684b      	ldr	r3, [r1, #4]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	dc05      	bgt.n	80052cc <__sflush_r+0x20>
 80052c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	dc02      	bgt.n	80052cc <__sflush_r+0x20>
 80052c6:	2000      	movs	r0, #0
 80052c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80052ce:	2e00      	cmp	r6, #0
 80052d0:	d0f9      	beq.n	80052c6 <__sflush_r+0x1a>
 80052d2:	2300      	movs	r3, #0
 80052d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80052d8:	682f      	ldr	r7, [r5, #0]
 80052da:	602b      	str	r3, [r5, #0]
 80052dc:	d032      	beq.n	8005344 <__sflush_r+0x98>
 80052de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80052e0:	89a3      	ldrh	r3, [r4, #12]
 80052e2:	075a      	lsls	r2, r3, #29
 80052e4:	d505      	bpl.n	80052f2 <__sflush_r+0x46>
 80052e6:	6863      	ldr	r3, [r4, #4]
 80052e8:	1ac0      	subs	r0, r0, r3
 80052ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80052ec:	b10b      	cbz	r3, 80052f2 <__sflush_r+0x46>
 80052ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80052f0:	1ac0      	subs	r0, r0, r3
 80052f2:	2300      	movs	r3, #0
 80052f4:	4602      	mov	r2, r0
 80052f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80052f8:	6a21      	ldr	r1, [r4, #32]
 80052fa:	4628      	mov	r0, r5
 80052fc:	47b0      	blx	r6
 80052fe:	1c43      	adds	r3, r0, #1
 8005300:	89a3      	ldrh	r3, [r4, #12]
 8005302:	d106      	bne.n	8005312 <__sflush_r+0x66>
 8005304:	6829      	ldr	r1, [r5, #0]
 8005306:	291d      	cmp	r1, #29
 8005308:	d82c      	bhi.n	8005364 <__sflush_r+0xb8>
 800530a:	4a2a      	ldr	r2, [pc, #168]	; (80053b4 <__sflush_r+0x108>)
 800530c:	40ca      	lsrs	r2, r1
 800530e:	07d6      	lsls	r6, r2, #31
 8005310:	d528      	bpl.n	8005364 <__sflush_r+0xb8>
 8005312:	2200      	movs	r2, #0
 8005314:	6062      	str	r2, [r4, #4]
 8005316:	04d9      	lsls	r1, r3, #19
 8005318:	6922      	ldr	r2, [r4, #16]
 800531a:	6022      	str	r2, [r4, #0]
 800531c:	d504      	bpl.n	8005328 <__sflush_r+0x7c>
 800531e:	1c42      	adds	r2, r0, #1
 8005320:	d101      	bne.n	8005326 <__sflush_r+0x7a>
 8005322:	682b      	ldr	r3, [r5, #0]
 8005324:	b903      	cbnz	r3, 8005328 <__sflush_r+0x7c>
 8005326:	6560      	str	r0, [r4, #84]	; 0x54
 8005328:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800532a:	602f      	str	r7, [r5, #0]
 800532c:	2900      	cmp	r1, #0
 800532e:	d0ca      	beq.n	80052c6 <__sflush_r+0x1a>
 8005330:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005334:	4299      	cmp	r1, r3
 8005336:	d002      	beq.n	800533e <__sflush_r+0x92>
 8005338:	4628      	mov	r0, r5
 800533a:	f000 f9d7 	bl	80056ec <_free_r>
 800533e:	2000      	movs	r0, #0
 8005340:	6360      	str	r0, [r4, #52]	; 0x34
 8005342:	e7c1      	b.n	80052c8 <__sflush_r+0x1c>
 8005344:	6a21      	ldr	r1, [r4, #32]
 8005346:	2301      	movs	r3, #1
 8005348:	4628      	mov	r0, r5
 800534a:	47b0      	blx	r6
 800534c:	1c41      	adds	r1, r0, #1
 800534e:	d1c7      	bne.n	80052e0 <__sflush_r+0x34>
 8005350:	682b      	ldr	r3, [r5, #0]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d0c4      	beq.n	80052e0 <__sflush_r+0x34>
 8005356:	2b1d      	cmp	r3, #29
 8005358:	d001      	beq.n	800535e <__sflush_r+0xb2>
 800535a:	2b16      	cmp	r3, #22
 800535c:	d101      	bne.n	8005362 <__sflush_r+0xb6>
 800535e:	602f      	str	r7, [r5, #0]
 8005360:	e7b1      	b.n	80052c6 <__sflush_r+0x1a>
 8005362:	89a3      	ldrh	r3, [r4, #12]
 8005364:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005368:	81a3      	strh	r3, [r4, #12]
 800536a:	e7ad      	b.n	80052c8 <__sflush_r+0x1c>
 800536c:	690f      	ldr	r7, [r1, #16]
 800536e:	2f00      	cmp	r7, #0
 8005370:	d0a9      	beq.n	80052c6 <__sflush_r+0x1a>
 8005372:	0793      	lsls	r3, r2, #30
 8005374:	680e      	ldr	r6, [r1, #0]
 8005376:	bf08      	it	eq
 8005378:	694b      	ldreq	r3, [r1, #20]
 800537a:	600f      	str	r7, [r1, #0]
 800537c:	bf18      	it	ne
 800537e:	2300      	movne	r3, #0
 8005380:	eba6 0807 	sub.w	r8, r6, r7
 8005384:	608b      	str	r3, [r1, #8]
 8005386:	f1b8 0f00 	cmp.w	r8, #0
 800538a:	dd9c      	ble.n	80052c6 <__sflush_r+0x1a>
 800538c:	6a21      	ldr	r1, [r4, #32]
 800538e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005390:	4643      	mov	r3, r8
 8005392:	463a      	mov	r2, r7
 8005394:	4628      	mov	r0, r5
 8005396:	47b0      	blx	r6
 8005398:	2800      	cmp	r0, #0
 800539a:	dc06      	bgt.n	80053aa <__sflush_r+0xfe>
 800539c:	89a3      	ldrh	r3, [r4, #12]
 800539e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053a2:	81a3      	strh	r3, [r4, #12]
 80053a4:	f04f 30ff 	mov.w	r0, #4294967295
 80053a8:	e78e      	b.n	80052c8 <__sflush_r+0x1c>
 80053aa:	4407      	add	r7, r0
 80053ac:	eba8 0800 	sub.w	r8, r8, r0
 80053b0:	e7e9      	b.n	8005386 <__sflush_r+0xda>
 80053b2:	bf00      	nop
 80053b4:	20400001 	.word	0x20400001

080053b8 <_fflush_r>:
 80053b8:	b538      	push	{r3, r4, r5, lr}
 80053ba:	690b      	ldr	r3, [r1, #16]
 80053bc:	4605      	mov	r5, r0
 80053be:	460c      	mov	r4, r1
 80053c0:	b913      	cbnz	r3, 80053c8 <_fflush_r+0x10>
 80053c2:	2500      	movs	r5, #0
 80053c4:	4628      	mov	r0, r5
 80053c6:	bd38      	pop	{r3, r4, r5, pc}
 80053c8:	b118      	cbz	r0, 80053d2 <_fflush_r+0x1a>
 80053ca:	6983      	ldr	r3, [r0, #24]
 80053cc:	b90b      	cbnz	r3, 80053d2 <_fflush_r+0x1a>
 80053ce:	f000 f887 	bl	80054e0 <__sinit>
 80053d2:	4b14      	ldr	r3, [pc, #80]	; (8005424 <_fflush_r+0x6c>)
 80053d4:	429c      	cmp	r4, r3
 80053d6:	d11b      	bne.n	8005410 <_fflush_r+0x58>
 80053d8:	686c      	ldr	r4, [r5, #4]
 80053da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d0ef      	beq.n	80053c2 <_fflush_r+0xa>
 80053e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80053e4:	07d0      	lsls	r0, r2, #31
 80053e6:	d404      	bmi.n	80053f2 <_fflush_r+0x3a>
 80053e8:	0599      	lsls	r1, r3, #22
 80053ea:	d402      	bmi.n	80053f2 <_fflush_r+0x3a>
 80053ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053ee:	f000 f915 	bl	800561c <__retarget_lock_acquire_recursive>
 80053f2:	4628      	mov	r0, r5
 80053f4:	4621      	mov	r1, r4
 80053f6:	f7ff ff59 	bl	80052ac <__sflush_r>
 80053fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80053fc:	07da      	lsls	r2, r3, #31
 80053fe:	4605      	mov	r5, r0
 8005400:	d4e0      	bmi.n	80053c4 <_fflush_r+0xc>
 8005402:	89a3      	ldrh	r3, [r4, #12]
 8005404:	059b      	lsls	r3, r3, #22
 8005406:	d4dd      	bmi.n	80053c4 <_fflush_r+0xc>
 8005408:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800540a:	f000 f908 	bl	800561e <__retarget_lock_release_recursive>
 800540e:	e7d9      	b.n	80053c4 <_fflush_r+0xc>
 8005410:	4b05      	ldr	r3, [pc, #20]	; (8005428 <_fflush_r+0x70>)
 8005412:	429c      	cmp	r4, r3
 8005414:	d101      	bne.n	800541a <_fflush_r+0x62>
 8005416:	68ac      	ldr	r4, [r5, #8]
 8005418:	e7df      	b.n	80053da <_fflush_r+0x22>
 800541a:	4b04      	ldr	r3, [pc, #16]	; (800542c <_fflush_r+0x74>)
 800541c:	429c      	cmp	r4, r3
 800541e:	bf08      	it	eq
 8005420:	68ec      	ldreq	r4, [r5, #12]
 8005422:	e7da      	b.n	80053da <_fflush_r+0x22>
 8005424:	080064dc 	.word	0x080064dc
 8005428:	080064fc 	.word	0x080064fc
 800542c:	080064bc 	.word	0x080064bc

08005430 <std>:
 8005430:	2300      	movs	r3, #0
 8005432:	b510      	push	{r4, lr}
 8005434:	4604      	mov	r4, r0
 8005436:	e9c0 3300 	strd	r3, r3, [r0]
 800543a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800543e:	6083      	str	r3, [r0, #8]
 8005440:	8181      	strh	r1, [r0, #12]
 8005442:	6643      	str	r3, [r0, #100]	; 0x64
 8005444:	81c2      	strh	r2, [r0, #14]
 8005446:	6183      	str	r3, [r0, #24]
 8005448:	4619      	mov	r1, r3
 800544a:	2208      	movs	r2, #8
 800544c:	305c      	adds	r0, #92	; 0x5c
 800544e:	f7ff fe19 	bl	8005084 <memset>
 8005452:	4b05      	ldr	r3, [pc, #20]	; (8005468 <std+0x38>)
 8005454:	6263      	str	r3, [r4, #36]	; 0x24
 8005456:	4b05      	ldr	r3, [pc, #20]	; (800546c <std+0x3c>)
 8005458:	62a3      	str	r3, [r4, #40]	; 0x28
 800545a:	4b05      	ldr	r3, [pc, #20]	; (8005470 <std+0x40>)
 800545c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800545e:	4b05      	ldr	r3, [pc, #20]	; (8005474 <std+0x44>)
 8005460:	6224      	str	r4, [r4, #32]
 8005462:	6323      	str	r3, [r4, #48]	; 0x30
 8005464:	bd10      	pop	{r4, pc}
 8005466:	bf00      	nop
 8005468:	08006161 	.word	0x08006161
 800546c:	08006183 	.word	0x08006183
 8005470:	080061bb 	.word	0x080061bb
 8005474:	080061df 	.word	0x080061df

08005478 <_cleanup_r>:
 8005478:	4901      	ldr	r1, [pc, #4]	; (8005480 <_cleanup_r+0x8>)
 800547a:	f000 b8af 	b.w	80055dc <_fwalk_reent>
 800547e:	bf00      	nop
 8005480:	080053b9 	.word	0x080053b9

08005484 <__sfmoreglue>:
 8005484:	b570      	push	{r4, r5, r6, lr}
 8005486:	2268      	movs	r2, #104	; 0x68
 8005488:	1e4d      	subs	r5, r1, #1
 800548a:	4355      	muls	r5, r2
 800548c:	460e      	mov	r6, r1
 800548e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005492:	f000 f997 	bl	80057c4 <_malloc_r>
 8005496:	4604      	mov	r4, r0
 8005498:	b140      	cbz	r0, 80054ac <__sfmoreglue+0x28>
 800549a:	2100      	movs	r1, #0
 800549c:	e9c0 1600 	strd	r1, r6, [r0]
 80054a0:	300c      	adds	r0, #12
 80054a2:	60a0      	str	r0, [r4, #8]
 80054a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80054a8:	f7ff fdec 	bl	8005084 <memset>
 80054ac:	4620      	mov	r0, r4
 80054ae:	bd70      	pop	{r4, r5, r6, pc}

080054b0 <__sfp_lock_acquire>:
 80054b0:	4801      	ldr	r0, [pc, #4]	; (80054b8 <__sfp_lock_acquire+0x8>)
 80054b2:	f000 b8b3 	b.w	800561c <__retarget_lock_acquire_recursive>
 80054b6:	bf00      	nop
 80054b8:	20004431 	.word	0x20004431

080054bc <__sfp_lock_release>:
 80054bc:	4801      	ldr	r0, [pc, #4]	; (80054c4 <__sfp_lock_release+0x8>)
 80054be:	f000 b8ae 	b.w	800561e <__retarget_lock_release_recursive>
 80054c2:	bf00      	nop
 80054c4:	20004431 	.word	0x20004431

080054c8 <__sinit_lock_acquire>:
 80054c8:	4801      	ldr	r0, [pc, #4]	; (80054d0 <__sinit_lock_acquire+0x8>)
 80054ca:	f000 b8a7 	b.w	800561c <__retarget_lock_acquire_recursive>
 80054ce:	bf00      	nop
 80054d0:	20004432 	.word	0x20004432

080054d4 <__sinit_lock_release>:
 80054d4:	4801      	ldr	r0, [pc, #4]	; (80054dc <__sinit_lock_release+0x8>)
 80054d6:	f000 b8a2 	b.w	800561e <__retarget_lock_release_recursive>
 80054da:	bf00      	nop
 80054dc:	20004432 	.word	0x20004432

080054e0 <__sinit>:
 80054e0:	b510      	push	{r4, lr}
 80054e2:	4604      	mov	r4, r0
 80054e4:	f7ff fff0 	bl	80054c8 <__sinit_lock_acquire>
 80054e8:	69a3      	ldr	r3, [r4, #24]
 80054ea:	b11b      	cbz	r3, 80054f4 <__sinit+0x14>
 80054ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054f0:	f7ff bff0 	b.w	80054d4 <__sinit_lock_release>
 80054f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80054f8:	6523      	str	r3, [r4, #80]	; 0x50
 80054fa:	4b13      	ldr	r3, [pc, #76]	; (8005548 <__sinit+0x68>)
 80054fc:	4a13      	ldr	r2, [pc, #76]	; (800554c <__sinit+0x6c>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	62a2      	str	r2, [r4, #40]	; 0x28
 8005502:	42a3      	cmp	r3, r4
 8005504:	bf04      	itt	eq
 8005506:	2301      	moveq	r3, #1
 8005508:	61a3      	streq	r3, [r4, #24]
 800550a:	4620      	mov	r0, r4
 800550c:	f000 f820 	bl	8005550 <__sfp>
 8005510:	6060      	str	r0, [r4, #4]
 8005512:	4620      	mov	r0, r4
 8005514:	f000 f81c 	bl	8005550 <__sfp>
 8005518:	60a0      	str	r0, [r4, #8]
 800551a:	4620      	mov	r0, r4
 800551c:	f000 f818 	bl	8005550 <__sfp>
 8005520:	2200      	movs	r2, #0
 8005522:	60e0      	str	r0, [r4, #12]
 8005524:	2104      	movs	r1, #4
 8005526:	6860      	ldr	r0, [r4, #4]
 8005528:	f7ff ff82 	bl	8005430 <std>
 800552c:	68a0      	ldr	r0, [r4, #8]
 800552e:	2201      	movs	r2, #1
 8005530:	2109      	movs	r1, #9
 8005532:	f7ff ff7d 	bl	8005430 <std>
 8005536:	68e0      	ldr	r0, [r4, #12]
 8005538:	2202      	movs	r2, #2
 800553a:	2112      	movs	r1, #18
 800553c:	f7ff ff78 	bl	8005430 <std>
 8005540:	2301      	movs	r3, #1
 8005542:	61a3      	str	r3, [r4, #24]
 8005544:	e7d2      	b.n	80054ec <__sinit+0xc>
 8005546:	bf00      	nop
 8005548:	080064b8 	.word	0x080064b8
 800554c:	08005479 	.word	0x08005479

08005550 <__sfp>:
 8005550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005552:	4607      	mov	r7, r0
 8005554:	f7ff ffac 	bl	80054b0 <__sfp_lock_acquire>
 8005558:	4b1e      	ldr	r3, [pc, #120]	; (80055d4 <__sfp+0x84>)
 800555a:	681e      	ldr	r6, [r3, #0]
 800555c:	69b3      	ldr	r3, [r6, #24]
 800555e:	b913      	cbnz	r3, 8005566 <__sfp+0x16>
 8005560:	4630      	mov	r0, r6
 8005562:	f7ff ffbd 	bl	80054e0 <__sinit>
 8005566:	3648      	adds	r6, #72	; 0x48
 8005568:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800556c:	3b01      	subs	r3, #1
 800556e:	d503      	bpl.n	8005578 <__sfp+0x28>
 8005570:	6833      	ldr	r3, [r6, #0]
 8005572:	b30b      	cbz	r3, 80055b8 <__sfp+0x68>
 8005574:	6836      	ldr	r6, [r6, #0]
 8005576:	e7f7      	b.n	8005568 <__sfp+0x18>
 8005578:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800557c:	b9d5      	cbnz	r5, 80055b4 <__sfp+0x64>
 800557e:	4b16      	ldr	r3, [pc, #88]	; (80055d8 <__sfp+0x88>)
 8005580:	60e3      	str	r3, [r4, #12]
 8005582:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005586:	6665      	str	r5, [r4, #100]	; 0x64
 8005588:	f000 f847 	bl	800561a <__retarget_lock_init_recursive>
 800558c:	f7ff ff96 	bl	80054bc <__sfp_lock_release>
 8005590:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005594:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005598:	6025      	str	r5, [r4, #0]
 800559a:	61a5      	str	r5, [r4, #24]
 800559c:	2208      	movs	r2, #8
 800559e:	4629      	mov	r1, r5
 80055a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80055a4:	f7ff fd6e 	bl	8005084 <memset>
 80055a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80055ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80055b0:	4620      	mov	r0, r4
 80055b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055b4:	3468      	adds	r4, #104	; 0x68
 80055b6:	e7d9      	b.n	800556c <__sfp+0x1c>
 80055b8:	2104      	movs	r1, #4
 80055ba:	4638      	mov	r0, r7
 80055bc:	f7ff ff62 	bl	8005484 <__sfmoreglue>
 80055c0:	4604      	mov	r4, r0
 80055c2:	6030      	str	r0, [r6, #0]
 80055c4:	2800      	cmp	r0, #0
 80055c6:	d1d5      	bne.n	8005574 <__sfp+0x24>
 80055c8:	f7ff ff78 	bl	80054bc <__sfp_lock_release>
 80055cc:	230c      	movs	r3, #12
 80055ce:	603b      	str	r3, [r7, #0]
 80055d0:	e7ee      	b.n	80055b0 <__sfp+0x60>
 80055d2:	bf00      	nop
 80055d4:	080064b8 	.word	0x080064b8
 80055d8:	ffff0001 	.word	0xffff0001

080055dc <_fwalk_reent>:
 80055dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055e0:	4606      	mov	r6, r0
 80055e2:	4688      	mov	r8, r1
 80055e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80055e8:	2700      	movs	r7, #0
 80055ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80055ee:	f1b9 0901 	subs.w	r9, r9, #1
 80055f2:	d505      	bpl.n	8005600 <_fwalk_reent+0x24>
 80055f4:	6824      	ldr	r4, [r4, #0]
 80055f6:	2c00      	cmp	r4, #0
 80055f8:	d1f7      	bne.n	80055ea <_fwalk_reent+0xe>
 80055fa:	4638      	mov	r0, r7
 80055fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005600:	89ab      	ldrh	r3, [r5, #12]
 8005602:	2b01      	cmp	r3, #1
 8005604:	d907      	bls.n	8005616 <_fwalk_reent+0x3a>
 8005606:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800560a:	3301      	adds	r3, #1
 800560c:	d003      	beq.n	8005616 <_fwalk_reent+0x3a>
 800560e:	4629      	mov	r1, r5
 8005610:	4630      	mov	r0, r6
 8005612:	47c0      	blx	r8
 8005614:	4307      	orrs	r7, r0
 8005616:	3568      	adds	r5, #104	; 0x68
 8005618:	e7e9      	b.n	80055ee <_fwalk_reent+0x12>

0800561a <__retarget_lock_init_recursive>:
 800561a:	4770      	bx	lr

0800561c <__retarget_lock_acquire_recursive>:
 800561c:	4770      	bx	lr

0800561e <__retarget_lock_release_recursive>:
 800561e:	4770      	bx	lr

08005620 <__swhatbuf_r>:
 8005620:	b570      	push	{r4, r5, r6, lr}
 8005622:	460e      	mov	r6, r1
 8005624:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005628:	2900      	cmp	r1, #0
 800562a:	b096      	sub	sp, #88	; 0x58
 800562c:	4614      	mov	r4, r2
 800562e:	461d      	mov	r5, r3
 8005630:	da08      	bge.n	8005644 <__swhatbuf_r+0x24>
 8005632:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005636:	2200      	movs	r2, #0
 8005638:	602a      	str	r2, [r5, #0]
 800563a:	061a      	lsls	r2, r3, #24
 800563c:	d410      	bmi.n	8005660 <__swhatbuf_r+0x40>
 800563e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005642:	e00e      	b.n	8005662 <__swhatbuf_r+0x42>
 8005644:	466a      	mov	r2, sp
 8005646:	f000 fdf1 	bl	800622c <_fstat_r>
 800564a:	2800      	cmp	r0, #0
 800564c:	dbf1      	blt.n	8005632 <__swhatbuf_r+0x12>
 800564e:	9a01      	ldr	r2, [sp, #4]
 8005650:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005654:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005658:	425a      	negs	r2, r3
 800565a:	415a      	adcs	r2, r3
 800565c:	602a      	str	r2, [r5, #0]
 800565e:	e7ee      	b.n	800563e <__swhatbuf_r+0x1e>
 8005660:	2340      	movs	r3, #64	; 0x40
 8005662:	2000      	movs	r0, #0
 8005664:	6023      	str	r3, [r4, #0]
 8005666:	b016      	add	sp, #88	; 0x58
 8005668:	bd70      	pop	{r4, r5, r6, pc}
	...

0800566c <__smakebuf_r>:
 800566c:	898b      	ldrh	r3, [r1, #12]
 800566e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005670:	079d      	lsls	r5, r3, #30
 8005672:	4606      	mov	r6, r0
 8005674:	460c      	mov	r4, r1
 8005676:	d507      	bpl.n	8005688 <__smakebuf_r+0x1c>
 8005678:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800567c:	6023      	str	r3, [r4, #0]
 800567e:	6123      	str	r3, [r4, #16]
 8005680:	2301      	movs	r3, #1
 8005682:	6163      	str	r3, [r4, #20]
 8005684:	b002      	add	sp, #8
 8005686:	bd70      	pop	{r4, r5, r6, pc}
 8005688:	ab01      	add	r3, sp, #4
 800568a:	466a      	mov	r2, sp
 800568c:	f7ff ffc8 	bl	8005620 <__swhatbuf_r>
 8005690:	9900      	ldr	r1, [sp, #0]
 8005692:	4605      	mov	r5, r0
 8005694:	4630      	mov	r0, r6
 8005696:	f000 f895 	bl	80057c4 <_malloc_r>
 800569a:	b948      	cbnz	r0, 80056b0 <__smakebuf_r+0x44>
 800569c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056a0:	059a      	lsls	r2, r3, #22
 80056a2:	d4ef      	bmi.n	8005684 <__smakebuf_r+0x18>
 80056a4:	f023 0303 	bic.w	r3, r3, #3
 80056a8:	f043 0302 	orr.w	r3, r3, #2
 80056ac:	81a3      	strh	r3, [r4, #12]
 80056ae:	e7e3      	b.n	8005678 <__smakebuf_r+0xc>
 80056b0:	4b0d      	ldr	r3, [pc, #52]	; (80056e8 <__smakebuf_r+0x7c>)
 80056b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80056b4:	89a3      	ldrh	r3, [r4, #12]
 80056b6:	6020      	str	r0, [r4, #0]
 80056b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056bc:	81a3      	strh	r3, [r4, #12]
 80056be:	9b00      	ldr	r3, [sp, #0]
 80056c0:	6163      	str	r3, [r4, #20]
 80056c2:	9b01      	ldr	r3, [sp, #4]
 80056c4:	6120      	str	r0, [r4, #16]
 80056c6:	b15b      	cbz	r3, 80056e0 <__smakebuf_r+0x74>
 80056c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056cc:	4630      	mov	r0, r6
 80056ce:	f000 fdbf 	bl	8006250 <_isatty_r>
 80056d2:	b128      	cbz	r0, 80056e0 <__smakebuf_r+0x74>
 80056d4:	89a3      	ldrh	r3, [r4, #12]
 80056d6:	f023 0303 	bic.w	r3, r3, #3
 80056da:	f043 0301 	orr.w	r3, r3, #1
 80056de:	81a3      	strh	r3, [r4, #12]
 80056e0:	89a0      	ldrh	r0, [r4, #12]
 80056e2:	4305      	orrs	r5, r0
 80056e4:	81a5      	strh	r5, [r4, #12]
 80056e6:	e7cd      	b.n	8005684 <__smakebuf_r+0x18>
 80056e8:	08005479 	.word	0x08005479

080056ec <_free_r>:
 80056ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80056ee:	2900      	cmp	r1, #0
 80056f0:	d044      	beq.n	800577c <_free_r+0x90>
 80056f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056f6:	9001      	str	r0, [sp, #4]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	f1a1 0404 	sub.w	r4, r1, #4
 80056fe:	bfb8      	it	lt
 8005700:	18e4      	addlt	r4, r4, r3
 8005702:	f000 fde1 	bl	80062c8 <__malloc_lock>
 8005706:	4a1e      	ldr	r2, [pc, #120]	; (8005780 <_free_r+0x94>)
 8005708:	9801      	ldr	r0, [sp, #4]
 800570a:	6813      	ldr	r3, [r2, #0]
 800570c:	b933      	cbnz	r3, 800571c <_free_r+0x30>
 800570e:	6063      	str	r3, [r4, #4]
 8005710:	6014      	str	r4, [r2, #0]
 8005712:	b003      	add	sp, #12
 8005714:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005718:	f000 bddc 	b.w	80062d4 <__malloc_unlock>
 800571c:	42a3      	cmp	r3, r4
 800571e:	d908      	bls.n	8005732 <_free_r+0x46>
 8005720:	6825      	ldr	r5, [r4, #0]
 8005722:	1961      	adds	r1, r4, r5
 8005724:	428b      	cmp	r3, r1
 8005726:	bf01      	itttt	eq
 8005728:	6819      	ldreq	r1, [r3, #0]
 800572a:	685b      	ldreq	r3, [r3, #4]
 800572c:	1949      	addeq	r1, r1, r5
 800572e:	6021      	streq	r1, [r4, #0]
 8005730:	e7ed      	b.n	800570e <_free_r+0x22>
 8005732:	461a      	mov	r2, r3
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	b10b      	cbz	r3, 800573c <_free_r+0x50>
 8005738:	42a3      	cmp	r3, r4
 800573a:	d9fa      	bls.n	8005732 <_free_r+0x46>
 800573c:	6811      	ldr	r1, [r2, #0]
 800573e:	1855      	adds	r5, r2, r1
 8005740:	42a5      	cmp	r5, r4
 8005742:	d10b      	bne.n	800575c <_free_r+0x70>
 8005744:	6824      	ldr	r4, [r4, #0]
 8005746:	4421      	add	r1, r4
 8005748:	1854      	adds	r4, r2, r1
 800574a:	42a3      	cmp	r3, r4
 800574c:	6011      	str	r1, [r2, #0]
 800574e:	d1e0      	bne.n	8005712 <_free_r+0x26>
 8005750:	681c      	ldr	r4, [r3, #0]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	6053      	str	r3, [r2, #4]
 8005756:	4421      	add	r1, r4
 8005758:	6011      	str	r1, [r2, #0]
 800575a:	e7da      	b.n	8005712 <_free_r+0x26>
 800575c:	d902      	bls.n	8005764 <_free_r+0x78>
 800575e:	230c      	movs	r3, #12
 8005760:	6003      	str	r3, [r0, #0]
 8005762:	e7d6      	b.n	8005712 <_free_r+0x26>
 8005764:	6825      	ldr	r5, [r4, #0]
 8005766:	1961      	adds	r1, r4, r5
 8005768:	428b      	cmp	r3, r1
 800576a:	bf04      	itt	eq
 800576c:	6819      	ldreq	r1, [r3, #0]
 800576e:	685b      	ldreq	r3, [r3, #4]
 8005770:	6063      	str	r3, [r4, #4]
 8005772:	bf04      	itt	eq
 8005774:	1949      	addeq	r1, r1, r5
 8005776:	6021      	streq	r1, [r4, #0]
 8005778:	6054      	str	r4, [r2, #4]
 800577a:	e7ca      	b.n	8005712 <_free_r+0x26>
 800577c:	b003      	add	sp, #12
 800577e:	bd30      	pop	{r4, r5, pc}
 8005780:	20004434 	.word	0x20004434

08005784 <sbrk_aligned>:
 8005784:	b570      	push	{r4, r5, r6, lr}
 8005786:	4e0e      	ldr	r6, [pc, #56]	; (80057c0 <sbrk_aligned+0x3c>)
 8005788:	460c      	mov	r4, r1
 800578a:	6831      	ldr	r1, [r6, #0]
 800578c:	4605      	mov	r5, r0
 800578e:	b911      	cbnz	r1, 8005796 <sbrk_aligned+0x12>
 8005790:	f000 fcd6 	bl	8006140 <_sbrk_r>
 8005794:	6030      	str	r0, [r6, #0]
 8005796:	4621      	mov	r1, r4
 8005798:	4628      	mov	r0, r5
 800579a:	f000 fcd1 	bl	8006140 <_sbrk_r>
 800579e:	1c43      	adds	r3, r0, #1
 80057a0:	d00a      	beq.n	80057b8 <sbrk_aligned+0x34>
 80057a2:	1cc4      	adds	r4, r0, #3
 80057a4:	f024 0403 	bic.w	r4, r4, #3
 80057a8:	42a0      	cmp	r0, r4
 80057aa:	d007      	beq.n	80057bc <sbrk_aligned+0x38>
 80057ac:	1a21      	subs	r1, r4, r0
 80057ae:	4628      	mov	r0, r5
 80057b0:	f000 fcc6 	bl	8006140 <_sbrk_r>
 80057b4:	3001      	adds	r0, #1
 80057b6:	d101      	bne.n	80057bc <sbrk_aligned+0x38>
 80057b8:	f04f 34ff 	mov.w	r4, #4294967295
 80057bc:	4620      	mov	r0, r4
 80057be:	bd70      	pop	{r4, r5, r6, pc}
 80057c0:	20004438 	.word	0x20004438

080057c4 <_malloc_r>:
 80057c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057c8:	1ccd      	adds	r5, r1, #3
 80057ca:	f025 0503 	bic.w	r5, r5, #3
 80057ce:	3508      	adds	r5, #8
 80057d0:	2d0c      	cmp	r5, #12
 80057d2:	bf38      	it	cc
 80057d4:	250c      	movcc	r5, #12
 80057d6:	2d00      	cmp	r5, #0
 80057d8:	4607      	mov	r7, r0
 80057da:	db01      	blt.n	80057e0 <_malloc_r+0x1c>
 80057dc:	42a9      	cmp	r1, r5
 80057de:	d905      	bls.n	80057ec <_malloc_r+0x28>
 80057e0:	230c      	movs	r3, #12
 80057e2:	603b      	str	r3, [r7, #0]
 80057e4:	2600      	movs	r6, #0
 80057e6:	4630      	mov	r0, r6
 80057e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057ec:	4e2e      	ldr	r6, [pc, #184]	; (80058a8 <_malloc_r+0xe4>)
 80057ee:	f000 fd6b 	bl	80062c8 <__malloc_lock>
 80057f2:	6833      	ldr	r3, [r6, #0]
 80057f4:	461c      	mov	r4, r3
 80057f6:	bb34      	cbnz	r4, 8005846 <_malloc_r+0x82>
 80057f8:	4629      	mov	r1, r5
 80057fa:	4638      	mov	r0, r7
 80057fc:	f7ff ffc2 	bl	8005784 <sbrk_aligned>
 8005800:	1c43      	adds	r3, r0, #1
 8005802:	4604      	mov	r4, r0
 8005804:	d14d      	bne.n	80058a2 <_malloc_r+0xde>
 8005806:	6834      	ldr	r4, [r6, #0]
 8005808:	4626      	mov	r6, r4
 800580a:	2e00      	cmp	r6, #0
 800580c:	d140      	bne.n	8005890 <_malloc_r+0xcc>
 800580e:	6823      	ldr	r3, [r4, #0]
 8005810:	4631      	mov	r1, r6
 8005812:	4638      	mov	r0, r7
 8005814:	eb04 0803 	add.w	r8, r4, r3
 8005818:	f000 fc92 	bl	8006140 <_sbrk_r>
 800581c:	4580      	cmp	r8, r0
 800581e:	d13a      	bne.n	8005896 <_malloc_r+0xd2>
 8005820:	6821      	ldr	r1, [r4, #0]
 8005822:	3503      	adds	r5, #3
 8005824:	1a6d      	subs	r5, r5, r1
 8005826:	f025 0503 	bic.w	r5, r5, #3
 800582a:	3508      	adds	r5, #8
 800582c:	2d0c      	cmp	r5, #12
 800582e:	bf38      	it	cc
 8005830:	250c      	movcc	r5, #12
 8005832:	4629      	mov	r1, r5
 8005834:	4638      	mov	r0, r7
 8005836:	f7ff ffa5 	bl	8005784 <sbrk_aligned>
 800583a:	3001      	adds	r0, #1
 800583c:	d02b      	beq.n	8005896 <_malloc_r+0xd2>
 800583e:	6823      	ldr	r3, [r4, #0]
 8005840:	442b      	add	r3, r5
 8005842:	6023      	str	r3, [r4, #0]
 8005844:	e00e      	b.n	8005864 <_malloc_r+0xa0>
 8005846:	6822      	ldr	r2, [r4, #0]
 8005848:	1b52      	subs	r2, r2, r5
 800584a:	d41e      	bmi.n	800588a <_malloc_r+0xc6>
 800584c:	2a0b      	cmp	r2, #11
 800584e:	d916      	bls.n	800587e <_malloc_r+0xba>
 8005850:	1961      	adds	r1, r4, r5
 8005852:	42a3      	cmp	r3, r4
 8005854:	6025      	str	r5, [r4, #0]
 8005856:	bf18      	it	ne
 8005858:	6059      	strne	r1, [r3, #4]
 800585a:	6863      	ldr	r3, [r4, #4]
 800585c:	bf08      	it	eq
 800585e:	6031      	streq	r1, [r6, #0]
 8005860:	5162      	str	r2, [r4, r5]
 8005862:	604b      	str	r3, [r1, #4]
 8005864:	4638      	mov	r0, r7
 8005866:	f104 060b 	add.w	r6, r4, #11
 800586a:	f000 fd33 	bl	80062d4 <__malloc_unlock>
 800586e:	f026 0607 	bic.w	r6, r6, #7
 8005872:	1d23      	adds	r3, r4, #4
 8005874:	1af2      	subs	r2, r6, r3
 8005876:	d0b6      	beq.n	80057e6 <_malloc_r+0x22>
 8005878:	1b9b      	subs	r3, r3, r6
 800587a:	50a3      	str	r3, [r4, r2]
 800587c:	e7b3      	b.n	80057e6 <_malloc_r+0x22>
 800587e:	6862      	ldr	r2, [r4, #4]
 8005880:	42a3      	cmp	r3, r4
 8005882:	bf0c      	ite	eq
 8005884:	6032      	streq	r2, [r6, #0]
 8005886:	605a      	strne	r2, [r3, #4]
 8005888:	e7ec      	b.n	8005864 <_malloc_r+0xa0>
 800588a:	4623      	mov	r3, r4
 800588c:	6864      	ldr	r4, [r4, #4]
 800588e:	e7b2      	b.n	80057f6 <_malloc_r+0x32>
 8005890:	4634      	mov	r4, r6
 8005892:	6876      	ldr	r6, [r6, #4]
 8005894:	e7b9      	b.n	800580a <_malloc_r+0x46>
 8005896:	230c      	movs	r3, #12
 8005898:	603b      	str	r3, [r7, #0]
 800589a:	4638      	mov	r0, r7
 800589c:	f000 fd1a 	bl	80062d4 <__malloc_unlock>
 80058a0:	e7a1      	b.n	80057e6 <_malloc_r+0x22>
 80058a2:	6025      	str	r5, [r4, #0]
 80058a4:	e7de      	b.n	8005864 <_malloc_r+0xa0>
 80058a6:	bf00      	nop
 80058a8:	20004434 	.word	0x20004434

080058ac <__ssputs_r>:
 80058ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058b0:	688e      	ldr	r6, [r1, #8]
 80058b2:	429e      	cmp	r6, r3
 80058b4:	4682      	mov	sl, r0
 80058b6:	460c      	mov	r4, r1
 80058b8:	4690      	mov	r8, r2
 80058ba:	461f      	mov	r7, r3
 80058bc:	d838      	bhi.n	8005930 <__ssputs_r+0x84>
 80058be:	898a      	ldrh	r2, [r1, #12]
 80058c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80058c4:	d032      	beq.n	800592c <__ssputs_r+0x80>
 80058c6:	6825      	ldr	r5, [r4, #0]
 80058c8:	6909      	ldr	r1, [r1, #16]
 80058ca:	eba5 0901 	sub.w	r9, r5, r1
 80058ce:	6965      	ldr	r5, [r4, #20]
 80058d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80058d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80058d8:	3301      	adds	r3, #1
 80058da:	444b      	add	r3, r9
 80058dc:	106d      	asrs	r5, r5, #1
 80058de:	429d      	cmp	r5, r3
 80058e0:	bf38      	it	cc
 80058e2:	461d      	movcc	r5, r3
 80058e4:	0553      	lsls	r3, r2, #21
 80058e6:	d531      	bpl.n	800594c <__ssputs_r+0xa0>
 80058e8:	4629      	mov	r1, r5
 80058ea:	f7ff ff6b 	bl	80057c4 <_malloc_r>
 80058ee:	4606      	mov	r6, r0
 80058f0:	b950      	cbnz	r0, 8005908 <__ssputs_r+0x5c>
 80058f2:	230c      	movs	r3, #12
 80058f4:	f8ca 3000 	str.w	r3, [sl]
 80058f8:	89a3      	ldrh	r3, [r4, #12]
 80058fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058fe:	81a3      	strh	r3, [r4, #12]
 8005900:	f04f 30ff 	mov.w	r0, #4294967295
 8005904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005908:	6921      	ldr	r1, [r4, #16]
 800590a:	464a      	mov	r2, r9
 800590c:	f7ff fbac 	bl	8005068 <memcpy>
 8005910:	89a3      	ldrh	r3, [r4, #12]
 8005912:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005916:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800591a:	81a3      	strh	r3, [r4, #12]
 800591c:	6126      	str	r6, [r4, #16]
 800591e:	6165      	str	r5, [r4, #20]
 8005920:	444e      	add	r6, r9
 8005922:	eba5 0509 	sub.w	r5, r5, r9
 8005926:	6026      	str	r6, [r4, #0]
 8005928:	60a5      	str	r5, [r4, #8]
 800592a:	463e      	mov	r6, r7
 800592c:	42be      	cmp	r6, r7
 800592e:	d900      	bls.n	8005932 <__ssputs_r+0x86>
 8005930:	463e      	mov	r6, r7
 8005932:	6820      	ldr	r0, [r4, #0]
 8005934:	4632      	mov	r2, r6
 8005936:	4641      	mov	r1, r8
 8005938:	f000 fcac 	bl	8006294 <memmove>
 800593c:	68a3      	ldr	r3, [r4, #8]
 800593e:	1b9b      	subs	r3, r3, r6
 8005940:	60a3      	str	r3, [r4, #8]
 8005942:	6823      	ldr	r3, [r4, #0]
 8005944:	4433      	add	r3, r6
 8005946:	6023      	str	r3, [r4, #0]
 8005948:	2000      	movs	r0, #0
 800594a:	e7db      	b.n	8005904 <__ssputs_r+0x58>
 800594c:	462a      	mov	r2, r5
 800594e:	f000 fcc7 	bl	80062e0 <_realloc_r>
 8005952:	4606      	mov	r6, r0
 8005954:	2800      	cmp	r0, #0
 8005956:	d1e1      	bne.n	800591c <__ssputs_r+0x70>
 8005958:	6921      	ldr	r1, [r4, #16]
 800595a:	4650      	mov	r0, sl
 800595c:	f7ff fec6 	bl	80056ec <_free_r>
 8005960:	e7c7      	b.n	80058f2 <__ssputs_r+0x46>
	...

08005964 <_svfiprintf_r>:
 8005964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005968:	4698      	mov	r8, r3
 800596a:	898b      	ldrh	r3, [r1, #12]
 800596c:	061b      	lsls	r3, r3, #24
 800596e:	b09d      	sub	sp, #116	; 0x74
 8005970:	4607      	mov	r7, r0
 8005972:	460d      	mov	r5, r1
 8005974:	4614      	mov	r4, r2
 8005976:	d50e      	bpl.n	8005996 <_svfiprintf_r+0x32>
 8005978:	690b      	ldr	r3, [r1, #16]
 800597a:	b963      	cbnz	r3, 8005996 <_svfiprintf_r+0x32>
 800597c:	2140      	movs	r1, #64	; 0x40
 800597e:	f7ff ff21 	bl	80057c4 <_malloc_r>
 8005982:	6028      	str	r0, [r5, #0]
 8005984:	6128      	str	r0, [r5, #16]
 8005986:	b920      	cbnz	r0, 8005992 <_svfiprintf_r+0x2e>
 8005988:	230c      	movs	r3, #12
 800598a:	603b      	str	r3, [r7, #0]
 800598c:	f04f 30ff 	mov.w	r0, #4294967295
 8005990:	e0d1      	b.n	8005b36 <_svfiprintf_r+0x1d2>
 8005992:	2340      	movs	r3, #64	; 0x40
 8005994:	616b      	str	r3, [r5, #20]
 8005996:	2300      	movs	r3, #0
 8005998:	9309      	str	r3, [sp, #36]	; 0x24
 800599a:	2320      	movs	r3, #32
 800599c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80059a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80059a4:	2330      	movs	r3, #48	; 0x30
 80059a6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005b50 <_svfiprintf_r+0x1ec>
 80059aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80059ae:	f04f 0901 	mov.w	r9, #1
 80059b2:	4623      	mov	r3, r4
 80059b4:	469a      	mov	sl, r3
 80059b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80059ba:	b10a      	cbz	r2, 80059c0 <_svfiprintf_r+0x5c>
 80059bc:	2a25      	cmp	r2, #37	; 0x25
 80059be:	d1f9      	bne.n	80059b4 <_svfiprintf_r+0x50>
 80059c0:	ebba 0b04 	subs.w	fp, sl, r4
 80059c4:	d00b      	beq.n	80059de <_svfiprintf_r+0x7a>
 80059c6:	465b      	mov	r3, fp
 80059c8:	4622      	mov	r2, r4
 80059ca:	4629      	mov	r1, r5
 80059cc:	4638      	mov	r0, r7
 80059ce:	f7ff ff6d 	bl	80058ac <__ssputs_r>
 80059d2:	3001      	adds	r0, #1
 80059d4:	f000 80aa 	beq.w	8005b2c <_svfiprintf_r+0x1c8>
 80059d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059da:	445a      	add	r2, fp
 80059dc:	9209      	str	r2, [sp, #36]	; 0x24
 80059de:	f89a 3000 	ldrb.w	r3, [sl]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	f000 80a2 	beq.w	8005b2c <_svfiprintf_r+0x1c8>
 80059e8:	2300      	movs	r3, #0
 80059ea:	f04f 32ff 	mov.w	r2, #4294967295
 80059ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80059f2:	f10a 0a01 	add.w	sl, sl, #1
 80059f6:	9304      	str	r3, [sp, #16]
 80059f8:	9307      	str	r3, [sp, #28]
 80059fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80059fe:	931a      	str	r3, [sp, #104]	; 0x68
 8005a00:	4654      	mov	r4, sl
 8005a02:	2205      	movs	r2, #5
 8005a04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a08:	4851      	ldr	r0, [pc, #324]	; (8005b50 <_svfiprintf_r+0x1ec>)
 8005a0a:	f7fa fc01 	bl	8000210 <memchr>
 8005a0e:	9a04      	ldr	r2, [sp, #16]
 8005a10:	b9d8      	cbnz	r0, 8005a4a <_svfiprintf_r+0xe6>
 8005a12:	06d0      	lsls	r0, r2, #27
 8005a14:	bf44      	itt	mi
 8005a16:	2320      	movmi	r3, #32
 8005a18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a1c:	0711      	lsls	r1, r2, #28
 8005a1e:	bf44      	itt	mi
 8005a20:	232b      	movmi	r3, #43	; 0x2b
 8005a22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a26:	f89a 3000 	ldrb.w	r3, [sl]
 8005a2a:	2b2a      	cmp	r3, #42	; 0x2a
 8005a2c:	d015      	beq.n	8005a5a <_svfiprintf_r+0xf6>
 8005a2e:	9a07      	ldr	r2, [sp, #28]
 8005a30:	4654      	mov	r4, sl
 8005a32:	2000      	movs	r0, #0
 8005a34:	f04f 0c0a 	mov.w	ip, #10
 8005a38:	4621      	mov	r1, r4
 8005a3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a3e:	3b30      	subs	r3, #48	; 0x30
 8005a40:	2b09      	cmp	r3, #9
 8005a42:	d94e      	bls.n	8005ae2 <_svfiprintf_r+0x17e>
 8005a44:	b1b0      	cbz	r0, 8005a74 <_svfiprintf_r+0x110>
 8005a46:	9207      	str	r2, [sp, #28]
 8005a48:	e014      	b.n	8005a74 <_svfiprintf_r+0x110>
 8005a4a:	eba0 0308 	sub.w	r3, r0, r8
 8005a4e:	fa09 f303 	lsl.w	r3, r9, r3
 8005a52:	4313      	orrs	r3, r2
 8005a54:	9304      	str	r3, [sp, #16]
 8005a56:	46a2      	mov	sl, r4
 8005a58:	e7d2      	b.n	8005a00 <_svfiprintf_r+0x9c>
 8005a5a:	9b03      	ldr	r3, [sp, #12]
 8005a5c:	1d19      	adds	r1, r3, #4
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	9103      	str	r1, [sp, #12]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	bfbb      	ittet	lt
 8005a66:	425b      	neglt	r3, r3
 8005a68:	f042 0202 	orrlt.w	r2, r2, #2
 8005a6c:	9307      	strge	r3, [sp, #28]
 8005a6e:	9307      	strlt	r3, [sp, #28]
 8005a70:	bfb8      	it	lt
 8005a72:	9204      	strlt	r2, [sp, #16]
 8005a74:	7823      	ldrb	r3, [r4, #0]
 8005a76:	2b2e      	cmp	r3, #46	; 0x2e
 8005a78:	d10c      	bne.n	8005a94 <_svfiprintf_r+0x130>
 8005a7a:	7863      	ldrb	r3, [r4, #1]
 8005a7c:	2b2a      	cmp	r3, #42	; 0x2a
 8005a7e:	d135      	bne.n	8005aec <_svfiprintf_r+0x188>
 8005a80:	9b03      	ldr	r3, [sp, #12]
 8005a82:	1d1a      	adds	r2, r3, #4
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	9203      	str	r2, [sp, #12]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	bfb8      	it	lt
 8005a8c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005a90:	3402      	adds	r4, #2
 8005a92:	9305      	str	r3, [sp, #20]
 8005a94:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005b60 <_svfiprintf_r+0x1fc>
 8005a98:	7821      	ldrb	r1, [r4, #0]
 8005a9a:	2203      	movs	r2, #3
 8005a9c:	4650      	mov	r0, sl
 8005a9e:	f7fa fbb7 	bl	8000210 <memchr>
 8005aa2:	b140      	cbz	r0, 8005ab6 <_svfiprintf_r+0x152>
 8005aa4:	2340      	movs	r3, #64	; 0x40
 8005aa6:	eba0 000a 	sub.w	r0, r0, sl
 8005aaa:	fa03 f000 	lsl.w	r0, r3, r0
 8005aae:	9b04      	ldr	r3, [sp, #16]
 8005ab0:	4303      	orrs	r3, r0
 8005ab2:	3401      	adds	r4, #1
 8005ab4:	9304      	str	r3, [sp, #16]
 8005ab6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005aba:	4826      	ldr	r0, [pc, #152]	; (8005b54 <_svfiprintf_r+0x1f0>)
 8005abc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ac0:	2206      	movs	r2, #6
 8005ac2:	f7fa fba5 	bl	8000210 <memchr>
 8005ac6:	2800      	cmp	r0, #0
 8005ac8:	d038      	beq.n	8005b3c <_svfiprintf_r+0x1d8>
 8005aca:	4b23      	ldr	r3, [pc, #140]	; (8005b58 <_svfiprintf_r+0x1f4>)
 8005acc:	bb1b      	cbnz	r3, 8005b16 <_svfiprintf_r+0x1b2>
 8005ace:	9b03      	ldr	r3, [sp, #12]
 8005ad0:	3307      	adds	r3, #7
 8005ad2:	f023 0307 	bic.w	r3, r3, #7
 8005ad6:	3308      	adds	r3, #8
 8005ad8:	9303      	str	r3, [sp, #12]
 8005ada:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005adc:	4433      	add	r3, r6
 8005ade:	9309      	str	r3, [sp, #36]	; 0x24
 8005ae0:	e767      	b.n	80059b2 <_svfiprintf_r+0x4e>
 8005ae2:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ae6:	460c      	mov	r4, r1
 8005ae8:	2001      	movs	r0, #1
 8005aea:	e7a5      	b.n	8005a38 <_svfiprintf_r+0xd4>
 8005aec:	2300      	movs	r3, #0
 8005aee:	3401      	adds	r4, #1
 8005af0:	9305      	str	r3, [sp, #20]
 8005af2:	4619      	mov	r1, r3
 8005af4:	f04f 0c0a 	mov.w	ip, #10
 8005af8:	4620      	mov	r0, r4
 8005afa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005afe:	3a30      	subs	r2, #48	; 0x30
 8005b00:	2a09      	cmp	r2, #9
 8005b02:	d903      	bls.n	8005b0c <_svfiprintf_r+0x1a8>
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d0c5      	beq.n	8005a94 <_svfiprintf_r+0x130>
 8005b08:	9105      	str	r1, [sp, #20]
 8005b0a:	e7c3      	b.n	8005a94 <_svfiprintf_r+0x130>
 8005b0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b10:	4604      	mov	r4, r0
 8005b12:	2301      	movs	r3, #1
 8005b14:	e7f0      	b.n	8005af8 <_svfiprintf_r+0x194>
 8005b16:	ab03      	add	r3, sp, #12
 8005b18:	9300      	str	r3, [sp, #0]
 8005b1a:	462a      	mov	r2, r5
 8005b1c:	4b0f      	ldr	r3, [pc, #60]	; (8005b5c <_svfiprintf_r+0x1f8>)
 8005b1e:	a904      	add	r1, sp, #16
 8005b20:	4638      	mov	r0, r7
 8005b22:	f3af 8000 	nop.w
 8005b26:	1c42      	adds	r2, r0, #1
 8005b28:	4606      	mov	r6, r0
 8005b2a:	d1d6      	bne.n	8005ada <_svfiprintf_r+0x176>
 8005b2c:	89ab      	ldrh	r3, [r5, #12]
 8005b2e:	065b      	lsls	r3, r3, #25
 8005b30:	f53f af2c 	bmi.w	800598c <_svfiprintf_r+0x28>
 8005b34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b36:	b01d      	add	sp, #116	; 0x74
 8005b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b3c:	ab03      	add	r3, sp, #12
 8005b3e:	9300      	str	r3, [sp, #0]
 8005b40:	462a      	mov	r2, r5
 8005b42:	4b06      	ldr	r3, [pc, #24]	; (8005b5c <_svfiprintf_r+0x1f8>)
 8005b44:	a904      	add	r1, sp, #16
 8005b46:	4638      	mov	r0, r7
 8005b48:	f000 f9d4 	bl	8005ef4 <_printf_i>
 8005b4c:	e7eb      	b.n	8005b26 <_svfiprintf_r+0x1c2>
 8005b4e:	bf00      	nop
 8005b50:	0800651c 	.word	0x0800651c
 8005b54:	08006526 	.word	0x08006526
 8005b58:	00000000 	.word	0x00000000
 8005b5c:	080058ad 	.word	0x080058ad
 8005b60:	08006522 	.word	0x08006522

08005b64 <__sfputc_r>:
 8005b64:	6893      	ldr	r3, [r2, #8]
 8005b66:	3b01      	subs	r3, #1
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	b410      	push	{r4}
 8005b6c:	6093      	str	r3, [r2, #8]
 8005b6e:	da08      	bge.n	8005b82 <__sfputc_r+0x1e>
 8005b70:	6994      	ldr	r4, [r2, #24]
 8005b72:	42a3      	cmp	r3, r4
 8005b74:	db01      	blt.n	8005b7a <__sfputc_r+0x16>
 8005b76:	290a      	cmp	r1, #10
 8005b78:	d103      	bne.n	8005b82 <__sfputc_r+0x1e>
 8005b7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b7e:	f7ff bad5 	b.w	800512c <__swbuf_r>
 8005b82:	6813      	ldr	r3, [r2, #0]
 8005b84:	1c58      	adds	r0, r3, #1
 8005b86:	6010      	str	r0, [r2, #0]
 8005b88:	7019      	strb	r1, [r3, #0]
 8005b8a:	4608      	mov	r0, r1
 8005b8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b90:	4770      	bx	lr

08005b92 <__sfputs_r>:
 8005b92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b94:	4606      	mov	r6, r0
 8005b96:	460f      	mov	r7, r1
 8005b98:	4614      	mov	r4, r2
 8005b9a:	18d5      	adds	r5, r2, r3
 8005b9c:	42ac      	cmp	r4, r5
 8005b9e:	d101      	bne.n	8005ba4 <__sfputs_r+0x12>
 8005ba0:	2000      	movs	r0, #0
 8005ba2:	e007      	b.n	8005bb4 <__sfputs_r+0x22>
 8005ba4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ba8:	463a      	mov	r2, r7
 8005baa:	4630      	mov	r0, r6
 8005bac:	f7ff ffda 	bl	8005b64 <__sfputc_r>
 8005bb0:	1c43      	adds	r3, r0, #1
 8005bb2:	d1f3      	bne.n	8005b9c <__sfputs_r+0xa>
 8005bb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005bb8 <_vfiprintf_r>:
 8005bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bbc:	460d      	mov	r5, r1
 8005bbe:	b09d      	sub	sp, #116	; 0x74
 8005bc0:	4614      	mov	r4, r2
 8005bc2:	4698      	mov	r8, r3
 8005bc4:	4606      	mov	r6, r0
 8005bc6:	b118      	cbz	r0, 8005bd0 <_vfiprintf_r+0x18>
 8005bc8:	6983      	ldr	r3, [r0, #24]
 8005bca:	b90b      	cbnz	r3, 8005bd0 <_vfiprintf_r+0x18>
 8005bcc:	f7ff fc88 	bl	80054e0 <__sinit>
 8005bd0:	4b89      	ldr	r3, [pc, #548]	; (8005df8 <_vfiprintf_r+0x240>)
 8005bd2:	429d      	cmp	r5, r3
 8005bd4:	d11b      	bne.n	8005c0e <_vfiprintf_r+0x56>
 8005bd6:	6875      	ldr	r5, [r6, #4]
 8005bd8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005bda:	07d9      	lsls	r1, r3, #31
 8005bdc:	d405      	bmi.n	8005bea <_vfiprintf_r+0x32>
 8005bde:	89ab      	ldrh	r3, [r5, #12]
 8005be0:	059a      	lsls	r2, r3, #22
 8005be2:	d402      	bmi.n	8005bea <_vfiprintf_r+0x32>
 8005be4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005be6:	f7ff fd19 	bl	800561c <__retarget_lock_acquire_recursive>
 8005bea:	89ab      	ldrh	r3, [r5, #12]
 8005bec:	071b      	lsls	r3, r3, #28
 8005bee:	d501      	bpl.n	8005bf4 <_vfiprintf_r+0x3c>
 8005bf0:	692b      	ldr	r3, [r5, #16]
 8005bf2:	b9eb      	cbnz	r3, 8005c30 <_vfiprintf_r+0x78>
 8005bf4:	4629      	mov	r1, r5
 8005bf6:	4630      	mov	r0, r6
 8005bf8:	f7ff faea 	bl	80051d0 <__swsetup_r>
 8005bfc:	b1c0      	cbz	r0, 8005c30 <_vfiprintf_r+0x78>
 8005bfe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c00:	07dc      	lsls	r4, r3, #31
 8005c02:	d50e      	bpl.n	8005c22 <_vfiprintf_r+0x6a>
 8005c04:	f04f 30ff 	mov.w	r0, #4294967295
 8005c08:	b01d      	add	sp, #116	; 0x74
 8005c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c0e:	4b7b      	ldr	r3, [pc, #492]	; (8005dfc <_vfiprintf_r+0x244>)
 8005c10:	429d      	cmp	r5, r3
 8005c12:	d101      	bne.n	8005c18 <_vfiprintf_r+0x60>
 8005c14:	68b5      	ldr	r5, [r6, #8]
 8005c16:	e7df      	b.n	8005bd8 <_vfiprintf_r+0x20>
 8005c18:	4b79      	ldr	r3, [pc, #484]	; (8005e00 <_vfiprintf_r+0x248>)
 8005c1a:	429d      	cmp	r5, r3
 8005c1c:	bf08      	it	eq
 8005c1e:	68f5      	ldreq	r5, [r6, #12]
 8005c20:	e7da      	b.n	8005bd8 <_vfiprintf_r+0x20>
 8005c22:	89ab      	ldrh	r3, [r5, #12]
 8005c24:	0598      	lsls	r0, r3, #22
 8005c26:	d4ed      	bmi.n	8005c04 <_vfiprintf_r+0x4c>
 8005c28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c2a:	f7ff fcf8 	bl	800561e <__retarget_lock_release_recursive>
 8005c2e:	e7e9      	b.n	8005c04 <_vfiprintf_r+0x4c>
 8005c30:	2300      	movs	r3, #0
 8005c32:	9309      	str	r3, [sp, #36]	; 0x24
 8005c34:	2320      	movs	r3, #32
 8005c36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005c3a:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c3e:	2330      	movs	r3, #48	; 0x30
 8005c40:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005e04 <_vfiprintf_r+0x24c>
 8005c44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005c48:	f04f 0901 	mov.w	r9, #1
 8005c4c:	4623      	mov	r3, r4
 8005c4e:	469a      	mov	sl, r3
 8005c50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c54:	b10a      	cbz	r2, 8005c5a <_vfiprintf_r+0xa2>
 8005c56:	2a25      	cmp	r2, #37	; 0x25
 8005c58:	d1f9      	bne.n	8005c4e <_vfiprintf_r+0x96>
 8005c5a:	ebba 0b04 	subs.w	fp, sl, r4
 8005c5e:	d00b      	beq.n	8005c78 <_vfiprintf_r+0xc0>
 8005c60:	465b      	mov	r3, fp
 8005c62:	4622      	mov	r2, r4
 8005c64:	4629      	mov	r1, r5
 8005c66:	4630      	mov	r0, r6
 8005c68:	f7ff ff93 	bl	8005b92 <__sfputs_r>
 8005c6c:	3001      	adds	r0, #1
 8005c6e:	f000 80aa 	beq.w	8005dc6 <_vfiprintf_r+0x20e>
 8005c72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c74:	445a      	add	r2, fp
 8005c76:	9209      	str	r2, [sp, #36]	; 0x24
 8005c78:	f89a 3000 	ldrb.w	r3, [sl]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	f000 80a2 	beq.w	8005dc6 <_vfiprintf_r+0x20e>
 8005c82:	2300      	movs	r3, #0
 8005c84:	f04f 32ff 	mov.w	r2, #4294967295
 8005c88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c8c:	f10a 0a01 	add.w	sl, sl, #1
 8005c90:	9304      	str	r3, [sp, #16]
 8005c92:	9307      	str	r3, [sp, #28]
 8005c94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005c98:	931a      	str	r3, [sp, #104]	; 0x68
 8005c9a:	4654      	mov	r4, sl
 8005c9c:	2205      	movs	r2, #5
 8005c9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ca2:	4858      	ldr	r0, [pc, #352]	; (8005e04 <_vfiprintf_r+0x24c>)
 8005ca4:	f7fa fab4 	bl	8000210 <memchr>
 8005ca8:	9a04      	ldr	r2, [sp, #16]
 8005caa:	b9d8      	cbnz	r0, 8005ce4 <_vfiprintf_r+0x12c>
 8005cac:	06d1      	lsls	r1, r2, #27
 8005cae:	bf44      	itt	mi
 8005cb0:	2320      	movmi	r3, #32
 8005cb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005cb6:	0713      	lsls	r3, r2, #28
 8005cb8:	bf44      	itt	mi
 8005cba:	232b      	movmi	r3, #43	; 0x2b
 8005cbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005cc0:	f89a 3000 	ldrb.w	r3, [sl]
 8005cc4:	2b2a      	cmp	r3, #42	; 0x2a
 8005cc6:	d015      	beq.n	8005cf4 <_vfiprintf_r+0x13c>
 8005cc8:	9a07      	ldr	r2, [sp, #28]
 8005cca:	4654      	mov	r4, sl
 8005ccc:	2000      	movs	r0, #0
 8005cce:	f04f 0c0a 	mov.w	ip, #10
 8005cd2:	4621      	mov	r1, r4
 8005cd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005cd8:	3b30      	subs	r3, #48	; 0x30
 8005cda:	2b09      	cmp	r3, #9
 8005cdc:	d94e      	bls.n	8005d7c <_vfiprintf_r+0x1c4>
 8005cde:	b1b0      	cbz	r0, 8005d0e <_vfiprintf_r+0x156>
 8005ce0:	9207      	str	r2, [sp, #28]
 8005ce2:	e014      	b.n	8005d0e <_vfiprintf_r+0x156>
 8005ce4:	eba0 0308 	sub.w	r3, r0, r8
 8005ce8:	fa09 f303 	lsl.w	r3, r9, r3
 8005cec:	4313      	orrs	r3, r2
 8005cee:	9304      	str	r3, [sp, #16]
 8005cf0:	46a2      	mov	sl, r4
 8005cf2:	e7d2      	b.n	8005c9a <_vfiprintf_r+0xe2>
 8005cf4:	9b03      	ldr	r3, [sp, #12]
 8005cf6:	1d19      	adds	r1, r3, #4
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	9103      	str	r1, [sp, #12]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	bfbb      	ittet	lt
 8005d00:	425b      	neglt	r3, r3
 8005d02:	f042 0202 	orrlt.w	r2, r2, #2
 8005d06:	9307      	strge	r3, [sp, #28]
 8005d08:	9307      	strlt	r3, [sp, #28]
 8005d0a:	bfb8      	it	lt
 8005d0c:	9204      	strlt	r2, [sp, #16]
 8005d0e:	7823      	ldrb	r3, [r4, #0]
 8005d10:	2b2e      	cmp	r3, #46	; 0x2e
 8005d12:	d10c      	bne.n	8005d2e <_vfiprintf_r+0x176>
 8005d14:	7863      	ldrb	r3, [r4, #1]
 8005d16:	2b2a      	cmp	r3, #42	; 0x2a
 8005d18:	d135      	bne.n	8005d86 <_vfiprintf_r+0x1ce>
 8005d1a:	9b03      	ldr	r3, [sp, #12]
 8005d1c:	1d1a      	adds	r2, r3, #4
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	9203      	str	r2, [sp, #12]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	bfb8      	it	lt
 8005d26:	f04f 33ff 	movlt.w	r3, #4294967295
 8005d2a:	3402      	adds	r4, #2
 8005d2c:	9305      	str	r3, [sp, #20]
 8005d2e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005e14 <_vfiprintf_r+0x25c>
 8005d32:	7821      	ldrb	r1, [r4, #0]
 8005d34:	2203      	movs	r2, #3
 8005d36:	4650      	mov	r0, sl
 8005d38:	f7fa fa6a 	bl	8000210 <memchr>
 8005d3c:	b140      	cbz	r0, 8005d50 <_vfiprintf_r+0x198>
 8005d3e:	2340      	movs	r3, #64	; 0x40
 8005d40:	eba0 000a 	sub.w	r0, r0, sl
 8005d44:	fa03 f000 	lsl.w	r0, r3, r0
 8005d48:	9b04      	ldr	r3, [sp, #16]
 8005d4a:	4303      	orrs	r3, r0
 8005d4c:	3401      	adds	r4, #1
 8005d4e:	9304      	str	r3, [sp, #16]
 8005d50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d54:	482c      	ldr	r0, [pc, #176]	; (8005e08 <_vfiprintf_r+0x250>)
 8005d56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005d5a:	2206      	movs	r2, #6
 8005d5c:	f7fa fa58 	bl	8000210 <memchr>
 8005d60:	2800      	cmp	r0, #0
 8005d62:	d03f      	beq.n	8005de4 <_vfiprintf_r+0x22c>
 8005d64:	4b29      	ldr	r3, [pc, #164]	; (8005e0c <_vfiprintf_r+0x254>)
 8005d66:	bb1b      	cbnz	r3, 8005db0 <_vfiprintf_r+0x1f8>
 8005d68:	9b03      	ldr	r3, [sp, #12]
 8005d6a:	3307      	adds	r3, #7
 8005d6c:	f023 0307 	bic.w	r3, r3, #7
 8005d70:	3308      	adds	r3, #8
 8005d72:	9303      	str	r3, [sp, #12]
 8005d74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d76:	443b      	add	r3, r7
 8005d78:	9309      	str	r3, [sp, #36]	; 0x24
 8005d7a:	e767      	b.n	8005c4c <_vfiprintf_r+0x94>
 8005d7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d80:	460c      	mov	r4, r1
 8005d82:	2001      	movs	r0, #1
 8005d84:	e7a5      	b.n	8005cd2 <_vfiprintf_r+0x11a>
 8005d86:	2300      	movs	r3, #0
 8005d88:	3401      	adds	r4, #1
 8005d8a:	9305      	str	r3, [sp, #20]
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	f04f 0c0a 	mov.w	ip, #10
 8005d92:	4620      	mov	r0, r4
 8005d94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d98:	3a30      	subs	r2, #48	; 0x30
 8005d9a:	2a09      	cmp	r2, #9
 8005d9c:	d903      	bls.n	8005da6 <_vfiprintf_r+0x1ee>
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d0c5      	beq.n	8005d2e <_vfiprintf_r+0x176>
 8005da2:	9105      	str	r1, [sp, #20]
 8005da4:	e7c3      	b.n	8005d2e <_vfiprintf_r+0x176>
 8005da6:	fb0c 2101 	mla	r1, ip, r1, r2
 8005daa:	4604      	mov	r4, r0
 8005dac:	2301      	movs	r3, #1
 8005dae:	e7f0      	b.n	8005d92 <_vfiprintf_r+0x1da>
 8005db0:	ab03      	add	r3, sp, #12
 8005db2:	9300      	str	r3, [sp, #0]
 8005db4:	462a      	mov	r2, r5
 8005db6:	4b16      	ldr	r3, [pc, #88]	; (8005e10 <_vfiprintf_r+0x258>)
 8005db8:	a904      	add	r1, sp, #16
 8005dba:	4630      	mov	r0, r6
 8005dbc:	f3af 8000 	nop.w
 8005dc0:	4607      	mov	r7, r0
 8005dc2:	1c78      	adds	r0, r7, #1
 8005dc4:	d1d6      	bne.n	8005d74 <_vfiprintf_r+0x1bc>
 8005dc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005dc8:	07d9      	lsls	r1, r3, #31
 8005dca:	d405      	bmi.n	8005dd8 <_vfiprintf_r+0x220>
 8005dcc:	89ab      	ldrh	r3, [r5, #12]
 8005dce:	059a      	lsls	r2, r3, #22
 8005dd0:	d402      	bmi.n	8005dd8 <_vfiprintf_r+0x220>
 8005dd2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005dd4:	f7ff fc23 	bl	800561e <__retarget_lock_release_recursive>
 8005dd8:	89ab      	ldrh	r3, [r5, #12]
 8005dda:	065b      	lsls	r3, r3, #25
 8005ddc:	f53f af12 	bmi.w	8005c04 <_vfiprintf_r+0x4c>
 8005de0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005de2:	e711      	b.n	8005c08 <_vfiprintf_r+0x50>
 8005de4:	ab03      	add	r3, sp, #12
 8005de6:	9300      	str	r3, [sp, #0]
 8005de8:	462a      	mov	r2, r5
 8005dea:	4b09      	ldr	r3, [pc, #36]	; (8005e10 <_vfiprintf_r+0x258>)
 8005dec:	a904      	add	r1, sp, #16
 8005dee:	4630      	mov	r0, r6
 8005df0:	f000 f880 	bl	8005ef4 <_printf_i>
 8005df4:	e7e4      	b.n	8005dc0 <_vfiprintf_r+0x208>
 8005df6:	bf00      	nop
 8005df8:	080064dc 	.word	0x080064dc
 8005dfc:	080064fc 	.word	0x080064fc
 8005e00:	080064bc 	.word	0x080064bc
 8005e04:	0800651c 	.word	0x0800651c
 8005e08:	08006526 	.word	0x08006526
 8005e0c:	00000000 	.word	0x00000000
 8005e10:	08005b93 	.word	0x08005b93
 8005e14:	08006522 	.word	0x08006522

08005e18 <_printf_common>:
 8005e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e1c:	4616      	mov	r6, r2
 8005e1e:	4699      	mov	r9, r3
 8005e20:	688a      	ldr	r2, [r1, #8]
 8005e22:	690b      	ldr	r3, [r1, #16]
 8005e24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	bfb8      	it	lt
 8005e2c:	4613      	movlt	r3, r2
 8005e2e:	6033      	str	r3, [r6, #0]
 8005e30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e34:	4607      	mov	r7, r0
 8005e36:	460c      	mov	r4, r1
 8005e38:	b10a      	cbz	r2, 8005e3e <_printf_common+0x26>
 8005e3a:	3301      	adds	r3, #1
 8005e3c:	6033      	str	r3, [r6, #0]
 8005e3e:	6823      	ldr	r3, [r4, #0]
 8005e40:	0699      	lsls	r1, r3, #26
 8005e42:	bf42      	ittt	mi
 8005e44:	6833      	ldrmi	r3, [r6, #0]
 8005e46:	3302      	addmi	r3, #2
 8005e48:	6033      	strmi	r3, [r6, #0]
 8005e4a:	6825      	ldr	r5, [r4, #0]
 8005e4c:	f015 0506 	ands.w	r5, r5, #6
 8005e50:	d106      	bne.n	8005e60 <_printf_common+0x48>
 8005e52:	f104 0a19 	add.w	sl, r4, #25
 8005e56:	68e3      	ldr	r3, [r4, #12]
 8005e58:	6832      	ldr	r2, [r6, #0]
 8005e5a:	1a9b      	subs	r3, r3, r2
 8005e5c:	42ab      	cmp	r3, r5
 8005e5e:	dc26      	bgt.n	8005eae <_printf_common+0x96>
 8005e60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e64:	1e13      	subs	r3, r2, #0
 8005e66:	6822      	ldr	r2, [r4, #0]
 8005e68:	bf18      	it	ne
 8005e6a:	2301      	movne	r3, #1
 8005e6c:	0692      	lsls	r2, r2, #26
 8005e6e:	d42b      	bmi.n	8005ec8 <_printf_common+0xb0>
 8005e70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e74:	4649      	mov	r1, r9
 8005e76:	4638      	mov	r0, r7
 8005e78:	47c0      	blx	r8
 8005e7a:	3001      	adds	r0, #1
 8005e7c:	d01e      	beq.n	8005ebc <_printf_common+0xa4>
 8005e7e:	6823      	ldr	r3, [r4, #0]
 8005e80:	68e5      	ldr	r5, [r4, #12]
 8005e82:	6832      	ldr	r2, [r6, #0]
 8005e84:	f003 0306 	and.w	r3, r3, #6
 8005e88:	2b04      	cmp	r3, #4
 8005e8a:	bf08      	it	eq
 8005e8c:	1aad      	subeq	r5, r5, r2
 8005e8e:	68a3      	ldr	r3, [r4, #8]
 8005e90:	6922      	ldr	r2, [r4, #16]
 8005e92:	bf0c      	ite	eq
 8005e94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e98:	2500      	movne	r5, #0
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	bfc4      	itt	gt
 8005e9e:	1a9b      	subgt	r3, r3, r2
 8005ea0:	18ed      	addgt	r5, r5, r3
 8005ea2:	2600      	movs	r6, #0
 8005ea4:	341a      	adds	r4, #26
 8005ea6:	42b5      	cmp	r5, r6
 8005ea8:	d11a      	bne.n	8005ee0 <_printf_common+0xc8>
 8005eaa:	2000      	movs	r0, #0
 8005eac:	e008      	b.n	8005ec0 <_printf_common+0xa8>
 8005eae:	2301      	movs	r3, #1
 8005eb0:	4652      	mov	r2, sl
 8005eb2:	4649      	mov	r1, r9
 8005eb4:	4638      	mov	r0, r7
 8005eb6:	47c0      	blx	r8
 8005eb8:	3001      	adds	r0, #1
 8005eba:	d103      	bne.n	8005ec4 <_printf_common+0xac>
 8005ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8005ec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ec4:	3501      	adds	r5, #1
 8005ec6:	e7c6      	b.n	8005e56 <_printf_common+0x3e>
 8005ec8:	18e1      	adds	r1, r4, r3
 8005eca:	1c5a      	adds	r2, r3, #1
 8005ecc:	2030      	movs	r0, #48	; 0x30
 8005ece:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005ed2:	4422      	add	r2, r4
 8005ed4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ed8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005edc:	3302      	adds	r3, #2
 8005ede:	e7c7      	b.n	8005e70 <_printf_common+0x58>
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	4622      	mov	r2, r4
 8005ee4:	4649      	mov	r1, r9
 8005ee6:	4638      	mov	r0, r7
 8005ee8:	47c0      	blx	r8
 8005eea:	3001      	adds	r0, #1
 8005eec:	d0e6      	beq.n	8005ebc <_printf_common+0xa4>
 8005eee:	3601      	adds	r6, #1
 8005ef0:	e7d9      	b.n	8005ea6 <_printf_common+0x8e>
	...

08005ef4 <_printf_i>:
 8005ef4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ef8:	7e0f      	ldrb	r7, [r1, #24]
 8005efa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005efc:	2f78      	cmp	r7, #120	; 0x78
 8005efe:	4691      	mov	r9, r2
 8005f00:	4680      	mov	r8, r0
 8005f02:	460c      	mov	r4, r1
 8005f04:	469a      	mov	sl, r3
 8005f06:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005f0a:	d807      	bhi.n	8005f1c <_printf_i+0x28>
 8005f0c:	2f62      	cmp	r7, #98	; 0x62
 8005f0e:	d80a      	bhi.n	8005f26 <_printf_i+0x32>
 8005f10:	2f00      	cmp	r7, #0
 8005f12:	f000 80d8 	beq.w	80060c6 <_printf_i+0x1d2>
 8005f16:	2f58      	cmp	r7, #88	; 0x58
 8005f18:	f000 80a3 	beq.w	8006062 <_printf_i+0x16e>
 8005f1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005f24:	e03a      	b.n	8005f9c <_printf_i+0xa8>
 8005f26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005f2a:	2b15      	cmp	r3, #21
 8005f2c:	d8f6      	bhi.n	8005f1c <_printf_i+0x28>
 8005f2e:	a101      	add	r1, pc, #4	; (adr r1, 8005f34 <_printf_i+0x40>)
 8005f30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f34:	08005f8d 	.word	0x08005f8d
 8005f38:	08005fa1 	.word	0x08005fa1
 8005f3c:	08005f1d 	.word	0x08005f1d
 8005f40:	08005f1d 	.word	0x08005f1d
 8005f44:	08005f1d 	.word	0x08005f1d
 8005f48:	08005f1d 	.word	0x08005f1d
 8005f4c:	08005fa1 	.word	0x08005fa1
 8005f50:	08005f1d 	.word	0x08005f1d
 8005f54:	08005f1d 	.word	0x08005f1d
 8005f58:	08005f1d 	.word	0x08005f1d
 8005f5c:	08005f1d 	.word	0x08005f1d
 8005f60:	080060ad 	.word	0x080060ad
 8005f64:	08005fd1 	.word	0x08005fd1
 8005f68:	0800608f 	.word	0x0800608f
 8005f6c:	08005f1d 	.word	0x08005f1d
 8005f70:	08005f1d 	.word	0x08005f1d
 8005f74:	080060cf 	.word	0x080060cf
 8005f78:	08005f1d 	.word	0x08005f1d
 8005f7c:	08005fd1 	.word	0x08005fd1
 8005f80:	08005f1d 	.word	0x08005f1d
 8005f84:	08005f1d 	.word	0x08005f1d
 8005f88:	08006097 	.word	0x08006097
 8005f8c:	682b      	ldr	r3, [r5, #0]
 8005f8e:	1d1a      	adds	r2, r3, #4
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	602a      	str	r2, [r5, #0]
 8005f94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	e0a3      	b.n	80060e8 <_printf_i+0x1f4>
 8005fa0:	6820      	ldr	r0, [r4, #0]
 8005fa2:	6829      	ldr	r1, [r5, #0]
 8005fa4:	0606      	lsls	r6, r0, #24
 8005fa6:	f101 0304 	add.w	r3, r1, #4
 8005faa:	d50a      	bpl.n	8005fc2 <_printf_i+0xce>
 8005fac:	680e      	ldr	r6, [r1, #0]
 8005fae:	602b      	str	r3, [r5, #0]
 8005fb0:	2e00      	cmp	r6, #0
 8005fb2:	da03      	bge.n	8005fbc <_printf_i+0xc8>
 8005fb4:	232d      	movs	r3, #45	; 0x2d
 8005fb6:	4276      	negs	r6, r6
 8005fb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fbc:	485e      	ldr	r0, [pc, #376]	; (8006138 <_printf_i+0x244>)
 8005fbe:	230a      	movs	r3, #10
 8005fc0:	e019      	b.n	8005ff6 <_printf_i+0x102>
 8005fc2:	680e      	ldr	r6, [r1, #0]
 8005fc4:	602b      	str	r3, [r5, #0]
 8005fc6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005fca:	bf18      	it	ne
 8005fcc:	b236      	sxthne	r6, r6
 8005fce:	e7ef      	b.n	8005fb0 <_printf_i+0xbc>
 8005fd0:	682b      	ldr	r3, [r5, #0]
 8005fd2:	6820      	ldr	r0, [r4, #0]
 8005fd4:	1d19      	adds	r1, r3, #4
 8005fd6:	6029      	str	r1, [r5, #0]
 8005fd8:	0601      	lsls	r1, r0, #24
 8005fda:	d501      	bpl.n	8005fe0 <_printf_i+0xec>
 8005fdc:	681e      	ldr	r6, [r3, #0]
 8005fde:	e002      	b.n	8005fe6 <_printf_i+0xf2>
 8005fe0:	0646      	lsls	r6, r0, #25
 8005fe2:	d5fb      	bpl.n	8005fdc <_printf_i+0xe8>
 8005fe4:	881e      	ldrh	r6, [r3, #0]
 8005fe6:	4854      	ldr	r0, [pc, #336]	; (8006138 <_printf_i+0x244>)
 8005fe8:	2f6f      	cmp	r7, #111	; 0x6f
 8005fea:	bf0c      	ite	eq
 8005fec:	2308      	moveq	r3, #8
 8005fee:	230a      	movne	r3, #10
 8005ff0:	2100      	movs	r1, #0
 8005ff2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005ff6:	6865      	ldr	r5, [r4, #4]
 8005ff8:	60a5      	str	r5, [r4, #8]
 8005ffa:	2d00      	cmp	r5, #0
 8005ffc:	bfa2      	ittt	ge
 8005ffe:	6821      	ldrge	r1, [r4, #0]
 8006000:	f021 0104 	bicge.w	r1, r1, #4
 8006004:	6021      	strge	r1, [r4, #0]
 8006006:	b90e      	cbnz	r6, 800600c <_printf_i+0x118>
 8006008:	2d00      	cmp	r5, #0
 800600a:	d04d      	beq.n	80060a8 <_printf_i+0x1b4>
 800600c:	4615      	mov	r5, r2
 800600e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006012:	fb03 6711 	mls	r7, r3, r1, r6
 8006016:	5dc7      	ldrb	r7, [r0, r7]
 8006018:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800601c:	4637      	mov	r7, r6
 800601e:	42bb      	cmp	r3, r7
 8006020:	460e      	mov	r6, r1
 8006022:	d9f4      	bls.n	800600e <_printf_i+0x11a>
 8006024:	2b08      	cmp	r3, #8
 8006026:	d10b      	bne.n	8006040 <_printf_i+0x14c>
 8006028:	6823      	ldr	r3, [r4, #0]
 800602a:	07de      	lsls	r6, r3, #31
 800602c:	d508      	bpl.n	8006040 <_printf_i+0x14c>
 800602e:	6923      	ldr	r3, [r4, #16]
 8006030:	6861      	ldr	r1, [r4, #4]
 8006032:	4299      	cmp	r1, r3
 8006034:	bfde      	ittt	le
 8006036:	2330      	movle	r3, #48	; 0x30
 8006038:	f805 3c01 	strble.w	r3, [r5, #-1]
 800603c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006040:	1b52      	subs	r2, r2, r5
 8006042:	6122      	str	r2, [r4, #16]
 8006044:	f8cd a000 	str.w	sl, [sp]
 8006048:	464b      	mov	r3, r9
 800604a:	aa03      	add	r2, sp, #12
 800604c:	4621      	mov	r1, r4
 800604e:	4640      	mov	r0, r8
 8006050:	f7ff fee2 	bl	8005e18 <_printf_common>
 8006054:	3001      	adds	r0, #1
 8006056:	d14c      	bne.n	80060f2 <_printf_i+0x1fe>
 8006058:	f04f 30ff 	mov.w	r0, #4294967295
 800605c:	b004      	add	sp, #16
 800605e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006062:	4835      	ldr	r0, [pc, #212]	; (8006138 <_printf_i+0x244>)
 8006064:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006068:	6829      	ldr	r1, [r5, #0]
 800606a:	6823      	ldr	r3, [r4, #0]
 800606c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006070:	6029      	str	r1, [r5, #0]
 8006072:	061d      	lsls	r5, r3, #24
 8006074:	d514      	bpl.n	80060a0 <_printf_i+0x1ac>
 8006076:	07df      	lsls	r7, r3, #31
 8006078:	bf44      	itt	mi
 800607a:	f043 0320 	orrmi.w	r3, r3, #32
 800607e:	6023      	strmi	r3, [r4, #0]
 8006080:	b91e      	cbnz	r6, 800608a <_printf_i+0x196>
 8006082:	6823      	ldr	r3, [r4, #0]
 8006084:	f023 0320 	bic.w	r3, r3, #32
 8006088:	6023      	str	r3, [r4, #0]
 800608a:	2310      	movs	r3, #16
 800608c:	e7b0      	b.n	8005ff0 <_printf_i+0xfc>
 800608e:	6823      	ldr	r3, [r4, #0]
 8006090:	f043 0320 	orr.w	r3, r3, #32
 8006094:	6023      	str	r3, [r4, #0]
 8006096:	2378      	movs	r3, #120	; 0x78
 8006098:	4828      	ldr	r0, [pc, #160]	; (800613c <_printf_i+0x248>)
 800609a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800609e:	e7e3      	b.n	8006068 <_printf_i+0x174>
 80060a0:	0659      	lsls	r1, r3, #25
 80060a2:	bf48      	it	mi
 80060a4:	b2b6      	uxthmi	r6, r6
 80060a6:	e7e6      	b.n	8006076 <_printf_i+0x182>
 80060a8:	4615      	mov	r5, r2
 80060aa:	e7bb      	b.n	8006024 <_printf_i+0x130>
 80060ac:	682b      	ldr	r3, [r5, #0]
 80060ae:	6826      	ldr	r6, [r4, #0]
 80060b0:	6961      	ldr	r1, [r4, #20]
 80060b2:	1d18      	adds	r0, r3, #4
 80060b4:	6028      	str	r0, [r5, #0]
 80060b6:	0635      	lsls	r5, r6, #24
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	d501      	bpl.n	80060c0 <_printf_i+0x1cc>
 80060bc:	6019      	str	r1, [r3, #0]
 80060be:	e002      	b.n	80060c6 <_printf_i+0x1d2>
 80060c0:	0670      	lsls	r0, r6, #25
 80060c2:	d5fb      	bpl.n	80060bc <_printf_i+0x1c8>
 80060c4:	8019      	strh	r1, [r3, #0]
 80060c6:	2300      	movs	r3, #0
 80060c8:	6123      	str	r3, [r4, #16]
 80060ca:	4615      	mov	r5, r2
 80060cc:	e7ba      	b.n	8006044 <_printf_i+0x150>
 80060ce:	682b      	ldr	r3, [r5, #0]
 80060d0:	1d1a      	adds	r2, r3, #4
 80060d2:	602a      	str	r2, [r5, #0]
 80060d4:	681d      	ldr	r5, [r3, #0]
 80060d6:	6862      	ldr	r2, [r4, #4]
 80060d8:	2100      	movs	r1, #0
 80060da:	4628      	mov	r0, r5
 80060dc:	f7fa f898 	bl	8000210 <memchr>
 80060e0:	b108      	cbz	r0, 80060e6 <_printf_i+0x1f2>
 80060e2:	1b40      	subs	r0, r0, r5
 80060e4:	6060      	str	r0, [r4, #4]
 80060e6:	6863      	ldr	r3, [r4, #4]
 80060e8:	6123      	str	r3, [r4, #16]
 80060ea:	2300      	movs	r3, #0
 80060ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060f0:	e7a8      	b.n	8006044 <_printf_i+0x150>
 80060f2:	6923      	ldr	r3, [r4, #16]
 80060f4:	462a      	mov	r2, r5
 80060f6:	4649      	mov	r1, r9
 80060f8:	4640      	mov	r0, r8
 80060fa:	47d0      	blx	sl
 80060fc:	3001      	adds	r0, #1
 80060fe:	d0ab      	beq.n	8006058 <_printf_i+0x164>
 8006100:	6823      	ldr	r3, [r4, #0]
 8006102:	079b      	lsls	r3, r3, #30
 8006104:	d413      	bmi.n	800612e <_printf_i+0x23a>
 8006106:	68e0      	ldr	r0, [r4, #12]
 8006108:	9b03      	ldr	r3, [sp, #12]
 800610a:	4298      	cmp	r0, r3
 800610c:	bfb8      	it	lt
 800610e:	4618      	movlt	r0, r3
 8006110:	e7a4      	b.n	800605c <_printf_i+0x168>
 8006112:	2301      	movs	r3, #1
 8006114:	4632      	mov	r2, r6
 8006116:	4649      	mov	r1, r9
 8006118:	4640      	mov	r0, r8
 800611a:	47d0      	blx	sl
 800611c:	3001      	adds	r0, #1
 800611e:	d09b      	beq.n	8006058 <_printf_i+0x164>
 8006120:	3501      	adds	r5, #1
 8006122:	68e3      	ldr	r3, [r4, #12]
 8006124:	9903      	ldr	r1, [sp, #12]
 8006126:	1a5b      	subs	r3, r3, r1
 8006128:	42ab      	cmp	r3, r5
 800612a:	dcf2      	bgt.n	8006112 <_printf_i+0x21e>
 800612c:	e7eb      	b.n	8006106 <_printf_i+0x212>
 800612e:	2500      	movs	r5, #0
 8006130:	f104 0619 	add.w	r6, r4, #25
 8006134:	e7f5      	b.n	8006122 <_printf_i+0x22e>
 8006136:	bf00      	nop
 8006138:	0800652d 	.word	0x0800652d
 800613c:	0800653e 	.word	0x0800653e

08006140 <_sbrk_r>:
 8006140:	b538      	push	{r3, r4, r5, lr}
 8006142:	4d06      	ldr	r5, [pc, #24]	; (800615c <_sbrk_r+0x1c>)
 8006144:	2300      	movs	r3, #0
 8006146:	4604      	mov	r4, r0
 8006148:	4608      	mov	r0, r1
 800614a:	602b      	str	r3, [r5, #0]
 800614c:	f7fb fa5a 	bl	8001604 <_sbrk>
 8006150:	1c43      	adds	r3, r0, #1
 8006152:	d102      	bne.n	800615a <_sbrk_r+0x1a>
 8006154:	682b      	ldr	r3, [r5, #0]
 8006156:	b103      	cbz	r3, 800615a <_sbrk_r+0x1a>
 8006158:	6023      	str	r3, [r4, #0]
 800615a:	bd38      	pop	{r3, r4, r5, pc}
 800615c:	2000443c 	.word	0x2000443c

08006160 <__sread>:
 8006160:	b510      	push	{r4, lr}
 8006162:	460c      	mov	r4, r1
 8006164:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006168:	f000 f8ea 	bl	8006340 <_read_r>
 800616c:	2800      	cmp	r0, #0
 800616e:	bfab      	itete	ge
 8006170:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006172:	89a3      	ldrhlt	r3, [r4, #12]
 8006174:	181b      	addge	r3, r3, r0
 8006176:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800617a:	bfac      	ite	ge
 800617c:	6563      	strge	r3, [r4, #84]	; 0x54
 800617e:	81a3      	strhlt	r3, [r4, #12]
 8006180:	bd10      	pop	{r4, pc}

08006182 <__swrite>:
 8006182:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006186:	461f      	mov	r7, r3
 8006188:	898b      	ldrh	r3, [r1, #12]
 800618a:	05db      	lsls	r3, r3, #23
 800618c:	4605      	mov	r5, r0
 800618e:	460c      	mov	r4, r1
 8006190:	4616      	mov	r6, r2
 8006192:	d505      	bpl.n	80061a0 <__swrite+0x1e>
 8006194:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006198:	2302      	movs	r3, #2
 800619a:	2200      	movs	r2, #0
 800619c:	f000 f868 	bl	8006270 <_lseek_r>
 80061a0:	89a3      	ldrh	r3, [r4, #12]
 80061a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80061a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80061aa:	81a3      	strh	r3, [r4, #12]
 80061ac:	4632      	mov	r2, r6
 80061ae:	463b      	mov	r3, r7
 80061b0:	4628      	mov	r0, r5
 80061b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80061b6:	f000 b817 	b.w	80061e8 <_write_r>

080061ba <__sseek>:
 80061ba:	b510      	push	{r4, lr}
 80061bc:	460c      	mov	r4, r1
 80061be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061c2:	f000 f855 	bl	8006270 <_lseek_r>
 80061c6:	1c43      	adds	r3, r0, #1
 80061c8:	89a3      	ldrh	r3, [r4, #12]
 80061ca:	bf15      	itete	ne
 80061cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80061ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80061d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80061d6:	81a3      	strheq	r3, [r4, #12]
 80061d8:	bf18      	it	ne
 80061da:	81a3      	strhne	r3, [r4, #12]
 80061dc:	bd10      	pop	{r4, pc}

080061de <__sclose>:
 80061de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061e2:	f000 b813 	b.w	800620c <_close_r>
	...

080061e8 <_write_r>:
 80061e8:	b538      	push	{r3, r4, r5, lr}
 80061ea:	4d07      	ldr	r5, [pc, #28]	; (8006208 <_write_r+0x20>)
 80061ec:	4604      	mov	r4, r0
 80061ee:	4608      	mov	r0, r1
 80061f0:	4611      	mov	r1, r2
 80061f2:	2200      	movs	r2, #0
 80061f4:	602a      	str	r2, [r5, #0]
 80061f6:	461a      	mov	r2, r3
 80061f8:	f7fb f9b4 	bl	8001564 <_write>
 80061fc:	1c43      	adds	r3, r0, #1
 80061fe:	d102      	bne.n	8006206 <_write_r+0x1e>
 8006200:	682b      	ldr	r3, [r5, #0]
 8006202:	b103      	cbz	r3, 8006206 <_write_r+0x1e>
 8006204:	6023      	str	r3, [r4, #0]
 8006206:	bd38      	pop	{r3, r4, r5, pc}
 8006208:	2000443c 	.word	0x2000443c

0800620c <_close_r>:
 800620c:	b538      	push	{r3, r4, r5, lr}
 800620e:	4d06      	ldr	r5, [pc, #24]	; (8006228 <_close_r+0x1c>)
 8006210:	2300      	movs	r3, #0
 8006212:	4604      	mov	r4, r0
 8006214:	4608      	mov	r0, r1
 8006216:	602b      	str	r3, [r5, #0]
 8006218:	f7fb f9c0 	bl	800159c <_close>
 800621c:	1c43      	adds	r3, r0, #1
 800621e:	d102      	bne.n	8006226 <_close_r+0x1a>
 8006220:	682b      	ldr	r3, [r5, #0]
 8006222:	b103      	cbz	r3, 8006226 <_close_r+0x1a>
 8006224:	6023      	str	r3, [r4, #0]
 8006226:	bd38      	pop	{r3, r4, r5, pc}
 8006228:	2000443c 	.word	0x2000443c

0800622c <_fstat_r>:
 800622c:	b538      	push	{r3, r4, r5, lr}
 800622e:	4d07      	ldr	r5, [pc, #28]	; (800624c <_fstat_r+0x20>)
 8006230:	2300      	movs	r3, #0
 8006232:	4604      	mov	r4, r0
 8006234:	4608      	mov	r0, r1
 8006236:	4611      	mov	r1, r2
 8006238:	602b      	str	r3, [r5, #0]
 800623a:	f7fb f9bb 	bl	80015b4 <_fstat>
 800623e:	1c43      	adds	r3, r0, #1
 8006240:	d102      	bne.n	8006248 <_fstat_r+0x1c>
 8006242:	682b      	ldr	r3, [r5, #0]
 8006244:	b103      	cbz	r3, 8006248 <_fstat_r+0x1c>
 8006246:	6023      	str	r3, [r4, #0]
 8006248:	bd38      	pop	{r3, r4, r5, pc}
 800624a:	bf00      	nop
 800624c:	2000443c 	.word	0x2000443c

08006250 <_isatty_r>:
 8006250:	b538      	push	{r3, r4, r5, lr}
 8006252:	4d06      	ldr	r5, [pc, #24]	; (800626c <_isatty_r+0x1c>)
 8006254:	2300      	movs	r3, #0
 8006256:	4604      	mov	r4, r0
 8006258:	4608      	mov	r0, r1
 800625a:	602b      	str	r3, [r5, #0]
 800625c:	f7fb f9ba 	bl	80015d4 <_isatty>
 8006260:	1c43      	adds	r3, r0, #1
 8006262:	d102      	bne.n	800626a <_isatty_r+0x1a>
 8006264:	682b      	ldr	r3, [r5, #0]
 8006266:	b103      	cbz	r3, 800626a <_isatty_r+0x1a>
 8006268:	6023      	str	r3, [r4, #0]
 800626a:	bd38      	pop	{r3, r4, r5, pc}
 800626c:	2000443c 	.word	0x2000443c

08006270 <_lseek_r>:
 8006270:	b538      	push	{r3, r4, r5, lr}
 8006272:	4d07      	ldr	r5, [pc, #28]	; (8006290 <_lseek_r+0x20>)
 8006274:	4604      	mov	r4, r0
 8006276:	4608      	mov	r0, r1
 8006278:	4611      	mov	r1, r2
 800627a:	2200      	movs	r2, #0
 800627c:	602a      	str	r2, [r5, #0]
 800627e:	461a      	mov	r2, r3
 8006280:	f7fb f9b3 	bl	80015ea <_lseek>
 8006284:	1c43      	adds	r3, r0, #1
 8006286:	d102      	bne.n	800628e <_lseek_r+0x1e>
 8006288:	682b      	ldr	r3, [r5, #0]
 800628a:	b103      	cbz	r3, 800628e <_lseek_r+0x1e>
 800628c:	6023      	str	r3, [r4, #0]
 800628e:	bd38      	pop	{r3, r4, r5, pc}
 8006290:	2000443c 	.word	0x2000443c

08006294 <memmove>:
 8006294:	4288      	cmp	r0, r1
 8006296:	b510      	push	{r4, lr}
 8006298:	eb01 0402 	add.w	r4, r1, r2
 800629c:	d902      	bls.n	80062a4 <memmove+0x10>
 800629e:	4284      	cmp	r4, r0
 80062a0:	4623      	mov	r3, r4
 80062a2:	d807      	bhi.n	80062b4 <memmove+0x20>
 80062a4:	1e43      	subs	r3, r0, #1
 80062a6:	42a1      	cmp	r1, r4
 80062a8:	d008      	beq.n	80062bc <memmove+0x28>
 80062aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80062ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80062b2:	e7f8      	b.n	80062a6 <memmove+0x12>
 80062b4:	4402      	add	r2, r0
 80062b6:	4601      	mov	r1, r0
 80062b8:	428a      	cmp	r2, r1
 80062ba:	d100      	bne.n	80062be <memmove+0x2a>
 80062bc:	bd10      	pop	{r4, pc}
 80062be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80062c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80062c6:	e7f7      	b.n	80062b8 <memmove+0x24>

080062c8 <__malloc_lock>:
 80062c8:	4801      	ldr	r0, [pc, #4]	; (80062d0 <__malloc_lock+0x8>)
 80062ca:	f7ff b9a7 	b.w	800561c <__retarget_lock_acquire_recursive>
 80062ce:	bf00      	nop
 80062d0:	20004430 	.word	0x20004430

080062d4 <__malloc_unlock>:
 80062d4:	4801      	ldr	r0, [pc, #4]	; (80062dc <__malloc_unlock+0x8>)
 80062d6:	f7ff b9a2 	b.w	800561e <__retarget_lock_release_recursive>
 80062da:	bf00      	nop
 80062dc:	20004430 	.word	0x20004430

080062e0 <_realloc_r>:
 80062e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062e4:	4680      	mov	r8, r0
 80062e6:	4614      	mov	r4, r2
 80062e8:	460e      	mov	r6, r1
 80062ea:	b921      	cbnz	r1, 80062f6 <_realloc_r+0x16>
 80062ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80062f0:	4611      	mov	r1, r2
 80062f2:	f7ff ba67 	b.w	80057c4 <_malloc_r>
 80062f6:	b92a      	cbnz	r2, 8006304 <_realloc_r+0x24>
 80062f8:	f7ff f9f8 	bl	80056ec <_free_r>
 80062fc:	4625      	mov	r5, r4
 80062fe:	4628      	mov	r0, r5
 8006300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006304:	f000 f82e 	bl	8006364 <_malloc_usable_size_r>
 8006308:	4284      	cmp	r4, r0
 800630a:	4607      	mov	r7, r0
 800630c:	d802      	bhi.n	8006314 <_realloc_r+0x34>
 800630e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006312:	d812      	bhi.n	800633a <_realloc_r+0x5a>
 8006314:	4621      	mov	r1, r4
 8006316:	4640      	mov	r0, r8
 8006318:	f7ff fa54 	bl	80057c4 <_malloc_r>
 800631c:	4605      	mov	r5, r0
 800631e:	2800      	cmp	r0, #0
 8006320:	d0ed      	beq.n	80062fe <_realloc_r+0x1e>
 8006322:	42bc      	cmp	r4, r7
 8006324:	4622      	mov	r2, r4
 8006326:	4631      	mov	r1, r6
 8006328:	bf28      	it	cs
 800632a:	463a      	movcs	r2, r7
 800632c:	f7fe fe9c 	bl	8005068 <memcpy>
 8006330:	4631      	mov	r1, r6
 8006332:	4640      	mov	r0, r8
 8006334:	f7ff f9da 	bl	80056ec <_free_r>
 8006338:	e7e1      	b.n	80062fe <_realloc_r+0x1e>
 800633a:	4635      	mov	r5, r6
 800633c:	e7df      	b.n	80062fe <_realloc_r+0x1e>
	...

08006340 <_read_r>:
 8006340:	b538      	push	{r3, r4, r5, lr}
 8006342:	4d07      	ldr	r5, [pc, #28]	; (8006360 <_read_r+0x20>)
 8006344:	4604      	mov	r4, r0
 8006346:	4608      	mov	r0, r1
 8006348:	4611      	mov	r1, r2
 800634a:	2200      	movs	r2, #0
 800634c:	602a      	str	r2, [r5, #0]
 800634e:	461a      	mov	r2, r3
 8006350:	f7fb f8eb 	bl	800152a <_read>
 8006354:	1c43      	adds	r3, r0, #1
 8006356:	d102      	bne.n	800635e <_read_r+0x1e>
 8006358:	682b      	ldr	r3, [r5, #0]
 800635a:	b103      	cbz	r3, 800635e <_read_r+0x1e>
 800635c:	6023      	str	r3, [r4, #0]
 800635e:	bd38      	pop	{r3, r4, r5, pc}
 8006360:	2000443c 	.word	0x2000443c

08006364 <_malloc_usable_size_r>:
 8006364:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006368:	1f18      	subs	r0, r3, #4
 800636a:	2b00      	cmp	r3, #0
 800636c:	bfbc      	itt	lt
 800636e:	580b      	ldrlt	r3, [r1, r0]
 8006370:	18c0      	addlt	r0, r0, r3
 8006372:	4770      	bx	lr

08006374 <_init>:
 8006374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006376:	bf00      	nop
 8006378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800637a:	bc08      	pop	{r3}
 800637c:	469e      	mov	lr, r3
 800637e:	4770      	bx	lr

08006380 <_fini>:
 8006380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006382:	bf00      	nop
 8006384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006386:	bc08      	pop	{r3}
 8006388:	469e      	mov	lr, r3
 800638a:	4770      	bx	lr

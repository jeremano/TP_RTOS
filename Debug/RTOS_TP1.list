
RTOS_TP1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c18  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08005de8  08005de8  00015de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005efc  08005efc  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005efc  08005efc  00015efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f04  08005f04  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f04  08005f04  00015f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f08  08005f08  00015f08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005f0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004070  20000074  08005f80  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200040e4  08005f80  000240e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000112c2  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c59  00000000  00000000  00031366  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de0  00000000  00000000  00033fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ca8  00000000  00000000  00034da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028508  00000000  00000000  00035a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011644  00000000  00000000  0005df50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2085  00000000  00000000  0006f594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00161619  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e9c  00000000  00000000  0016166c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005dd0 	.word	0x08005dd0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08005dd0 	.word	0x08005dd0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005b4:	b480      	push	{r7}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	4a07      	ldr	r2, [pc, #28]	; (80005e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80005c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	4a06      	ldr	r2, [pc, #24]	; (80005e4 <vApplicationGetIdleTaskMemory+0x30>)
 80005ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2280      	movs	r2, #128	; 0x80
 80005d0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005d2:	bf00      	nop
 80005d4:	3714      	adds	r7, #20
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	20000094 	.word	0x20000094
 80005e4:	200000e8 	.word	0x200000e8

080005e8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005e8:	b5b0      	push	{r4, r5, r7, lr}
 80005ea:	b088      	sub	sp, #32
 80005ec:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005ee:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <MX_FREERTOS_Init+0x30>)
 80005f0:	1d3c      	adds	r4, r7, #4
 80005f2:	461d      	mov	r5, r3
 80005f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000600:	1d3b      	adds	r3, r7, #4
 8000602:	2100      	movs	r1, #0
 8000604:	4618      	mov	r0, r3
 8000606:	f003 f83b 	bl	8003680 <osThreadCreate>
 800060a:	4603      	mov	r3, r0
 800060c:	4a03      	ldr	r2, [pc, #12]	; (800061c <MX_FREERTOS_Init+0x34>)
 800060e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000610:	bf00      	nop
 8000612:	3720      	adds	r7, #32
 8000614:	46bd      	mov	sp, r7
 8000616:	bdb0      	pop	{r4, r5, r7, pc}
 8000618:	08005df4 	.word	0x08005df4
 800061c:	20000090 	.word	0x20000090

08000620 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000628:	2001      	movs	r0, #1
 800062a:	f003 f875 	bl	8003718 <osDelay>
 800062e:	e7fb      	b.n	8000628 <StartDefaultTask+0x8>

08000630 <MX_GPIO_Init>:
     PB11   ------> USB_OTG_HS_ULPI_D4
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
void MX_GPIO_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b090      	sub	sp, #64	; 0x40
 8000634:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000636:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]
 8000644:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000646:	4bad      	ldr	r3, [pc, #692]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	4aac      	ldr	r2, [pc, #688]	; (80008fc <MX_GPIO_Init+0x2cc>)
 800064c:	f043 0310 	orr.w	r3, r3, #16
 8000650:	6313      	str	r3, [r2, #48]	; 0x30
 8000652:	4baa      	ldr	r3, [pc, #680]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	f003 0310 	and.w	r3, r3, #16
 800065a:	62bb      	str	r3, [r7, #40]	; 0x28
 800065c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800065e:	4ba7      	ldr	r3, [pc, #668]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	4aa6      	ldr	r2, [pc, #664]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000664:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000668:	6313      	str	r3, [r2, #48]	; 0x30
 800066a:	4ba4      	ldr	r3, [pc, #656]	; (80008fc <MX_GPIO_Init+0x2cc>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000672:	627b      	str	r3, [r7, #36]	; 0x24
 8000674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000676:	4ba1      	ldr	r3, [pc, #644]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	4aa0      	ldr	r2, [pc, #640]	; (80008fc <MX_GPIO_Init+0x2cc>)
 800067c:	f043 0302 	orr.w	r3, r3, #2
 8000680:	6313      	str	r3, [r2, #48]	; 0x30
 8000682:	4b9e      	ldr	r3, [pc, #632]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	f003 0302 	and.w	r3, r3, #2
 800068a:	623b      	str	r3, [r7, #32]
 800068c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800068e:	4b9b      	ldr	r3, [pc, #620]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	4a9a      	ldr	r2, [pc, #616]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000694:	f043 0308 	orr.w	r3, r3, #8
 8000698:	6313      	str	r3, [r2, #48]	; 0x30
 800069a:	4b98      	ldr	r3, [pc, #608]	; (80008fc <MX_GPIO_Init+0x2cc>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	f003 0308 	and.w	r3, r3, #8
 80006a2:	61fb      	str	r3, [r7, #28]
 80006a4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006a6:	4b95      	ldr	r3, [pc, #596]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	4a94      	ldr	r2, [pc, #592]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006ac:	f043 0304 	orr.w	r3, r3, #4
 80006b0:	6313      	str	r3, [r2, #48]	; 0x30
 80006b2:	4b92      	ldr	r3, [pc, #584]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	f003 0304 	and.w	r3, r3, #4
 80006ba:	61bb      	str	r3, [r7, #24]
 80006bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006be:	4b8f      	ldr	r3, [pc, #572]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4a8e      	ldr	r2, [pc, #568]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006c4:	f043 0301 	orr.w	r3, r3, #1
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ca:	4b8c      	ldr	r3, [pc, #560]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	617b      	str	r3, [r7, #20]
 80006d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80006d6:	4b89      	ldr	r3, [pc, #548]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	4a88      	ldr	r2, [pc, #544]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006e0:	6313      	str	r3, [r2, #48]	; 0x30
 80006e2:	4b86      	ldr	r3, [pc, #536]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80006ea:	613b      	str	r3, [r7, #16]
 80006ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80006ee:	4b83      	ldr	r3, [pc, #524]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	4a82      	ldr	r2, [pc, #520]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006f8:	6313      	str	r3, [r2, #48]	; 0x30
 80006fa:	4b80      	ldr	r3, [pc, #512]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000706:	4b7d      	ldr	r3, [pc, #500]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a7c      	ldr	r2, [pc, #496]	; (80008fc <MX_GPIO_Init+0x2cc>)
 800070c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b7a      	ldr	r3, [pc, #488]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800071a:	60bb      	str	r3, [r7, #8]
 800071c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800071e:	4b77      	ldr	r3, [pc, #476]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a76      	ldr	r2, [pc, #472]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000724:	f043 0320 	orr.w	r3, r3, #32
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b74      	ldr	r3, [pc, #464]	; (80008fc <MX_GPIO_Init+0x2cc>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0320 	and.w	r3, r3, #32
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000736:	4b71      	ldr	r3, [pc, #452]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a70      	ldr	r2, [pc, #448]	; (80008fc <MX_GPIO_Init+0x2cc>)
 800073c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b6e      	ldr	r3, [pc, #440]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800074a:	603b      	str	r3, [r7, #0]
 800074c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800074e:	2201      	movs	r2, #1
 8000750:	2120      	movs	r1, #32
 8000752:	486b      	ldr	r0, [pc, #428]	; (8000900 <MX_GPIO_Init+0x2d0>)
 8000754:	f001 f9bc 	bl	8001ad0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LED_Green_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8000758:	2200      	movs	r2, #0
 800075a:	f241 010e 	movw	r1, #4110	; 0x100e
 800075e:	4869      	ldr	r0, [pc, #420]	; (8000904 <MX_GPIO_Init+0x2d4>)
 8000760:	f001 f9b6 	bl	8001ad0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000764:	2200      	movs	r2, #0
 8000766:	2108      	movs	r1, #8
 8000768:	4867      	ldr	r0, [pc, #412]	; (8000908 <MX_GPIO_Init+0x2d8>)
 800076a:	f001 f9b1 	bl	8001ad0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 800076e:	2200      	movs	r2, #0
 8000770:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000774:	4865      	ldr	r0, [pc, #404]	; (800090c <MX_GPIO_Init+0x2dc>)
 8000776:	f001 f9ab 	bl	8001ad0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	21c8      	movs	r1, #200	; 0xc8
 800077e:	4864      	ldr	r0, [pc, #400]	; (8000910 <MX_GPIO_Init+0x2e0>)
 8000780:	f001 f9a6 	bl	8001ad0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 8000784:	2310      	movs	r3, #16
 8000786:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000788:	2302      	movs	r3, #2
 800078a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	2300      	movs	r3, #0
 800078e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000790:	2300      	movs	r3, #0
 8000792:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000794:	230e      	movs	r3, #14
 8000796:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8000798:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800079c:	4619      	mov	r1, r3
 800079e:	485d      	ldr	r0, [pc, #372]	; (8000914 <MX_GPIO_Init+0x2e4>)
 80007a0:	f000 ffea 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80007a4:	2308      	movs	r3, #8
 80007a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007a8:	2300      	movs	r3, #0
 80007aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007b4:	4619      	mov	r1, r3
 80007b6:	4857      	ldr	r0, [pc, #348]	; (8000914 <MX_GPIO_Init+0x2e4>)
 80007b8:	f000 ffde 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80007bc:	2304      	movs	r3, #4
 80007be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c0:	2302      	movs	r3, #2
 80007c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007c8:	2303      	movs	r3, #3
 80007ca:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80007cc:	2309      	movs	r3, #9
 80007ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80007d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007d4:	4619      	mov	r1, r3
 80007d6:	484f      	ldr	r0, [pc, #316]	; (8000914 <MX_GPIO_Init+0x2e4>)
 80007d8:	f000 ffce 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80007dc:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80007e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e2:	2302      	movs	r3, #2
 80007e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ea:	2303      	movs	r3, #3
 80007ec:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007ee:	230b      	movs	r3, #11
 80007f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007f6:	4619      	mov	r1, r3
 80007f8:	4845      	ldr	r0, [pc, #276]	; (8000910 <MX_GPIO_Init+0x2e0>)
 80007fa:	f000 ffbd 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80007fe:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000802:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000804:	2302      	movs	r3, #2
 8000806:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800080c:	2303      	movs	r3, #3
 800080e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000810:	230c      	movs	r3, #12
 8000812:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000814:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000818:	4619      	mov	r1, r3
 800081a:	483e      	ldr	r0, [pc, #248]	; (8000914 <MX_GPIO_Init+0x2e4>)
 800081c:	f000 ffac 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8000820:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000824:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000826:	2312      	movs	r3, #18
 8000828:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082e:	2300      	movs	r3, #0
 8000830:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000832:	2304      	movs	r3, #4
 8000834:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000836:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800083a:	4619      	mov	r1, r3
 800083c:	4836      	ldr	r0, [pc, #216]	; (8000918 <MX_GPIO_Init+0x2e8>)
 800083e:	f000 ff9b 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8000842:	f643 4321 	movw	r3, #15393	; 0x3c21
 8000846:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000848:	2302      	movs	r3, #2
 800084a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	2300      	movs	r3, #0
 800084e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000850:	2303      	movs	r3, #3
 8000852:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000854:	230a      	movs	r3, #10
 8000856:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000858:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800085c:	4619      	mov	r1, r3
 800085e:	482e      	ldr	r0, [pc, #184]	; (8000918 <MX_GPIO_Init+0x2e8>)
 8000860:	f000 ff8a 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8000864:	2310      	movs	r3, #16
 8000866:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000868:	2302      	movs	r3, #2
 800086a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000870:	2300      	movs	r3, #0
 8000872:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000874:	2302      	movs	r3, #2
 8000876:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8000878:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800087c:	4619      	mov	r1, r3
 800087e:	4826      	ldr	r0, [pc, #152]	; (8000918 <MX_GPIO_Init+0x2e8>)
 8000880:	f000 ff7a 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8000884:	2380      	movs	r3, #128	; 0x80
 8000886:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000888:	2302      	movs	r3, #2
 800088a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000890:	2300      	movs	r3, #0
 8000892:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8000894:	2308      	movs	r3, #8
 8000896:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8000898:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800089c:	4619      	mov	r1, r3
 800089e:	4818      	ldr	r0, [pc, #96]	; (8000900 <MX_GPIO_Init+0x2d0>)
 80008a0:	f000 ff6a 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 80008a4:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80008a8:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008aa:	2302      	movs	r3, #2
 80008ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b2:	2303      	movs	r3, #3
 80008b4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80008b6:	230c      	movs	r3, #12
 80008b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008be:	4619      	mov	r1, r3
 80008c0:	4816      	ldr	r0, [pc, #88]	; (800091c <MX_GPIO_Init+0x2ec>)
 80008c2:	f000 ff59 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80008c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008cc:	2302      	movs	r3, #2
 80008ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d4:	2300      	movs	r3, #0
 80008d6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80008d8:	2301      	movs	r3, #1
 80008da:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 80008dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008e0:	4619      	mov	r1, r3
 80008e2:	480f      	ldr	r0, [pc, #60]	; (8000920 <MX_GPIO_Init+0x2f0>)
 80008e4:	f000 ff48 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80008e8:	2360      	movs	r3, #96	; 0x60
 80008ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ec:	2302      	movs	r3, #2
 80008ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f4:	2300      	movs	r3, #0
 80008f6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80008f8:	230d      	movs	r3, #13
 80008fa:	e013      	b.n	8000924 <MX_GPIO_Init+0x2f4>
 80008fc:	40023800 	.word	0x40023800
 8000900:	40020c00 	.word	0x40020c00
 8000904:	40022000 	.word	0x40022000
 8000908:	40022800 	.word	0x40022800
 800090c:	40021c00 	.word	0x40021c00
 8000910:	40021800 	.word	0x40021800
 8000914:	40021000 	.word	0x40021000
 8000918:	40020400 	.word	0x40020400
 800091c:	40020800 	.word	0x40020800
 8000920:	40020000 	.word	0x40020000
 8000924:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000926:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800092a:	4619      	mov	r1, r3
 800092c:	48bc      	ldr	r0, [pc, #752]	; (8000c20 <MX_GPIO_Init+0x5f0>)
 800092e:	f000 ff23 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8000932:	2340      	movs	r3, #64	; 0x40
 8000934:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000936:	2302      	movs	r3, #2
 8000938:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800093e:	2303      	movs	r3, #3
 8000940:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000942:	230a      	movs	r3, #10
 8000944:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8000946:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800094a:	4619      	mov	r1, r3
 800094c:	48b5      	ldr	r0, [pc, #724]	; (8000c24 <MX_GPIO_Init+0x5f4>)
 800094e:	f000 ff13 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8000952:	f248 1333 	movw	r3, #33075	; 0x8133
 8000956:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000958:	2302      	movs	r3, #2
 800095a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000960:	2303      	movs	r3, #3
 8000962:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000964:	230c      	movs	r3, #12
 8000966:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000968:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800096c:	4619      	mov	r1, r3
 800096e:	48ae      	ldr	r0, [pc, #696]	; (8000c28 <MX_GPIO_Init+0x5f8>)
 8000970:	f000 ff02 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8000974:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8000978:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097a:	2302      	movs	r3, #2
 800097c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2300      	movs	r3, #0
 8000984:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000986:	230e      	movs	r3, #14
 8000988:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800098a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800098e:	4619      	mov	r1, r3
 8000990:	48a6      	ldr	r0, [pc, #664]	; (8000c2c <MX_GPIO_Init+0x5fc>)
 8000992:	f000 fef1 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000996:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800099a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800099c:	2300      	movs	r3, #0
 800099e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80009a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009a8:	4619      	mov	r1, r3
 80009aa:	48a0      	ldr	r0, [pc, #640]	; (8000c2c <MX_GPIO_Init+0x5fc>)
 80009ac:	f000 fee4 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80009b0:	2340      	movs	r3, #64	; 0x40
 80009b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009b4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80009be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009c2:	4619      	mov	r1, r3
 80009c4:	489a      	ldr	r0, [pc, #616]	; (8000c30 <MX_GPIO_Init+0x600>)
 80009c6:	f000 fed7 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80009ca:	f24c 7303 	movw	r3, #50947	; 0xc703
 80009ce:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d0:	2302      	movs	r3, #2
 80009d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d8:	2303      	movs	r3, #3
 80009da:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009dc:	230c      	movs	r3, #12
 80009de:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009e4:	4619      	mov	r1, r3
 80009e6:	4892      	ldr	r0, [pc, #584]	; (8000c30 <MX_GPIO_Init+0x600>)
 80009e8:	f000 fec6 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 80009ec:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80009f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f2:	2302      	movs	r3, #2
 80009f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fa:	2303      	movs	r3, #3
 80009fc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009fe:	230a      	movs	r3, #10
 8000a00:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a06:	4619      	mov	r1, r3
 8000a08:	488a      	ldr	r0, [pc, #552]	; (8000c34 <MX_GPIO_Init+0x604>)
 8000a0a:	f000 feb5 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8000a0e:	23f0      	movs	r3, #240	; 0xf0
 8000a10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a12:	2302      	movs	r3, #2
 8000a14:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000a1e:	230a      	movs	r3, #10
 8000a20:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a26:	4619      	mov	r1, r3
 8000a28:	4883      	ldr	r0, [pc, #524]	; (8000c38 <MX_GPIO_Init+0x608>)
 8000a2a:	f000 fea5 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pins : PKPin PKPin PKPin PKPin
                           PKPin PKPin PKPin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8000a2e:	23f7      	movs	r3, #247	; 0xf7
 8000a30:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a32:	2302      	movs	r3, #2
 8000a34:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a3e:	230e      	movs	r3, #14
 8000a40:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000a42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a46:	4619      	mov	r1, r3
 8000a48:	487c      	ldr	r0, [pc, #496]	; (8000c3c <MX_GPIO_Init+0x60c>)
 8000a4a:	f000 fe95 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8000a4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a54:	2302      	movs	r3, #2
 8000a56:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000a60:	2309      	movs	r3, #9
 8000a62:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8000a64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a68:	4619      	mov	r1, r3
 8000a6a:	486f      	ldr	r0, [pc, #444]	; (8000c28 <MX_GPIO_Init+0x5f8>)
 8000a6c:	f000 fe84 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8000a70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a76:	2302      	movs	r3, #2
 8000a78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000a82:	230a      	movs	r3, #10
 8000a84:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8000a86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4866      	ldr	r0, [pc, #408]	; (8000c28 <MX_GPIO_Init+0x5f8>)
 8000a8e:	f000 fe73 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a92:	2320      	movs	r3, #32
 8000a94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a96:	2301      	movs	r3, #1
 8000a98:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000aa2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4861      	ldr	r0, [pc, #388]	; (8000c30 <MX_GPIO_Init+0x600>)
 8000aaa:	f000 fe65 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000aae:	2308      	movs	r3, #8
 8000ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aba:	2300      	movs	r3, #0
 8000abc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000abe:	230d      	movs	r3, #13
 8000ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000ac2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4859      	ldr	r0, [pc, #356]	; (8000c30 <MX_GPIO_Init+0x600>)
 8000aca:	f000 fe55 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LED_Green_Pin|LCD_DISP_Pin;
 8000ace:	f241 030e 	movw	r3, #4110	; 0x100e
 8000ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000adc:	2300      	movs	r3, #0
 8000ade:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000ae0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4854      	ldr	r0, [pc, #336]	; (8000c38 <MX_GPIO_Init+0x608>)
 8000ae8:	f000 fe46 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000aec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000af0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af2:	2300      	movs	r3, #0
 8000af4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000afa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000afe:	4619      	mov	r1, r3
 8000b00:	484f      	ldr	r0, [pc, #316]	; (8000c40 <MX_GPIO_Init+0x610>)
 8000b02:	f000 fe39 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000b06:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b14:	2303      	movs	r3, #3
 8000b16:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b18:	230c      	movs	r3, #12
 8000b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b20:	4619      	mov	r1, r3
 8000b22:	4848      	ldr	r0, [pc, #288]	; (8000c44 <MX_GPIO_Init+0x614>)
 8000b24:	f000 fe28 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8000b28:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8000b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b36:	2300      	movs	r3, #0
 8000b38:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b3a:	230e      	movs	r3, #14
 8000b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000b3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b42:	4619      	mov	r1, r3
 8000b44:	483c      	ldr	r0, [pc, #240]	; (8000c38 <MX_GPIO_Init+0x608>)
 8000b46:	f000 fe17 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000b4a:	2308      	movs	r3, #8
 8000b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b56:	2300      	movs	r3, #0
 8000b58:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000b5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4836      	ldr	r0, [pc, #216]	; (8000c3c <MX_GPIO_Init+0x60c>)
 8000b62:	f000 fe09 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000b66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b74:	2300      	movs	r3, #0
 8000b76:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000b78:	230d      	movs	r3, #13
 8000b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000b7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b80:	4619      	mov	r1, r3
 8000b82:	4829      	ldr	r0, [pc, #164]	; (8000c28 <MX_GPIO_Init+0x5f8>)
 8000b84:	f000 fdf8 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b88:	2310      	movs	r3, #16
 8000b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4825      	ldr	r0, [pc, #148]	; (8000c30 <MX_GPIO_Init+0x600>)
 8000b9c:	f000 fdec 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8000ba0:	2304      	movs	r3, #4
 8000ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bac:	2303      	movs	r3, #3
 8000bae:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000bb0:	230c      	movs	r3, #12
 8000bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8000bb4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bb8:	4619      	mov	r1, r3
 8000bba:	481d      	ldr	r0, [pc, #116]	; (8000c30 <MX_GPIO_Init+0x600>)
 8000bbc:	f000 fddc 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000bc0:	f248 0304 	movw	r3, #32772	; 0x8004
 8000bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000bce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	481c      	ldr	r0, [pc, #112]	; (8000c48 <MX_GPIO_Init+0x618>)
 8000bd6:	f000 fdcf 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000bda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bde:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be0:	2301      	movs	r3, #1
 8000be2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be8:	2300      	movs	r3, #0
 8000bea:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000bec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4815      	ldr	r0, [pc, #84]	; (8000c48 <MX_GPIO_Init+0x618>)
 8000bf4:	f000 fdc0 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin
                           PHPin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000bf8:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8000bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c06:	2300      	movs	r3, #0
 8000c08:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000c0a:	230d      	movs	r3, #13
 8000c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c12:	4619      	mov	r1, r3
 8000c14:	480c      	ldr	r0, [pc, #48]	; (8000c48 <MX_GPIO_Init+0x618>)
 8000c16:	f000 fdaf 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	e016      	b.n	8000c4c <MX_GPIO_Init+0x61c>
 8000c1e:	bf00      	nop
 8000c20:	40021000 	.word	0x40021000
 8000c24:	40020400 	.word	0x40020400
 8000c28:	40021800 	.word	0x40021800
 8000c2c:	40022400 	.word	0x40022400
 8000c30:	40020c00 	.word	0x40020c00
 8000c34:	40020000 	.word	0x40020000
 8000c38:	40022000 	.word	0x40022000
 8000c3c:	40022800 	.word	0x40022800
 8000c40:	40020800 	.word	0x40020800
 8000c44:	40021400 	.word	0x40021400
 8000c48:	40021c00 	.word	0x40021c00
 8000c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c56:	2300      	movs	r3, #0
 8000c58:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8000c5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c62:	4619      	mov	r1, r3
 8000c64:	48a4      	ldr	r0, [pc, #656]	; (8000ef8 <MX_GPIO_Init+0x8c8>)
 8000c66:	f000 fd87 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PUSH_Pin;
 8000c6a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c70:	2300      	movs	r3, #0
 8000c72:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(PUSH_GPIO_Port, &GPIO_InitStruct);
 8000c78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	489e      	ldr	r0, [pc, #632]	; (8000ef8 <MX_GPIO_Init+0x8c8>)
 8000c80:	f000 fd7a 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8000c84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c92:	2300      	movs	r3, #0
 8000c94:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000c96:	2301      	movs	r3, #1
 8000c98:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8000c9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4896      	ldr	r0, [pc, #600]	; (8000efc <MX_GPIO_Init+0x8cc>)
 8000ca2:	f000 fd69 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000ca6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000caa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000cac:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000cb0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000cb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cba:	4619      	mov	r1, r3
 8000cbc:	488e      	ldr	r0, [pc, #568]	; (8000ef8 <MX_GPIO_Init+0x8c8>)
 8000cbe:	f000 fd5b 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8000cc2:	23c0      	movs	r3, #192	; 0xc0
 8000cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cce:	2303      	movs	r3, #3
 8000cd0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000cd2:	2308      	movs	r3, #8
 8000cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4888      	ldr	r0, [pc, #544]	; (8000f00 <MX_GPIO_Init+0x8d0>)
 8000cde:	f000 fd4b 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000ce2:	2310      	movs	r3, #16
 8000ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cee:	2303      	movs	r3, #3
 8000cf0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000cf2:	230a      	movs	r3, #10
 8000cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000cf6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4881      	ldr	r0, [pc, #516]	; (8000f04 <MX_GPIO_Init+0x8d4>)
 8000cfe:	f000 fd3b 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000d02:	2328      	movs	r3, #40	; 0x28
 8000d04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d06:	2302      	movs	r3, #2
 8000d08:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0e:	2303      	movs	r3, #3
 8000d10:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d12:	230c      	movs	r3, #12
 8000d14:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4879      	ldr	r0, [pc, #484]	; (8000f04 <MX_GPIO_Init+0x8d4>)
 8000d1e:	f000 fd2b 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8000d22:	23c8      	movs	r3, #200	; 0xc8
 8000d24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d26:	2301      	movs	r3, #1
 8000d28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d36:	4619      	mov	r1, r3
 8000d38:	4873      	ldr	r0, [pc, #460]	; (8000f08 <MX_GPIO_Init+0x8d8>)
 8000d3a:	f000 fd1d 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8000d3e:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8000d42:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d44:	2303      	movs	r3, #3
 8000d46:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d50:	4619      	mov	r1, r3
 8000d52:	486e      	ldr	r0, [pc, #440]	; (8000f0c <MX_GPIO_Init+0x8dc>)
 8000d54:	f000 fd10 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000d58:	2308      	movs	r3, #8
 8000d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d64:	2303      	movs	r3, #3
 8000d66:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d68:	230c      	movs	r3, #12
 8000d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000d6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d70:	4619      	mov	r1, r3
 8000d72:	4863      	ldr	r0, [pc, #396]	; (8000f00 <MX_GPIO_Init+0x8d0>)
 8000d74:	f000 fd00 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8000d78:	2305      	movs	r3, #5
 8000d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d84:	2303      	movs	r3, #3
 8000d86:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000d88:	230a      	movs	r3, #10
 8000d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d90:	4619      	mov	r1, r3
 8000d92:	485b      	ldr	r0, [pc, #364]	; (8000f00 <MX_GPIO_Init+0x8d0>)
 8000d94:	f000 fcf0 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000d98:	2332      	movs	r3, #50	; 0x32
 8000d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da4:	2303      	movs	r3, #3
 8000da6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000da8:	230b      	movs	r3, #11
 8000daa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000db0:	4619      	mov	r1, r3
 8000db2:	4853      	ldr	r0, [pc, #332]	; (8000f00 <MX_GPIO_Init+0x8d0>)
 8000db4:	f000 fce0 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000db8:	2304      	movs	r3, #4
 8000dba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc4:	2303      	movs	r3, #3
 8000dc6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000dc8:	2309      	movs	r3, #9
 8000dca:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dcc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	484f      	ldr	r0, [pc, #316]	; (8000f10 <MX_GPIO_Init+0x8e0>)
 8000dd4:	f000 fcd0 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8000dd8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dde:	2302      	movs	r3, #2
 8000de0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	2300      	movs	r3, #0
 8000de4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de6:	2303      	movs	r3, #3
 8000de8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000dea:	2309      	movs	r3, #9
 8000dec:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000df2:	4619      	mov	r1, r3
 8000df4:	4847      	ldr	r0, [pc, #284]	; (8000f14 <MX_GPIO_Init+0x8e4>)
 8000df6:	f000 fcbf 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8000dfa:	2304      	movs	r3, #4
 8000dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8000e06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	483e      	ldr	r0, [pc, #248]	; (8000f08 <MX_GPIO_Init+0x8d8>)
 8000e0e:	f000 fcb3 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000e12:	2386      	movs	r3, #134	; 0x86
 8000e14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e16:	2302      	movs	r3, #2
 8000e18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e22:	230b      	movs	r3, #11
 8000e24:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4833      	ldr	r0, [pc, #204]	; (8000efc <MX_GPIO_Init+0x8cc>)
 8000e2e:	f000 fca3 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8000e32:	2301      	movs	r3, #1
 8000e34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e36:	2303      	movs	r3, #3
 8000e38:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8000e3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e42:	4619      	mov	r1, r3
 8000e44:	482d      	ldr	r0, [pc, #180]	; (8000efc <MX_GPIO_Init+0x8cc>)
 8000e46:	f000 fc97 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8000e4a:	2350      	movs	r3, #80	; 0x50
 8000e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e56:	2300      	movs	r3, #0
 8000e58:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000e5a:	230d      	movs	r3, #13
 8000e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e62:	4619      	mov	r1, r3
 8000e64:	4825      	ldr	r0, [pc, #148]	; (8000efc <MX_GPIO_Init+0x8cc>)
 8000e66:	f000 fc87 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8000e6a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e70:	2312      	movs	r3, #18
 8000e72:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e7c:	2304      	movs	r3, #4
 8000e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000e80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e84:	4619      	mov	r1, r3
 8000e86:	481f      	ldr	r0, [pc, #124]	; (8000f04 <MX_GPIO_Init+0x8d4>)
 8000e88:	f000 fc76 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8000e8c:	2328      	movs	r3, #40	; 0x28
 8000e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e90:	2302      	movs	r3, #2
 8000e92:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e98:	2303      	movs	r3, #3
 8000e9a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000e9c:	230a      	movs	r3, #10
 8000e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4815      	ldr	r0, [pc, #84]	; (8000efc <MX_GPIO_Init+0x8cc>)
 8000ea8:	f000 fc66 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8000eac:	2340      	movs	r3, #64	; 0x40
 8000eae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8000ebc:	2309      	movs	r3, #9
 8000ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8000ec0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	480f      	ldr	r0, [pc, #60]	; (8000f04 <MX_GPIO_Init+0x8d4>)
 8000ec8:	f000 fc56 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8000ecc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eda:	2300      	movs	r3, #0
 8000edc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ede:	2305      	movs	r3, #5
 8000ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4809      	ldr	r0, [pc, #36]	; (8000f10 <MX_GPIO_Init+0x8e0>)
 8000eea:	f000 fc45 	bl	8001778 <HAL_GPIO_Init>

}
 8000eee:	bf00      	nop
 8000ef0:	3740      	adds	r7, #64	; 0x40
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40022000 	.word	0x40022000
 8000efc:	40020000 	.word	0x40020000
 8000f00:	40020800 	.word	0x40020800
 8000f04:	40021c00 	.word	0x40021c00
 8000f08:	40021800 	.word	0x40021800
 8000f0c:	40021400 	.word	0x40021400
 8000f10:	40020400 	.word	0x40020400
 8000f14:	40020c00 	.word	0x40020c00

08000f18 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000f20:	1d39      	adds	r1, r7, #4
 8000f22:	f04f 33ff 	mov.w	r3, #4294967295
 8000f26:	2201      	movs	r2, #1
 8000f28:	4803      	ldr	r0, [pc, #12]	; (8000f38 <__io_putchar+0x20>)
 8000f2a:	f001 ff03 	bl	8002d34 <HAL_UART_Transmit>
	return ch;
 8000f2e:	687b      	ldr	r3, [r7, #4]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	200002fc 	.word	0x200002fc

08000f3c <taskBidon>:
		vTaskDelay(100);
	}
}
*/
void taskBidon(void * unused)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		vTaskDelay(1000);
 8000f44:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f48:	f002 ff14 	bl	8003d74 <vTaskDelay>
 8000f4c:	e7fa      	b.n	8000f44 <taskBidon+0x8>
	...

08000f50 <taskGive>:
	}
}

void taskGive(void * unused)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b086      	sub	sp, #24
 8000f54:	af02      	add	r7, sp, #8
 8000f56:	6078      	str	r0, [r7, #4]
	uint8_t Pass = 1;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	73fb      	strb	r3, [r7, #15]
	for(;;)
	{
		xTaskCreate(taskBidon, "taskBidon", 1000, NULL, 1, &xHandle2);
 8000f5c:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <taskGive+0x3c>)
 8000f5e:	9301      	str	r3, [sp, #4]
 8000f60:	2301      	movs	r3, #1
 8000f62:	9300      	str	r3, [sp, #0]
 8000f64:	2300      	movs	r3, #0
 8000f66:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f6a:	4909      	ldr	r1, [pc, #36]	; (8000f90 <taskGive+0x40>)
 8000f6c:	4809      	ldr	r0, [pc, #36]	; (8000f94 <taskGive+0x44>)
 8000f6e:	f002 fdc9 	bl	8003b04 <xTaskCreate>
		//xSemaphoreGive(sem1);
		//xQueueSend(xQueue1, (void*) &Pass, 1000);
		printf("%d\r\n", Pass);
 8000f72:	7bfb      	ldrb	r3, [r7, #15]
 8000f74:	4619      	mov	r1, r3
 8000f76:	4808      	ldr	r0, [pc, #32]	; (8000f98 <taskGive+0x48>)
 8000f78:	f003 ff26 	bl	8004dc8 <iprintf>
		vTaskDelay(10);
 8000f7c:	200a      	movs	r0, #10
 8000f7e:	f002 fef9 	bl	8003d74 <vTaskDelay>
		Pass++;
 8000f82:	7bfb      	ldrb	r3, [r7, #15]
 8000f84:	3301      	adds	r3, #1
 8000f86:	73fb      	strb	r3, [r7, #15]
		xTaskCreate(taskBidon, "taskBidon", 1000, NULL, 1, &xHandle2);
 8000f88:	e7e8      	b.n	8000f5c <taskGive+0xc>
 8000f8a:	bf00      	nop
 8000f8c:	200002ec 	.word	0x200002ec
 8000f90:	08005e10 	.word	0x08005e10
 8000f94:	08000f3d 	.word	0x08000f3d
 8000f98:	08005e1c 	.word	0x08005e1c

08000f9c <taskTake>:
	}
}

void taskTake(void * unused)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
	uint8_t RxBuffer = 0;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	73fb      	strb	r3, [r7, #15]
		if(xQueueReceive(xQueue1, &RxBuffer, 1000) == pdFALSE)
		{
			printf("ERROR\r\n");
			NVIC_SystemReset();
		}*/
		printf("taken\r\n");
 8000fa8:	4804      	ldr	r0, [pc, #16]	; (8000fbc <taskTake+0x20>)
 8000faa:	f003 ff93 	bl	8004ed4 <puts>
		printf("%d\r\n", RxBuffer);
 8000fae:	7bfb      	ldrb	r3, [r7, #15]
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4803      	ldr	r0, [pc, #12]	; (8000fc0 <taskTake+0x24>)
 8000fb4:	f003 ff08 	bl	8004dc8 <iprintf>
		printf("taken\r\n");
 8000fb8:	e7f6      	b.n	8000fa8 <taskTake+0xc>
 8000fba:	bf00      	nop
 8000fbc:	08005e24 	.word	0x08005e24
 8000fc0:	08005e1c 	.word	0x08005e1c

08000fc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fca:	f000 fa92 	bl	80014f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fce:	f000 f841 	bl	8001054 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fd2:	f7ff fb2d 	bl	8000630 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000fd6:	f000 f9b1 	bl	800133c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	sem1 = xSemaphoreCreateBinary();
 8000fda:	2203      	movs	r2, #3
 8000fdc:	2100      	movs	r1, #0
 8000fde:	2001      	movs	r0, #1
 8000fe0:	f002 fccc 	bl	800397c <xQueueGenericCreate>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	4a13      	ldr	r2, [pc, #76]	; (8001034 <main+0x70>)
 8000fe8:	6013      	str	r3, [r2, #0]
	xQueue1 = xQueueCreate( 1, sizeof( uint8_t) );
 8000fea:	2200      	movs	r2, #0
 8000fec:	2101      	movs	r1, #1
 8000fee:	2001      	movs	r0, #1
 8000ff0:	f002 fcc4 	bl	800397c <xQueueGenericCreate>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	4a10      	ldr	r2, [pc, #64]	; (8001038 <main+0x74>)
 8000ff8:	6013      	str	r3, [r2, #0]
//	BaseType_t xReturned;


	xTaskCreate(taskGive, "taskGive", 1000, NULL, 2, &xHandle1);
 8000ffa:	4b10      	ldr	r3, [pc, #64]	; (800103c <main+0x78>)
 8000ffc:	9301      	str	r3, [sp, #4]
 8000ffe:	2302      	movs	r3, #2
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2300      	movs	r3, #0
 8001004:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001008:	490d      	ldr	r1, [pc, #52]	; (8001040 <main+0x7c>)
 800100a:	480e      	ldr	r0, [pc, #56]	; (8001044 <main+0x80>)
 800100c:	f002 fd7a 	bl	8003b04 <xTaskCreate>
	xTaskCreate(taskTake, "taskTake", 1000, NULL, 1, &xHandle2);
 8001010:	4b0d      	ldr	r3, [pc, #52]	; (8001048 <main+0x84>)
 8001012:	9301      	str	r3, [sp, #4]
 8001014:	2301      	movs	r3, #1
 8001016:	9300      	str	r3, [sp, #0]
 8001018:	2300      	movs	r3, #0
 800101a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800101e:	490b      	ldr	r1, [pc, #44]	; (800104c <main+0x88>)
 8001020:	480b      	ldr	r0, [pc, #44]	; (8001050 <main+0x8c>)
 8001022:	f002 fd6f 	bl	8003b04 <xTaskCreate>
	//xReturned = xTaskCreate(Cligno, "Cligno", 1000, NULL, 1, &xHandle1);
	//configASSERT(pdTRUE==xReturned);

	vTaskStartScheduler();
 8001026:	f002 fedb 	bl	8003de0 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800102a:	f7ff fadd 	bl	80005e8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800102e:	f002 fb20 	bl	8003672 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8001032:	e7fe      	b.n	8001032 <main+0x6e>
 8001034:	200002f4 	.word	0x200002f4
 8001038:	200002f0 	.word	0x200002f0
 800103c:	200002e8 	.word	0x200002e8
 8001040:	08005e2c 	.word	0x08005e2c
 8001044:	08000f51 	.word	0x08000f51
 8001048:	200002ec 	.word	0x200002ec
 800104c:	08005e38 	.word	0x08005e38
 8001050:	08000f9d 	.word	0x08000f9d

08001054 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b094      	sub	sp, #80	; 0x50
 8001058:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800105a:	f107 0320 	add.w	r3, r7, #32
 800105e:	2230      	movs	r2, #48	; 0x30
 8001060:	2100      	movs	r1, #0
 8001062:	4618      	mov	r0, r3
 8001064:	f003 fea8 	bl	8004db8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001068:	f107 030c 	add.w	r3, r7, #12
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
 8001076:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001078:	4b2b      	ldr	r3, [pc, #172]	; (8001128 <SystemClock_Config+0xd4>)
 800107a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107c:	4a2a      	ldr	r2, [pc, #168]	; (8001128 <SystemClock_Config+0xd4>)
 800107e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001082:	6413      	str	r3, [r2, #64]	; 0x40
 8001084:	4b28      	ldr	r3, [pc, #160]	; (8001128 <SystemClock_Config+0xd4>)
 8001086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001088:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800108c:	60bb      	str	r3, [r7, #8]
 800108e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001090:	4b26      	ldr	r3, [pc, #152]	; (800112c <SystemClock_Config+0xd8>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a25      	ldr	r2, [pc, #148]	; (800112c <SystemClock_Config+0xd8>)
 8001096:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800109a:	6013      	str	r3, [r2, #0]
 800109c:	4b23      	ldr	r3, [pc, #140]	; (800112c <SystemClock_Config+0xd8>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010a4:	607b      	str	r3, [r7, #4]
 80010a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010a8:	2301      	movs	r3, #1
 80010aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010b2:	2302      	movs	r3, #2
 80010b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80010bc:	2319      	movs	r3, #25
 80010be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 80010c0:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80010c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010c6:	2302      	movs	r3, #2
 80010c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80010ca:	2302      	movs	r3, #2
 80010cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ce:	f107 0320 	add.w	r3, r7, #32
 80010d2:	4618      	mov	r0, r3
 80010d4:	f000 fd66 	bl	8001ba4 <HAL_RCC_OscConfig>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80010de:	f000 f827 	bl	8001130 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80010e2:	f000 fd0f 	bl	8001b04 <HAL_PWREx_EnableOverDrive>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80010ec:	f000 f820 	bl	8001130 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010f0:	230f      	movs	r3, #15
 80010f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010f4:	2302      	movs	r3, #2
 80010f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010fc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001100:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001102:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001106:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001108:	f107 030c 	add.w	r3, r7, #12
 800110c:	2107      	movs	r1, #7
 800110e:	4618      	mov	r0, r3
 8001110:	f000 ffec 	bl	80020ec <HAL_RCC_ClockConfig>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800111a:	f000 f809 	bl	8001130 <Error_Handler>
  }
}
 800111e:	bf00      	nop
 8001120:	3750      	adds	r7, #80	; 0x50
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40023800 	.word	0x40023800
 800112c:	40007000 	.word	0x40007000

08001130 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001134:	b672      	cpsid	i
}
 8001136:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001138:	e7fe      	b.n	8001138 <Error_Handler+0x8>
	...

0800113c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001142:	4b11      	ldr	r3, [pc, #68]	; (8001188 <HAL_MspInit+0x4c>)
 8001144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001146:	4a10      	ldr	r2, [pc, #64]	; (8001188 <HAL_MspInit+0x4c>)
 8001148:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800114c:	6413      	str	r3, [r2, #64]	; 0x40
 800114e:	4b0e      	ldr	r3, [pc, #56]	; (8001188 <HAL_MspInit+0x4c>)
 8001150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001156:	607b      	str	r3, [r7, #4]
 8001158:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800115a:	4b0b      	ldr	r3, [pc, #44]	; (8001188 <HAL_MspInit+0x4c>)
 800115c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115e:	4a0a      	ldr	r2, [pc, #40]	; (8001188 <HAL_MspInit+0x4c>)
 8001160:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001164:	6453      	str	r3, [r2, #68]	; 0x44
 8001166:	4b08      	ldr	r3, [pc, #32]	; (8001188 <HAL_MspInit+0x4c>)
 8001168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800116e:	603b      	str	r3, [r7, #0]
 8001170:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001172:	2200      	movs	r2, #0
 8001174:	210f      	movs	r1, #15
 8001176:	f06f 0001 	mvn.w	r0, #1
 800117a:	f000 fad4 	bl	8001726 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40023800 	.word	0x40023800

0800118c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001190:	e7fe      	b.n	8001190 <NMI_Handler+0x4>

08001192 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001192:	b480      	push	{r7}
 8001194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001196:	e7fe      	b.n	8001196 <HardFault_Handler+0x4>

08001198 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800119c:	e7fe      	b.n	800119c <MemManage_Handler+0x4>

0800119e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800119e:	b480      	push	{r7}
 80011a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011a2:	e7fe      	b.n	80011a2 <BusFault_Handler+0x4>

080011a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011a8:	e7fe      	b.n	80011a8 <UsageFault_Handler+0x4>

080011aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011aa:	b480      	push	{r7}
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011ae:	bf00      	nop
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011bc:	f000 f9d6 	bl	800156c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80011c0:	f003 f972 	bl	80044a8 <xTaskGetSchedulerState>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d001      	beq.n	80011ce <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80011ca:	f003 fb95 	bl	80048f8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b086      	sub	sp, #24
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	60f8      	str	r0, [r7, #12]
 80011da:	60b9      	str	r1, [r7, #8]
 80011dc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011de:	2300      	movs	r3, #0
 80011e0:	617b      	str	r3, [r7, #20]
 80011e2:	e00a      	b.n	80011fa <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80011e4:	f3af 8000 	nop.w
 80011e8:	4601      	mov	r1, r0
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	1c5a      	adds	r2, r3, #1
 80011ee:	60ba      	str	r2, [r7, #8]
 80011f0:	b2ca      	uxtb	r2, r1
 80011f2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	3301      	adds	r3, #1
 80011f8:	617b      	str	r3, [r7, #20]
 80011fa:	697a      	ldr	r2, [r7, #20]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	429a      	cmp	r2, r3
 8001200:	dbf0      	blt.n	80011e4 <_read+0x12>
	}

return len;
 8001202:	687b      	ldr	r3, [r7, #4]
}
 8001204:	4618      	mov	r0, r3
 8001206:	3718      	adds	r7, #24
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]
 800121c:	e009      	b.n	8001232 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	1c5a      	adds	r2, r3, #1
 8001222:	60ba      	str	r2, [r7, #8]
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff fe76 	bl	8000f18 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	3301      	adds	r3, #1
 8001230:	617b      	str	r3, [r7, #20]
 8001232:	697a      	ldr	r2, [r7, #20]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	429a      	cmp	r2, r3
 8001238:	dbf1      	blt.n	800121e <_write+0x12>
	}
	return len;
 800123a:	687b      	ldr	r3, [r7, #4]
}
 800123c:	4618      	mov	r0, r3
 800123e:	3718      	adds	r7, #24
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <_close>:

int _close(int file)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
	return -1;
 800124c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001250:	4618      	mov	r0, r3
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800126c:	605a      	str	r2, [r3, #4]
	return 0;
 800126e:	2300      	movs	r3, #0
}
 8001270:	4618      	mov	r0, r3
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <_isatty>:

int _isatty(int file)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
	return 1;
 8001284:	2301      	movs	r3, #1
}
 8001286:	4618      	mov	r0, r3
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr

08001292 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001292:	b480      	push	{r7}
 8001294:	b085      	sub	sp, #20
 8001296:	af00      	add	r7, sp, #0
 8001298:	60f8      	str	r0, [r7, #12]
 800129a:	60b9      	str	r1, [r7, #8]
 800129c:	607a      	str	r2, [r7, #4]
	return 0;
 800129e:	2300      	movs	r3, #0
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3714      	adds	r7, #20
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012b4:	4a14      	ldr	r2, [pc, #80]	; (8001308 <_sbrk+0x5c>)
 80012b6:	4b15      	ldr	r3, [pc, #84]	; (800130c <_sbrk+0x60>)
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012c0:	4b13      	ldr	r3, [pc, #76]	; (8001310 <_sbrk+0x64>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d102      	bne.n	80012ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012c8:	4b11      	ldr	r3, [pc, #68]	; (8001310 <_sbrk+0x64>)
 80012ca:	4a12      	ldr	r2, [pc, #72]	; (8001314 <_sbrk+0x68>)
 80012cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012ce:	4b10      	ldr	r3, [pc, #64]	; (8001310 <_sbrk+0x64>)
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4413      	add	r3, r2
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d207      	bcs.n	80012ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012dc:	f003 fd42 	bl	8004d64 <__errno>
 80012e0:	4603      	mov	r3, r0
 80012e2:	220c      	movs	r2, #12
 80012e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012e6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ea:	e009      	b.n	8001300 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012ec:	4b08      	ldr	r3, [pc, #32]	; (8001310 <_sbrk+0x64>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012f2:	4b07      	ldr	r3, [pc, #28]	; (8001310 <_sbrk+0x64>)
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4413      	add	r3, r2
 80012fa:	4a05      	ldr	r2, [pc, #20]	; (8001310 <_sbrk+0x64>)
 80012fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012fe:	68fb      	ldr	r3, [r7, #12]
}
 8001300:	4618      	mov	r0, r3
 8001302:	3718      	adds	r7, #24
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20050000 	.word	0x20050000
 800130c:	00000400 	.word	0x00000400
 8001310:	200002f8 	.word	0x200002f8
 8001314:	200040e8 	.word	0x200040e8

08001318 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800131c:	4b06      	ldr	r3, [pc, #24]	; (8001338 <SystemInit+0x20>)
 800131e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001322:	4a05      	ldr	r2, [pc, #20]	; (8001338 <SystemInit+0x20>)
 8001324:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001328:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800132c:	bf00      	nop
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	e000ed00 	.word	0xe000ed00

0800133c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001340:	4b14      	ldr	r3, [pc, #80]	; (8001394 <MX_USART1_UART_Init+0x58>)
 8001342:	4a15      	ldr	r2, [pc, #84]	; (8001398 <MX_USART1_UART_Init+0x5c>)
 8001344:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001346:	4b13      	ldr	r3, [pc, #76]	; (8001394 <MX_USART1_UART_Init+0x58>)
 8001348:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800134c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800134e:	4b11      	ldr	r3, [pc, #68]	; (8001394 <MX_USART1_UART_Init+0x58>)
 8001350:	2200      	movs	r2, #0
 8001352:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001354:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <MX_USART1_UART_Init+0x58>)
 8001356:	2200      	movs	r2, #0
 8001358:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800135a:	4b0e      	ldr	r3, [pc, #56]	; (8001394 <MX_USART1_UART_Init+0x58>)
 800135c:	2200      	movs	r2, #0
 800135e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001360:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <MX_USART1_UART_Init+0x58>)
 8001362:	220c      	movs	r2, #12
 8001364:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001366:	4b0b      	ldr	r3, [pc, #44]	; (8001394 <MX_USART1_UART_Init+0x58>)
 8001368:	2200      	movs	r2, #0
 800136a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800136c:	4b09      	ldr	r3, [pc, #36]	; (8001394 <MX_USART1_UART_Init+0x58>)
 800136e:	2200      	movs	r2, #0
 8001370:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001372:	4b08      	ldr	r3, [pc, #32]	; (8001394 <MX_USART1_UART_Init+0x58>)
 8001374:	2200      	movs	r2, #0
 8001376:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001378:	4b06      	ldr	r3, [pc, #24]	; (8001394 <MX_USART1_UART_Init+0x58>)
 800137a:	2200      	movs	r2, #0
 800137c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800137e:	4805      	ldr	r0, [pc, #20]	; (8001394 <MX_USART1_UART_Init+0x58>)
 8001380:	f001 fc8a 	bl	8002c98 <HAL_UART_Init>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800138a:	f7ff fed1 	bl	8001130 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	200002fc 	.word	0x200002fc
 8001398:	40011000 	.word	0x40011000

0800139c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b0ac      	sub	sp, #176	; 0xb0
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	60da      	str	r2, [r3, #12]
 80013b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013b4:	f107 0318 	add.w	r3, r7, #24
 80013b8:	2284      	movs	r2, #132	; 0x84
 80013ba:	2100      	movs	r1, #0
 80013bc:	4618      	mov	r0, r3
 80013be:	f003 fcfb 	bl	8004db8 <memset>
  if(uartHandle->Instance==USART1)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a32      	ldr	r2, [pc, #200]	; (8001490 <HAL_UART_MspInit+0xf4>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d15c      	bne.n	8001486 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80013cc:	2340      	movs	r3, #64	; 0x40
 80013ce:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80013d0:	2300      	movs	r3, #0
 80013d2:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013d4:	f107 0318 	add.w	r3, r7, #24
 80013d8:	4618      	mov	r0, r3
 80013da:	f001 f86d 	bl	80024b8 <HAL_RCCEx_PeriphCLKConfig>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80013e4:	f7ff fea4 	bl	8001130 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013e8:	4b2a      	ldr	r3, [pc, #168]	; (8001494 <HAL_UART_MspInit+0xf8>)
 80013ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ec:	4a29      	ldr	r2, [pc, #164]	; (8001494 <HAL_UART_MspInit+0xf8>)
 80013ee:	f043 0310 	orr.w	r3, r3, #16
 80013f2:	6453      	str	r3, [r2, #68]	; 0x44
 80013f4:	4b27      	ldr	r3, [pc, #156]	; (8001494 <HAL_UART_MspInit+0xf8>)
 80013f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f8:	f003 0310 	and.w	r3, r3, #16
 80013fc:	617b      	str	r3, [r7, #20]
 80013fe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001400:	4b24      	ldr	r3, [pc, #144]	; (8001494 <HAL_UART_MspInit+0xf8>)
 8001402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001404:	4a23      	ldr	r2, [pc, #140]	; (8001494 <HAL_UART_MspInit+0xf8>)
 8001406:	f043 0302 	orr.w	r3, r3, #2
 800140a:	6313      	str	r3, [r2, #48]	; 0x30
 800140c:	4b21      	ldr	r3, [pc, #132]	; (8001494 <HAL_UART_MspInit+0xf8>)
 800140e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001410:	f003 0302 	and.w	r3, r3, #2
 8001414:	613b      	str	r3, [r7, #16]
 8001416:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001418:	4b1e      	ldr	r3, [pc, #120]	; (8001494 <HAL_UART_MspInit+0xf8>)
 800141a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141c:	4a1d      	ldr	r2, [pc, #116]	; (8001494 <HAL_UART_MspInit+0xf8>)
 800141e:	f043 0301 	orr.w	r3, r3, #1
 8001422:	6313      	str	r3, [r2, #48]	; 0x30
 8001424:	4b1b      	ldr	r3, [pc, #108]	; (8001494 <HAL_UART_MspInit+0xf8>)
 8001426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001428:	f003 0301 	and.w	r3, r3, #1
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001430:	2380      	movs	r3, #128	; 0x80
 8001432:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001436:	2302      	movs	r3, #2
 8001438:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001442:	2300      	movs	r3, #0
 8001444:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001448:	2307      	movs	r3, #7
 800144a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800144e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001452:	4619      	mov	r1, r3
 8001454:	4810      	ldr	r0, [pc, #64]	; (8001498 <HAL_UART_MspInit+0xfc>)
 8001456:	f000 f98f 	bl	8001778 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800145a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800145e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001462:	2302      	movs	r3, #2
 8001464:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001468:	2300      	movs	r3, #0
 800146a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146e:	2300      	movs	r3, #0
 8001470:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001474:	2307      	movs	r3, #7
 8001476:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800147a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800147e:	4619      	mov	r1, r3
 8001480:	4806      	ldr	r0, [pc, #24]	; (800149c <HAL_UART_MspInit+0x100>)
 8001482:	f000 f979 	bl	8001778 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001486:	bf00      	nop
 8001488:	37b0      	adds	r7, #176	; 0xb0
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40011000 	.word	0x40011000
 8001494:	40023800 	.word	0x40023800
 8001498:	40020400 	.word	0x40020400
 800149c:	40020000 	.word	0x40020000

080014a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014a4:	480d      	ldr	r0, [pc, #52]	; (80014dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014a6:	490e      	ldr	r1, [pc, #56]	; (80014e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014a8:	4a0e      	ldr	r2, [pc, #56]	; (80014e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014ac:	e002      	b.n	80014b4 <LoopCopyDataInit>

080014ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014b2:	3304      	adds	r3, #4

080014b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014b8:	d3f9      	bcc.n	80014ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ba:	4a0b      	ldr	r2, [pc, #44]	; (80014e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014bc:	4c0b      	ldr	r4, [pc, #44]	; (80014ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80014be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014c0:	e001      	b.n	80014c6 <LoopFillZerobss>

080014c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014c4:	3204      	adds	r2, #4

080014c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014c8:	d3fb      	bcc.n	80014c2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014ca:	f7ff ff25 	bl	8001318 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014ce:	f003 fc4f 	bl	8004d70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014d2:	f7ff fd77 	bl	8000fc4 <main>
  bx  lr    
 80014d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014d8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80014dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014e0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80014e4:	08005f0c 	.word	0x08005f0c
  ldr r2, =_sbss
 80014e8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80014ec:	200040e4 	.word	0x200040e4

080014f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014f0:	e7fe      	b.n	80014f0 <ADC_IRQHandler>

080014f2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014f6:	2003      	movs	r0, #3
 80014f8:	f000 f90a 	bl	8001710 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014fc:	200f      	movs	r0, #15
 80014fe:	f000 f805 	bl	800150c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001502:	f7ff fe1b 	bl	800113c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001506:	2300      	movs	r3, #0
}
 8001508:	4618      	mov	r0, r3
 800150a:	bd80      	pop	{r7, pc}

0800150c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001514:	4b12      	ldr	r3, [pc, #72]	; (8001560 <HAL_InitTick+0x54>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	4b12      	ldr	r3, [pc, #72]	; (8001564 <HAL_InitTick+0x58>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	4619      	mov	r1, r3
 800151e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001522:	fbb3 f3f1 	udiv	r3, r3, r1
 8001526:	fbb2 f3f3 	udiv	r3, r2, r3
 800152a:	4618      	mov	r0, r3
 800152c:	f000 f917 	bl	800175e <HAL_SYSTICK_Config>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e00e      	b.n	8001558 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2b0f      	cmp	r3, #15
 800153e:	d80a      	bhi.n	8001556 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001540:	2200      	movs	r2, #0
 8001542:	6879      	ldr	r1, [r7, #4]
 8001544:	f04f 30ff 	mov.w	r0, #4294967295
 8001548:	f000 f8ed 	bl	8001726 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800154c:	4a06      	ldr	r2, [pc, #24]	; (8001568 <HAL_InitTick+0x5c>)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001552:	2300      	movs	r3, #0
 8001554:	e000      	b.n	8001558 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
}
 8001558:	4618      	mov	r0, r3
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	20000000 	.word	0x20000000
 8001564:	20000008 	.word	0x20000008
 8001568:	20000004 	.word	0x20000004

0800156c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001570:	4b06      	ldr	r3, [pc, #24]	; (800158c <HAL_IncTick+0x20>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	461a      	mov	r2, r3
 8001576:	4b06      	ldr	r3, [pc, #24]	; (8001590 <HAL_IncTick+0x24>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4413      	add	r3, r2
 800157c:	4a04      	ldr	r2, [pc, #16]	; (8001590 <HAL_IncTick+0x24>)
 800157e:	6013      	str	r3, [r2, #0]
}
 8001580:	bf00      	nop
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	20000008 	.word	0x20000008
 8001590:	20000384 	.word	0x20000384

08001594 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  return uwTick;
 8001598:	4b03      	ldr	r3, [pc, #12]	; (80015a8 <HAL_GetTick+0x14>)
 800159a:	681b      	ldr	r3, [r3, #0]
}
 800159c:	4618      	mov	r0, r3
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	20000384 	.word	0x20000384

080015ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	f003 0307 	and.w	r3, r3, #7
 80015ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015bc:	4b0b      	ldr	r3, [pc, #44]	; (80015ec <__NVIC_SetPriorityGrouping+0x40>)
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015c2:	68ba      	ldr	r2, [r7, #8]
 80015c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015c8:	4013      	ands	r3, r2
 80015ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80015d4:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <__NVIC_SetPriorityGrouping+0x44>)
 80015d6:	4313      	orrs	r3, r2
 80015d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015da:	4a04      	ldr	r2, [pc, #16]	; (80015ec <__NVIC_SetPriorityGrouping+0x40>)
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	60d3      	str	r3, [r2, #12]
}
 80015e0:	bf00      	nop
 80015e2:	3714      	adds	r7, #20
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr
 80015ec:	e000ed00 	.word	0xe000ed00
 80015f0:	05fa0000 	.word	0x05fa0000

080015f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015f8:	4b04      	ldr	r3, [pc, #16]	; (800160c <__NVIC_GetPriorityGrouping+0x18>)
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	0a1b      	lsrs	r3, r3, #8
 80015fe:	f003 0307 	and.w	r3, r3, #7
}
 8001602:	4618      	mov	r0, r3
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	e000ed00 	.word	0xe000ed00

08001610 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	6039      	str	r1, [r7, #0]
 800161a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800161c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001620:	2b00      	cmp	r3, #0
 8001622:	db0a      	blt.n	800163a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	b2da      	uxtb	r2, r3
 8001628:	490c      	ldr	r1, [pc, #48]	; (800165c <__NVIC_SetPriority+0x4c>)
 800162a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162e:	0112      	lsls	r2, r2, #4
 8001630:	b2d2      	uxtb	r2, r2
 8001632:	440b      	add	r3, r1
 8001634:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001638:	e00a      	b.n	8001650 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	b2da      	uxtb	r2, r3
 800163e:	4908      	ldr	r1, [pc, #32]	; (8001660 <__NVIC_SetPriority+0x50>)
 8001640:	79fb      	ldrb	r3, [r7, #7]
 8001642:	f003 030f 	and.w	r3, r3, #15
 8001646:	3b04      	subs	r3, #4
 8001648:	0112      	lsls	r2, r2, #4
 800164a:	b2d2      	uxtb	r2, r2
 800164c:	440b      	add	r3, r1
 800164e:	761a      	strb	r2, [r3, #24]
}
 8001650:	bf00      	nop
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr
 800165c:	e000e100 	.word	0xe000e100
 8001660:	e000ed00 	.word	0xe000ed00

08001664 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001664:	b480      	push	{r7}
 8001666:	b089      	sub	sp, #36	; 0x24
 8001668:	af00      	add	r7, sp, #0
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	f003 0307 	and.w	r3, r3, #7
 8001676:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	f1c3 0307 	rsb	r3, r3, #7
 800167e:	2b04      	cmp	r3, #4
 8001680:	bf28      	it	cs
 8001682:	2304      	movcs	r3, #4
 8001684:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	3304      	adds	r3, #4
 800168a:	2b06      	cmp	r3, #6
 800168c:	d902      	bls.n	8001694 <NVIC_EncodePriority+0x30>
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	3b03      	subs	r3, #3
 8001692:	e000      	b.n	8001696 <NVIC_EncodePriority+0x32>
 8001694:	2300      	movs	r3, #0
 8001696:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001698:	f04f 32ff 	mov.w	r2, #4294967295
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	fa02 f303 	lsl.w	r3, r2, r3
 80016a2:	43da      	mvns	r2, r3
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	401a      	ands	r2, r3
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016ac:	f04f 31ff 	mov.w	r1, #4294967295
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	fa01 f303 	lsl.w	r3, r1, r3
 80016b6:	43d9      	mvns	r1, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016bc:	4313      	orrs	r3, r2
         );
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3724      	adds	r7, #36	; 0x24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
	...

080016cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	3b01      	subs	r3, #1
 80016d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016dc:	d301      	bcc.n	80016e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016de:	2301      	movs	r3, #1
 80016e0:	e00f      	b.n	8001702 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016e2:	4a0a      	ldr	r2, [pc, #40]	; (800170c <SysTick_Config+0x40>)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	3b01      	subs	r3, #1
 80016e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ea:	210f      	movs	r1, #15
 80016ec:	f04f 30ff 	mov.w	r0, #4294967295
 80016f0:	f7ff ff8e 	bl	8001610 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016f4:	4b05      	ldr	r3, [pc, #20]	; (800170c <SysTick_Config+0x40>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016fa:	4b04      	ldr	r3, [pc, #16]	; (800170c <SysTick_Config+0x40>)
 80016fc:	2207      	movs	r2, #7
 80016fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001700:	2300      	movs	r3, #0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	e000e010 	.word	0xe000e010

08001710 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f7ff ff47 	bl	80015ac <__NVIC_SetPriorityGrouping>
}
 800171e:	bf00      	nop
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001726:	b580      	push	{r7, lr}
 8001728:	b086      	sub	sp, #24
 800172a:	af00      	add	r7, sp, #0
 800172c:	4603      	mov	r3, r0
 800172e:	60b9      	str	r1, [r7, #8]
 8001730:	607a      	str	r2, [r7, #4]
 8001732:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001734:	2300      	movs	r3, #0
 8001736:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001738:	f7ff ff5c 	bl	80015f4 <__NVIC_GetPriorityGrouping>
 800173c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	68b9      	ldr	r1, [r7, #8]
 8001742:	6978      	ldr	r0, [r7, #20]
 8001744:	f7ff ff8e 	bl	8001664 <NVIC_EncodePriority>
 8001748:	4602      	mov	r2, r0
 800174a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800174e:	4611      	mov	r1, r2
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff ff5d 	bl	8001610 <__NVIC_SetPriority>
}
 8001756:	bf00      	nop
 8001758:	3718      	adds	r7, #24
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}

0800175e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800175e:	b580      	push	{r7, lr}
 8001760:	b082      	sub	sp, #8
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f7ff ffb0 	bl	80016cc <SysTick_Config>
 800176c:	4603      	mov	r3, r0
}
 800176e:	4618      	mov	r0, r3
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
	...

08001778 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001778:	b480      	push	{r7}
 800177a:	b089      	sub	sp, #36	; 0x24
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001782:	2300      	movs	r3, #0
 8001784:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001786:	2300      	movs	r3, #0
 8001788:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800178a:	2300      	movs	r3, #0
 800178c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800178e:	2300      	movs	r3, #0
 8001790:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001792:	2300      	movs	r3, #0
 8001794:	61fb      	str	r3, [r7, #28]
 8001796:	e175      	b.n	8001a84 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001798:	2201      	movs	r2, #1
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	697a      	ldr	r2, [r7, #20]
 80017a8:	4013      	ands	r3, r2
 80017aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017ac:	693a      	ldr	r2, [r7, #16]
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	f040 8164 	bne.w	8001a7e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f003 0303 	and.w	r3, r3, #3
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d005      	beq.n	80017ce <HAL_GPIO_Init+0x56>
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f003 0303 	and.w	r3, r3, #3
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d130      	bne.n	8001830 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	2203      	movs	r2, #3
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	43db      	mvns	r3, r3
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	4013      	ands	r3, r2
 80017e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	68da      	ldr	r2, [r3, #12]
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001804:	2201      	movs	r2, #1
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	43db      	mvns	r3, r3
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	4013      	ands	r3, r2
 8001812:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	091b      	lsrs	r3, r3, #4
 800181a:	f003 0201 	and.w	r2, r3, #1
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	4313      	orrs	r3, r2
 8001828:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f003 0303 	and.w	r3, r3, #3
 8001838:	2b03      	cmp	r3, #3
 800183a:	d017      	beq.n	800186c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	2203      	movs	r2, #3
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	43db      	mvns	r3, r3
 800184e:	69ba      	ldr	r2, [r7, #24]
 8001850:	4013      	ands	r3, r2
 8001852:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	689a      	ldr	r2, [r3, #8]
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	4313      	orrs	r3, r2
 8001864:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f003 0303 	and.w	r3, r3, #3
 8001874:	2b02      	cmp	r3, #2
 8001876:	d123      	bne.n	80018c0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	08da      	lsrs	r2, r3, #3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	3208      	adds	r2, #8
 8001880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001884:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	f003 0307 	and.w	r3, r3, #7
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	220f      	movs	r2, #15
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	43db      	mvns	r3, r3
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	4013      	ands	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	691a      	ldr	r2, [r3, #16]
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	f003 0307 	and.w	r3, r3, #7
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	08da      	lsrs	r2, r3, #3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	3208      	adds	r2, #8
 80018ba:	69b9      	ldr	r1, [r7, #24]
 80018bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	2203      	movs	r2, #3
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	43db      	mvns	r3, r3
 80018d2:	69ba      	ldr	r2, [r7, #24]
 80018d4:	4013      	ands	r3, r2
 80018d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f003 0203 	and.w	r2, r3, #3
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	f000 80be 	beq.w	8001a7e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001902:	4b66      	ldr	r3, [pc, #408]	; (8001a9c <HAL_GPIO_Init+0x324>)
 8001904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001906:	4a65      	ldr	r2, [pc, #404]	; (8001a9c <HAL_GPIO_Init+0x324>)
 8001908:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800190c:	6453      	str	r3, [r2, #68]	; 0x44
 800190e:	4b63      	ldr	r3, [pc, #396]	; (8001a9c <HAL_GPIO_Init+0x324>)
 8001910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001912:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001916:	60fb      	str	r3, [r7, #12]
 8001918:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800191a:	4a61      	ldr	r2, [pc, #388]	; (8001aa0 <HAL_GPIO_Init+0x328>)
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	089b      	lsrs	r3, r3, #2
 8001920:	3302      	adds	r3, #2
 8001922:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001926:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	f003 0303 	and.w	r3, r3, #3
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	220f      	movs	r2, #15
 8001932:	fa02 f303 	lsl.w	r3, r2, r3
 8001936:	43db      	mvns	r3, r3
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	4013      	ands	r3, r2
 800193c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a58      	ldr	r2, [pc, #352]	; (8001aa4 <HAL_GPIO_Init+0x32c>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d037      	beq.n	80019b6 <HAL_GPIO_Init+0x23e>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a57      	ldr	r2, [pc, #348]	; (8001aa8 <HAL_GPIO_Init+0x330>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d031      	beq.n	80019b2 <HAL_GPIO_Init+0x23a>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a56      	ldr	r2, [pc, #344]	; (8001aac <HAL_GPIO_Init+0x334>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d02b      	beq.n	80019ae <HAL_GPIO_Init+0x236>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a55      	ldr	r2, [pc, #340]	; (8001ab0 <HAL_GPIO_Init+0x338>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d025      	beq.n	80019aa <HAL_GPIO_Init+0x232>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a54      	ldr	r2, [pc, #336]	; (8001ab4 <HAL_GPIO_Init+0x33c>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d01f      	beq.n	80019a6 <HAL_GPIO_Init+0x22e>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a53      	ldr	r2, [pc, #332]	; (8001ab8 <HAL_GPIO_Init+0x340>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d019      	beq.n	80019a2 <HAL_GPIO_Init+0x22a>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a52      	ldr	r2, [pc, #328]	; (8001abc <HAL_GPIO_Init+0x344>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d013      	beq.n	800199e <HAL_GPIO_Init+0x226>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a51      	ldr	r2, [pc, #324]	; (8001ac0 <HAL_GPIO_Init+0x348>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d00d      	beq.n	800199a <HAL_GPIO_Init+0x222>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a50      	ldr	r2, [pc, #320]	; (8001ac4 <HAL_GPIO_Init+0x34c>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d007      	beq.n	8001996 <HAL_GPIO_Init+0x21e>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a4f      	ldr	r2, [pc, #316]	; (8001ac8 <HAL_GPIO_Init+0x350>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d101      	bne.n	8001992 <HAL_GPIO_Init+0x21a>
 800198e:	2309      	movs	r3, #9
 8001990:	e012      	b.n	80019b8 <HAL_GPIO_Init+0x240>
 8001992:	230a      	movs	r3, #10
 8001994:	e010      	b.n	80019b8 <HAL_GPIO_Init+0x240>
 8001996:	2308      	movs	r3, #8
 8001998:	e00e      	b.n	80019b8 <HAL_GPIO_Init+0x240>
 800199a:	2307      	movs	r3, #7
 800199c:	e00c      	b.n	80019b8 <HAL_GPIO_Init+0x240>
 800199e:	2306      	movs	r3, #6
 80019a0:	e00a      	b.n	80019b8 <HAL_GPIO_Init+0x240>
 80019a2:	2305      	movs	r3, #5
 80019a4:	e008      	b.n	80019b8 <HAL_GPIO_Init+0x240>
 80019a6:	2304      	movs	r3, #4
 80019a8:	e006      	b.n	80019b8 <HAL_GPIO_Init+0x240>
 80019aa:	2303      	movs	r3, #3
 80019ac:	e004      	b.n	80019b8 <HAL_GPIO_Init+0x240>
 80019ae:	2302      	movs	r3, #2
 80019b0:	e002      	b.n	80019b8 <HAL_GPIO_Init+0x240>
 80019b2:	2301      	movs	r3, #1
 80019b4:	e000      	b.n	80019b8 <HAL_GPIO_Init+0x240>
 80019b6:	2300      	movs	r3, #0
 80019b8:	69fa      	ldr	r2, [r7, #28]
 80019ba:	f002 0203 	and.w	r2, r2, #3
 80019be:	0092      	lsls	r2, r2, #2
 80019c0:	4093      	lsls	r3, r2
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80019c8:	4935      	ldr	r1, [pc, #212]	; (8001aa0 <HAL_GPIO_Init+0x328>)
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	089b      	lsrs	r3, r3, #2
 80019ce:	3302      	adds	r3, #2
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019d6:	4b3d      	ldr	r3, [pc, #244]	; (8001acc <HAL_GPIO_Init+0x354>)
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	43db      	mvns	r3, r3
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	4013      	ands	r3, r2
 80019e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d003      	beq.n	80019fa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019fa:	4a34      	ldr	r2, [pc, #208]	; (8001acc <HAL_GPIO_Init+0x354>)
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a00:	4b32      	ldr	r3, [pc, #200]	; (8001acc <HAL_GPIO_Init+0x354>)
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d003      	beq.n	8001a24 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a24:	4a29      	ldr	r2, [pc, #164]	; (8001acc <HAL_GPIO_Init+0x354>)
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a2a:	4b28      	ldr	r3, [pc, #160]	; (8001acc <HAL_GPIO_Init+0x354>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	43db      	mvns	r3, r3
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	4013      	ands	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d003      	beq.n	8001a4e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a4e:	4a1f      	ldr	r2, [pc, #124]	; (8001acc <HAL_GPIO_Init+0x354>)
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a54:	4b1d      	ldr	r3, [pc, #116]	; (8001acc <HAL_GPIO_Init+0x354>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	4013      	ands	r3, r2
 8001a62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d003      	beq.n	8001a78 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a78:	4a14      	ldr	r2, [pc, #80]	; (8001acc <HAL_GPIO_Init+0x354>)
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	3301      	adds	r3, #1
 8001a82:	61fb      	str	r3, [r7, #28]
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	2b0f      	cmp	r3, #15
 8001a88:	f67f ae86 	bls.w	8001798 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001a8c:	bf00      	nop
 8001a8e:	bf00      	nop
 8001a90:	3724      	adds	r7, #36	; 0x24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	40023800 	.word	0x40023800
 8001aa0:	40013800 	.word	0x40013800
 8001aa4:	40020000 	.word	0x40020000
 8001aa8:	40020400 	.word	0x40020400
 8001aac:	40020800 	.word	0x40020800
 8001ab0:	40020c00 	.word	0x40020c00
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	40021400 	.word	0x40021400
 8001abc:	40021800 	.word	0x40021800
 8001ac0:	40021c00 	.word	0x40021c00
 8001ac4:	40022000 	.word	0x40022000
 8001ac8:	40022400 	.word	0x40022400
 8001acc:	40013c00 	.word	0x40013c00

08001ad0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	460b      	mov	r3, r1
 8001ada:	807b      	strh	r3, [r7, #2]
 8001adc:	4613      	mov	r3, r2
 8001ade:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ae0:	787b      	ldrb	r3, [r7, #1]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d003      	beq.n	8001aee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ae6:	887a      	ldrh	r2, [r7, #2]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001aec:	e003      	b.n	8001af6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001aee:	887b      	ldrh	r3, [r7, #2]
 8001af0:	041a      	lsls	r2, r3, #16
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	619a      	str	r2, [r3, #24]
}
 8001af6:	bf00      	nop
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
	...

08001b04 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001b0e:	4b23      	ldr	r3, [pc, #140]	; (8001b9c <HAL_PWREx_EnableOverDrive+0x98>)
 8001b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b12:	4a22      	ldr	r2, [pc, #136]	; (8001b9c <HAL_PWREx_EnableOverDrive+0x98>)
 8001b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b18:	6413      	str	r3, [r2, #64]	; 0x40
 8001b1a:	4b20      	ldr	r3, [pc, #128]	; (8001b9c <HAL_PWREx_EnableOverDrive+0x98>)
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b22:	603b      	str	r3, [r7, #0]
 8001b24:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001b26:	4b1e      	ldr	r3, [pc, #120]	; (8001ba0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a1d      	ldr	r2, [pc, #116]	; (8001ba0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b30:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b32:	f7ff fd2f 	bl	8001594 <HAL_GetTick>
 8001b36:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001b38:	e009      	b.n	8001b4e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001b3a:	f7ff fd2b 	bl	8001594 <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b48:	d901      	bls.n	8001b4e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e022      	b.n	8001b94 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001b4e:	4b14      	ldr	r3, [pc, #80]	; (8001ba0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b5a:	d1ee      	bne.n	8001b3a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001b5c:	4b10      	ldr	r3, [pc, #64]	; (8001ba0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a0f      	ldr	r2, [pc, #60]	; (8001ba0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b66:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b68:	f7ff fd14 	bl	8001594 <HAL_GetTick>
 8001b6c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001b6e:	e009      	b.n	8001b84 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001b70:	f7ff fd10 	bl	8001594 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b7e:	d901      	bls.n	8001b84 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e007      	b.n	8001b94 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001b84:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001b90:	d1ee      	bne.n	8001b70 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001b92:	2300      	movs	r3, #0
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3708      	adds	r7, #8
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	40023800 	.word	0x40023800
 8001ba0:	40007000 	.word	0x40007000

08001ba4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b086      	sub	sp, #24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001bac:	2300      	movs	r3, #0
 8001bae:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d101      	bne.n	8001bba <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e291      	b.n	80020de <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	f000 8087 	beq.w	8001cd6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bc8:	4b96      	ldr	r3, [pc, #600]	; (8001e24 <HAL_RCC_OscConfig+0x280>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f003 030c 	and.w	r3, r3, #12
 8001bd0:	2b04      	cmp	r3, #4
 8001bd2:	d00c      	beq.n	8001bee <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bd4:	4b93      	ldr	r3, [pc, #588]	; (8001e24 <HAL_RCC_OscConfig+0x280>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f003 030c 	and.w	r3, r3, #12
 8001bdc:	2b08      	cmp	r3, #8
 8001bde:	d112      	bne.n	8001c06 <HAL_RCC_OscConfig+0x62>
 8001be0:	4b90      	ldr	r3, [pc, #576]	; (8001e24 <HAL_RCC_OscConfig+0x280>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001be8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001bec:	d10b      	bne.n	8001c06 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bee:	4b8d      	ldr	r3, [pc, #564]	; (8001e24 <HAL_RCC_OscConfig+0x280>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d06c      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x130>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d168      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e26b      	b.n	80020de <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c0e:	d106      	bne.n	8001c1e <HAL_RCC_OscConfig+0x7a>
 8001c10:	4b84      	ldr	r3, [pc, #528]	; (8001e24 <HAL_RCC_OscConfig+0x280>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a83      	ldr	r2, [pc, #524]	; (8001e24 <HAL_RCC_OscConfig+0x280>)
 8001c16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c1a:	6013      	str	r3, [r2, #0]
 8001c1c:	e02e      	b.n	8001c7c <HAL_RCC_OscConfig+0xd8>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d10c      	bne.n	8001c40 <HAL_RCC_OscConfig+0x9c>
 8001c26:	4b7f      	ldr	r3, [pc, #508]	; (8001e24 <HAL_RCC_OscConfig+0x280>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a7e      	ldr	r2, [pc, #504]	; (8001e24 <HAL_RCC_OscConfig+0x280>)
 8001c2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c30:	6013      	str	r3, [r2, #0]
 8001c32:	4b7c      	ldr	r3, [pc, #496]	; (8001e24 <HAL_RCC_OscConfig+0x280>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a7b      	ldr	r2, [pc, #492]	; (8001e24 <HAL_RCC_OscConfig+0x280>)
 8001c38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c3c:	6013      	str	r3, [r2, #0]
 8001c3e:	e01d      	b.n	8001c7c <HAL_RCC_OscConfig+0xd8>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c48:	d10c      	bne.n	8001c64 <HAL_RCC_OscConfig+0xc0>
 8001c4a:	4b76      	ldr	r3, [pc, #472]	; (8001e24 <HAL_RCC_OscConfig+0x280>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a75      	ldr	r2, [pc, #468]	; (8001e24 <HAL_RCC_OscConfig+0x280>)
 8001c50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c54:	6013      	str	r3, [r2, #0]
 8001c56:	4b73      	ldr	r3, [pc, #460]	; (8001e24 <HAL_RCC_OscConfig+0x280>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a72      	ldr	r2, [pc, #456]	; (8001e24 <HAL_RCC_OscConfig+0x280>)
 8001c5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c60:	6013      	str	r3, [r2, #0]
 8001c62:	e00b      	b.n	8001c7c <HAL_RCC_OscConfig+0xd8>
 8001c64:	4b6f      	ldr	r3, [pc, #444]	; (8001e24 <HAL_RCC_OscConfig+0x280>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a6e      	ldr	r2, [pc, #440]	; (8001e24 <HAL_RCC_OscConfig+0x280>)
 8001c6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c6e:	6013      	str	r3, [r2, #0]
 8001c70:	4b6c      	ldr	r3, [pc, #432]	; (8001e24 <HAL_RCC_OscConfig+0x280>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a6b      	ldr	r2, [pc, #428]	; (8001e24 <HAL_RCC_OscConfig+0x280>)
 8001c76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d013      	beq.n	8001cac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c84:	f7ff fc86 	bl	8001594 <HAL_GetTick>
 8001c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c8a:	e008      	b.n	8001c9e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c8c:	f7ff fc82 	bl	8001594 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b64      	cmp	r3, #100	; 0x64
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e21f      	b.n	80020de <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c9e:	4b61      	ldr	r3, [pc, #388]	; (8001e24 <HAL_RCC_OscConfig+0x280>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d0f0      	beq.n	8001c8c <HAL_RCC_OscConfig+0xe8>
 8001caa:	e014      	b.n	8001cd6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cac:	f7ff fc72 	bl	8001594 <HAL_GetTick>
 8001cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cb2:	e008      	b.n	8001cc6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cb4:	f7ff fc6e 	bl	8001594 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	2b64      	cmp	r3, #100	; 0x64
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e20b      	b.n	80020de <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cc6:	4b57      	ldr	r3, [pc, #348]	; (8001e24 <HAL_RCC_OscConfig+0x280>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d1f0      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x110>
 8001cd2:	e000      	b.n	8001cd6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d069      	beq.n	8001db6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ce2:	4b50      	ldr	r3, [pc, #320]	; (8001e24 <HAL_RCC_OscConfig+0x280>)
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	f003 030c 	and.w	r3, r3, #12
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d00b      	beq.n	8001d06 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cee:	4b4d      	ldr	r3, [pc, #308]	; (8001e24 <HAL_RCC_OscConfig+0x280>)
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	f003 030c 	and.w	r3, r3, #12
 8001cf6:	2b08      	cmp	r3, #8
 8001cf8:	d11c      	bne.n	8001d34 <HAL_RCC_OscConfig+0x190>
 8001cfa:	4b4a      	ldr	r3, [pc, #296]	; (8001e24 <HAL_RCC_OscConfig+0x280>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d116      	bne.n	8001d34 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d06:	4b47      	ldr	r3, [pc, #284]	; (8001e24 <HAL_RCC_OscConfig+0x280>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d005      	beq.n	8001d1e <HAL_RCC_OscConfig+0x17a>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d001      	beq.n	8001d1e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e1df      	b.n	80020de <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d1e:	4b41      	ldr	r3, [pc, #260]	; (8001e24 <HAL_RCC_OscConfig+0x280>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	00db      	lsls	r3, r3, #3
 8001d2c:	493d      	ldr	r1, [pc, #244]	; (8001e24 <HAL_RCC_OscConfig+0x280>)
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d32:	e040      	b.n	8001db6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d023      	beq.n	8001d84 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d3c:	4b39      	ldr	r3, [pc, #228]	; (8001e24 <HAL_RCC_OscConfig+0x280>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a38      	ldr	r2, [pc, #224]	; (8001e24 <HAL_RCC_OscConfig+0x280>)
 8001d42:	f043 0301 	orr.w	r3, r3, #1
 8001d46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d48:	f7ff fc24 	bl	8001594 <HAL_GetTick>
 8001d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d4e:	e008      	b.n	8001d62 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d50:	f7ff fc20 	bl	8001594 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e1bd      	b.n	80020de <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d62:	4b30      	ldr	r3, [pc, #192]	; (8001e24 <HAL_RCC_OscConfig+0x280>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d0f0      	beq.n	8001d50 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d6e:	4b2d      	ldr	r3, [pc, #180]	; (8001e24 <HAL_RCC_OscConfig+0x280>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	00db      	lsls	r3, r3, #3
 8001d7c:	4929      	ldr	r1, [pc, #164]	; (8001e24 <HAL_RCC_OscConfig+0x280>)
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	600b      	str	r3, [r1, #0]
 8001d82:	e018      	b.n	8001db6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d84:	4b27      	ldr	r3, [pc, #156]	; (8001e24 <HAL_RCC_OscConfig+0x280>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a26      	ldr	r2, [pc, #152]	; (8001e24 <HAL_RCC_OscConfig+0x280>)
 8001d8a:	f023 0301 	bic.w	r3, r3, #1
 8001d8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d90:	f7ff fc00 	bl	8001594 <HAL_GetTick>
 8001d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d96:	e008      	b.n	8001daa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d98:	f7ff fbfc 	bl	8001594 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e199      	b.n	80020de <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001daa:	4b1e      	ldr	r3, [pc, #120]	; (8001e24 <HAL_RCC_OscConfig+0x280>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d1f0      	bne.n	8001d98 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0308 	and.w	r3, r3, #8
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d038      	beq.n	8001e34 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	695b      	ldr	r3, [r3, #20]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d019      	beq.n	8001dfe <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dca:	4b16      	ldr	r3, [pc, #88]	; (8001e24 <HAL_RCC_OscConfig+0x280>)
 8001dcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dce:	4a15      	ldr	r2, [pc, #84]	; (8001e24 <HAL_RCC_OscConfig+0x280>)
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dd6:	f7ff fbdd 	bl	8001594 <HAL_GetTick>
 8001dda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ddc:	e008      	b.n	8001df0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dde:	f7ff fbd9 	bl	8001594 <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d901      	bls.n	8001df0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e176      	b.n	80020de <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001df0:	4b0c      	ldr	r3, [pc, #48]	; (8001e24 <HAL_RCC_OscConfig+0x280>)
 8001df2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001df4:	f003 0302 	and.w	r3, r3, #2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d0f0      	beq.n	8001dde <HAL_RCC_OscConfig+0x23a>
 8001dfc:	e01a      	b.n	8001e34 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dfe:	4b09      	ldr	r3, [pc, #36]	; (8001e24 <HAL_RCC_OscConfig+0x280>)
 8001e00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e02:	4a08      	ldr	r2, [pc, #32]	; (8001e24 <HAL_RCC_OscConfig+0x280>)
 8001e04:	f023 0301 	bic.w	r3, r3, #1
 8001e08:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e0a:	f7ff fbc3 	bl	8001594 <HAL_GetTick>
 8001e0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e10:	e00a      	b.n	8001e28 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e12:	f7ff fbbf 	bl	8001594 <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d903      	bls.n	8001e28 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e15c      	b.n	80020de <HAL_RCC_OscConfig+0x53a>
 8001e24:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e28:	4b91      	ldr	r3, [pc, #580]	; (8002070 <HAL_RCC_OscConfig+0x4cc>)
 8001e2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e2c:	f003 0302 	and.w	r3, r3, #2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d1ee      	bne.n	8001e12 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0304 	and.w	r3, r3, #4
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	f000 80a4 	beq.w	8001f8a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e42:	4b8b      	ldr	r3, [pc, #556]	; (8002070 <HAL_RCC_OscConfig+0x4cc>)
 8001e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d10d      	bne.n	8001e6a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e4e:	4b88      	ldr	r3, [pc, #544]	; (8002070 <HAL_RCC_OscConfig+0x4cc>)
 8001e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e52:	4a87      	ldr	r2, [pc, #540]	; (8002070 <HAL_RCC_OscConfig+0x4cc>)
 8001e54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e58:	6413      	str	r3, [r2, #64]	; 0x40
 8001e5a:	4b85      	ldr	r3, [pc, #532]	; (8002070 <HAL_RCC_OscConfig+0x4cc>)
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e62:	60bb      	str	r3, [r7, #8]
 8001e64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e66:	2301      	movs	r3, #1
 8001e68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e6a:	4b82      	ldr	r3, [pc, #520]	; (8002074 <HAL_RCC_OscConfig+0x4d0>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d118      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001e76:	4b7f      	ldr	r3, [pc, #508]	; (8002074 <HAL_RCC_OscConfig+0x4d0>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a7e      	ldr	r2, [pc, #504]	; (8002074 <HAL_RCC_OscConfig+0x4d0>)
 8001e7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e82:	f7ff fb87 	bl	8001594 <HAL_GetTick>
 8001e86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e88:	e008      	b.n	8001e9c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e8a:	f7ff fb83 	bl	8001594 <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	2b64      	cmp	r3, #100	; 0x64
 8001e96:	d901      	bls.n	8001e9c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e120      	b.n	80020de <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e9c:	4b75      	ldr	r3, [pc, #468]	; (8002074 <HAL_RCC_OscConfig+0x4d0>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d0f0      	beq.n	8001e8a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d106      	bne.n	8001ebe <HAL_RCC_OscConfig+0x31a>
 8001eb0:	4b6f      	ldr	r3, [pc, #444]	; (8002070 <HAL_RCC_OscConfig+0x4cc>)
 8001eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eb4:	4a6e      	ldr	r2, [pc, #440]	; (8002070 <HAL_RCC_OscConfig+0x4cc>)
 8001eb6:	f043 0301 	orr.w	r3, r3, #1
 8001eba:	6713      	str	r3, [r2, #112]	; 0x70
 8001ebc:	e02d      	b.n	8001f1a <HAL_RCC_OscConfig+0x376>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d10c      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x33c>
 8001ec6:	4b6a      	ldr	r3, [pc, #424]	; (8002070 <HAL_RCC_OscConfig+0x4cc>)
 8001ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eca:	4a69      	ldr	r2, [pc, #420]	; (8002070 <HAL_RCC_OscConfig+0x4cc>)
 8001ecc:	f023 0301 	bic.w	r3, r3, #1
 8001ed0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ed2:	4b67      	ldr	r3, [pc, #412]	; (8002070 <HAL_RCC_OscConfig+0x4cc>)
 8001ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ed6:	4a66      	ldr	r2, [pc, #408]	; (8002070 <HAL_RCC_OscConfig+0x4cc>)
 8001ed8:	f023 0304 	bic.w	r3, r3, #4
 8001edc:	6713      	str	r3, [r2, #112]	; 0x70
 8001ede:	e01c      	b.n	8001f1a <HAL_RCC_OscConfig+0x376>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	2b05      	cmp	r3, #5
 8001ee6:	d10c      	bne.n	8001f02 <HAL_RCC_OscConfig+0x35e>
 8001ee8:	4b61      	ldr	r3, [pc, #388]	; (8002070 <HAL_RCC_OscConfig+0x4cc>)
 8001eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eec:	4a60      	ldr	r2, [pc, #384]	; (8002070 <HAL_RCC_OscConfig+0x4cc>)
 8001eee:	f043 0304 	orr.w	r3, r3, #4
 8001ef2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ef4:	4b5e      	ldr	r3, [pc, #376]	; (8002070 <HAL_RCC_OscConfig+0x4cc>)
 8001ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ef8:	4a5d      	ldr	r2, [pc, #372]	; (8002070 <HAL_RCC_OscConfig+0x4cc>)
 8001efa:	f043 0301 	orr.w	r3, r3, #1
 8001efe:	6713      	str	r3, [r2, #112]	; 0x70
 8001f00:	e00b      	b.n	8001f1a <HAL_RCC_OscConfig+0x376>
 8001f02:	4b5b      	ldr	r3, [pc, #364]	; (8002070 <HAL_RCC_OscConfig+0x4cc>)
 8001f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f06:	4a5a      	ldr	r2, [pc, #360]	; (8002070 <HAL_RCC_OscConfig+0x4cc>)
 8001f08:	f023 0301 	bic.w	r3, r3, #1
 8001f0c:	6713      	str	r3, [r2, #112]	; 0x70
 8001f0e:	4b58      	ldr	r3, [pc, #352]	; (8002070 <HAL_RCC_OscConfig+0x4cc>)
 8001f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f12:	4a57      	ldr	r2, [pc, #348]	; (8002070 <HAL_RCC_OscConfig+0x4cc>)
 8001f14:	f023 0304 	bic.w	r3, r3, #4
 8001f18:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d015      	beq.n	8001f4e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f22:	f7ff fb37 	bl	8001594 <HAL_GetTick>
 8001f26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f28:	e00a      	b.n	8001f40 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f2a:	f7ff fb33 	bl	8001594 <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d901      	bls.n	8001f40 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e0ce      	b.n	80020de <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f40:	4b4b      	ldr	r3, [pc, #300]	; (8002070 <HAL_RCC_OscConfig+0x4cc>)
 8001f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f44:	f003 0302 	and.w	r3, r3, #2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d0ee      	beq.n	8001f2a <HAL_RCC_OscConfig+0x386>
 8001f4c:	e014      	b.n	8001f78 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f4e:	f7ff fb21 	bl	8001594 <HAL_GetTick>
 8001f52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f54:	e00a      	b.n	8001f6c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f56:	f7ff fb1d 	bl	8001594 <HAL_GetTick>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d901      	bls.n	8001f6c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e0b8      	b.n	80020de <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f6c:	4b40      	ldr	r3, [pc, #256]	; (8002070 <HAL_RCC_OscConfig+0x4cc>)
 8001f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f70:	f003 0302 	and.w	r3, r3, #2
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d1ee      	bne.n	8001f56 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f78:	7dfb      	ldrb	r3, [r7, #23]
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d105      	bne.n	8001f8a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f7e:	4b3c      	ldr	r3, [pc, #240]	; (8002070 <HAL_RCC_OscConfig+0x4cc>)
 8001f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f82:	4a3b      	ldr	r2, [pc, #236]	; (8002070 <HAL_RCC_OscConfig+0x4cc>)
 8001f84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f88:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	699b      	ldr	r3, [r3, #24]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f000 80a4 	beq.w	80020dc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f94:	4b36      	ldr	r3, [pc, #216]	; (8002070 <HAL_RCC_OscConfig+0x4cc>)
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	f003 030c 	and.w	r3, r3, #12
 8001f9c:	2b08      	cmp	r3, #8
 8001f9e:	d06b      	beq.n	8002078 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	699b      	ldr	r3, [r3, #24]
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d149      	bne.n	800203c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fa8:	4b31      	ldr	r3, [pc, #196]	; (8002070 <HAL_RCC_OscConfig+0x4cc>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a30      	ldr	r2, [pc, #192]	; (8002070 <HAL_RCC_OscConfig+0x4cc>)
 8001fae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb4:	f7ff faee 	bl	8001594 <HAL_GetTick>
 8001fb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fba:	e008      	b.n	8001fce <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fbc:	f7ff faea 	bl	8001594 <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e087      	b.n	80020de <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fce:	4b28      	ldr	r3, [pc, #160]	; (8002070 <HAL_RCC_OscConfig+0x4cc>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d1f0      	bne.n	8001fbc <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	69da      	ldr	r2, [r3, #28]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a1b      	ldr	r3, [r3, #32]
 8001fe2:	431a      	orrs	r2, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe8:	019b      	lsls	r3, r3, #6
 8001fea:	431a      	orrs	r2, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff0:	085b      	lsrs	r3, r3, #1
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	041b      	lsls	r3, r3, #16
 8001ff6:	431a      	orrs	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ffc:	061b      	lsls	r3, r3, #24
 8001ffe:	4313      	orrs	r3, r2
 8002000:	4a1b      	ldr	r2, [pc, #108]	; (8002070 <HAL_RCC_OscConfig+0x4cc>)
 8002002:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002006:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002008:	4b19      	ldr	r3, [pc, #100]	; (8002070 <HAL_RCC_OscConfig+0x4cc>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a18      	ldr	r2, [pc, #96]	; (8002070 <HAL_RCC_OscConfig+0x4cc>)
 800200e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002012:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002014:	f7ff fabe 	bl	8001594 <HAL_GetTick>
 8002018:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800201a:	e008      	b.n	800202e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800201c:	f7ff faba 	bl	8001594 <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	2b02      	cmp	r3, #2
 8002028:	d901      	bls.n	800202e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e057      	b.n	80020de <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800202e:	4b10      	ldr	r3, [pc, #64]	; (8002070 <HAL_RCC_OscConfig+0x4cc>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d0f0      	beq.n	800201c <HAL_RCC_OscConfig+0x478>
 800203a:	e04f      	b.n	80020dc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800203c:	4b0c      	ldr	r3, [pc, #48]	; (8002070 <HAL_RCC_OscConfig+0x4cc>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a0b      	ldr	r2, [pc, #44]	; (8002070 <HAL_RCC_OscConfig+0x4cc>)
 8002042:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002046:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002048:	f7ff faa4 	bl	8001594 <HAL_GetTick>
 800204c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800204e:	e008      	b.n	8002062 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002050:	f7ff faa0 	bl	8001594 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b02      	cmp	r3, #2
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e03d      	b.n	80020de <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002062:	4b03      	ldr	r3, [pc, #12]	; (8002070 <HAL_RCC_OscConfig+0x4cc>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1f0      	bne.n	8002050 <HAL_RCC_OscConfig+0x4ac>
 800206e:	e035      	b.n	80020dc <HAL_RCC_OscConfig+0x538>
 8002070:	40023800 	.word	0x40023800
 8002074:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002078:	4b1b      	ldr	r3, [pc, #108]	; (80020e8 <HAL_RCC_OscConfig+0x544>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	699b      	ldr	r3, [r3, #24]
 8002082:	2b01      	cmp	r3, #1
 8002084:	d028      	beq.n	80020d8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002090:	429a      	cmp	r2, r3
 8002092:	d121      	bne.n	80020d8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800209e:	429a      	cmp	r2, r3
 80020a0:	d11a      	bne.n	80020d8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020a2:	68fa      	ldr	r2, [r7, #12]
 80020a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80020a8:	4013      	ands	r3, r2
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80020ae:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d111      	bne.n	80020d8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020be:	085b      	lsrs	r3, r3, #1
 80020c0:	3b01      	subs	r3, #1
 80020c2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d107      	bne.n	80020d8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d001      	beq.n	80020dc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e000      	b.n	80020de <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3718      	adds	r7, #24
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	40023800 	.word	0x40023800

080020ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80020f6:	2300      	movs	r3, #0
 80020f8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d101      	bne.n	8002104 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e0d0      	b.n	80022a6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002104:	4b6a      	ldr	r3, [pc, #424]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 030f 	and.w	r3, r3, #15
 800210c:	683a      	ldr	r2, [r7, #0]
 800210e:	429a      	cmp	r2, r3
 8002110:	d910      	bls.n	8002134 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002112:	4b67      	ldr	r3, [pc, #412]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f023 020f 	bic.w	r2, r3, #15
 800211a:	4965      	ldr	r1, [pc, #404]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	4313      	orrs	r3, r2
 8002120:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002122:	4b63      	ldr	r3, [pc, #396]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 030f 	and.w	r3, r3, #15
 800212a:	683a      	ldr	r2, [r7, #0]
 800212c:	429a      	cmp	r2, r3
 800212e:	d001      	beq.n	8002134 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e0b8      	b.n	80022a6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0302 	and.w	r3, r3, #2
 800213c:	2b00      	cmp	r3, #0
 800213e:	d020      	beq.n	8002182 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0304 	and.w	r3, r3, #4
 8002148:	2b00      	cmp	r3, #0
 800214a:	d005      	beq.n	8002158 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800214c:	4b59      	ldr	r3, [pc, #356]	; (80022b4 <HAL_RCC_ClockConfig+0x1c8>)
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	4a58      	ldr	r2, [pc, #352]	; (80022b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002152:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002156:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0308 	and.w	r3, r3, #8
 8002160:	2b00      	cmp	r3, #0
 8002162:	d005      	beq.n	8002170 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002164:	4b53      	ldr	r3, [pc, #332]	; (80022b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	4a52      	ldr	r2, [pc, #328]	; (80022b4 <HAL_RCC_ClockConfig+0x1c8>)
 800216a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800216e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002170:	4b50      	ldr	r3, [pc, #320]	; (80022b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	494d      	ldr	r1, [pc, #308]	; (80022b4 <HAL_RCC_ClockConfig+0x1c8>)
 800217e:	4313      	orrs	r3, r2
 8002180:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	2b00      	cmp	r3, #0
 800218c:	d040      	beq.n	8002210 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d107      	bne.n	80021a6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002196:	4b47      	ldr	r3, [pc, #284]	; (80022b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d115      	bne.n	80021ce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e07f      	b.n	80022a6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d107      	bne.n	80021be <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ae:	4b41      	ldr	r3, [pc, #260]	; (80022b4 <HAL_RCC_ClockConfig+0x1c8>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d109      	bne.n	80021ce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e073      	b.n	80022a6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021be:	4b3d      	ldr	r3, [pc, #244]	; (80022b4 <HAL_RCC_ClockConfig+0x1c8>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e06b      	b.n	80022a6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021ce:	4b39      	ldr	r3, [pc, #228]	; (80022b4 <HAL_RCC_ClockConfig+0x1c8>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f023 0203 	bic.w	r2, r3, #3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	4936      	ldr	r1, [pc, #216]	; (80022b4 <HAL_RCC_ClockConfig+0x1c8>)
 80021dc:	4313      	orrs	r3, r2
 80021de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021e0:	f7ff f9d8 	bl	8001594 <HAL_GetTick>
 80021e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021e6:	e00a      	b.n	80021fe <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021e8:	f7ff f9d4 	bl	8001594 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e053      	b.n	80022a6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021fe:	4b2d      	ldr	r3, [pc, #180]	; (80022b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f003 020c 	and.w	r2, r3, #12
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	429a      	cmp	r2, r3
 800220e:	d1eb      	bne.n	80021e8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002210:	4b27      	ldr	r3, [pc, #156]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 030f 	and.w	r3, r3, #15
 8002218:	683a      	ldr	r2, [r7, #0]
 800221a:	429a      	cmp	r2, r3
 800221c:	d210      	bcs.n	8002240 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800221e:	4b24      	ldr	r3, [pc, #144]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f023 020f 	bic.w	r2, r3, #15
 8002226:	4922      	ldr	r1, [pc, #136]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	4313      	orrs	r3, r2
 800222c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800222e:	4b20      	ldr	r3, [pc, #128]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 030f 	and.w	r3, r3, #15
 8002236:	683a      	ldr	r2, [r7, #0]
 8002238:	429a      	cmp	r2, r3
 800223a:	d001      	beq.n	8002240 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e032      	b.n	80022a6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0304 	and.w	r3, r3, #4
 8002248:	2b00      	cmp	r3, #0
 800224a:	d008      	beq.n	800225e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800224c:	4b19      	ldr	r3, [pc, #100]	; (80022b4 <HAL_RCC_ClockConfig+0x1c8>)
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	4916      	ldr	r1, [pc, #88]	; (80022b4 <HAL_RCC_ClockConfig+0x1c8>)
 800225a:	4313      	orrs	r3, r2
 800225c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0308 	and.w	r3, r3, #8
 8002266:	2b00      	cmp	r3, #0
 8002268:	d009      	beq.n	800227e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800226a:	4b12      	ldr	r3, [pc, #72]	; (80022b4 <HAL_RCC_ClockConfig+0x1c8>)
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	00db      	lsls	r3, r3, #3
 8002278:	490e      	ldr	r1, [pc, #56]	; (80022b4 <HAL_RCC_ClockConfig+0x1c8>)
 800227a:	4313      	orrs	r3, r2
 800227c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800227e:	f000 f821 	bl	80022c4 <HAL_RCC_GetSysClockFreq>
 8002282:	4602      	mov	r2, r0
 8002284:	4b0b      	ldr	r3, [pc, #44]	; (80022b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	091b      	lsrs	r3, r3, #4
 800228a:	f003 030f 	and.w	r3, r3, #15
 800228e:	490a      	ldr	r1, [pc, #40]	; (80022b8 <HAL_RCC_ClockConfig+0x1cc>)
 8002290:	5ccb      	ldrb	r3, [r1, r3]
 8002292:	fa22 f303 	lsr.w	r3, r2, r3
 8002296:	4a09      	ldr	r2, [pc, #36]	; (80022bc <HAL_RCC_ClockConfig+0x1d0>)
 8002298:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800229a:	4b09      	ldr	r3, [pc, #36]	; (80022c0 <HAL_RCC_ClockConfig+0x1d4>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4618      	mov	r0, r3
 80022a0:	f7ff f934 	bl	800150c <HAL_InitTick>

  return HAL_OK;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	40023c00 	.word	0x40023c00
 80022b4:	40023800 	.word	0x40023800
 80022b8:	08005e4c 	.word	0x08005e4c
 80022bc:	20000000 	.word	0x20000000
 80022c0:	20000004 	.word	0x20000004

080022c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022c8:	b090      	sub	sp, #64	; 0x40
 80022ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80022cc:	2300      	movs	r3, #0
 80022ce:	637b      	str	r3, [r7, #52]	; 0x34
 80022d0:	2300      	movs	r3, #0
 80022d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022d4:	2300      	movs	r3, #0
 80022d6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80022d8:	2300      	movs	r3, #0
 80022da:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022dc:	4b59      	ldr	r3, [pc, #356]	; (8002444 <HAL_RCC_GetSysClockFreq+0x180>)
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f003 030c 	and.w	r3, r3, #12
 80022e4:	2b08      	cmp	r3, #8
 80022e6:	d00d      	beq.n	8002304 <HAL_RCC_GetSysClockFreq+0x40>
 80022e8:	2b08      	cmp	r3, #8
 80022ea:	f200 80a1 	bhi.w	8002430 <HAL_RCC_GetSysClockFreq+0x16c>
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d002      	beq.n	80022f8 <HAL_RCC_GetSysClockFreq+0x34>
 80022f2:	2b04      	cmp	r3, #4
 80022f4:	d003      	beq.n	80022fe <HAL_RCC_GetSysClockFreq+0x3a>
 80022f6:	e09b      	b.n	8002430 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022f8:	4b53      	ldr	r3, [pc, #332]	; (8002448 <HAL_RCC_GetSysClockFreq+0x184>)
 80022fa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80022fc:	e09b      	b.n	8002436 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022fe:	4b53      	ldr	r3, [pc, #332]	; (800244c <HAL_RCC_GetSysClockFreq+0x188>)
 8002300:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002302:	e098      	b.n	8002436 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002304:	4b4f      	ldr	r3, [pc, #316]	; (8002444 <HAL_RCC_GetSysClockFreq+0x180>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800230c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800230e:	4b4d      	ldr	r3, [pc, #308]	; (8002444 <HAL_RCC_GetSysClockFreq+0x180>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d028      	beq.n	800236c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800231a:	4b4a      	ldr	r3, [pc, #296]	; (8002444 <HAL_RCC_GetSysClockFreq+0x180>)
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	099b      	lsrs	r3, r3, #6
 8002320:	2200      	movs	r2, #0
 8002322:	623b      	str	r3, [r7, #32]
 8002324:	627a      	str	r2, [r7, #36]	; 0x24
 8002326:	6a3b      	ldr	r3, [r7, #32]
 8002328:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800232c:	2100      	movs	r1, #0
 800232e:	4b47      	ldr	r3, [pc, #284]	; (800244c <HAL_RCC_GetSysClockFreq+0x188>)
 8002330:	fb03 f201 	mul.w	r2, r3, r1
 8002334:	2300      	movs	r3, #0
 8002336:	fb00 f303 	mul.w	r3, r0, r3
 800233a:	4413      	add	r3, r2
 800233c:	4a43      	ldr	r2, [pc, #268]	; (800244c <HAL_RCC_GetSysClockFreq+0x188>)
 800233e:	fba0 1202 	umull	r1, r2, r0, r2
 8002342:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002344:	460a      	mov	r2, r1
 8002346:	62ba      	str	r2, [r7, #40]	; 0x28
 8002348:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800234a:	4413      	add	r3, r2
 800234c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800234e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002350:	2200      	movs	r2, #0
 8002352:	61bb      	str	r3, [r7, #24]
 8002354:	61fa      	str	r2, [r7, #28]
 8002356:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800235a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800235e:	f7fd ffa7 	bl	80002b0 <__aeabi_uldivmod>
 8002362:	4602      	mov	r2, r0
 8002364:	460b      	mov	r3, r1
 8002366:	4613      	mov	r3, r2
 8002368:	63fb      	str	r3, [r7, #60]	; 0x3c
 800236a:	e053      	b.n	8002414 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800236c:	4b35      	ldr	r3, [pc, #212]	; (8002444 <HAL_RCC_GetSysClockFreq+0x180>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	099b      	lsrs	r3, r3, #6
 8002372:	2200      	movs	r2, #0
 8002374:	613b      	str	r3, [r7, #16]
 8002376:	617a      	str	r2, [r7, #20]
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800237e:	f04f 0b00 	mov.w	fp, #0
 8002382:	4652      	mov	r2, sl
 8002384:	465b      	mov	r3, fp
 8002386:	f04f 0000 	mov.w	r0, #0
 800238a:	f04f 0100 	mov.w	r1, #0
 800238e:	0159      	lsls	r1, r3, #5
 8002390:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002394:	0150      	lsls	r0, r2, #5
 8002396:	4602      	mov	r2, r0
 8002398:	460b      	mov	r3, r1
 800239a:	ebb2 080a 	subs.w	r8, r2, sl
 800239e:	eb63 090b 	sbc.w	r9, r3, fp
 80023a2:	f04f 0200 	mov.w	r2, #0
 80023a6:	f04f 0300 	mov.w	r3, #0
 80023aa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80023ae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80023b2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80023b6:	ebb2 0408 	subs.w	r4, r2, r8
 80023ba:	eb63 0509 	sbc.w	r5, r3, r9
 80023be:	f04f 0200 	mov.w	r2, #0
 80023c2:	f04f 0300 	mov.w	r3, #0
 80023c6:	00eb      	lsls	r3, r5, #3
 80023c8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023cc:	00e2      	lsls	r2, r4, #3
 80023ce:	4614      	mov	r4, r2
 80023d0:	461d      	mov	r5, r3
 80023d2:	eb14 030a 	adds.w	r3, r4, sl
 80023d6:	603b      	str	r3, [r7, #0]
 80023d8:	eb45 030b 	adc.w	r3, r5, fp
 80023dc:	607b      	str	r3, [r7, #4]
 80023de:	f04f 0200 	mov.w	r2, #0
 80023e2:	f04f 0300 	mov.w	r3, #0
 80023e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023ea:	4629      	mov	r1, r5
 80023ec:	028b      	lsls	r3, r1, #10
 80023ee:	4621      	mov	r1, r4
 80023f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023f4:	4621      	mov	r1, r4
 80023f6:	028a      	lsls	r2, r1, #10
 80023f8:	4610      	mov	r0, r2
 80023fa:	4619      	mov	r1, r3
 80023fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023fe:	2200      	movs	r2, #0
 8002400:	60bb      	str	r3, [r7, #8]
 8002402:	60fa      	str	r2, [r7, #12]
 8002404:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002408:	f7fd ff52 	bl	80002b0 <__aeabi_uldivmod>
 800240c:	4602      	mov	r2, r0
 800240e:	460b      	mov	r3, r1
 8002410:	4613      	mov	r3, r2
 8002412:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002414:	4b0b      	ldr	r3, [pc, #44]	; (8002444 <HAL_RCC_GetSysClockFreq+0x180>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	0c1b      	lsrs	r3, r3, #16
 800241a:	f003 0303 	and.w	r3, r3, #3
 800241e:	3301      	adds	r3, #1
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002424:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002428:	fbb2 f3f3 	udiv	r3, r2, r3
 800242c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800242e:	e002      	b.n	8002436 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002430:	4b05      	ldr	r3, [pc, #20]	; (8002448 <HAL_RCC_GetSysClockFreq+0x184>)
 8002432:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002434:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002438:	4618      	mov	r0, r3
 800243a:	3740      	adds	r7, #64	; 0x40
 800243c:	46bd      	mov	sp, r7
 800243e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002442:	bf00      	nop
 8002444:	40023800 	.word	0x40023800
 8002448:	00f42400 	.word	0x00f42400
 800244c:	017d7840 	.word	0x017d7840

08002450 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002454:	4b03      	ldr	r3, [pc, #12]	; (8002464 <HAL_RCC_GetHCLKFreq+0x14>)
 8002456:	681b      	ldr	r3, [r3, #0]
}
 8002458:	4618      	mov	r0, r3
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	20000000 	.word	0x20000000

08002468 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800246c:	f7ff fff0 	bl	8002450 <HAL_RCC_GetHCLKFreq>
 8002470:	4602      	mov	r2, r0
 8002472:	4b05      	ldr	r3, [pc, #20]	; (8002488 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	0a9b      	lsrs	r3, r3, #10
 8002478:	f003 0307 	and.w	r3, r3, #7
 800247c:	4903      	ldr	r1, [pc, #12]	; (800248c <HAL_RCC_GetPCLK1Freq+0x24>)
 800247e:	5ccb      	ldrb	r3, [r1, r3]
 8002480:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002484:	4618      	mov	r0, r3
 8002486:	bd80      	pop	{r7, pc}
 8002488:	40023800 	.word	0x40023800
 800248c:	08005e5c 	.word	0x08005e5c

08002490 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002494:	f7ff ffdc 	bl	8002450 <HAL_RCC_GetHCLKFreq>
 8002498:	4602      	mov	r2, r0
 800249a:	4b05      	ldr	r3, [pc, #20]	; (80024b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	0b5b      	lsrs	r3, r3, #13
 80024a0:	f003 0307 	and.w	r3, r3, #7
 80024a4:	4903      	ldr	r1, [pc, #12]	; (80024b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024a6:	5ccb      	ldrb	r3, [r1, r3]
 80024a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	40023800 	.word	0x40023800
 80024b4:	08005e5c 	.word	0x08005e5c

080024b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b088      	sub	sp, #32
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80024c0:	2300      	movs	r3, #0
 80024c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80024c4:	2300      	movs	r3, #0
 80024c6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80024c8:	2300      	movs	r3, #0
 80024ca:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80024cc:	2300      	movs	r3, #0
 80024ce:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80024d0:	2300      	movs	r3, #0
 80024d2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0301 	and.w	r3, r3, #1
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d012      	beq.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80024e0:	4b69      	ldr	r3, [pc, #420]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	4a68      	ldr	r2, [pc, #416]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024e6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80024ea:	6093      	str	r3, [r2, #8]
 80024ec:	4b66      	ldr	r3, [pc, #408]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024f4:	4964      	ldr	r1, [pc, #400]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d101      	bne.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002502:	2301      	movs	r3, #1
 8002504:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d017      	beq.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002512:	4b5d      	ldr	r3, [pc, #372]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002514:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002518:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002520:	4959      	ldr	r1, [pc, #356]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002522:	4313      	orrs	r3, r2
 8002524:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800252c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002530:	d101      	bne.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002532:	2301      	movs	r3, #1
 8002534:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800253a:	2b00      	cmp	r3, #0
 800253c:	d101      	bne.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800253e:	2301      	movs	r3, #1
 8002540:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d017      	beq.n	800257e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800254e:	4b4e      	ldr	r3, [pc, #312]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002550:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002554:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255c:	494a      	ldr	r1, [pc, #296]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800255e:	4313      	orrs	r3, r2
 8002560:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002568:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800256c:	d101      	bne.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800256e:	2301      	movs	r3, #1
 8002570:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	2b00      	cmp	r3, #0
 8002578:	d101      	bne.n	800257e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800257a:	2301      	movs	r3, #1
 800257c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d001      	beq.n	800258e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800258a:	2301      	movs	r3, #1
 800258c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0320 	and.w	r3, r3, #32
 8002596:	2b00      	cmp	r3, #0
 8002598:	f000 808b 	beq.w	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800259c:	4b3a      	ldr	r3, [pc, #232]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800259e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a0:	4a39      	ldr	r2, [pc, #228]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025a6:	6413      	str	r3, [r2, #64]	; 0x40
 80025a8:	4b37      	ldr	r3, [pc, #220]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025b0:	60bb      	str	r3, [r7, #8]
 80025b2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80025b4:	4b35      	ldr	r3, [pc, #212]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a34      	ldr	r2, [pc, #208]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80025ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025c0:	f7fe ffe8 	bl	8001594 <HAL_GetTick>
 80025c4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80025c6:	e008      	b.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025c8:	f7fe ffe4 	bl	8001594 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b64      	cmp	r3, #100	; 0x64
 80025d4:	d901      	bls.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e357      	b.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80025da:	4b2c      	ldr	r3, [pc, #176]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d0f0      	beq.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80025e6:	4b28      	ldr	r3, [pc, #160]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025ee:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d035      	beq.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	429a      	cmp	r2, r3
 8002602:	d02e      	beq.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002604:	4b20      	ldr	r3, [pc, #128]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002608:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800260c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800260e:	4b1e      	ldr	r3, [pc, #120]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002612:	4a1d      	ldr	r2, [pc, #116]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002618:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800261a:	4b1b      	ldr	r3, [pc, #108]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800261c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800261e:	4a1a      	ldr	r2, [pc, #104]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002620:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002624:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002626:	4a18      	ldr	r2, [pc, #96]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800262c:	4b16      	ldr	r3, [pc, #88]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800262e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	2b01      	cmp	r3, #1
 8002636:	d114      	bne.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002638:	f7fe ffac 	bl	8001594 <HAL_GetTick>
 800263c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800263e:	e00a      	b.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002640:	f7fe ffa8 	bl	8001594 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	f241 3288 	movw	r2, #5000	; 0x1388
 800264e:	4293      	cmp	r3, r2
 8002650:	d901      	bls.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e319      	b.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002656:	4b0c      	ldr	r3, [pc, #48]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d0ee      	beq.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002666:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800266a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800266e:	d111      	bne.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002670:	4b05      	ldr	r3, [pc, #20]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800267c:	4b04      	ldr	r3, [pc, #16]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800267e:	400b      	ands	r3, r1
 8002680:	4901      	ldr	r1, [pc, #4]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002682:	4313      	orrs	r3, r2
 8002684:	608b      	str	r3, [r1, #8]
 8002686:	e00b      	b.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002688:	40023800 	.word	0x40023800
 800268c:	40007000 	.word	0x40007000
 8002690:	0ffffcff 	.word	0x0ffffcff
 8002694:	4baa      	ldr	r3, [pc, #680]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	4aa9      	ldr	r2, [pc, #676]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800269a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800269e:	6093      	str	r3, [r2, #8]
 80026a0:	4ba7      	ldr	r3, [pc, #668]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026ac:	49a4      	ldr	r1, [pc, #656]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0310 	and.w	r3, r3, #16
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d010      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80026be:	4ba0      	ldr	r3, [pc, #640]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026c4:	4a9e      	ldr	r2, [pc, #632]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026ca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80026ce:	4b9c      	ldr	r3, [pc, #624]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026d0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d8:	4999      	ldr	r1, [pc, #612]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d00a      	beq.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026ec:	4b94      	ldr	r3, [pc, #592]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026f2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026fa:	4991      	ldr	r1, [pc, #580]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d00a      	beq.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800270e:	4b8c      	ldr	r3, [pc, #560]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002714:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800271c:	4988      	ldr	r1, [pc, #544]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800271e:	4313      	orrs	r3, r2
 8002720:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d00a      	beq.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002730:	4b83      	ldr	r3, [pc, #524]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002736:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800273e:	4980      	ldr	r1, [pc, #512]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002740:	4313      	orrs	r3, r2
 8002742:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d00a      	beq.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002752:	4b7b      	ldr	r3, [pc, #492]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002758:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002760:	4977      	ldr	r1, [pc, #476]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002762:	4313      	orrs	r3, r2
 8002764:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002770:	2b00      	cmp	r3, #0
 8002772:	d00a      	beq.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002774:	4b72      	ldr	r3, [pc, #456]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800277a:	f023 0203 	bic.w	r2, r3, #3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002782:	496f      	ldr	r1, [pc, #444]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002784:	4313      	orrs	r3, r2
 8002786:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002792:	2b00      	cmp	r3, #0
 8002794:	d00a      	beq.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002796:	4b6a      	ldr	r3, [pc, #424]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002798:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800279c:	f023 020c 	bic.w	r2, r3, #12
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027a4:	4966      	ldr	r1, [pc, #408]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d00a      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80027b8:	4b61      	ldr	r3, [pc, #388]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027be:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027c6:	495e      	ldr	r1, [pc, #376]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027c8:	4313      	orrs	r3, r2
 80027ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d00a      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80027da:	4b59      	ldr	r3, [pc, #356]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027e0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027e8:	4955      	ldr	r1, [pc, #340]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d00a      	beq.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80027fc:	4b50      	ldr	r3, [pc, #320]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002802:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800280a:	494d      	ldr	r1, [pc, #308]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800280c:	4313      	orrs	r3, r2
 800280e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800281a:	2b00      	cmp	r3, #0
 800281c:	d00a      	beq.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800281e:	4b48      	ldr	r3, [pc, #288]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002824:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800282c:	4944      	ldr	r1, [pc, #272]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800282e:	4313      	orrs	r3, r2
 8002830:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d00a      	beq.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002840:	4b3f      	ldr	r3, [pc, #252]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002846:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800284e:	493c      	ldr	r1, [pc, #240]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002850:	4313      	orrs	r3, r2
 8002852:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d00a      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002862:	4b37      	ldr	r3, [pc, #220]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002864:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002868:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002870:	4933      	ldr	r1, [pc, #204]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002872:	4313      	orrs	r3, r2
 8002874:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d00a      	beq.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002884:	4b2e      	ldr	r3, [pc, #184]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800288a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002892:	492b      	ldr	r1, [pc, #172]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002894:	4313      	orrs	r3, r2
 8002896:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d011      	beq.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80028a6:	4b26      	ldr	r3, [pc, #152]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ac:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028b4:	4922      	ldr	r1, [pc, #136]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028c4:	d101      	bne.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80028c6:	2301      	movs	r3, #1
 80028c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0308 	and.w	r3, r3, #8
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80028d6:	2301      	movs	r3, #1
 80028d8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d00a      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028e6:	4b16      	ldr	r3, [pc, #88]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ec:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028f4:	4912      	ldr	r1, [pc, #72]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d00b      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002908:	4b0d      	ldr	r3, [pc, #52]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800290a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800290e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002918:	4909      	ldr	r1, [pc, #36]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800291a:	4313      	orrs	r3, r2
 800291c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	2b01      	cmp	r3, #1
 8002924:	d006      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800292e:	2b00      	cmp	r3, #0
 8002930:	f000 80d9 	beq.w	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002934:	4b02      	ldr	r3, [pc, #8]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a01      	ldr	r2, [pc, #4]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800293a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800293e:	e001      	b.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002940:	40023800 	.word	0x40023800
 8002944:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002946:	f7fe fe25 	bl	8001594 <HAL_GetTick>
 800294a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800294c:	e008      	b.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800294e:	f7fe fe21 	bl	8001594 <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	2b64      	cmp	r3, #100	; 0x64
 800295a:	d901      	bls.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e194      	b.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002960:	4b6c      	ldr	r3, [pc, #432]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d1f0      	bne.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0301 	and.w	r3, r3, #1
 8002974:	2b00      	cmp	r3, #0
 8002976:	d021      	beq.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800297c:	2b00      	cmp	r3, #0
 800297e:	d11d      	bne.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002980:	4b64      	ldr	r3, [pc, #400]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002982:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002986:	0c1b      	lsrs	r3, r3, #16
 8002988:	f003 0303 	and.w	r3, r3, #3
 800298c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800298e:	4b61      	ldr	r3, [pc, #388]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002990:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002994:	0e1b      	lsrs	r3, r3, #24
 8002996:	f003 030f 	and.w	r3, r3, #15
 800299a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	019a      	lsls	r2, r3, #6
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	041b      	lsls	r3, r3, #16
 80029a6:	431a      	orrs	r2, r3
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	061b      	lsls	r3, r3, #24
 80029ac:	431a      	orrs	r2, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	071b      	lsls	r3, r3, #28
 80029b4:	4957      	ldr	r1, [pc, #348]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d004      	beq.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029d0:	d00a      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d02e      	beq.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029e6:	d129      	bne.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80029e8:	4b4a      	ldr	r3, [pc, #296]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029ee:	0c1b      	lsrs	r3, r3, #16
 80029f0:	f003 0303 	and.w	r3, r3, #3
 80029f4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80029f6:	4b47      	ldr	r3, [pc, #284]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029fc:	0f1b      	lsrs	r3, r3, #28
 80029fe:	f003 0307 	and.w	r3, r3, #7
 8002a02:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	019a      	lsls	r2, r3, #6
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	041b      	lsls	r3, r3, #16
 8002a0e:	431a      	orrs	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	061b      	lsls	r3, r3, #24
 8002a16:	431a      	orrs	r2, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	071b      	lsls	r3, r3, #28
 8002a1c:	493d      	ldr	r1, [pc, #244]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002a24:	4b3b      	ldr	r3, [pc, #236]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a2a:	f023 021f 	bic.w	r2, r3, #31
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a32:	3b01      	subs	r3, #1
 8002a34:	4937      	ldr	r1, [pc, #220]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d01d      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002a48:	4b32      	ldr	r3, [pc, #200]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a4e:	0e1b      	lsrs	r3, r3, #24
 8002a50:	f003 030f 	and.w	r3, r3, #15
 8002a54:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002a56:	4b2f      	ldr	r3, [pc, #188]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a5c:	0f1b      	lsrs	r3, r3, #28
 8002a5e:	f003 0307 	and.w	r3, r3, #7
 8002a62:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	019a      	lsls	r2, r3, #6
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	041b      	lsls	r3, r3, #16
 8002a70:	431a      	orrs	r2, r3
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	061b      	lsls	r3, r3, #24
 8002a76:	431a      	orrs	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	071b      	lsls	r3, r3, #28
 8002a7c:	4925      	ldr	r1, [pc, #148]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d011      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	019a      	lsls	r2, r3, #6
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	041b      	lsls	r3, r3, #16
 8002a9c:	431a      	orrs	r2, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	061b      	lsls	r3, r3, #24
 8002aa4:	431a      	orrs	r2, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	071b      	lsls	r3, r3, #28
 8002aac:	4919      	ldr	r1, [pc, #100]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002ab4:	4b17      	ldr	r3, [pc, #92]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a16      	ldr	r2, [pc, #88]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002aba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002abe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ac0:	f7fe fd68 	bl	8001594 <HAL_GetTick>
 8002ac4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ac6:	e008      	b.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002ac8:	f7fe fd64 	bl	8001594 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b64      	cmp	r3, #100	; 0x64
 8002ad4:	d901      	bls.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e0d7      	b.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ada:	4b0e      	ldr	r3, [pc, #56]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d0f0      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	f040 80cd 	bne.w	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002aee:	4b09      	ldr	r3, [pc, #36]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a08      	ldr	r2, [pc, #32]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002af4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002af8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002afa:	f7fe fd4b 	bl	8001594 <HAL_GetTick>
 8002afe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002b00:	e00a      	b.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002b02:	f7fe fd47 	bl	8001594 <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	2b64      	cmp	r3, #100	; 0x64
 8002b0e:	d903      	bls.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e0ba      	b.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002b14:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002b18:	4b5e      	ldr	r3, [pc, #376]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b24:	d0ed      	beq.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d003      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d009      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d02e      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d12a      	bne.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002b4e:	4b51      	ldr	r3, [pc, #324]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b54:	0c1b      	lsrs	r3, r3, #16
 8002b56:	f003 0303 	and.w	r3, r3, #3
 8002b5a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002b5c:	4b4d      	ldr	r3, [pc, #308]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b62:	0f1b      	lsrs	r3, r3, #28
 8002b64:	f003 0307 	and.w	r3, r3, #7
 8002b68:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	695b      	ldr	r3, [r3, #20]
 8002b6e:	019a      	lsls	r2, r3, #6
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	041b      	lsls	r3, r3, #16
 8002b74:	431a      	orrs	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	699b      	ldr	r3, [r3, #24]
 8002b7a:	061b      	lsls	r3, r3, #24
 8002b7c:	431a      	orrs	r2, r3
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	071b      	lsls	r3, r3, #28
 8002b82:	4944      	ldr	r1, [pc, #272]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b84:	4313      	orrs	r3, r2
 8002b86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002b8a:	4b42      	ldr	r3, [pc, #264]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b90:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b98:	3b01      	subs	r3, #1
 8002b9a:	021b      	lsls	r3, r3, #8
 8002b9c:	493d      	ldr	r1, [pc, #244]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d022      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bb4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bb8:	d11d      	bne.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002bba:	4b36      	ldr	r3, [pc, #216]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bc0:	0e1b      	lsrs	r3, r3, #24
 8002bc2:	f003 030f 	and.w	r3, r3, #15
 8002bc6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002bc8:	4b32      	ldr	r3, [pc, #200]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bce:	0f1b      	lsrs	r3, r3, #28
 8002bd0:	f003 0307 	and.w	r3, r3, #7
 8002bd4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	695b      	ldr	r3, [r3, #20]
 8002bda:	019a      	lsls	r2, r3, #6
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a1b      	ldr	r3, [r3, #32]
 8002be0:	041b      	lsls	r3, r3, #16
 8002be2:	431a      	orrs	r2, r3
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	061b      	lsls	r3, r3, #24
 8002be8:	431a      	orrs	r2, r3
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	071b      	lsls	r3, r3, #28
 8002bee:	4929      	ldr	r1, [pc, #164]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0308 	and.w	r3, r3, #8
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d028      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002c02:	4b24      	ldr	r3, [pc, #144]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c08:	0e1b      	lsrs	r3, r3, #24
 8002c0a:	f003 030f 	and.w	r3, r3, #15
 8002c0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002c10:	4b20      	ldr	r3, [pc, #128]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c16:	0c1b      	lsrs	r3, r3, #16
 8002c18:	f003 0303 	and.w	r3, r3, #3
 8002c1c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	019a      	lsls	r2, r3, #6
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	041b      	lsls	r3, r3, #16
 8002c28:	431a      	orrs	r2, r3
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	061b      	lsls	r3, r3, #24
 8002c2e:	431a      	orrs	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	69db      	ldr	r3, [r3, #28]
 8002c34:	071b      	lsls	r3, r3, #28
 8002c36:	4917      	ldr	r1, [pc, #92]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002c3e:	4b15      	ldr	r3, [pc, #84]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c4c:	4911      	ldr	r1, [pc, #68]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002c54:	4b0f      	ldr	r3, [pc, #60]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a0e      	ldr	r2, [pc, #56]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c60:	f7fe fc98 	bl	8001594 <HAL_GetTick>
 8002c64:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002c66:	e008      	b.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002c68:	f7fe fc94 	bl	8001594 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b64      	cmp	r3, #100	; 0x64
 8002c74:	d901      	bls.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e007      	b.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002c7a:	4b06      	ldr	r3, [pc, #24]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c86:	d1ef      	bne.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3720      	adds	r7, #32
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	40023800 	.word	0x40023800

08002c98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d101      	bne.n	8002caa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e040      	b.n	8002d2c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d106      	bne.n	8002cc0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f7fe fb6e 	bl	800139c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2224      	movs	r2, #36	; 0x24
 8002cc4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f022 0201 	bic.w	r2, r2, #1
 8002cd4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f000 f8b0 	bl	8002e3c <UART_SetConfig>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d101      	bne.n	8002ce6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e022      	b.n	8002d2c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d002      	beq.n	8002cf4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 fb08 	bl	8003304 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	685a      	ldr	r2, [r3, #4]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	689a      	ldr	r2, [r3, #8]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f042 0201 	orr.w	r2, r2, #1
 8002d22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f000 fb8f 	bl	8003448 <UART_CheckIdleState>
 8002d2a:	4603      	mov	r3, r0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3708      	adds	r7, #8
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b08a      	sub	sp, #40	; 0x28
 8002d38:	af02      	add	r7, sp, #8
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	603b      	str	r3, [r7, #0]
 8002d40:	4613      	mov	r3, r2
 8002d42:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d48:	2b20      	cmp	r3, #32
 8002d4a:	d171      	bne.n	8002e30 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d002      	beq.n	8002d58 <HAL_UART_Transmit+0x24>
 8002d52:	88fb      	ldrh	r3, [r7, #6]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d101      	bne.n	8002d5c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e06a      	b.n	8002e32 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2221      	movs	r2, #33	; 0x21
 8002d68:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d6a:	f7fe fc13 	bl	8001594 <HAL_GetTick>
 8002d6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	88fa      	ldrh	r2, [r7, #6]
 8002d74:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	88fa      	ldrh	r2, [r7, #6]
 8002d7c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d88:	d108      	bne.n	8002d9c <HAL_UART_Transmit+0x68>
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d104      	bne.n	8002d9c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002d92:	2300      	movs	r3, #0
 8002d94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	61bb      	str	r3, [r7, #24]
 8002d9a:	e003      	b.n	8002da4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002da0:	2300      	movs	r3, #0
 8002da2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002da4:	e02c      	b.n	8002e00 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	9300      	str	r3, [sp, #0]
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	2200      	movs	r2, #0
 8002dae:	2180      	movs	r1, #128	; 0x80
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	f000 fb80 	bl	80034b6 <UART_WaitOnFlagUntilTimeout>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d001      	beq.n	8002dc0 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e038      	b.n	8002e32 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d10b      	bne.n	8002dde <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	881b      	ldrh	r3, [r3, #0]
 8002dca:	461a      	mov	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002dd4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	3302      	adds	r3, #2
 8002dda:	61bb      	str	r3, [r7, #24]
 8002ddc:	e007      	b.n	8002dee <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	781a      	ldrb	r2, [r3, #0]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	3301      	adds	r3, #1
 8002dec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	3b01      	subs	r3, #1
 8002df8:	b29a      	uxth	r2, r3
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d1cc      	bne.n	8002da6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	9300      	str	r3, [sp, #0]
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	2200      	movs	r2, #0
 8002e14:	2140      	movs	r1, #64	; 0x40
 8002e16:	68f8      	ldr	r0, [r7, #12]
 8002e18:	f000 fb4d 	bl	80034b6 <UART_WaitOnFlagUntilTimeout>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e005      	b.n	8002e32 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2220      	movs	r2, #32
 8002e2a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	e000      	b.n	8002e32 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002e30:	2302      	movs	r3, #2
  }
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3720      	adds	r7, #32
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
	...

08002e3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b088      	sub	sp, #32
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e44:	2300      	movs	r3, #0
 8002e46:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689a      	ldr	r2, [r3, #8]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	431a      	orrs	r2, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	695b      	ldr	r3, [r3, #20]
 8002e56:	431a      	orrs	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	69db      	ldr	r3, [r3, #28]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	4ba6      	ldr	r3, [pc, #664]	; (8003100 <UART_SetConfig+0x2c4>)
 8002e68:	4013      	ands	r3, r2
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	6812      	ldr	r2, [r2, #0]
 8002e6e:	6979      	ldr	r1, [r7, #20]
 8002e70:	430b      	orrs	r3, r1
 8002e72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	68da      	ldr	r2, [r3, #12]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	430a      	orrs	r2, r1
 8002e88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a1b      	ldr	r3, [r3, #32]
 8002e94:	697a      	ldr	r2, [r7, #20]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	697a      	ldr	r2, [r7, #20]
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a94      	ldr	r2, [pc, #592]	; (8003104 <UART_SetConfig+0x2c8>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d120      	bne.n	8002efa <UART_SetConfig+0xbe>
 8002eb8:	4b93      	ldr	r3, [pc, #588]	; (8003108 <UART_SetConfig+0x2cc>)
 8002eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ebe:	f003 0303 	and.w	r3, r3, #3
 8002ec2:	2b03      	cmp	r3, #3
 8002ec4:	d816      	bhi.n	8002ef4 <UART_SetConfig+0xb8>
 8002ec6:	a201      	add	r2, pc, #4	; (adr r2, 8002ecc <UART_SetConfig+0x90>)
 8002ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ecc:	08002edd 	.word	0x08002edd
 8002ed0:	08002ee9 	.word	0x08002ee9
 8002ed4:	08002ee3 	.word	0x08002ee3
 8002ed8:	08002eef 	.word	0x08002eef
 8002edc:	2301      	movs	r3, #1
 8002ede:	77fb      	strb	r3, [r7, #31]
 8002ee0:	e150      	b.n	8003184 <UART_SetConfig+0x348>
 8002ee2:	2302      	movs	r3, #2
 8002ee4:	77fb      	strb	r3, [r7, #31]
 8002ee6:	e14d      	b.n	8003184 <UART_SetConfig+0x348>
 8002ee8:	2304      	movs	r3, #4
 8002eea:	77fb      	strb	r3, [r7, #31]
 8002eec:	e14a      	b.n	8003184 <UART_SetConfig+0x348>
 8002eee:	2308      	movs	r3, #8
 8002ef0:	77fb      	strb	r3, [r7, #31]
 8002ef2:	e147      	b.n	8003184 <UART_SetConfig+0x348>
 8002ef4:	2310      	movs	r3, #16
 8002ef6:	77fb      	strb	r3, [r7, #31]
 8002ef8:	e144      	b.n	8003184 <UART_SetConfig+0x348>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a83      	ldr	r2, [pc, #524]	; (800310c <UART_SetConfig+0x2d0>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d132      	bne.n	8002f6a <UART_SetConfig+0x12e>
 8002f04:	4b80      	ldr	r3, [pc, #512]	; (8003108 <UART_SetConfig+0x2cc>)
 8002f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f0a:	f003 030c 	and.w	r3, r3, #12
 8002f0e:	2b0c      	cmp	r3, #12
 8002f10:	d828      	bhi.n	8002f64 <UART_SetConfig+0x128>
 8002f12:	a201      	add	r2, pc, #4	; (adr r2, 8002f18 <UART_SetConfig+0xdc>)
 8002f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f18:	08002f4d 	.word	0x08002f4d
 8002f1c:	08002f65 	.word	0x08002f65
 8002f20:	08002f65 	.word	0x08002f65
 8002f24:	08002f65 	.word	0x08002f65
 8002f28:	08002f59 	.word	0x08002f59
 8002f2c:	08002f65 	.word	0x08002f65
 8002f30:	08002f65 	.word	0x08002f65
 8002f34:	08002f65 	.word	0x08002f65
 8002f38:	08002f53 	.word	0x08002f53
 8002f3c:	08002f65 	.word	0x08002f65
 8002f40:	08002f65 	.word	0x08002f65
 8002f44:	08002f65 	.word	0x08002f65
 8002f48:	08002f5f 	.word	0x08002f5f
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	77fb      	strb	r3, [r7, #31]
 8002f50:	e118      	b.n	8003184 <UART_SetConfig+0x348>
 8002f52:	2302      	movs	r3, #2
 8002f54:	77fb      	strb	r3, [r7, #31]
 8002f56:	e115      	b.n	8003184 <UART_SetConfig+0x348>
 8002f58:	2304      	movs	r3, #4
 8002f5a:	77fb      	strb	r3, [r7, #31]
 8002f5c:	e112      	b.n	8003184 <UART_SetConfig+0x348>
 8002f5e:	2308      	movs	r3, #8
 8002f60:	77fb      	strb	r3, [r7, #31]
 8002f62:	e10f      	b.n	8003184 <UART_SetConfig+0x348>
 8002f64:	2310      	movs	r3, #16
 8002f66:	77fb      	strb	r3, [r7, #31]
 8002f68:	e10c      	b.n	8003184 <UART_SetConfig+0x348>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a68      	ldr	r2, [pc, #416]	; (8003110 <UART_SetConfig+0x2d4>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d120      	bne.n	8002fb6 <UART_SetConfig+0x17a>
 8002f74:	4b64      	ldr	r3, [pc, #400]	; (8003108 <UART_SetConfig+0x2cc>)
 8002f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f7a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002f7e:	2b30      	cmp	r3, #48	; 0x30
 8002f80:	d013      	beq.n	8002faa <UART_SetConfig+0x16e>
 8002f82:	2b30      	cmp	r3, #48	; 0x30
 8002f84:	d814      	bhi.n	8002fb0 <UART_SetConfig+0x174>
 8002f86:	2b20      	cmp	r3, #32
 8002f88:	d009      	beq.n	8002f9e <UART_SetConfig+0x162>
 8002f8a:	2b20      	cmp	r3, #32
 8002f8c:	d810      	bhi.n	8002fb0 <UART_SetConfig+0x174>
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d002      	beq.n	8002f98 <UART_SetConfig+0x15c>
 8002f92:	2b10      	cmp	r3, #16
 8002f94:	d006      	beq.n	8002fa4 <UART_SetConfig+0x168>
 8002f96:	e00b      	b.n	8002fb0 <UART_SetConfig+0x174>
 8002f98:	2300      	movs	r3, #0
 8002f9a:	77fb      	strb	r3, [r7, #31]
 8002f9c:	e0f2      	b.n	8003184 <UART_SetConfig+0x348>
 8002f9e:	2302      	movs	r3, #2
 8002fa0:	77fb      	strb	r3, [r7, #31]
 8002fa2:	e0ef      	b.n	8003184 <UART_SetConfig+0x348>
 8002fa4:	2304      	movs	r3, #4
 8002fa6:	77fb      	strb	r3, [r7, #31]
 8002fa8:	e0ec      	b.n	8003184 <UART_SetConfig+0x348>
 8002faa:	2308      	movs	r3, #8
 8002fac:	77fb      	strb	r3, [r7, #31]
 8002fae:	e0e9      	b.n	8003184 <UART_SetConfig+0x348>
 8002fb0:	2310      	movs	r3, #16
 8002fb2:	77fb      	strb	r3, [r7, #31]
 8002fb4:	e0e6      	b.n	8003184 <UART_SetConfig+0x348>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a56      	ldr	r2, [pc, #344]	; (8003114 <UART_SetConfig+0x2d8>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d120      	bne.n	8003002 <UART_SetConfig+0x1c6>
 8002fc0:	4b51      	ldr	r3, [pc, #324]	; (8003108 <UART_SetConfig+0x2cc>)
 8002fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fc6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002fca:	2bc0      	cmp	r3, #192	; 0xc0
 8002fcc:	d013      	beq.n	8002ff6 <UART_SetConfig+0x1ba>
 8002fce:	2bc0      	cmp	r3, #192	; 0xc0
 8002fd0:	d814      	bhi.n	8002ffc <UART_SetConfig+0x1c0>
 8002fd2:	2b80      	cmp	r3, #128	; 0x80
 8002fd4:	d009      	beq.n	8002fea <UART_SetConfig+0x1ae>
 8002fd6:	2b80      	cmp	r3, #128	; 0x80
 8002fd8:	d810      	bhi.n	8002ffc <UART_SetConfig+0x1c0>
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d002      	beq.n	8002fe4 <UART_SetConfig+0x1a8>
 8002fde:	2b40      	cmp	r3, #64	; 0x40
 8002fe0:	d006      	beq.n	8002ff0 <UART_SetConfig+0x1b4>
 8002fe2:	e00b      	b.n	8002ffc <UART_SetConfig+0x1c0>
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	77fb      	strb	r3, [r7, #31]
 8002fe8:	e0cc      	b.n	8003184 <UART_SetConfig+0x348>
 8002fea:	2302      	movs	r3, #2
 8002fec:	77fb      	strb	r3, [r7, #31]
 8002fee:	e0c9      	b.n	8003184 <UART_SetConfig+0x348>
 8002ff0:	2304      	movs	r3, #4
 8002ff2:	77fb      	strb	r3, [r7, #31]
 8002ff4:	e0c6      	b.n	8003184 <UART_SetConfig+0x348>
 8002ff6:	2308      	movs	r3, #8
 8002ff8:	77fb      	strb	r3, [r7, #31]
 8002ffa:	e0c3      	b.n	8003184 <UART_SetConfig+0x348>
 8002ffc:	2310      	movs	r3, #16
 8002ffe:	77fb      	strb	r3, [r7, #31]
 8003000:	e0c0      	b.n	8003184 <UART_SetConfig+0x348>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a44      	ldr	r2, [pc, #272]	; (8003118 <UART_SetConfig+0x2dc>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d125      	bne.n	8003058 <UART_SetConfig+0x21c>
 800300c:	4b3e      	ldr	r3, [pc, #248]	; (8003108 <UART_SetConfig+0x2cc>)
 800300e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003012:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003016:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800301a:	d017      	beq.n	800304c <UART_SetConfig+0x210>
 800301c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003020:	d817      	bhi.n	8003052 <UART_SetConfig+0x216>
 8003022:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003026:	d00b      	beq.n	8003040 <UART_SetConfig+0x204>
 8003028:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800302c:	d811      	bhi.n	8003052 <UART_SetConfig+0x216>
 800302e:	2b00      	cmp	r3, #0
 8003030:	d003      	beq.n	800303a <UART_SetConfig+0x1fe>
 8003032:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003036:	d006      	beq.n	8003046 <UART_SetConfig+0x20a>
 8003038:	e00b      	b.n	8003052 <UART_SetConfig+0x216>
 800303a:	2300      	movs	r3, #0
 800303c:	77fb      	strb	r3, [r7, #31]
 800303e:	e0a1      	b.n	8003184 <UART_SetConfig+0x348>
 8003040:	2302      	movs	r3, #2
 8003042:	77fb      	strb	r3, [r7, #31]
 8003044:	e09e      	b.n	8003184 <UART_SetConfig+0x348>
 8003046:	2304      	movs	r3, #4
 8003048:	77fb      	strb	r3, [r7, #31]
 800304a:	e09b      	b.n	8003184 <UART_SetConfig+0x348>
 800304c:	2308      	movs	r3, #8
 800304e:	77fb      	strb	r3, [r7, #31]
 8003050:	e098      	b.n	8003184 <UART_SetConfig+0x348>
 8003052:	2310      	movs	r3, #16
 8003054:	77fb      	strb	r3, [r7, #31]
 8003056:	e095      	b.n	8003184 <UART_SetConfig+0x348>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a2f      	ldr	r2, [pc, #188]	; (800311c <UART_SetConfig+0x2e0>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d125      	bne.n	80030ae <UART_SetConfig+0x272>
 8003062:	4b29      	ldr	r3, [pc, #164]	; (8003108 <UART_SetConfig+0x2cc>)
 8003064:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003068:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800306c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003070:	d017      	beq.n	80030a2 <UART_SetConfig+0x266>
 8003072:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003076:	d817      	bhi.n	80030a8 <UART_SetConfig+0x26c>
 8003078:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800307c:	d00b      	beq.n	8003096 <UART_SetConfig+0x25a>
 800307e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003082:	d811      	bhi.n	80030a8 <UART_SetConfig+0x26c>
 8003084:	2b00      	cmp	r3, #0
 8003086:	d003      	beq.n	8003090 <UART_SetConfig+0x254>
 8003088:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800308c:	d006      	beq.n	800309c <UART_SetConfig+0x260>
 800308e:	e00b      	b.n	80030a8 <UART_SetConfig+0x26c>
 8003090:	2301      	movs	r3, #1
 8003092:	77fb      	strb	r3, [r7, #31]
 8003094:	e076      	b.n	8003184 <UART_SetConfig+0x348>
 8003096:	2302      	movs	r3, #2
 8003098:	77fb      	strb	r3, [r7, #31]
 800309a:	e073      	b.n	8003184 <UART_SetConfig+0x348>
 800309c:	2304      	movs	r3, #4
 800309e:	77fb      	strb	r3, [r7, #31]
 80030a0:	e070      	b.n	8003184 <UART_SetConfig+0x348>
 80030a2:	2308      	movs	r3, #8
 80030a4:	77fb      	strb	r3, [r7, #31]
 80030a6:	e06d      	b.n	8003184 <UART_SetConfig+0x348>
 80030a8:	2310      	movs	r3, #16
 80030aa:	77fb      	strb	r3, [r7, #31]
 80030ac:	e06a      	b.n	8003184 <UART_SetConfig+0x348>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a1b      	ldr	r2, [pc, #108]	; (8003120 <UART_SetConfig+0x2e4>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d138      	bne.n	800312a <UART_SetConfig+0x2ee>
 80030b8:	4b13      	ldr	r3, [pc, #76]	; (8003108 <UART_SetConfig+0x2cc>)
 80030ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030be:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80030c2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80030c6:	d017      	beq.n	80030f8 <UART_SetConfig+0x2bc>
 80030c8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80030cc:	d82a      	bhi.n	8003124 <UART_SetConfig+0x2e8>
 80030ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030d2:	d00b      	beq.n	80030ec <UART_SetConfig+0x2b0>
 80030d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030d8:	d824      	bhi.n	8003124 <UART_SetConfig+0x2e8>
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d003      	beq.n	80030e6 <UART_SetConfig+0x2aa>
 80030de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030e2:	d006      	beq.n	80030f2 <UART_SetConfig+0x2b6>
 80030e4:	e01e      	b.n	8003124 <UART_SetConfig+0x2e8>
 80030e6:	2300      	movs	r3, #0
 80030e8:	77fb      	strb	r3, [r7, #31]
 80030ea:	e04b      	b.n	8003184 <UART_SetConfig+0x348>
 80030ec:	2302      	movs	r3, #2
 80030ee:	77fb      	strb	r3, [r7, #31]
 80030f0:	e048      	b.n	8003184 <UART_SetConfig+0x348>
 80030f2:	2304      	movs	r3, #4
 80030f4:	77fb      	strb	r3, [r7, #31]
 80030f6:	e045      	b.n	8003184 <UART_SetConfig+0x348>
 80030f8:	2308      	movs	r3, #8
 80030fa:	77fb      	strb	r3, [r7, #31]
 80030fc:	e042      	b.n	8003184 <UART_SetConfig+0x348>
 80030fe:	bf00      	nop
 8003100:	efff69f3 	.word	0xefff69f3
 8003104:	40011000 	.word	0x40011000
 8003108:	40023800 	.word	0x40023800
 800310c:	40004400 	.word	0x40004400
 8003110:	40004800 	.word	0x40004800
 8003114:	40004c00 	.word	0x40004c00
 8003118:	40005000 	.word	0x40005000
 800311c:	40011400 	.word	0x40011400
 8003120:	40007800 	.word	0x40007800
 8003124:	2310      	movs	r3, #16
 8003126:	77fb      	strb	r3, [r7, #31]
 8003128:	e02c      	b.n	8003184 <UART_SetConfig+0x348>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a72      	ldr	r2, [pc, #456]	; (80032f8 <UART_SetConfig+0x4bc>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d125      	bne.n	8003180 <UART_SetConfig+0x344>
 8003134:	4b71      	ldr	r3, [pc, #452]	; (80032fc <UART_SetConfig+0x4c0>)
 8003136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800313a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800313e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003142:	d017      	beq.n	8003174 <UART_SetConfig+0x338>
 8003144:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003148:	d817      	bhi.n	800317a <UART_SetConfig+0x33e>
 800314a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800314e:	d00b      	beq.n	8003168 <UART_SetConfig+0x32c>
 8003150:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003154:	d811      	bhi.n	800317a <UART_SetConfig+0x33e>
 8003156:	2b00      	cmp	r3, #0
 8003158:	d003      	beq.n	8003162 <UART_SetConfig+0x326>
 800315a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800315e:	d006      	beq.n	800316e <UART_SetConfig+0x332>
 8003160:	e00b      	b.n	800317a <UART_SetConfig+0x33e>
 8003162:	2300      	movs	r3, #0
 8003164:	77fb      	strb	r3, [r7, #31]
 8003166:	e00d      	b.n	8003184 <UART_SetConfig+0x348>
 8003168:	2302      	movs	r3, #2
 800316a:	77fb      	strb	r3, [r7, #31]
 800316c:	e00a      	b.n	8003184 <UART_SetConfig+0x348>
 800316e:	2304      	movs	r3, #4
 8003170:	77fb      	strb	r3, [r7, #31]
 8003172:	e007      	b.n	8003184 <UART_SetConfig+0x348>
 8003174:	2308      	movs	r3, #8
 8003176:	77fb      	strb	r3, [r7, #31]
 8003178:	e004      	b.n	8003184 <UART_SetConfig+0x348>
 800317a:	2310      	movs	r3, #16
 800317c:	77fb      	strb	r3, [r7, #31]
 800317e:	e001      	b.n	8003184 <UART_SetConfig+0x348>
 8003180:	2310      	movs	r3, #16
 8003182:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	69db      	ldr	r3, [r3, #28]
 8003188:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800318c:	d15b      	bne.n	8003246 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800318e:	7ffb      	ldrb	r3, [r7, #31]
 8003190:	2b08      	cmp	r3, #8
 8003192:	d828      	bhi.n	80031e6 <UART_SetConfig+0x3aa>
 8003194:	a201      	add	r2, pc, #4	; (adr r2, 800319c <UART_SetConfig+0x360>)
 8003196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800319a:	bf00      	nop
 800319c:	080031c1 	.word	0x080031c1
 80031a0:	080031c9 	.word	0x080031c9
 80031a4:	080031d1 	.word	0x080031d1
 80031a8:	080031e7 	.word	0x080031e7
 80031ac:	080031d7 	.word	0x080031d7
 80031b0:	080031e7 	.word	0x080031e7
 80031b4:	080031e7 	.word	0x080031e7
 80031b8:	080031e7 	.word	0x080031e7
 80031bc:	080031df 	.word	0x080031df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031c0:	f7ff f952 	bl	8002468 <HAL_RCC_GetPCLK1Freq>
 80031c4:	61b8      	str	r0, [r7, #24]
        break;
 80031c6:	e013      	b.n	80031f0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031c8:	f7ff f962 	bl	8002490 <HAL_RCC_GetPCLK2Freq>
 80031cc:	61b8      	str	r0, [r7, #24]
        break;
 80031ce:	e00f      	b.n	80031f0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031d0:	4b4b      	ldr	r3, [pc, #300]	; (8003300 <UART_SetConfig+0x4c4>)
 80031d2:	61bb      	str	r3, [r7, #24]
        break;
 80031d4:	e00c      	b.n	80031f0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031d6:	f7ff f875 	bl	80022c4 <HAL_RCC_GetSysClockFreq>
 80031da:	61b8      	str	r0, [r7, #24]
        break;
 80031dc:	e008      	b.n	80031f0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031e2:	61bb      	str	r3, [r7, #24]
        break;
 80031e4:	e004      	b.n	80031f0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80031e6:	2300      	movs	r3, #0
 80031e8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	77bb      	strb	r3, [r7, #30]
        break;
 80031ee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d074      	beq.n	80032e0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	005a      	lsls	r2, r3, #1
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	085b      	lsrs	r3, r3, #1
 8003200:	441a      	add	r2, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	fbb2 f3f3 	udiv	r3, r2, r3
 800320a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	2b0f      	cmp	r3, #15
 8003210:	d916      	bls.n	8003240 <UART_SetConfig+0x404>
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003218:	d212      	bcs.n	8003240 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	b29b      	uxth	r3, r3
 800321e:	f023 030f 	bic.w	r3, r3, #15
 8003222:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	085b      	lsrs	r3, r3, #1
 8003228:	b29b      	uxth	r3, r3
 800322a:	f003 0307 	and.w	r3, r3, #7
 800322e:	b29a      	uxth	r2, r3
 8003230:	89fb      	ldrh	r3, [r7, #14]
 8003232:	4313      	orrs	r3, r2
 8003234:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	89fa      	ldrh	r2, [r7, #14]
 800323c:	60da      	str	r2, [r3, #12]
 800323e:	e04f      	b.n	80032e0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	77bb      	strb	r3, [r7, #30]
 8003244:	e04c      	b.n	80032e0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003246:	7ffb      	ldrb	r3, [r7, #31]
 8003248:	2b08      	cmp	r3, #8
 800324a:	d828      	bhi.n	800329e <UART_SetConfig+0x462>
 800324c:	a201      	add	r2, pc, #4	; (adr r2, 8003254 <UART_SetConfig+0x418>)
 800324e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003252:	bf00      	nop
 8003254:	08003279 	.word	0x08003279
 8003258:	08003281 	.word	0x08003281
 800325c:	08003289 	.word	0x08003289
 8003260:	0800329f 	.word	0x0800329f
 8003264:	0800328f 	.word	0x0800328f
 8003268:	0800329f 	.word	0x0800329f
 800326c:	0800329f 	.word	0x0800329f
 8003270:	0800329f 	.word	0x0800329f
 8003274:	08003297 	.word	0x08003297
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003278:	f7ff f8f6 	bl	8002468 <HAL_RCC_GetPCLK1Freq>
 800327c:	61b8      	str	r0, [r7, #24]
        break;
 800327e:	e013      	b.n	80032a8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003280:	f7ff f906 	bl	8002490 <HAL_RCC_GetPCLK2Freq>
 8003284:	61b8      	str	r0, [r7, #24]
        break;
 8003286:	e00f      	b.n	80032a8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003288:	4b1d      	ldr	r3, [pc, #116]	; (8003300 <UART_SetConfig+0x4c4>)
 800328a:	61bb      	str	r3, [r7, #24]
        break;
 800328c:	e00c      	b.n	80032a8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800328e:	f7ff f819 	bl	80022c4 <HAL_RCC_GetSysClockFreq>
 8003292:	61b8      	str	r0, [r7, #24]
        break;
 8003294:	e008      	b.n	80032a8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003296:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800329a:	61bb      	str	r3, [r7, #24]
        break;
 800329c:	e004      	b.n	80032a8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800329e:	2300      	movs	r3, #0
 80032a0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	77bb      	strb	r3, [r7, #30]
        break;
 80032a6:	bf00      	nop
    }

    if (pclk != 0U)
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d018      	beq.n	80032e0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	085a      	lsrs	r2, r3, #1
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	441a      	add	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80032c0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	2b0f      	cmp	r3, #15
 80032c6:	d909      	bls.n	80032dc <UART_SetConfig+0x4a0>
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032ce:	d205      	bcs.n	80032dc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	b29a      	uxth	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	60da      	str	r2, [r3, #12]
 80032da:	e001      	b.n	80032e0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80032ec:	7fbb      	ldrb	r3, [r7, #30]
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3720      	adds	r7, #32
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	40007c00 	.word	0x40007c00
 80032fc:	40023800 	.word	0x40023800
 8003300:	00f42400 	.word	0x00f42400

08003304 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003310:	f003 0301 	and.w	r3, r3, #1
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00a      	beq.n	800332e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	430a      	orrs	r2, r1
 800332c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003332:	f003 0302 	and.w	r3, r3, #2
 8003336:	2b00      	cmp	r3, #0
 8003338:	d00a      	beq.n	8003350 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	430a      	orrs	r2, r1
 800334e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003354:	f003 0304 	and.w	r3, r3, #4
 8003358:	2b00      	cmp	r3, #0
 800335a:	d00a      	beq.n	8003372 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	430a      	orrs	r2, r1
 8003370:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003376:	f003 0308 	and.w	r3, r3, #8
 800337a:	2b00      	cmp	r3, #0
 800337c:	d00a      	beq.n	8003394 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	430a      	orrs	r2, r1
 8003392:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003398:	f003 0310 	and.w	r3, r3, #16
 800339c:	2b00      	cmp	r3, #0
 800339e:	d00a      	beq.n	80033b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	430a      	orrs	r2, r1
 80033b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ba:	f003 0320 	and.w	r3, r3, #32
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00a      	beq.n	80033d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	430a      	orrs	r2, r1
 80033d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d01a      	beq.n	800341a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	430a      	orrs	r2, r1
 80033f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003402:	d10a      	bne.n	800341a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	430a      	orrs	r2, r1
 8003418:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003422:	2b00      	cmp	r3, #0
 8003424:	d00a      	beq.n	800343c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	430a      	orrs	r2, r1
 800343a:	605a      	str	r2, [r3, #4]
  }
}
 800343c:	bf00      	nop
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b086      	sub	sp, #24
 800344c:	af02      	add	r7, sp, #8
 800344e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003458:	f7fe f89c 	bl	8001594 <HAL_GetTick>
 800345c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0308 	and.w	r3, r3, #8
 8003468:	2b08      	cmp	r3, #8
 800346a:	d10e      	bne.n	800348a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800346c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003470:	9300      	str	r3, [sp, #0]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2200      	movs	r2, #0
 8003476:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 f81b 	bl	80034b6 <UART_WaitOnFlagUntilTimeout>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d001      	beq.n	800348a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e011      	b.n	80034ae <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2220      	movs	r2, #32
 800348e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2220      	movs	r2, #32
 8003494:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3710      	adds	r7, #16
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b09c      	sub	sp, #112	; 0x70
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	60f8      	str	r0, [r7, #12]
 80034be:	60b9      	str	r1, [r7, #8]
 80034c0:	603b      	str	r3, [r7, #0]
 80034c2:	4613      	mov	r3, r2
 80034c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034c6:	e0a7      	b.n	8003618 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ce:	f000 80a3 	beq.w	8003618 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034d2:	f7fe f85f 	bl	8001594 <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80034de:	429a      	cmp	r2, r3
 80034e0:	d302      	bcc.n	80034e8 <UART_WaitOnFlagUntilTimeout+0x32>
 80034e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d13f      	bne.n	8003568 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034f0:	e853 3f00 	ldrex	r3, [r3]
 80034f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80034f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80034fc:	667b      	str	r3, [r7, #100]	; 0x64
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	461a      	mov	r2, r3
 8003504:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003506:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003508:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800350a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800350c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800350e:	e841 2300 	strex	r3, r2, [r1]
 8003512:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003514:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003516:	2b00      	cmp	r3, #0
 8003518:	d1e6      	bne.n	80034e8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	3308      	adds	r3, #8
 8003520:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003522:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003524:	e853 3f00 	ldrex	r3, [r3]
 8003528:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800352a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800352c:	f023 0301 	bic.w	r3, r3, #1
 8003530:	663b      	str	r3, [r7, #96]	; 0x60
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	3308      	adds	r3, #8
 8003538:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800353a:	64ba      	str	r2, [r7, #72]	; 0x48
 800353c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800353e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003540:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003542:	e841 2300 	strex	r3, r2, [r1]
 8003546:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003548:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800354a:	2b00      	cmp	r3, #0
 800354c:	d1e5      	bne.n	800351a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2220      	movs	r2, #32
 8003552:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2220      	movs	r2, #32
 8003558:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e068      	b.n	800363a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0304 	and.w	r3, r3, #4
 8003572:	2b00      	cmp	r3, #0
 8003574:	d050      	beq.n	8003618 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	69db      	ldr	r3, [r3, #28]
 800357c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003580:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003584:	d148      	bne.n	8003618 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800358e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003598:	e853 3f00 	ldrex	r3, [r3]
 800359c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800359e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80035a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	461a      	mov	r2, r3
 80035ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035ae:	637b      	str	r3, [r7, #52]	; 0x34
 80035b0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80035b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035b6:	e841 2300 	strex	r3, r2, [r1]
 80035ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80035bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d1e6      	bne.n	8003590 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	3308      	adds	r3, #8
 80035c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	e853 3f00 	ldrex	r3, [r3]
 80035d0:	613b      	str	r3, [r7, #16]
   return(result);
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	f023 0301 	bic.w	r3, r3, #1
 80035d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	3308      	adds	r3, #8
 80035e0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80035e2:	623a      	str	r2, [r7, #32]
 80035e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035e6:	69f9      	ldr	r1, [r7, #28]
 80035e8:	6a3a      	ldr	r2, [r7, #32]
 80035ea:	e841 2300 	strex	r3, r2, [r1]
 80035ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d1e5      	bne.n	80035c2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2220      	movs	r2, #32
 80035fa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2220      	movs	r2, #32
 8003600:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2220      	movs	r2, #32
 8003608:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e010      	b.n	800363a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	69da      	ldr	r2, [r3, #28]
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	4013      	ands	r3, r2
 8003622:	68ba      	ldr	r2, [r7, #8]
 8003624:	429a      	cmp	r2, r3
 8003626:	bf0c      	ite	eq
 8003628:	2301      	moveq	r3, #1
 800362a:	2300      	movne	r3, #0
 800362c:	b2db      	uxtb	r3, r3
 800362e:	461a      	mov	r2, r3
 8003630:	79fb      	ldrb	r3, [r7, #7]
 8003632:	429a      	cmp	r2, r3
 8003634:	f43f af48 	beq.w	80034c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3770      	adds	r7, #112	; 0x70
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}

08003642 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003642:	b480      	push	{r7}
 8003644:	b085      	sub	sp, #20
 8003646:	af00      	add	r7, sp, #0
 8003648:	4603      	mov	r3, r0
 800364a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800364c:	2300      	movs	r3, #0
 800364e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003650:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003654:	2b84      	cmp	r3, #132	; 0x84
 8003656:	d005      	beq.n	8003664 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003658:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	4413      	add	r3, r2
 8003660:	3303      	adds	r3, #3
 8003662:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003664:	68fb      	ldr	r3, [r7, #12]
}
 8003666:	4618      	mov	r0, r3
 8003668:	3714      	adds	r7, #20
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr

08003672 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003672:	b580      	push	{r7, lr}
 8003674:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003676:	f000 fbb3 	bl	8003de0 <vTaskStartScheduler>
  
  return osOK;
 800367a:	2300      	movs	r3, #0
}
 800367c:	4618      	mov	r0, r3
 800367e:	bd80      	pop	{r7, pc}

08003680 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003682:	b089      	sub	sp, #36	; 0x24
 8003684:	af04      	add	r7, sp, #16
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d020      	beq.n	80036d4 <osThreadCreate+0x54>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d01c      	beq.n	80036d4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685c      	ldr	r4, [r3, #4]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681d      	ldr	r5, [r3, #0]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	691e      	ldr	r6, [r3, #16]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7ff ffc8 	bl	8003642 <makeFreeRtosPriority>
 80036b2:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	695b      	ldr	r3, [r3, #20]
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80036bc:	9202      	str	r2, [sp, #8]
 80036be:	9301      	str	r3, [sp, #4]
 80036c0:	9100      	str	r1, [sp, #0]
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	4632      	mov	r2, r6
 80036c6:	4629      	mov	r1, r5
 80036c8:	4620      	mov	r0, r4
 80036ca:	f000 f9b8 	bl	8003a3e <xTaskCreateStatic>
 80036ce:	4603      	mov	r3, r0
 80036d0:	60fb      	str	r3, [r7, #12]
 80036d2:	e01c      	b.n	800370e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685c      	ldr	r4, [r3, #4]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80036e0:	b29e      	uxth	r6, r3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7ff ffaa 	bl	8003642 <makeFreeRtosPriority>
 80036ee:	4602      	mov	r2, r0
 80036f0:	f107 030c 	add.w	r3, r7, #12
 80036f4:	9301      	str	r3, [sp, #4]
 80036f6:	9200      	str	r2, [sp, #0]
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	4632      	mov	r2, r6
 80036fc:	4629      	mov	r1, r5
 80036fe:	4620      	mov	r0, r4
 8003700:	f000 fa00 	bl	8003b04 <xTaskCreate>
 8003704:	4603      	mov	r3, r0
 8003706:	2b01      	cmp	r3, #1
 8003708:	d001      	beq.n	800370e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800370a:	2300      	movs	r3, #0
 800370c:	e000      	b.n	8003710 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800370e:	68fb      	ldr	r3, [r7, #12]
}
 8003710:	4618      	mov	r0, r3
 8003712:	3714      	adds	r7, #20
 8003714:	46bd      	mov	sp, r7
 8003716:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003718 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d001      	beq.n	800372e <osDelay+0x16>
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	e000      	b.n	8003730 <osDelay+0x18>
 800372e:	2301      	movs	r3, #1
 8003730:	4618      	mov	r0, r3
 8003732:	f000 fb1f 	bl	8003d74 <vTaskDelay>
  
  return osOK;
 8003736:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003738:	4618      	mov	r0, r3
 800373a:	3710      	adds	r7, #16
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f103 0208 	add.w	r2, r3, #8
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f04f 32ff 	mov.w	r2, #4294967295
 8003758:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f103 0208 	add.w	r2, r3, #8
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f103 0208 	add.w	r2, r3, #8
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003774:	bf00      	nop
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800378e:	bf00      	nop
 8003790:	370c      	adds	r7, #12
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr

0800379a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800379a:	b480      	push	{r7}
 800379c:	b085      	sub	sp, #20
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
 80037a2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	68fa      	ldr	r2, [r7, #12]
 80037ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	689a      	ldr	r2, [r3, #8]
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	683a      	ldr	r2, [r7, #0]
 80037be:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	683a      	ldr	r2, [r7, #0]
 80037c4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	1c5a      	adds	r2, r3, #1
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	601a      	str	r2, [r3, #0]
}
 80037d6:	bf00      	nop
 80037d8:	3714      	adds	r7, #20
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr

080037e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80037e2:	b480      	push	{r7}
 80037e4:	b085      	sub	sp, #20
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
 80037ea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037f8:	d103      	bne.n	8003802 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	60fb      	str	r3, [r7, #12]
 8003800:	e00c      	b.n	800381c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	3308      	adds	r3, #8
 8003806:	60fb      	str	r3, [r7, #12]
 8003808:	e002      	b.n	8003810 <vListInsert+0x2e>
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	60fb      	str	r3, [r7, #12]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68ba      	ldr	r2, [r7, #8]
 8003818:	429a      	cmp	r2, r3
 800381a:	d2f6      	bcs.n	800380a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	685a      	ldr	r2, [r3, #4]
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	683a      	ldr	r2, [r7, #0]
 800382a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	683a      	ldr	r2, [r7, #0]
 8003836:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	1c5a      	adds	r2, r3, #1
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	601a      	str	r2, [r3, #0]
}
 8003848:	bf00      	nop
 800384a:	3714      	adds	r7, #20
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003854:	b480      	push	{r7}
 8003856:	b085      	sub	sp, #20
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	691b      	ldr	r3, [r3, #16]
 8003860:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	6892      	ldr	r2, [r2, #8]
 800386a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	6852      	ldr	r2, [r2, #4]
 8003874:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	429a      	cmp	r2, r3
 800387e:	d103      	bne.n	8003888 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	689a      	ldr	r2, [r3, #8]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	1e5a      	subs	r2, r3, #1
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
}
 800389c:	4618      	mov	r0, r3
 800389e:	3714      	adds	r7, #20
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d10c      	bne.n	80038d6 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80038bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c0:	b672      	cpsid	i
 80038c2:	f383 8811 	msr	BASEPRI, r3
 80038c6:	f3bf 8f6f 	isb	sy
 80038ca:	f3bf 8f4f 	dsb	sy
 80038ce:	b662      	cpsie	i
 80038d0:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80038d2:	bf00      	nop
 80038d4:	e7fe      	b.n	80038d4 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80038d6:	f000 ff79 	bl	80047cc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038e2:	68f9      	ldr	r1, [r7, #12]
 80038e4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80038e6:	fb01 f303 	mul.w	r3, r1, r3
 80038ea:	441a      	add	r2, r3
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2200      	movs	r2, #0
 80038f4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003906:	3b01      	subs	r3, #1
 8003908:	68f9      	ldr	r1, [r7, #12]
 800390a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800390c:	fb01 f303 	mul.w	r3, r1, r3
 8003910:	441a      	add	r2, r3
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	22ff      	movs	r2, #255	; 0xff
 800391a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	22ff      	movs	r2, #255	; 0xff
 8003922:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d114      	bne.n	8003956 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	691b      	ldr	r3, [r3, #16]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d01a      	beq.n	800396a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	3310      	adds	r3, #16
 8003938:	4618      	mov	r0, r3
 800393a:	f000 fc79 	bl	8004230 <xTaskRemoveFromEventList>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d012      	beq.n	800396a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003944:	4b0c      	ldr	r3, [pc, #48]	; (8003978 <xQueueGenericReset+0xd0>)
 8003946:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800394a:	601a      	str	r2, [r3, #0]
 800394c:	f3bf 8f4f 	dsb	sy
 8003950:	f3bf 8f6f 	isb	sy
 8003954:	e009      	b.n	800396a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	3310      	adds	r3, #16
 800395a:	4618      	mov	r0, r3
 800395c:	f7ff fef0 	bl	8003740 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	3324      	adds	r3, #36	; 0x24
 8003964:	4618      	mov	r0, r3
 8003966:	f7ff feeb 	bl	8003740 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800396a:	f000 ff63 	bl	8004834 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800396e:	2301      	movs	r3, #1
}
 8003970:	4618      	mov	r0, r3
 8003972:	3710      	adds	r7, #16
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	e000ed04 	.word	0xe000ed04

0800397c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800397c:	b580      	push	{r7, lr}
 800397e:	b08a      	sub	sp, #40	; 0x28
 8003980:	af02      	add	r7, sp, #8
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	4613      	mov	r3, r2
 8003988:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d10c      	bne.n	80039aa <xQueueGenericCreate+0x2e>
	__asm volatile
 8003990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003994:	b672      	cpsid	i
 8003996:	f383 8811 	msr	BASEPRI, r3
 800399a:	f3bf 8f6f 	isb	sy
 800399e:	f3bf 8f4f 	dsb	sy
 80039a2:	b662      	cpsie	i
 80039a4:	613b      	str	r3, [r7, #16]
}
 80039a6:	bf00      	nop
 80039a8:	e7fe      	b.n	80039a8 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d102      	bne.n	80039b6 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80039b0:	2300      	movs	r3, #0
 80039b2:	61fb      	str	r3, [r7, #28]
 80039b4:	e004      	b.n	80039c0 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	68ba      	ldr	r2, [r7, #8]
 80039ba:	fb02 f303 	mul.w	r3, r2, r3
 80039be:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	3348      	adds	r3, #72	; 0x48
 80039c4:	4618      	mov	r0, r3
 80039c6:	f000 ffe9 	bl	800499c <pvPortMalloc>
 80039ca:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d011      	beq.n	80039f6 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	3348      	adds	r3, #72	; 0x48
 80039da:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	2200      	movs	r2, #0
 80039e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80039e4:	79fa      	ldrb	r2, [r7, #7]
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	9300      	str	r3, [sp, #0]
 80039ea:	4613      	mov	r3, r2
 80039ec:	697a      	ldr	r2, [r7, #20]
 80039ee:	68b9      	ldr	r1, [r7, #8]
 80039f0:	68f8      	ldr	r0, [r7, #12]
 80039f2:	f000 f805 	bl	8003a00 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80039f6:	69bb      	ldr	r3, [r7, #24]
	}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3720      	adds	r7, #32
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	607a      	str	r2, [r7, #4]
 8003a0c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d103      	bne.n	8003a1c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	69ba      	ldr	r2, [r7, #24]
 8003a18:	601a      	str	r2, [r3, #0]
 8003a1a:	e002      	b.n	8003a22 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	68fa      	ldr	r2, [r7, #12]
 8003a26:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	68ba      	ldr	r2, [r7, #8]
 8003a2c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003a2e:	2101      	movs	r1, #1
 8003a30:	69b8      	ldr	r0, [r7, #24]
 8003a32:	f7ff ff39 	bl	80038a8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003a36:	bf00      	nop
 8003a38:	3710      	adds	r7, #16
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}

08003a3e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003a3e:	b580      	push	{r7, lr}
 8003a40:	b08e      	sub	sp, #56	; 0x38
 8003a42:	af04      	add	r7, sp, #16
 8003a44:	60f8      	str	r0, [r7, #12]
 8003a46:	60b9      	str	r1, [r7, #8]
 8003a48:	607a      	str	r2, [r7, #4]
 8003a4a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d10c      	bne.n	8003a6c <xTaskCreateStatic+0x2e>
	__asm volatile
 8003a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a56:	b672      	cpsid	i
 8003a58:	f383 8811 	msr	BASEPRI, r3
 8003a5c:	f3bf 8f6f 	isb	sy
 8003a60:	f3bf 8f4f 	dsb	sy
 8003a64:	b662      	cpsie	i
 8003a66:	623b      	str	r3, [r7, #32]
}
 8003a68:	bf00      	nop
 8003a6a:	e7fe      	b.n	8003a6a <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8003a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d10c      	bne.n	8003a8c <xTaskCreateStatic+0x4e>
	__asm volatile
 8003a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a76:	b672      	cpsid	i
 8003a78:	f383 8811 	msr	BASEPRI, r3
 8003a7c:	f3bf 8f6f 	isb	sy
 8003a80:	f3bf 8f4f 	dsb	sy
 8003a84:	b662      	cpsie	i
 8003a86:	61fb      	str	r3, [r7, #28]
}
 8003a88:	bf00      	nop
 8003a8a:	e7fe      	b.n	8003a8a <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003a8c:	2354      	movs	r3, #84	; 0x54
 8003a8e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	2b54      	cmp	r3, #84	; 0x54
 8003a94:	d00c      	beq.n	8003ab0 <xTaskCreateStatic+0x72>
	__asm volatile
 8003a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a9a:	b672      	cpsid	i
 8003a9c:	f383 8811 	msr	BASEPRI, r3
 8003aa0:	f3bf 8f6f 	isb	sy
 8003aa4:	f3bf 8f4f 	dsb	sy
 8003aa8:	b662      	cpsie	i
 8003aaa:	61bb      	str	r3, [r7, #24]
}
 8003aac:	bf00      	nop
 8003aae:	e7fe      	b.n	8003aae <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003ab0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d01e      	beq.n	8003af6 <xTaskCreateStatic+0xb8>
 8003ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d01b      	beq.n	8003af6 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ac0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ac6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aca:	2202      	movs	r2, #2
 8003acc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	9303      	str	r3, [sp, #12]
 8003ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad6:	9302      	str	r3, [sp, #8]
 8003ad8:	f107 0314 	add.w	r3, r7, #20
 8003adc:	9301      	str	r3, [sp, #4]
 8003ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae0:	9300      	str	r3, [sp, #0]
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	68b9      	ldr	r1, [r7, #8]
 8003ae8:	68f8      	ldr	r0, [r7, #12]
 8003aea:	f000 f850 	bl	8003b8e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003aee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003af0:	f000 f8d6 	bl	8003ca0 <prvAddNewTaskToReadyList>
 8003af4:	e001      	b.n	8003afa <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8003af6:	2300      	movs	r3, #0
 8003af8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003afa:	697b      	ldr	r3, [r7, #20]
	}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3728      	adds	r7, #40	; 0x28
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b08c      	sub	sp, #48	; 0x30
 8003b08:	af04      	add	r7, sp, #16
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	603b      	str	r3, [r7, #0]
 8003b10:	4613      	mov	r3, r2
 8003b12:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003b14:	88fb      	ldrh	r3, [r7, #6]
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f000 ff3f 	bl	800499c <pvPortMalloc>
 8003b1e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00e      	beq.n	8003b44 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003b26:	2054      	movs	r0, #84	; 0x54
 8003b28:	f000 ff38 	bl	800499c <pvPortMalloc>
 8003b2c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d003      	beq.n	8003b3c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	697a      	ldr	r2, [r7, #20]
 8003b38:	631a      	str	r2, [r3, #48]	; 0x30
 8003b3a:	e005      	b.n	8003b48 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003b3c:	6978      	ldr	r0, [r7, #20]
 8003b3e:	f000 fff7 	bl	8004b30 <vPortFree>
 8003b42:	e001      	b.n	8003b48 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003b44:	2300      	movs	r3, #0
 8003b46:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d017      	beq.n	8003b7e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003b56:	88fa      	ldrh	r2, [r7, #6]
 8003b58:	2300      	movs	r3, #0
 8003b5a:	9303      	str	r3, [sp, #12]
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	9302      	str	r3, [sp, #8]
 8003b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b62:	9301      	str	r3, [sp, #4]
 8003b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b66:	9300      	str	r3, [sp, #0]
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	68b9      	ldr	r1, [r7, #8]
 8003b6c:	68f8      	ldr	r0, [r7, #12]
 8003b6e:	f000 f80e 	bl	8003b8e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003b72:	69f8      	ldr	r0, [r7, #28]
 8003b74:	f000 f894 	bl	8003ca0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	61bb      	str	r3, [r7, #24]
 8003b7c:	e002      	b.n	8003b84 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b82:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003b84:	69bb      	ldr	r3, [r7, #24]
	}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3720      	adds	r7, #32
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}

08003b8e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003b8e:	b580      	push	{r7, lr}
 8003b90:	b088      	sub	sp, #32
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	60f8      	str	r0, [r7, #12]
 8003b96:	60b9      	str	r1, [r7, #8]
 8003b98:	607a      	str	r2, [r7, #4]
 8003b9a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ba0:	6879      	ldr	r1, [r7, #4]
 8003ba2:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8003ba6:	440b      	add	r3, r1
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	4413      	add	r3, r2
 8003bac:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	f023 0307 	bic.w	r3, r3, #7
 8003bb4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	f003 0307 	and.w	r3, r3, #7
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d00c      	beq.n	8003bda <prvInitialiseNewTask+0x4c>
	__asm volatile
 8003bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc4:	b672      	cpsid	i
 8003bc6:	f383 8811 	msr	BASEPRI, r3
 8003bca:	f3bf 8f6f 	isb	sy
 8003bce:	f3bf 8f4f 	dsb	sy
 8003bd2:	b662      	cpsie	i
 8003bd4:	617b      	str	r3, [r7, #20]
}
 8003bd6:	bf00      	nop
 8003bd8:	e7fe      	b.n	8003bd8 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d01f      	beq.n	8003c20 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003be0:	2300      	movs	r3, #0
 8003be2:	61fb      	str	r3, [r7, #28]
 8003be4:	e012      	b.n	8003c0c <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003be6:	68ba      	ldr	r2, [r7, #8]
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	4413      	add	r3, r2
 8003bec:	7819      	ldrb	r1, [r3, #0]
 8003bee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	3334      	adds	r3, #52	; 0x34
 8003bf6:	460a      	mov	r2, r1
 8003bf8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003bfa:	68ba      	ldr	r2, [r7, #8]
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	4413      	add	r3, r2
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d006      	beq.n	8003c14 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	3301      	adds	r3, #1
 8003c0a:	61fb      	str	r3, [r7, #28]
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	2b0f      	cmp	r3, #15
 8003c10:	d9e9      	bls.n	8003be6 <prvInitialiseNewTask+0x58>
 8003c12:	e000      	b.n	8003c16 <prvInitialiseNewTask+0x88>
			{
				break;
 8003c14:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c1e:	e003      	b.n	8003c28 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c2a:	2b06      	cmp	r3, #6
 8003c2c:	d901      	bls.n	8003c32 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003c2e:	2306      	movs	r3, #6
 8003c30:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c36:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c3c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c40:	2200      	movs	r2, #0
 8003c42:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c46:	3304      	adds	r3, #4
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f7ff fd99 	bl	8003780 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c50:	3318      	adds	r3, #24
 8003c52:	4618      	mov	r0, r3
 8003c54:	f7ff fd94 	bl	8003780 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c5c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c60:	f1c3 0207 	rsb	r2, r3, #7
 8003c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c66:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c6c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c70:	2200      	movs	r2, #0
 8003c72:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c76:	2200      	movs	r2, #0
 8003c78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003c7c:	683a      	ldr	r2, [r7, #0]
 8003c7e:	68f9      	ldr	r1, [r7, #12]
 8003c80:	69b8      	ldr	r0, [r7, #24]
 8003c82:	f000 fc95 	bl	80045b0 <pxPortInitialiseStack>
 8003c86:	4602      	mov	r2, r0
 8003c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c8a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d002      	beq.n	8003c98 <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c96:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c98:	bf00      	nop
 8003c9a:	3720      	adds	r7, #32
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003ca8:	f000 fd90 	bl	80047cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003cac:	4b2a      	ldr	r3, [pc, #168]	; (8003d58 <prvAddNewTaskToReadyList+0xb8>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	4a29      	ldr	r2, [pc, #164]	; (8003d58 <prvAddNewTaskToReadyList+0xb8>)
 8003cb4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003cb6:	4b29      	ldr	r3, [pc, #164]	; (8003d5c <prvAddNewTaskToReadyList+0xbc>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d109      	bne.n	8003cd2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003cbe:	4a27      	ldr	r2, [pc, #156]	; (8003d5c <prvAddNewTaskToReadyList+0xbc>)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003cc4:	4b24      	ldr	r3, [pc, #144]	; (8003d58 <prvAddNewTaskToReadyList+0xb8>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d110      	bne.n	8003cee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003ccc:	f000 fb2c 	bl	8004328 <prvInitialiseTaskLists>
 8003cd0:	e00d      	b.n	8003cee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003cd2:	4b23      	ldr	r3, [pc, #140]	; (8003d60 <prvAddNewTaskToReadyList+0xc0>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d109      	bne.n	8003cee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003cda:	4b20      	ldr	r3, [pc, #128]	; (8003d5c <prvAddNewTaskToReadyList+0xbc>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d802      	bhi.n	8003cee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003ce8:	4a1c      	ldr	r2, [pc, #112]	; (8003d5c <prvAddNewTaskToReadyList+0xbc>)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003cee:	4b1d      	ldr	r3, [pc, #116]	; (8003d64 <prvAddNewTaskToReadyList+0xc4>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	4a1b      	ldr	r2, [pc, #108]	; (8003d64 <prvAddNewTaskToReadyList+0xc4>)
 8003cf6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	409a      	lsls	r2, r3
 8003d00:	4b19      	ldr	r3, [pc, #100]	; (8003d68 <prvAddNewTaskToReadyList+0xc8>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	4a18      	ldr	r2, [pc, #96]	; (8003d68 <prvAddNewTaskToReadyList+0xc8>)
 8003d08:	6013      	str	r3, [r2, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d0e:	4613      	mov	r3, r2
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	4413      	add	r3, r2
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	4a15      	ldr	r2, [pc, #84]	; (8003d6c <prvAddNewTaskToReadyList+0xcc>)
 8003d18:	441a      	add	r2, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	3304      	adds	r3, #4
 8003d1e:	4619      	mov	r1, r3
 8003d20:	4610      	mov	r0, r2
 8003d22:	f7ff fd3a 	bl	800379a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003d26:	f000 fd85 	bl	8004834 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003d2a:	4b0d      	ldr	r3, [pc, #52]	; (8003d60 <prvAddNewTaskToReadyList+0xc0>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d00e      	beq.n	8003d50 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003d32:	4b0a      	ldr	r3, [pc, #40]	; (8003d5c <prvAddNewTaskToReadyList+0xbc>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d207      	bcs.n	8003d50 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003d40:	4b0b      	ldr	r3, [pc, #44]	; (8003d70 <prvAddNewTaskToReadyList+0xd0>)
 8003d42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d46:	601a      	str	r2, [r3, #0]
 8003d48:	f3bf 8f4f 	dsb	sy
 8003d4c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d50:	bf00      	nop
 8003d52:	3708      	adds	r7, #8
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	20000488 	.word	0x20000488
 8003d5c:	20000388 	.word	0x20000388
 8003d60:	20000494 	.word	0x20000494
 8003d64:	200004a4 	.word	0x200004a4
 8003d68:	20000490 	.word	0x20000490
 8003d6c:	2000038c 	.word	0x2000038c
 8003d70:	e000ed04 	.word	0xe000ed04

08003d74 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d019      	beq.n	8003dba <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003d86:	4b14      	ldr	r3, [pc, #80]	; (8003dd8 <vTaskDelay+0x64>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d00c      	beq.n	8003da8 <vTaskDelay+0x34>
	__asm volatile
 8003d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d92:	b672      	cpsid	i
 8003d94:	f383 8811 	msr	BASEPRI, r3
 8003d98:	f3bf 8f6f 	isb	sy
 8003d9c:	f3bf 8f4f 	dsb	sy
 8003da0:	b662      	cpsie	i
 8003da2:	60bb      	str	r3, [r7, #8]
}
 8003da4:	bf00      	nop
 8003da6:	e7fe      	b.n	8003da6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8003da8:	f000 f87e 	bl	8003ea8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003dac:	2100      	movs	r1, #0
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 fb98 	bl	80044e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003db4:	f000 f886 	bl	8003ec4 <xTaskResumeAll>
 8003db8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d107      	bne.n	8003dd0 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8003dc0:	4b06      	ldr	r3, [pc, #24]	; (8003ddc <vTaskDelay+0x68>)
 8003dc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dc6:	601a      	str	r2, [r3, #0]
 8003dc8:	f3bf 8f4f 	dsb	sy
 8003dcc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003dd0:	bf00      	nop
 8003dd2:	3710      	adds	r7, #16
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	200004b0 	.word	0x200004b0
 8003ddc:	e000ed04 	.word	0xe000ed04

08003de0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b08a      	sub	sp, #40	; 0x28
 8003de4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003de6:	2300      	movs	r3, #0
 8003de8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003dea:	2300      	movs	r3, #0
 8003dec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003dee:	463a      	mov	r2, r7
 8003df0:	1d39      	adds	r1, r7, #4
 8003df2:	f107 0308 	add.w	r3, r7, #8
 8003df6:	4618      	mov	r0, r3
 8003df8:	f7fc fbdc 	bl	80005b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003dfc:	6839      	ldr	r1, [r7, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	68ba      	ldr	r2, [r7, #8]
 8003e02:	9202      	str	r2, [sp, #8]
 8003e04:	9301      	str	r3, [sp, #4]
 8003e06:	2300      	movs	r3, #0
 8003e08:	9300      	str	r3, [sp, #0]
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	460a      	mov	r2, r1
 8003e0e:	4920      	ldr	r1, [pc, #128]	; (8003e90 <vTaskStartScheduler+0xb0>)
 8003e10:	4820      	ldr	r0, [pc, #128]	; (8003e94 <vTaskStartScheduler+0xb4>)
 8003e12:	f7ff fe14 	bl	8003a3e <xTaskCreateStatic>
 8003e16:	4603      	mov	r3, r0
 8003e18:	4a1f      	ldr	r2, [pc, #124]	; (8003e98 <vTaskStartScheduler+0xb8>)
 8003e1a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003e1c:	4b1e      	ldr	r3, [pc, #120]	; (8003e98 <vTaskStartScheduler+0xb8>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d002      	beq.n	8003e2a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003e24:	2301      	movs	r3, #1
 8003e26:	617b      	str	r3, [r7, #20]
 8003e28:	e001      	b.n	8003e2e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d118      	bne.n	8003e66 <vTaskStartScheduler+0x86>
	__asm volatile
 8003e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e38:	b672      	cpsid	i
 8003e3a:	f383 8811 	msr	BASEPRI, r3
 8003e3e:	f3bf 8f6f 	isb	sy
 8003e42:	f3bf 8f4f 	dsb	sy
 8003e46:	b662      	cpsie	i
 8003e48:	613b      	str	r3, [r7, #16]
}
 8003e4a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003e4c:	4b13      	ldr	r3, [pc, #76]	; (8003e9c <vTaskStartScheduler+0xbc>)
 8003e4e:	f04f 32ff 	mov.w	r2, #4294967295
 8003e52:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003e54:	4b12      	ldr	r3, [pc, #72]	; (8003ea0 <vTaskStartScheduler+0xc0>)
 8003e56:	2201      	movs	r2, #1
 8003e58:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003e5a:	4b12      	ldr	r3, [pc, #72]	; (8003ea4 <vTaskStartScheduler+0xc4>)
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003e60:	f000 fc36 	bl	80046d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003e64:	e010      	b.n	8003e88 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e6c:	d10c      	bne.n	8003e88 <vTaskStartScheduler+0xa8>
	__asm volatile
 8003e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e72:	b672      	cpsid	i
 8003e74:	f383 8811 	msr	BASEPRI, r3
 8003e78:	f3bf 8f6f 	isb	sy
 8003e7c:	f3bf 8f4f 	dsb	sy
 8003e80:	b662      	cpsie	i
 8003e82:	60fb      	str	r3, [r7, #12]
}
 8003e84:	bf00      	nop
 8003e86:	e7fe      	b.n	8003e86 <vTaskStartScheduler+0xa6>
}
 8003e88:	bf00      	nop
 8003e8a:	3718      	adds	r7, #24
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	08005e44 	.word	0x08005e44
 8003e94:	080042f9 	.word	0x080042f9
 8003e98:	200004ac 	.word	0x200004ac
 8003e9c:	200004a8 	.word	0x200004a8
 8003ea0:	20000494 	.word	0x20000494
 8003ea4:	2000048c 	.word	0x2000048c

08003ea8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003eac:	4b04      	ldr	r3, [pc, #16]	; (8003ec0 <vTaskSuspendAll+0x18>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	4a03      	ldr	r2, [pc, #12]	; (8003ec0 <vTaskSuspendAll+0x18>)
 8003eb4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8003eb6:	bf00      	nop
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr
 8003ec0:	200004b0 	.word	0x200004b0

08003ec4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003ed2:	4b42      	ldr	r3, [pc, #264]	; (8003fdc <xTaskResumeAll+0x118>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d10c      	bne.n	8003ef4 <xTaskResumeAll+0x30>
	__asm volatile
 8003eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ede:	b672      	cpsid	i
 8003ee0:	f383 8811 	msr	BASEPRI, r3
 8003ee4:	f3bf 8f6f 	isb	sy
 8003ee8:	f3bf 8f4f 	dsb	sy
 8003eec:	b662      	cpsie	i
 8003eee:	603b      	str	r3, [r7, #0]
}
 8003ef0:	bf00      	nop
 8003ef2:	e7fe      	b.n	8003ef2 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003ef4:	f000 fc6a 	bl	80047cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003ef8:	4b38      	ldr	r3, [pc, #224]	; (8003fdc <xTaskResumeAll+0x118>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	3b01      	subs	r3, #1
 8003efe:	4a37      	ldr	r2, [pc, #220]	; (8003fdc <xTaskResumeAll+0x118>)
 8003f00:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f02:	4b36      	ldr	r3, [pc, #216]	; (8003fdc <xTaskResumeAll+0x118>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d161      	bne.n	8003fce <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003f0a:	4b35      	ldr	r3, [pc, #212]	; (8003fe0 <xTaskResumeAll+0x11c>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d05d      	beq.n	8003fce <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f12:	e02e      	b.n	8003f72 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f14:	4b33      	ldr	r3, [pc, #204]	; (8003fe4 <xTaskResumeAll+0x120>)
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	3318      	adds	r3, #24
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7ff fc97 	bl	8003854 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	3304      	adds	r3, #4
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7ff fc92 	bl	8003854 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f34:	2201      	movs	r2, #1
 8003f36:	409a      	lsls	r2, r3
 8003f38:	4b2b      	ldr	r3, [pc, #172]	; (8003fe8 <xTaskResumeAll+0x124>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	4a2a      	ldr	r2, [pc, #168]	; (8003fe8 <xTaskResumeAll+0x124>)
 8003f40:	6013      	str	r3, [r2, #0]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f46:	4613      	mov	r3, r2
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	4413      	add	r3, r2
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	4a27      	ldr	r2, [pc, #156]	; (8003fec <xTaskResumeAll+0x128>)
 8003f50:	441a      	add	r2, r3
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	3304      	adds	r3, #4
 8003f56:	4619      	mov	r1, r3
 8003f58:	4610      	mov	r0, r2
 8003f5a:	f7ff fc1e 	bl	800379a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f62:	4b23      	ldr	r3, [pc, #140]	; (8003ff0 <xTaskResumeAll+0x12c>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d302      	bcc.n	8003f72 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003f6c:	4b21      	ldr	r3, [pc, #132]	; (8003ff4 <xTaskResumeAll+0x130>)
 8003f6e:	2201      	movs	r2, #1
 8003f70:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f72:	4b1c      	ldr	r3, [pc, #112]	; (8003fe4 <xTaskResumeAll+0x120>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d1cc      	bne.n	8003f14 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d001      	beq.n	8003f84 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003f80:	f000 fa72 	bl	8004468 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003f84:	4b1c      	ldr	r3, [pc, #112]	; (8003ff8 <xTaskResumeAll+0x134>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d010      	beq.n	8003fb2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003f90:	f000 f836 	bl	8004000 <xTaskIncrementTick>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d002      	beq.n	8003fa0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003f9a:	4b16      	ldr	r3, [pc, #88]	; (8003ff4 <xTaskResumeAll+0x130>)
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	3b01      	subs	r3, #1
 8003fa4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d1f1      	bne.n	8003f90 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8003fac:	4b12      	ldr	r3, [pc, #72]	; (8003ff8 <xTaskResumeAll+0x134>)
 8003fae:	2200      	movs	r2, #0
 8003fb0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003fb2:	4b10      	ldr	r3, [pc, #64]	; (8003ff4 <xTaskResumeAll+0x130>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d009      	beq.n	8003fce <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003fbe:	4b0f      	ldr	r3, [pc, #60]	; (8003ffc <xTaskResumeAll+0x138>)
 8003fc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fc4:	601a      	str	r2, [r3, #0]
 8003fc6:	f3bf 8f4f 	dsb	sy
 8003fca:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003fce:	f000 fc31 	bl	8004834 <vPortExitCritical>

	return xAlreadyYielded;
 8003fd2:	68bb      	ldr	r3, [r7, #8]
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3710      	adds	r7, #16
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	200004b0 	.word	0x200004b0
 8003fe0:	20000488 	.word	0x20000488
 8003fe4:	20000448 	.word	0x20000448
 8003fe8:	20000490 	.word	0x20000490
 8003fec:	2000038c 	.word	0x2000038c
 8003ff0:	20000388 	.word	0x20000388
 8003ff4:	2000049c 	.word	0x2000049c
 8003ff8:	20000498 	.word	0x20000498
 8003ffc:	e000ed04 	.word	0xe000ed04

08004000 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b086      	sub	sp, #24
 8004004:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004006:	2300      	movs	r3, #0
 8004008:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800400a:	4b4f      	ldr	r3, [pc, #316]	; (8004148 <xTaskIncrementTick+0x148>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2b00      	cmp	r3, #0
 8004010:	f040 808a 	bne.w	8004128 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004014:	4b4d      	ldr	r3, [pc, #308]	; (800414c <xTaskIncrementTick+0x14c>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	3301      	adds	r3, #1
 800401a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800401c:	4a4b      	ldr	r2, [pc, #300]	; (800414c <xTaskIncrementTick+0x14c>)
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d122      	bne.n	800406e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8004028:	4b49      	ldr	r3, [pc, #292]	; (8004150 <xTaskIncrementTick+0x150>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d00c      	beq.n	800404c <xTaskIncrementTick+0x4c>
	__asm volatile
 8004032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004036:	b672      	cpsid	i
 8004038:	f383 8811 	msr	BASEPRI, r3
 800403c:	f3bf 8f6f 	isb	sy
 8004040:	f3bf 8f4f 	dsb	sy
 8004044:	b662      	cpsie	i
 8004046:	603b      	str	r3, [r7, #0]
}
 8004048:	bf00      	nop
 800404a:	e7fe      	b.n	800404a <xTaskIncrementTick+0x4a>
 800404c:	4b40      	ldr	r3, [pc, #256]	; (8004150 <xTaskIncrementTick+0x150>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	60fb      	str	r3, [r7, #12]
 8004052:	4b40      	ldr	r3, [pc, #256]	; (8004154 <xTaskIncrementTick+0x154>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a3e      	ldr	r2, [pc, #248]	; (8004150 <xTaskIncrementTick+0x150>)
 8004058:	6013      	str	r3, [r2, #0]
 800405a:	4a3e      	ldr	r2, [pc, #248]	; (8004154 <xTaskIncrementTick+0x154>)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6013      	str	r3, [r2, #0]
 8004060:	4b3d      	ldr	r3, [pc, #244]	; (8004158 <xTaskIncrementTick+0x158>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	3301      	adds	r3, #1
 8004066:	4a3c      	ldr	r2, [pc, #240]	; (8004158 <xTaskIncrementTick+0x158>)
 8004068:	6013      	str	r3, [r2, #0]
 800406a:	f000 f9fd 	bl	8004468 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800406e:	4b3b      	ldr	r3, [pc, #236]	; (800415c <xTaskIncrementTick+0x15c>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	693a      	ldr	r2, [r7, #16]
 8004074:	429a      	cmp	r2, r3
 8004076:	d348      	bcc.n	800410a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004078:	4b35      	ldr	r3, [pc, #212]	; (8004150 <xTaskIncrementTick+0x150>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d104      	bne.n	800408c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004082:	4b36      	ldr	r3, [pc, #216]	; (800415c <xTaskIncrementTick+0x15c>)
 8004084:	f04f 32ff 	mov.w	r2, #4294967295
 8004088:	601a      	str	r2, [r3, #0]
					break;
 800408a:	e03e      	b.n	800410a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800408c:	4b30      	ldr	r3, [pc, #192]	; (8004150 <xTaskIncrementTick+0x150>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800409c:	693a      	ldr	r2, [r7, #16]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d203      	bcs.n	80040ac <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80040a4:	4a2d      	ldr	r2, [pc, #180]	; (800415c <xTaskIncrementTick+0x15c>)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80040aa:	e02e      	b.n	800410a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	3304      	adds	r3, #4
 80040b0:	4618      	mov	r0, r3
 80040b2:	f7ff fbcf 	bl	8003854 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d004      	beq.n	80040c8 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	3318      	adds	r3, #24
 80040c2:	4618      	mov	r0, r3
 80040c4:	f7ff fbc6 	bl	8003854 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040cc:	2201      	movs	r2, #1
 80040ce:	409a      	lsls	r2, r3
 80040d0:	4b23      	ldr	r3, [pc, #140]	; (8004160 <xTaskIncrementTick+0x160>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	4a22      	ldr	r2, [pc, #136]	; (8004160 <xTaskIncrementTick+0x160>)
 80040d8:	6013      	str	r3, [r2, #0]
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040de:	4613      	mov	r3, r2
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	4413      	add	r3, r2
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	4a1f      	ldr	r2, [pc, #124]	; (8004164 <xTaskIncrementTick+0x164>)
 80040e8:	441a      	add	r2, r3
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	3304      	adds	r3, #4
 80040ee:	4619      	mov	r1, r3
 80040f0:	4610      	mov	r0, r2
 80040f2:	f7ff fb52 	bl	800379a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040fa:	4b1b      	ldr	r3, [pc, #108]	; (8004168 <xTaskIncrementTick+0x168>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004100:	429a      	cmp	r2, r3
 8004102:	d3b9      	bcc.n	8004078 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8004104:	2301      	movs	r3, #1
 8004106:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004108:	e7b6      	b.n	8004078 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800410a:	4b17      	ldr	r3, [pc, #92]	; (8004168 <xTaskIncrementTick+0x168>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004110:	4914      	ldr	r1, [pc, #80]	; (8004164 <xTaskIncrementTick+0x164>)
 8004112:	4613      	mov	r3, r2
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	4413      	add	r3, r2
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	440b      	add	r3, r1
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2b01      	cmp	r3, #1
 8004120:	d907      	bls.n	8004132 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8004122:	2301      	movs	r3, #1
 8004124:	617b      	str	r3, [r7, #20]
 8004126:	e004      	b.n	8004132 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004128:	4b10      	ldr	r3, [pc, #64]	; (800416c <xTaskIncrementTick+0x16c>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	3301      	adds	r3, #1
 800412e:	4a0f      	ldr	r2, [pc, #60]	; (800416c <xTaskIncrementTick+0x16c>)
 8004130:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004132:	4b0f      	ldr	r3, [pc, #60]	; (8004170 <xTaskIncrementTick+0x170>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d001      	beq.n	800413e <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800413a:	2301      	movs	r3, #1
 800413c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800413e:	697b      	ldr	r3, [r7, #20]
}
 8004140:	4618      	mov	r0, r3
 8004142:	3718      	adds	r7, #24
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}
 8004148:	200004b0 	.word	0x200004b0
 800414c:	2000048c 	.word	0x2000048c
 8004150:	20000440 	.word	0x20000440
 8004154:	20000444 	.word	0x20000444
 8004158:	200004a0 	.word	0x200004a0
 800415c:	200004a8 	.word	0x200004a8
 8004160:	20000490 	.word	0x20000490
 8004164:	2000038c 	.word	0x2000038c
 8004168:	20000388 	.word	0x20000388
 800416c:	20000498 	.word	0x20000498
 8004170:	2000049c 	.word	0x2000049c

08004174 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004174:	b480      	push	{r7}
 8004176:	b087      	sub	sp, #28
 8004178:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800417a:	4b28      	ldr	r3, [pc, #160]	; (800421c <vTaskSwitchContext+0xa8>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d003      	beq.n	800418a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004182:	4b27      	ldr	r3, [pc, #156]	; (8004220 <vTaskSwitchContext+0xac>)
 8004184:	2201      	movs	r2, #1
 8004186:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004188:	e041      	b.n	800420e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800418a:	4b25      	ldr	r3, [pc, #148]	; (8004220 <vTaskSwitchContext+0xac>)
 800418c:	2200      	movs	r2, #0
 800418e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004190:	4b24      	ldr	r3, [pc, #144]	; (8004224 <vTaskSwitchContext+0xb0>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	fab3 f383 	clz	r3, r3
 800419c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800419e:	7afb      	ldrb	r3, [r7, #11]
 80041a0:	f1c3 031f 	rsb	r3, r3, #31
 80041a4:	617b      	str	r3, [r7, #20]
 80041a6:	4920      	ldr	r1, [pc, #128]	; (8004228 <vTaskSwitchContext+0xb4>)
 80041a8:	697a      	ldr	r2, [r7, #20]
 80041aa:	4613      	mov	r3, r2
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	4413      	add	r3, r2
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	440b      	add	r3, r1
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d10c      	bne.n	80041d4 <vTaskSwitchContext+0x60>
	__asm volatile
 80041ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041be:	b672      	cpsid	i
 80041c0:	f383 8811 	msr	BASEPRI, r3
 80041c4:	f3bf 8f6f 	isb	sy
 80041c8:	f3bf 8f4f 	dsb	sy
 80041cc:	b662      	cpsie	i
 80041ce:	607b      	str	r3, [r7, #4]
}
 80041d0:	bf00      	nop
 80041d2:	e7fe      	b.n	80041d2 <vTaskSwitchContext+0x5e>
 80041d4:	697a      	ldr	r2, [r7, #20]
 80041d6:	4613      	mov	r3, r2
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	4413      	add	r3, r2
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	4a12      	ldr	r2, [pc, #72]	; (8004228 <vTaskSwitchContext+0xb4>)
 80041e0:	4413      	add	r3, r2
 80041e2:	613b      	str	r3, [r7, #16]
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	685a      	ldr	r2, [r3, #4]
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	605a      	str	r2, [r3, #4]
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	685a      	ldr	r2, [r3, #4]
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	3308      	adds	r3, #8
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d104      	bne.n	8004204 <vTaskSwitchContext+0x90>
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	685a      	ldr	r2, [r3, #4]
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	605a      	str	r2, [r3, #4]
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	4a08      	ldr	r2, [pc, #32]	; (800422c <vTaskSwitchContext+0xb8>)
 800420c:	6013      	str	r3, [r2, #0]
}
 800420e:	bf00      	nop
 8004210:	371c      	adds	r7, #28
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	200004b0 	.word	0x200004b0
 8004220:	2000049c 	.word	0x2000049c
 8004224:	20000490 	.word	0x20000490
 8004228:	2000038c 	.word	0x2000038c
 800422c:	20000388 	.word	0x20000388

08004230 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b086      	sub	sp, #24
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d10c      	bne.n	8004260 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8004246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800424a:	b672      	cpsid	i
 800424c:	f383 8811 	msr	BASEPRI, r3
 8004250:	f3bf 8f6f 	isb	sy
 8004254:	f3bf 8f4f 	dsb	sy
 8004258:	b662      	cpsie	i
 800425a:	60fb      	str	r3, [r7, #12]
}
 800425c:	bf00      	nop
 800425e:	e7fe      	b.n	800425e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	3318      	adds	r3, #24
 8004264:	4618      	mov	r0, r3
 8004266:	f7ff faf5 	bl	8003854 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800426a:	4b1d      	ldr	r3, [pc, #116]	; (80042e0 <xTaskRemoveFromEventList+0xb0>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d11c      	bne.n	80042ac <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	3304      	adds	r3, #4
 8004276:	4618      	mov	r0, r3
 8004278:	f7ff faec 	bl	8003854 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004280:	2201      	movs	r2, #1
 8004282:	409a      	lsls	r2, r3
 8004284:	4b17      	ldr	r3, [pc, #92]	; (80042e4 <xTaskRemoveFromEventList+0xb4>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4313      	orrs	r3, r2
 800428a:	4a16      	ldr	r2, [pc, #88]	; (80042e4 <xTaskRemoveFromEventList+0xb4>)
 800428c:	6013      	str	r3, [r2, #0]
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004292:	4613      	mov	r3, r2
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	4413      	add	r3, r2
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	4a13      	ldr	r2, [pc, #76]	; (80042e8 <xTaskRemoveFromEventList+0xb8>)
 800429c:	441a      	add	r2, r3
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	3304      	adds	r3, #4
 80042a2:	4619      	mov	r1, r3
 80042a4:	4610      	mov	r0, r2
 80042a6:	f7ff fa78 	bl	800379a <vListInsertEnd>
 80042aa:	e005      	b.n	80042b8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	3318      	adds	r3, #24
 80042b0:	4619      	mov	r1, r3
 80042b2:	480e      	ldr	r0, [pc, #56]	; (80042ec <xTaskRemoveFromEventList+0xbc>)
 80042b4:	f7ff fa71 	bl	800379a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042bc:	4b0c      	ldr	r3, [pc, #48]	; (80042f0 <xTaskRemoveFromEventList+0xc0>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d905      	bls.n	80042d2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80042c6:	2301      	movs	r3, #1
 80042c8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80042ca:	4b0a      	ldr	r3, [pc, #40]	; (80042f4 <xTaskRemoveFromEventList+0xc4>)
 80042cc:	2201      	movs	r2, #1
 80042ce:	601a      	str	r2, [r3, #0]
 80042d0:	e001      	b.n	80042d6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80042d2:	2300      	movs	r3, #0
 80042d4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80042d6:	697b      	ldr	r3, [r7, #20]
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3718      	adds	r7, #24
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	200004b0 	.word	0x200004b0
 80042e4:	20000490 	.word	0x20000490
 80042e8:	2000038c 	.word	0x2000038c
 80042ec:	20000448 	.word	0x20000448
 80042f0:	20000388 	.word	0x20000388
 80042f4:	2000049c 	.word	0x2000049c

080042f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b082      	sub	sp, #8
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004300:	f000 f852 	bl	80043a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004304:	4b06      	ldr	r3, [pc, #24]	; (8004320 <prvIdleTask+0x28>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2b01      	cmp	r3, #1
 800430a:	d9f9      	bls.n	8004300 <prvIdleTask+0x8>
			{
				taskYIELD();
 800430c:	4b05      	ldr	r3, [pc, #20]	; (8004324 <prvIdleTask+0x2c>)
 800430e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004312:	601a      	str	r2, [r3, #0]
 8004314:	f3bf 8f4f 	dsb	sy
 8004318:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800431c:	e7f0      	b.n	8004300 <prvIdleTask+0x8>
 800431e:	bf00      	nop
 8004320:	2000038c 	.word	0x2000038c
 8004324:	e000ed04 	.word	0xe000ed04

08004328 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800432e:	2300      	movs	r3, #0
 8004330:	607b      	str	r3, [r7, #4]
 8004332:	e00c      	b.n	800434e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	4613      	mov	r3, r2
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	4413      	add	r3, r2
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	4a12      	ldr	r2, [pc, #72]	; (8004388 <prvInitialiseTaskLists+0x60>)
 8004340:	4413      	add	r3, r2
 8004342:	4618      	mov	r0, r3
 8004344:	f7ff f9fc 	bl	8003740 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	3301      	adds	r3, #1
 800434c:	607b      	str	r3, [r7, #4]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2b06      	cmp	r3, #6
 8004352:	d9ef      	bls.n	8004334 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004354:	480d      	ldr	r0, [pc, #52]	; (800438c <prvInitialiseTaskLists+0x64>)
 8004356:	f7ff f9f3 	bl	8003740 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800435a:	480d      	ldr	r0, [pc, #52]	; (8004390 <prvInitialiseTaskLists+0x68>)
 800435c:	f7ff f9f0 	bl	8003740 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004360:	480c      	ldr	r0, [pc, #48]	; (8004394 <prvInitialiseTaskLists+0x6c>)
 8004362:	f7ff f9ed 	bl	8003740 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004366:	480c      	ldr	r0, [pc, #48]	; (8004398 <prvInitialiseTaskLists+0x70>)
 8004368:	f7ff f9ea 	bl	8003740 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800436c:	480b      	ldr	r0, [pc, #44]	; (800439c <prvInitialiseTaskLists+0x74>)
 800436e:	f7ff f9e7 	bl	8003740 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004372:	4b0b      	ldr	r3, [pc, #44]	; (80043a0 <prvInitialiseTaskLists+0x78>)
 8004374:	4a05      	ldr	r2, [pc, #20]	; (800438c <prvInitialiseTaskLists+0x64>)
 8004376:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004378:	4b0a      	ldr	r3, [pc, #40]	; (80043a4 <prvInitialiseTaskLists+0x7c>)
 800437a:	4a05      	ldr	r2, [pc, #20]	; (8004390 <prvInitialiseTaskLists+0x68>)
 800437c:	601a      	str	r2, [r3, #0]
}
 800437e:	bf00      	nop
 8004380:	3708      	adds	r7, #8
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	2000038c 	.word	0x2000038c
 800438c:	20000418 	.word	0x20000418
 8004390:	2000042c 	.word	0x2000042c
 8004394:	20000448 	.word	0x20000448
 8004398:	2000045c 	.word	0x2000045c
 800439c:	20000474 	.word	0x20000474
 80043a0:	20000440 	.word	0x20000440
 80043a4:	20000444 	.word	0x20000444

080043a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80043ae:	e019      	b.n	80043e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80043b0:	f000 fa0c 	bl	80047cc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043b4:	4b10      	ldr	r3, [pc, #64]	; (80043f8 <prvCheckTasksWaitingTermination+0x50>)
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	3304      	adds	r3, #4
 80043c0:	4618      	mov	r0, r3
 80043c2:	f7ff fa47 	bl	8003854 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80043c6:	4b0d      	ldr	r3, [pc, #52]	; (80043fc <prvCheckTasksWaitingTermination+0x54>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	3b01      	subs	r3, #1
 80043cc:	4a0b      	ldr	r2, [pc, #44]	; (80043fc <prvCheckTasksWaitingTermination+0x54>)
 80043ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80043d0:	4b0b      	ldr	r3, [pc, #44]	; (8004400 <prvCheckTasksWaitingTermination+0x58>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	3b01      	subs	r3, #1
 80043d6:	4a0a      	ldr	r2, [pc, #40]	; (8004400 <prvCheckTasksWaitingTermination+0x58>)
 80043d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80043da:	f000 fa2b 	bl	8004834 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f000 f810 	bl	8004404 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80043e4:	4b06      	ldr	r3, [pc, #24]	; (8004400 <prvCheckTasksWaitingTermination+0x58>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d1e1      	bne.n	80043b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80043ec:	bf00      	nop
 80043ee:	bf00      	nop
 80043f0:	3708      	adds	r7, #8
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	2000045c 	.word	0x2000045c
 80043fc:	20000488 	.word	0x20000488
 8004400:	20000470 	.word	0x20000470

08004404 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004412:	2b00      	cmp	r3, #0
 8004414:	d108      	bne.n	8004428 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441a:	4618      	mov	r0, r3
 800441c:	f000 fb88 	bl	8004b30 <vPortFree>
				vPortFree( pxTCB );
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f000 fb85 	bl	8004b30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004426:	e01a      	b.n	800445e <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800442e:	2b01      	cmp	r3, #1
 8004430:	d103      	bne.n	800443a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f000 fb7c 	bl	8004b30 <vPortFree>
	}
 8004438:	e011      	b.n	800445e <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004440:	2b02      	cmp	r3, #2
 8004442:	d00c      	beq.n	800445e <prvDeleteTCB+0x5a>
	__asm volatile
 8004444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004448:	b672      	cpsid	i
 800444a:	f383 8811 	msr	BASEPRI, r3
 800444e:	f3bf 8f6f 	isb	sy
 8004452:	f3bf 8f4f 	dsb	sy
 8004456:	b662      	cpsie	i
 8004458:	60fb      	str	r3, [r7, #12]
}
 800445a:	bf00      	nop
 800445c:	e7fe      	b.n	800445c <prvDeleteTCB+0x58>
	}
 800445e:	bf00      	nop
 8004460:	3710      	adds	r7, #16
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
	...

08004468 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800446e:	4b0c      	ldr	r3, [pc, #48]	; (80044a0 <prvResetNextTaskUnblockTime+0x38>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d104      	bne.n	8004482 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004478:	4b0a      	ldr	r3, [pc, #40]	; (80044a4 <prvResetNextTaskUnblockTime+0x3c>)
 800447a:	f04f 32ff 	mov.w	r2, #4294967295
 800447e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004480:	e008      	b.n	8004494 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004482:	4b07      	ldr	r3, [pc, #28]	; (80044a0 <prvResetNextTaskUnblockTime+0x38>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	4a04      	ldr	r2, [pc, #16]	; (80044a4 <prvResetNextTaskUnblockTime+0x3c>)
 8004492:	6013      	str	r3, [r2, #0]
}
 8004494:	bf00      	nop
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr
 80044a0:	20000440 	.word	0x20000440
 80044a4:	200004a8 	.word	0x200004a8

080044a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80044ae:	4b0b      	ldr	r3, [pc, #44]	; (80044dc <xTaskGetSchedulerState+0x34>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d102      	bne.n	80044bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80044b6:	2301      	movs	r3, #1
 80044b8:	607b      	str	r3, [r7, #4]
 80044ba:	e008      	b.n	80044ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044bc:	4b08      	ldr	r3, [pc, #32]	; (80044e0 <xTaskGetSchedulerState+0x38>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d102      	bne.n	80044ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80044c4:	2302      	movs	r3, #2
 80044c6:	607b      	str	r3, [r7, #4]
 80044c8:	e001      	b.n	80044ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80044ca:	2300      	movs	r3, #0
 80044cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80044ce:	687b      	ldr	r3, [r7, #4]
	}
 80044d0:	4618      	mov	r0, r3
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr
 80044dc:	20000494 	.word	0x20000494
 80044e0:	200004b0 	.word	0x200004b0

080044e4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80044ee:	4b29      	ldr	r3, [pc, #164]	; (8004594 <prvAddCurrentTaskToDelayedList+0xb0>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80044f4:	4b28      	ldr	r3, [pc, #160]	; (8004598 <prvAddCurrentTaskToDelayedList+0xb4>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	3304      	adds	r3, #4
 80044fa:	4618      	mov	r0, r3
 80044fc:	f7ff f9aa 	bl	8003854 <uxListRemove>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d10b      	bne.n	800451e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004506:	4b24      	ldr	r3, [pc, #144]	; (8004598 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800450c:	2201      	movs	r2, #1
 800450e:	fa02 f303 	lsl.w	r3, r2, r3
 8004512:	43da      	mvns	r2, r3
 8004514:	4b21      	ldr	r3, [pc, #132]	; (800459c <prvAddCurrentTaskToDelayedList+0xb8>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4013      	ands	r3, r2
 800451a:	4a20      	ldr	r2, [pc, #128]	; (800459c <prvAddCurrentTaskToDelayedList+0xb8>)
 800451c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004524:	d10a      	bne.n	800453c <prvAddCurrentTaskToDelayedList+0x58>
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d007      	beq.n	800453c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800452c:	4b1a      	ldr	r3, [pc, #104]	; (8004598 <prvAddCurrentTaskToDelayedList+0xb4>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	3304      	adds	r3, #4
 8004532:	4619      	mov	r1, r3
 8004534:	481a      	ldr	r0, [pc, #104]	; (80045a0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004536:	f7ff f930 	bl	800379a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800453a:	e026      	b.n	800458a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800453c:	68fa      	ldr	r2, [r7, #12]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4413      	add	r3, r2
 8004542:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004544:	4b14      	ldr	r3, [pc, #80]	; (8004598 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68ba      	ldr	r2, [r7, #8]
 800454a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800454c:	68ba      	ldr	r2, [r7, #8]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	429a      	cmp	r2, r3
 8004552:	d209      	bcs.n	8004568 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004554:	4b13      	ldr	r3, [pc, #76]	; (80045a4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	4b0f      	ldr	r3, [pc, #60]	; (8004598 <prvAddCurrentTaskToDelayedList+0xb4>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	3304      	adds	r3, #4
 800455e:	4619      	mov	r1, r3
 8004560:	4610      	mov	r0, r2
 8004562:	f7ff f93e 	bl	80037e2 <vListInsert>
}
 8004566:	e010      	b.n	800458a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004568:	4b0f      	ldr	r3, [pc, #60]	; (80045a8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	4b0a      	ldr	r3, [pc, #40]	; (8004598 <prvAddCurrentTaskToDelayedList+0xb4>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	3304      	adds	r3, #4
 8004572:	4619      	mov	r1, r3
 8004574:	4610      	mov	r0, r2
 8004576:	f7ff f934 	bl	80037e2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800457a:	4b0c      	ldr	r3, [pc, #48]	; (80045ac <prvAddCurrentTaskToDelayedList+0xc8>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68ba      	ldr	r2, [r7, #8]
 8004580:	429a      	cmp	r2, r3
 8004582:	d202      	bcs.n	800458a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004584:	4a09      	ldr	r2, [pc, #36]	; (80045ac <prvAddCurrentTaskToDelayedList+0xc8>)
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	6013      	str	r3, [r2, #0]
}
 800458a:	bf00      	nop
 800458c:	3710      	adds	r7, #16
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	2000048c 	.word	0x2000048c
 8004598:	20000388 	.word	0x20000388
 800459c:	20000490 	.word	0x20000490
 80045a0:	20000474 	.word	0x20000474
 80045a4:	20000444 	.word	0x20000444
 80045a8:	20000440 	.word	0x20000440
 80045ac:	200004a8 	.word	0x200004a8

080045b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80045b0:	b480      	push	{r7}
 80045b2:	b085      	sub	sp, #20
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	60b9      	str	r1, [r7, #8]
 80045ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	3b04      	subs	r3, #4
 80045c0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80045c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	3b04      	subs	r3, #4
 80045ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	f023 0201 	bic.w	r2, r3, #1
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	3b04      	subs	r3, #4
 80045de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80045e0:	4a0c      	ldr	r2, [pc, #48]	; (8004614 <pxPortInitialiseStack+0x64>)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	3b14      	subs	r3, #20
 80045ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	3b04      	subs	r3, #4
 80045f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f06f 0202 	mvn.w	r2, #2
 80045fe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	3b20      	subs	r3, #32
 8004604:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004606:	68fb      	ldr	r3, [r7, #12]
}
 8004608:	4618      	mov	r0, r3
 800460a:	3714      	adds	r7, #20
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr
 8004614:	08004619 	.word	0x08004619

08004618 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004618:	b480      	push	{r7}
 800461a:	b085      	sub	sp, #20
 800461c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800461e:	2300      	movs	r3, #0
 8004620:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004622:	4b14      	ldr	r3, [pc, #80]	; (8004674 <prvTaskExitError+0x5c>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800462a:	d00c      	beq.n	8004646 <prvTaskExitError+0x2e>
	__asm volatile
 800462c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004630:	b672      	cpsid	i
 8004632:	f383 8811 	msr	BASEPRI, r3
 8004636:	f3bf 8f6f 	isb	sy
 800463a:	f3bf 8f4f 	dsb	sy
 800463e:	b662      	cpsie	i
 8004640:	60fb      	str	r3, [r7, #12]
}
 8004642:	bf00      	nop
 8004644:	e7fe      	b.n	8004644 <prvTaskExitError+0x2c>
	__asm volatile
 8004646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800464a:	b672      	cpsid	i
 800464c:	f383 8811 	msr	BASEPRI, r3
 8004650:	f3bf 8f6f 	isb	sy
 8004654:	f3bf 8f4f 	dsb	sy
 8004658:	b662      	cpsie	i
 800465a:	60bb      	str	r3, [r7, #8]
}
 800465c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800465e:	bf00      	nop
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d0fc      	beq.n	8004660 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004666:	bf00      	nop
 8004668:	bf00      	nop
 800466a:	3714      	adds	r7, #20
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr
 8004674:	2000000c 	.word	0x2000000c
	...

08004680 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004680:	4b07      	ldr	r3, [pc, #28]	; (80046a0 <pxCurrentTCBConst2>)
 8004682:	6819      	ldr	r1, [r3, #0]
 8004684:	6808      	ldr	r0, [r1, #0]
 8004686:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800468a:	f380 8809 	msr	PSP, r0
 800468e:	f3bf 8f6f 	isb	sy
 8004692:	f04f 0000 	mov.w	r0, #0
 8004696:	f380 8811 	msr	BASEPRI, r0
 800469a:	4770      	bx	lr
 800469c:	f3af 8000 	nop.w

080046a0 <pxCurrentTCBConst2>:
 80046a0:	20000388 	.word	0x20000388
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80046a4:	bf00      	nop
 80046a6:	bf00      	nop

080046a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80046a8:	4808      	ldr	r0, [pc, #32]	; (80046cc <prvPortStartFirstTask+0x24>)
 80046aa:	6800      	ldr	r0, [r0, #0]
 80046ac:	6800      	ldr	r0, [r0, #0]
 80046ae:	f380 8808 	msr	MSP, r0
 80046b2:	f04f 0000 	mov.w	r0, #0
 80046b6:	f380 8814 	msr	CONTROL, r0
 80046ba:	b662      	cpsie	i
 80046bc:	b661      	cpsie	f
 80046be:	f3bf 8f4f 	dsb	sy
 80046c2:	f3bf 8f6f 	isb	sy
 80046c6:	df00      	svc	0
 80046c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80046ca:	bf00      	nop
 80046cc:	e000ed08 	.word	0xe000ed08

080046d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80046d6:	4b37      	ldr	r3, [pc, #220]	; (80047b4 <xPortStartScheduler+0xe4>)
 80046d8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	22ff      	movs	r2, #255	; 0xff
 80046e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80046f0:	78fb      	ldrb	r3, [r7, #3]
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80046f8:	b2da      	uxtb	r2, r3
 80046fa:	4b2f      	ldr	r3, [pc, #188]	; (80047b8 <xPortStartScheduler+0xe8>)
 80046fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80046fe:	4b2f      	ldr	r3, [pc, #188]	; (80047bc <xPortStartScheduler+0xec>)
 8004700:	2207      	movs	r2, #7
 8004702:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004704:	e009      	b.n	800471a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004706:	4b2d      	ldr	r3, [pc, #180]	; (80047bc <xPortStartScheduler+0xec>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	3b01      	subs	r3, #1
 800470c:	4a2b      	ldr	r2, [pc, #172]	; (80047bc <xPortStartScheduler+0xec>)
 800470e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004710:	78fb      	ldrb	r3, [r7, #3]
 8004712:	b2db      	uxtb	r3, r3
 8004714:	005b      	lsls	r3, r3, #1
 8004716:	b2db      	uxtb	r3, r3
 8004718:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800471a:	78fb      	ldrb	r3, [r7, #3]
 800471c:	b2db      	uxtb	r3, r3
 800471e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004722:	2b80      	cmp	r3, #128	; 0x80
 8004724:	d0ef      	beq.n	8004706 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004726:	4b25      	ldr	r3, [pc, #148]	; (80047bc <xPortStartScheduler+0xec>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f1c3 0307 	rsb	r3, r3, #7
 800472e:	2b04      	cmp	r3, #4
 8004730:	d00c      	beq.n	800474c <xPortStartScheduler+0x7c>
	__asm volatile
 8004732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004736:	b672      	cpsid	i
 8004738:	f383 8811 	msr	BASEPRI, r3
 800473c:	f3bf 8f6f 	isb	sy
 8004740:	f3bf 8f4f 	dsb	sy
 8004744:	b662      	cpsie	i
 8004746:	60bb      	str	r3, [r7, #8]
}
 8004748:	bf00      	nop
 800474a:	e7fe      	b.n	800474a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800474c:	4b1b      	ldr	r3, [pc, #108]	; (80047bc <xPortStartScheduler+0xec>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	021b      	lsls	r3, r3, #8
 8004752:	4a1a      	ldr	r2, [pc, #104]	; (80047bc <xPortStartScheduler+0xec>)
 8004754:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004756:	4b19      	ldr	r3, [pc, #100]	; (80047bc <xPortStartScheduler+0xec>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800475e:	4a17      	ldr	r2, [pc, #92]	; (80047bc <xPortStartScheduler+0xec>)
 8004760:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	b2da      	uxtb	r2, r3
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800476a:	4b15      	ldr	r3, [pc, #84]	; (80047c0 <xPortStartScheduler+0xf0>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a14      	ldr	r2, [pc, #80]	; (80047c0 <xPortStartScheduler+0xf0>)
 8004770:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004774:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004776:	4b12      	ldr	r3, [pc, #72]	; (80047c0 <xPortStartScheduler+0xf0>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a11      	ldr	r2, [pc, #68]	; (80047c0 <xPortStartScheduler+0xf0>)
 800477c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004780:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004782:	f000 f8dd 	bl	8004940 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004786:	4b0f      	ldr	r3, [pc, #60]	; (80047c4 <xPortStartScheduler+0xf4>)
 8004788:	2200      	movs	r2, #0
 800478a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800478c:	f000 f8fc 	bl	8004988 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004790:	4b0d      	ldr	r3, [pc, #52]	; (80047c8 <xPortStartScheduler+0xf8>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a0c      	ldr	r2, [pc, #48]	; (80047c8 <xPortStartScheduler+0xf8>)
 8004796:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800479a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800479c:	f7ff ff84 	bl	80046a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80047a0:	f7ff fce8 	bl	8004174 <vTaskSwitchContext>
	prvTaskExitError();
 80047a4:	f7ff ff38 	bl	8004618 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80047a8:	2300      	movs	r3, #0
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3710      	adds	r7, #16
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	e000e400 	.word	0xe000e400
 80047b8:	200004b4 	.word	0x200004b4
 80047bc:	200004b8 	.word	0x200004b8
 80047c0:	e000ed20 	.word	0xe000ed20
 80047c4:	2000000c 	.word	0x2000000c
 80047c8:	e000ef34 	.word	0xe000ef34

080047cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
	__asm volatile
 80047d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d6:	b672      	cpsid	i
 80047d8:	f383 8811 	msr	BASEPRI, r3
 80047dc:	f3bf 8f6f 	isb	sy
 80047e0:	f3bf 8f4f 	dsb	sy
 80047e4:	b662      	cpsie	i
 80047e6:	607b      	str	r3, [r7, #4]
}
 80047e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80047ea:	4b10      	ldr	r3, [pc, #64]	; (800482c <vPortEnterCritical+0x60>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	3301      	adds	r3, #1
 80047f0:	4a0e      	ldr	r2, [pc, #56]	; (800482c <vPortEnterCritical+0x60>)
 80047f2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80047f4:	4b0d      	ldr	r3, [pc, #52]	; (800482c <vPortEnterCritical+0x60>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d111      	bne.n	8004820 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80047fc:	4b0c      	ldr	r3, [pc, #48]	; (8004830 <vPortEnterCritical+0x64>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	b2db      	uxtb	r3, r3
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00c      	beq.n	8004820 <vPortEnterCritical+0x54>
	__asm volatile
 8004806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800480a:	b672      	cpsid	i
 800480c:	f383 8811 	msr	BASEPRI, r3
 8004810:	f3bf 8f6f 	isb	sy
 8004814:	f3bf 8f4f 	dsb	sy
 8004818:	b662      	cpsie	i
 800481a:	603b      	str	r3, [r7, #0]
}
 800481c:	bf00      	nop
 800481e:	e7fe      	b.n	800481e <vPortEnterCritical+0x52>
	}
}
 8004820:	bf00      	nop
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr
 800482c:	2000000c 	.word	0x2000000c
 8004830:	e000ed04 	.word	0xe000ed04

08004834 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800483a:	4b13      	ldr	r3, [pc, #76]	; (8004888 <vPortExitCritical+0x54>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d10c      	bne.n	800485c <vPortExitCritical+0x28>
	__asm volatile
 8004842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004846:	b672      	cpsid	i
 8004848:	f383 8811 	msr	BASEPRI, r3
 800484c:	f3bf 8f6f 	isb	sy
 8004850:	f3bf 8f4f 	dsb	sy
 8004854:	b662      	cpsie	i
 8004856:	607b      	str	r3, [r7, #4]
}
 8004858:	bf00      	nop
 800485a:	e7fe      	b.n	800485a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800485c:	4b0a      	ldr	r3, [pc, #40]	; (8004888 <vPortExitCritical+0x54>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	3b01      	subs	r3, #1
 8004862:	4a09      	ldr	r2, [pc, #36]	; (8004888 <vPortExitCritical+0x54>)
 8004864:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004866:	4b08      	ldr	r3, [pc, #32]	; (8004888 <vPortExitCritical+0x54>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d105      	bne.n	800487a <vPortExitCritical+0x46>
 800486e:	2300      	movs	r3, #0
 8004870:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004878:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800487a:	bf00      	nop
 800487c:	370c      	adds	r7, #12
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	2000000c 	.word	0x2000000c
 800488c:	00000000 	.word	0x00000000

08004890 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004890:	f3ef 8009 	mrs	r0, PSP
 8004894:	f3bf 8f6f 	isb	sy
 8004898:	4b15      	ldr	r3, [pc, #84]	; (80048f0 <pxCurrentTCBConst>)
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	f01e 0f10 	tst.w	lr, #16
 80048a0:	bf08      	it	eq
 80048a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80048a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048aa:	6010      	str	r0, [r2, #0]
 80048ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80048b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80048b4:	b672      	cpsid	i
 80048b6:	f380 8811 	msr	BASEPRI, r0
 80048ba:	f3bf 8f4f 	dsb	sy
 80048be:	f3bf 8f6f 	isb	sy
 80048c2:	b662      	cpsie	i
 80048c4:	f7ff fc56 	bl	8004174 <vTaskSwitchContext>
 80048c8:	f04f 0000 	mov.w	r0, #0
 80048cc:	f380 8811 	msr	BASEPRI, r0
 80048d0:	bc09      	pop	{r0, r3}
 80048d2:	6819      	ldr	r1, [r3, #0]
 80048d4:	6808      	ldr	r0, [r1, #0]
 80048d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048da:	f01e 0f10 	tst.w	lr, #16
 80048de:	bf08      	it	eq
 80048e0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80048e4:	f380 8809 	msr	PSP, r0
 80048e8:	f3bf 8f6f 	isb	sy
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop

080048f0 <pxCurrentTCBConst>:
 80048f0:	20000388 	.word	0x20000388
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80048f4:	bf00      	nop
 80048f6:	bf00      	nop

080048f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
	__asm volatile
 80048fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004902:	b672      	cpsid	i
 8004904:	f383 8811 	msr	BASEPRI, r3
 8004908:	f3bf 8f6f 	isb	sy
 800490c:	f3bf 8f4f 	dsb	sy
 8004910:	b662      	cpsie	i
 8004912:	607b      	str	r3, [r7, #4]
}
 8004914:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004916:	f7ff fb73 	bl	8004000 <xTaskIncrementTick>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d003      	beq.n	8004928 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004920:	4b06      	ldr	r3, [pc, #24]	; (800493c <xPortSysTickHandler+0x44>)
 8004922:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004926:	601a      	str	r2, [r3, #0]
 8004928:	2300      	movs	r3, #0
 800492a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	f383 8811 	msr	BASEPRI, r3
}
 8004932:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004934:	bf00      	nop
 8004936:	3708      	adds	r7, #8
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}
 800493c:	e000ed04 	.word	0xe000ed04

08004940 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004940:	b480      	push	{r7}
 8004942:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004944:	4b0b      	ldr	r3, [pc, #44]	; (8004974 <vPortSetupTimerInterrupt+0x34>)
 8004946:	2200      	movs	r2, #0
 8004948:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800494a:	4b0b      	ldr	r3, [pc, #44]	; (8004978 <vPortSetupTimerInterrupt+0x38>)
 800494c:	2200      	movs	r2, #0
 800494e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004950:	4b0a      	ldr	r3, [pc, #40]	; (800497c <vPortSetupTimerInterrupt+0x3c>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a0a      	ldr	r2, [pc, #40]	; (8004980 <vPortSetupTimerInterrupt+0x40>)
 8004956:	fba2 2303 	umull	r2, r3, r2, r3
 800495a:	099b      	lsrs	r3, r3, #6
 800495c:	4a09      	ldr	r2, [pc, #36]	; (8004984 <vPortSetupTimerInterrupt+0x44>)
 800495e:	3b01      	subs	r3, #1
 8004960:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004962:	4b04      	ldr	r3, [pc, #16]	; (8004974 <vPortSetupTimerInterrupt+0x34>)
 8004964:	2207      	movs	r2, #7
 8004966:	601a      	str	r2, [r3, #0]
}
 8004968:	bf00      	nop
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr
 8004972:	bf00      	nop
 8004974:	e000e010 	.word	0xe000e010
 8004978:	e000e018 	.word	0xe000e018
 800497c:	20000000 	.word	0x20000000
 8004980:	10624dd3 	.word	0x10624dd3
 8004984:	e000e014 	.word	0xe000e014

08004988 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004988:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004998 <vPortEnableVFP+0x10>
 800498c:	6801      	ldr	r1, [r0, #0]
 800498e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004992:	6001      	str	r1, [r0, #0]
 8004994:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004996:	bf00      	nop
 8004998:	e000ed88 	.word	0xe000ed88

0800499c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b08a      	sub	sp, #40	; 0x28
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80049a4:	2300      	movs	r3, #0
 80049a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80049a8:	f7ff fa7e 	bl	8003ea8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80049ac:	4b5b      	ldr	r3, [pc, #364]	; (8004b1c <pvPortMalloc+0x180>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d101      	bne.n	80049b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80049b4:	f000 f91a 	bl	8004bec <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80049b8:	4b59      	ldr	r3, [pc, #356]	; (8004b20 <pvPortMalloc+0x184>)
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4013      	ands	r3, r2
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	f040 8092 	bne.w	8004aea <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d01f      	beq.n	8004a0c <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80049cc:	2208      	movs	r2, #8
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4413      	add	r3, r2
 80049d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f003 0307 	and.w	r3, r3, #7
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d016      	beq.n	8004a0c <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f023 0307 	bic.w	r3, r3, #7
 80049e4:	3308      	adds	r3, #8
 80049e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f003 0307 	and.w	r3, r3, #7
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d00c      	beq.n	8004a0c <pvPortMalloc+0x70>
	__asm volatile
 80049f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f6:	b672      	cpsid	i
 80049f8:	f383 8811 	msr	BASEPRI, r3
 80049fc:	f3bf 8f6f 	isb	sy
 8004a00:	f3bf 8f4f 	dsb	sy
 8004a04:	b662      	cpsie	i
 8004a06:	617b      	str	r3, [r7, #20]
}
 8004a08:	bf00      	nop
 8004a0a:	e7fe      	b.n	8004a0a <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d06b      	beq.n	8004aea <pvPortMalloc+0x14e>
 8004a12:	4b44      	ldr	r3, [pc, #272]	; (8004b24 <pvPortMalloc+0x188>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d866      	bhi.n	8004aea <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004a1c:	4b42      	ldr	r3, [pc, #264]	; (8004b28 <pvPortMalloc+0x18c>)
 8004a1e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004a20:	4b41      	ldr	r3, [pc, #260]	; (8004b28 <pvPortMalloc+0x18c>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a26:	e004      	b.n	8004a32 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8004a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d903      	bls.n	8004a44 <pvPortMalloc+0xa8>
 8004a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d1f1      	bne.n	8004a28 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004a44:	4b35      	ldr	r3, [pc, #212]	; (8004b1c <pvPortMalloc+0x180>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d04d      	beq.n	8004aea <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004a4e:	6a3b      	ldr	r3, [r7, #32]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2208      	movs	r2, #8
 8004a54:	4413      	add	r3, r2
 8004a56:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	6a3b      	ldr	r3, [r7, #32]
 8004a5e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a62:	685a      	ldr	r2, [r3, #4]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	1ad2      	subs	r2, r2, r3
 8004a68:	2308      	movs	r3, #8
 8004a6a:	005b      	lsls	r3, r3, #1
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d921      	bls.n	8004ab4 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004a70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4413      	add	r3, r2
 8004a76:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	f003 0307 	and.w	r3, r3, #7
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d00c      	beq.n	8004a9c <pvPortMalloc+0x100>
	__asm volatile
 8004a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a86:	b672      	cpsid	i
 8004a88:	f383 8811 	msr	BASEPRI, r3
 8004a8c:	f3bf 8f6f 	isb	sy
 8004a90:	f3bf 8f4f 	dsb	sy
 8004a94:	b662      	cpsie	i
 8004a96:	613b      	str	r3, [r7, #16]
}
 8004a98:	bf00      	nop
 8004a9a:	e7fe      	b.n	8004a9a <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9e:	685a      	ldr	r2, [r3, #4]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	1ad2      	subs	r2, r2, r3
 8004aa4:	69bb      	ldr	r3, [r7, #24]
 8004aa6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004aae:	69b8      	ldr	r0, [r7, #24]
 8004ab0:	f000 f8fe 	bl	8004cb0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004ab4:	4b1b      	ldr	r3, [pc, #108]	; (8004b24 <pvPortMalloc+0x188>)
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	4a19      	ldr	r2, [pc, #100]	; (8004b24 <pvPortMalloc+0x188>)
 8004ac0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004ac2:	4b18      	ldr	r3, [pc, #96]	; (8004b24 <pvPortMalloc+0x188>)
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	4b19      	ldr	r3, [pc, #100]	; (8004b2c <pvPortMalloc+0x190>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d203      	bcs.n	8004ad6 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004ace:	4b15      	ldr	r3, [pc, #84]	; (8004b24 <pvPortMalloc+0x188>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a16      	ldr	r2, [pc, #88]	; (8004b2c <pvPortMalloc+0x190>)
 8004ad4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad8:	685a      	ldr	r2, [r3, #4]
 8004ada:	4b11      	ldr	r3, [pc, #68]	; (8004b20 <pvPortMalloc+0x184>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	431a      	orrs	r2, r3
 8004ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004aea:	f7ff f9eb 	bl	8003ec4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	f003 0307 	and.w	r3, r3, #7
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d00c      	beq.n	8004b12 <pvPortMalloc+0x176>
	__asm volatile
 8004af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004afc:	b672      	cpsid	i
 8004afe:	f383 8811 	msr	BASEPRI, r3
 8004b02:	f3bf 8f6f 	isb	sy
 8004b06:	f3bf 8f4f 	dsb	sy
 8004b0a:	b662      	cpsie	i
 8004b0c:	60fb      	str	r3, [r7, #12]
}
 8004b0e:	bf00      	nop
 8004b10:	e7fe      	b.n	8004b10 <pvPortMalloc+0x174>
	return pvReturn;
 8004b12:	69fb      	ldr	r3, [r7, #28]
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3728      	adds	r7, #40	; 0x28
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	200040c4 	.word	0x200040c4
 8004b20:	200040d0 	.word	0x200040d0
 8004b24:	200040c8 	.word	0x200040c8
 8004b28:	200040bc 	.word	0x200040bc
 8004b2c:	200040cc 	.word	0x200040cc

08004b30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b086      	sub	sp, #24
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d04c      	beq.n	8004bdc <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004b42:	2308      	movs	r3, #8
 8004b44:	425b      	negs	r3, r3
 8004b46:	697a      	ldr	r2, [r7, #20]
 8004b48:	4413      	add	r3, r2
 8004b4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	685a      	ldr	r2, [r3, #4]
 8004b54:	4b23      	ldr	r3, [pc, #140]	; (8004be4 <vPortFree+0xb4>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4013      	ands	r3, r2
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d10c      	bne.n	8004b78 <vPortFree+0x48>
	__asm volatile
 8004b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b62:	b672      	cpsid	i
 8004b64:	f383 8811 	msr	BASEPRI, r3
 8004b68:	f3bf 8f6f 	isb	sy
 8004b6c:	f3bf 8f4f 	dsb	sy
 8004b70:	b662      	cpsie	i
 8004b72:	60fb      	str	r3, [r7, #12]
}
 8004b74:	bf00      	nop
 8004b76:	e7fe      	b.n	8004b76 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d00c      	beq.n	8004b9a <vPortFree+0x6a>
	__asm volatile
 8004b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b84:	b672      	cpsid	i
 8004b86:	f383 8811 	msr	BASEPRI, r3
 8004b8a:	f3bf 8f6f 	isb	sy
 8004b8e:	f3bf 8f4f 	dsb	sy
 8004b92:	b662      	cpsie	i
 8004b94:	60bb      	str	r3, [r7, #8]
}
 8004b96:	bf00      	nop
 8004b98:	e7fe      	b.n	8004b98 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	685a      	ldr	r2, [r3, #4]
 8004b9e:	4b11      	ldr	r3, [pc, #68]	; (8004be4 <vPortFree+0xb4>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d019      	beq.n	8004bdc <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d115      	bne.n	8004bdc <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	685a      	ldr	r2, [r3, #4]
 8004bb4:	4b0b      	ldr	r3, [pc, #44]	; (8004be4 <vPortFree+0xb4>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	43db      	mvns	r3, r3
 8004bba:	401a      	ands	r2, r3
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004bc0:	f7ff f972 	bl	8003ea8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	685a      	ldr	r2, [r3, #4]
 8004bc8:	4b07      	ldr	r3, [pc, #28]	; (8004be8 <vPortFree+0xb8>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4413      	add	r3, r2
 8004bce:	4a06      	ldr	r2, [pc, #24]	; (8004be8 <vPortFree+0xb8>)
 8004bd0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004bd2:	6938      	ldr	r0, [r7, #16]
 8004bd4:	f000 f86c 	bl	8004cb0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004bd8:	f7ff f974 	bl	8003ec4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004bdc:	bf00      	nop
 8004bde:	3718      	adds	r7, #24
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	200040d0 	.word	0x200040d0
 8004be8:	200040c8 	.word	0x200040c8

08004bec <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004bec:	b480      	push	{r7}
 8004bee:	b085      	sub	sp, #20
 8004bf0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004bf2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004bf6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004bf8:	4b27      	ldr	r3, [pc, #156]	; (8004c98 <prvHeapInit+0xac>)
 8004bfa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f003 0307 	and.w	r3, r3, #7
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d00c      	beq.n	8004c20 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	3307      	adds	r3, #7
 8004c0a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f023 0307 	bic.w	r3, r3, #7
 8004c12:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004c14:	68ba      	ldr	r2, [r7, #8]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	4a1f      	ldr	r2, [pc, #124]	; (8004c98 <prvHeapInit+0xac>)
 8004c1c:	4413      	add	r3, r2
 8004c1e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004c24:	4a1d      	ldr	r2, [pc, #116]	; (8004c9c <prvHeapInit+0xb0>)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004c2a:	4b1c      	ldr	r3, [pc, #112]	; (8004c9c <prvHeapInit+0xb0>)
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	68ba      	ldr	r2, [r7, #8]
 8004c34:	4413      	add	r3, r2
 8004c36:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004c38:	2208      	movs	r2, #8
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	1a9b      	subs	r3, r3, r2
 8004c3e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f023 0307 	bic.w	r3, r3, #7
 8004c46:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	4a15      	ldr	r2, [pc, #84]	; (8004ca0 <prvHeapInit+0xb4>)
 8004c4c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004c4e:	4b14      	ldr	r3, [pc, #80]	; (8004ca0 <prvHeapInit+0xb4>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	2200      	movs	r2, #0
 8004c54:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004c56:	4b12      	ldr	r3, [pc, #72]	; (8004ca0 <prvHeapInit+0xb4>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	68fa      	ldr	r2, [r7, #12]
 8004c66:	1ad2      	subs	r2, r2, r3
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004c6c:	4b0c      	ldr	r3, [pc, #48]	; (8004ca0 <prvHeapInit+0xb4>)
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	4a0a      	ldr	r2, [pc, #40]	; (8004ca4 <prvHeapInit+0xb8>)
 8004c7a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	4a09      	ldr	r2, [pc, #36]	; (8004ca8 <prvHeapInit+0xbc>)
 8004c82:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004c84:	4b09      	ldr	r3, [pc, #36]	; (8004cac <prvHeapInit+0xc0>)
 8004c86:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004c8a:	601a      	str	r2, [r3, #0]
}
 8004c8c:	bf00      	nop
 8004c8e:	3714      	adds	r7, #20
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr
 8004c98:	200004bc 	.word	0x200004bc
 8004c9c:	200040bc 	.word	0x200040bc
 8004ca0:	200040c4 	.word	0x200040c4
 8004ca4:	200040cc 	.word	0x200040cc
 8004ca8:	200040c8 	.word	0x200040c8
 8004cac:	200040d0 	.word	0x200040d0

08004cb0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b085      	sub	sp, #20
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004cb8:	4b28      	ldr	r3, [pc, #160]	; (8004d5c <prvInsertBlockIntoFreeList+0xac>)
 8004cba:	60fb      	str	r3, [r7, #12]
 8004cbc:	e002      	b.n	8004cc4 <prvInsertBlockIntoFreeList+0x14>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	60fb      	str	r3, [r7, #12]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d8f7      	bhi.n	8004cbe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	68ba      	ldr	r2, [r7, #8]
 8004cd8:	4413      	add	r3, r2
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d108      	bne.n	8004cf2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	685a      	ldr	r2, [r3, #4]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	441a      	add	r2, r3
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	68ba      	ldr	r2, [r7, #8]
 8004cfc:	441a      	add	r2, r3
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d118      	bne.n	8004d38 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	4b15      	ldr	r3, [pc, #84]	; (8004d60 <prvInsertBlockIntoFreeList+0xb0>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d00d      	beq.n	8004d2e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	685a      	ldr	r2, [r3, #4]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	441a      	add	r2, r3
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	601a      	str	r2, [r3, #0]
 8004d2c:	e008      	b.n	8004d40 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004d2e:	4b0c      	ldr	r3, [pc, #48]	; (8004d60 <prvInsertBlockIntoFreeList+0xb0>)
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	601a      	str	r2, [r3, #0]
 8004d36:	e003      	b.n	8004d40 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004d40:	68fa      	ldr	r2, [r7, #12]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d002      	beq.n	8004d4e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d4e:	bf00      	nop
 8004d50:	3714      	adds	r7, #20
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop
 8004d5c:	200040bc 	.word	0x200040bc
 8004d60:	200040c4 	.word	0x200040c4

08004d64 <__errno>:
 8004d64:	4b01      	ldr	r3, [pc, #4]	; (8004d6c <__errno+0x8>)
 8004d66:	6818      	ldr	r0, [r3, #0]
 8004d68:	4770      	bx	lr
 8004d6a:	bf00      	nop
 8004d6c:	20000010 	.word	0x20000010

08004d70 <__libc_init_array>:
 8004d70:	b570      	push	{r4, r5, r6, lr}
 8004d72:	4d0d      	ldr	r5, [pc, #52]	; (8004da8 <__libc_init_array+0x38>)
 8004d74:	4c0d      	ldr	r4, [pc, #52]	; (8004dac <__libc_init_array+0x3c>)
 8004d76:	1b64      	subs	r4, r4, r5
 8004d78:	10a4      	asrs	r4, r4, #2
 8004d7a:	2600      	movs	r6, #0
 8004d7c:	42a6      	cmp	r6, r4
 8004d7e:	d109      	bne.n	8004d94 <__libc_init_array+0x24>
 8004d80:	4d0b      	ldr	r5, [pc, #44]	; (8004db0 <__libc_init_array+0x40>)
 8004d82:	4c0c      	ldr	r4, [pc, #48]	; (8004db4 <__libc_init_array+0x44>)
 8004d84:	f001 f824 	bl	8005dd0 <_init>
 8004d88:	1b64      	subs	r4, r4, r5
 8004d8a:	10a4      	asrs	r4, r4, #2
 8004d8c:	2600      	movs	r6, #0
 8004d8e:	42a6      	cmp	r6, r4
 8004d90:	d105      	bne.n	8004d9e <__libc_init_array+0x2e>
 8004d92:	bd70      	pop	{r4, r5, r6, pc}
 8004d94:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d98:	4798      	blx	r3
 8004d9a:	3601      	adds	r6, #1
 8004d9c:	e7ee      	b.n	8004d7c <__libc_init_array+0xc>
 8004d9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004da2:	4798      	blx	r3
 8004da4:	3601      	adds	r6, #1
 8004da6:	e7f2      	b.n	8004d8e <__libc_init_array+0x1e>
 8004da8:	08005f04 	.word	0x08005f04
 8004dac:	08005f04 	.word	0x08005f04
 8004db0:	08005f04 	.word	0x08005f04
 8004db4:	08005f08 	.word	0x08005f08

08004db8 <memset>:
 8004db8:	4402      	add	r2, r0
 8004dba:	4603      	mov	r3, r0
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d100      	bne.n	8004dc2 <memset+0xa>
 8004dc0:	4770      	bx	lr
 8004dc2:	f803 1b01 	strb.w	r1, [r3], #1
 8004dc6:	e7f9      	b.n	8004dbc <memset+0x4>

08004dc8 <iprintf>:
 8004dc8:	b40f      	push	{r0, r1, r2, r3}
 8004dca:	4b0a      	ldr	r3, [pc, #40]	; (8004df4 <iprintf+0x2c>)
 8004dcc:	b513      	push	{r0, r1, r4, lr}
 8004dce:	681c      	ldr	r4, [r3, #0]
 8004dd0:	b124      	cbz	r4, 8004ddc <iprintf+0x14>
 8004dd2:	69a3      	ldr	r3, [r4, #24]
 8004dd4:	b913      	cbnz	r3, 8004ddc <iprintf+0x14>
 8004dd6:	4620      	mov	r0, r4
 8004dd8:	f000 fa5e 	bl	8005298 <__sinit>
 8004ddc:	ab05      	add	r3, sp, #20
 8004dde:	9a04      	ldr	r2, [sp, #16]
 8004de0:	68a1      	ldr	r1, [r4, #8]
 8004de2:	9301      	str	r3, [sp, #4]
 8004de4:	4620      	mov	r0, r4
 8004de6:	f000 fc67 	bl	80056b8 <_vfiprintf_r>
 8004dea:	b002      	add	sp, #8
 8004dec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004df0:	b004      	add	sp, #16
 8004df2:	4770      	bx	lr
 8004df4:	20000010 	.word	0x20000010

08004df8 <_puts_r>:
 8004df8:	b570      	push	{r4, r5, r6, lr}
 8004dfa:	460e      	mov	r6, r1
 8004dfc:	4605      	mov	r5, r0
 8004dfe:	b118      	cbz	r0, 8004e08 <_puts_r+0x10>
 8004e00:	6983      	ldr	r3, [r0, #24]
 8004e02:	b90b      	cbnz	r3, 8004e08 <_puts_r+0x10>
 8004e04:	f000 fa48 	bl	8005298 <__sinit>
 8004e08:	69ab      	ldr	r3, [r5, #24]
 8004e0a:	68ac      	ldr	r4, [r5, #8]
 8004e0c:	b913      	cbnz	r3, 8004e14 <_puts_r+0x1c>
 8004e0e:	4628      	mov	r0, r5
 8004e10:	f000 fa42 	bl	8005298 <__sinit>
 8004e14:	4b2c      	ldr	r3, [pc, #176]	; (8004ec8 <_puts_r+0xd0>)
 8004e16:	429c      	cmp	r4, r3
 8004e18:	d120      	bne.n	8004e5c <_puts_r+0x64>
 8004e1a:	686c      	ldr	r4, [r5, #4]
 8004e1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e1e:	07db      	lsls	r3, r3, #31
 8004e20:	d405      	bmi.n	8004e2e <_puts_r+0x36>
 8004e22:	89a3      	ldrh	r3, [r4, #12]
 8004e24:	0598      	lsls	r0, r3, #22
 8004e26:	d402      	bmi.n	8004e2e <_puts_r+0x36>
 8004e28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e2a:	f000 fad3 	bl	80053d4 <__retarget_lock_acquire_recursive>
 8004e2e:	89a3      	ldrh	r3, [r4, #12]
 8004e30:	0719      	lsls	r1, r3, #28
 8004e32:	d51d      	bpl.n	8004e70 <_puts_r+0x78>
 8004e34:	6923      	ldr	r3, [r4, #16]
 8004e36:	b1db      	cbz	r3, 8004e70 <_puts_r+0x78>
 8004e38:	3e01      	subs	r6, #1
 8004e3a:	68a3      	ldr	r3, [r4, #8]
 8004e3c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004e40:	3b01      	subs	r3, #1
 8004e42:	60a3      	str	r3, [r4, #8]
 8004e44:	bb39      	cbnz	r1, 8004e96 <_puts_r+0x9e>
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	da38      	bge.n	8004ebc <_puts_r+0xc4>
 8004e4a:	4622      	mov	r2, r4
 8004e4c:	210a      	movs	r1, #10
 8004e4e:	4628      	mov	r0, r5
 8004e50:	f000 f848 	bl	8004ee4 <__swbuf_r>
 8004e54:	3001      	adds	r0, #1
 8004e56:	d011      	beq.n	8004e7c <_puts_r+0x84>
 8004e58:	250a      	movs	r5, #10
 8004e5a:	e011      	b.n	8004e80 <_puts_r+0x88>
 8004e5c:	4b1b      	ldr	r3, [pc, #108]	; (8004ecc <_puts_r+0xd4>)
 8004e5e:	429c      	cmp	r4, r3
 8004e60:	d101      	bne.n	8004e66 <_puts_r+0x6e>
 8004e62:	68ac      	ldr	r4, [r5, #8]
 8004e64:	e7da      	b.n	8004e1c <_puts_r+0x24>
 8004e66:	4b1a      	ldr	r3, [pc, #104]	; (8004ed0 <_puts_r+0xd8>)
 8004e68:	429c      	cmp	r4, r3
 8004e6a:	bf08      	it	eq
 8004e6c:	68ec      	ldreq	r4, [r5, #12]
 8004e6e:	e7d5      	b.n	8004e1c <_puts_r+0x24>
 8004e70:	4621      	mov	r1, r4
 8004e72:	4628      	mov	r0, r5
 8004e74:	f000 f888 	bl	8004f88 <__swsetup_r>
 8004e78:	2800      	cmp	r0, #0
 8004e7a:	d0dd      	beq.n	8004e38 <_puts_r+0x40>
 8004e7c:	f04f 35ff 	mov.w	r5, #4294967295
 8004e80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e82:	07da      	lsls	r2, r3, #31
 8004e84:	d405      	bmi.n	8004e92 <_puts_r+0x9a>
 8004e86:	89a3      	ldrh	r3, [r4, #12]
 8004e88:	059b      	lsls	r3, r3, #22
 8004e8a:	d402      	bmi.n	8004e92 <_puts_r+0x9a>
 8004e8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e8e:	f000 faa2 	bl	80053d6 <__retarget_lock_release_recursive>
 8004e92:	4628      	mov	r0, r5
 8004e94:	bd70      	pop	{r4, r5, r6, pc}
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	da04      	bge.n	8004ea4 <_puts_r+0xac>
 8004e9a:	69a2      	ldr	r2, [r4, #24]
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	dc06      	bgt.n	8004eae <_puts_r+0xb6>
 8004ea0:	290a      	cmp	r1, #10
 8004ea2:	d004      	beq.n	8004eae <_puts_r+0xb6>
 8004ea4:	6823      	ldr	r3, [r4, #0]
 8004ea6:	1c5a      	adds	r2, r3, #1
 8004ea8:	6022      	str	r2, [r4, #0]
 8004eaa:	7019      	strb	r1, [r3, #0]
 8004eac:	e7c5      	b.n	8004e3a <_puts_r+0x42>
 8004eae:	4622      	mov	r2, r4
 8004eb0:	4628      	mov	r0, r5
 8004eb2:	f000 f817 	bl	8004ee4 <__swbuf_r>
 8004eb6:	3001      	adds	r0, #1
 8004eb8:	d1bf      	bne.n	8004e3a <_puts_r+0x42>
 8004eba:	e7df      	b.n	8004e7c <_puts_r+0x84>
 8004ebc:	6823      	ldr	r3, [r4, #0]
 8004ebe:	250a      	movs	r5, #10
 8004ec0:	1c5a      	adds	r2, r3, #1
 8004ec2:	6022      	str	r2, [r4, #0]
 8004ec4:	701d      	strb	r5, [r3, #0]
 8004ec6:	e7db      	b.n	8004e80 <_puts_r+0x88>
 8004ec8:	08005e88 	.word	0x08005e88
 8004ecc:	08005ea8 	.word	0x08005ea8
 8004ed0:	08005e68 	.word	0x08005e68

08004ed4 <puts>:
 8004ed4:	4b02      	ldr	r3, [pc, #8]	; (8004ee0 <puts+0xc>)
 8004ed6:	4601      	mov	r1, r0
 8004ed8:	6818      	ldr	r0, [r3, #0]
 8004eda:	f7ff bf8d 	b.w	8004df8 <_puts_r>
 8004ede:	bf00      	nop
 8004ee0:	20000010 	.word	0x20000010

08004ee4 <__swbuf_r>:
 8004ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ee6:	460e      	mov	r6, r1
 8004ee8:	4614      	mov	r4, r2
 8004eea:	4605      	mov	r5, r0
 8004eec:	b118      	cbz	r0, 8004ef6 <__swbuf_r+0x12>
 8004eee:	6983      	ldr	r3, [r0, #24]
 8004ef0:	b90b      	cbnz	r3, 8004ef6 <__swbuf_r+0x12>
 8004ef2:	f000 f9d1 	bl	8005298 <__sinit>
 8004ef6:	4b21      	ldr	r3, [pc, #132]	; (8004f7c <__swbuf_r+0x98>)
 8004ef8:	429c      	cmp	r4, r3
 8004efa:	d12b      	bne.n	8004f54 <__swbuf_r+0x70>
 8004efc:	686c      	ldr	r4, [r5, #4]
 8004efe:	69a3      	ldr	r3, [r4, #24]
 8004f00:	60a3      	str	r3, [r4, #8]
 8004f02:	89a3      	ldrh	r3, [r4, #12]
 8004f04:	071a      	lsls	r2, r3, #28
 8004f06:	d52f      	bpl.n	8004f68 <__swbuf_r+0x84>
 8004f08:	6923      	ldr	r3, [r4, #16]
 8004f0a:	b36b      	cbz	r3, 8004f68 <__swbuf_r+0x84>
 8004f0c:	6923      	ldr	r3, [r4, #16]
 8004f0e:	6820      	ldr	r0, [r4, #0]
 8004f10:	1ac0      	subs	r0, r0, r3
 8004f12:	6963      	ldr	r3, [r4, #20]
 8004f14:	b2f6      	uxtb	r6, r6
 8004f16:	4283      	cmp	r3, r0
 8004f18:	4637      	mov	r7, r6
 8004f1a:	dc04      	bgt.n	8004f26 <__swbuf_r+0x42>
 8004f1c:	4621      	mov	r1, r4
 8004f1e:	4628      	mov	r0, r5
 8004f20:	f000 f926 	bl	8005170 <_fflush_r>
 8004f24:	bb30      	cbnz	r0, 8004f74 <__swbuf_r+0x90>
 8004f26:	68a3      	ldr	r3, [r4, #8]
 8004f28:	3b01      	subs	r3, #1
 8004f2a:	60a3      	str	r3, [r4, #8]
 8004f2c:	6823      	ldr	r3, [r4, #0]
 8004f2e:	1c5a      	adds	r2, r3, #1
 8004f30:	6022      	str	r2, [r4, #0]
 8004f32:	701e      	strb	r6, [r3, #0]
 8004f34:	6963      	ldr	r3, [r4, #20]
 8004f36:	3001      	adds	r0, #1
 8004f38:	4283      	cmp	r3, r0
 8004f3a:	d004      	beq.n	8004f46 <__swbuf_r+0x62>
 8004f3c:	89a3      	ldrh	r3, [r4, #12]
 8004f3e:	07db      	lsls	r3, r3, #31
 8004f40:	d506      	bpl.n	8004f50 <__swbuf_r+0x6c>
 8004f42:	2e0a      	cmp	r6, #10
 8004f44:	d104      	bne.n	8004f50 <__swbuf_r+0x6c>
 8004f46:	4621      	mov	r1, r4
 8004f48:	4628      	mov	r0, r5
 8004f4a:	f000 f911 	bl	8005170 <_fflush_r>
 8004f4e:	b988      	cbnz	r0, 8004f74 <__swbuf_r+0x90>
 8004f50:	4638      	mov	r0, r7
 8004f52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f54:	4b0a      	ldr	r3, [pc, #40]	; (8004f80 <__swbuf_r+0x9c>)
 8004f56:	429c      	cmp	r4, r3
 8004f58:	d101      	bne.n	8004f5e <__swbuf_r+0x7a>
 8004f5a:	68ac      	ldr	r4, [r5, #8]
 8004f5c:	e7cf      	b.n	8004efe <__swbuf_r+0x1a>
 8004f5e:	4b09      	ldr	r3, [pc, #36]	; (8004f84 <__swbuf_r+0xa0>)
 8004f60:	429c      	cmp	r4, r3
 8004f62:	bf08      	it	eq
 8004f64:	68ec      	ldreq	r4, [r5, #12]
 8004f66:	e7ca      	b.n	8004efe <__swbuf_r+0x1a>
 8004f68:	4621      	mov	r1, r4
 8004f6a:	4628      	mov	r0, r5
 8004f6c:	f000 f80c 	bl	8004f88 <__swsetup_r>
 8004f70:	2800      	cmp	r0, #0
 8004f72:	d0cb      	beq.n	8004f0c <__swbuf_r+0x28>
 8004f74:	f04f 37ff 	mov.w	r7, #4294967295
 8004f78:	e7ea      	b.n	8004f50 <__swbuf_r+0x6c>
 8004f7a:	bf00      	nop
 8004f7c:	08005e88 	.word	0x08005e88
 8004f80:	08005ea8 	.word	0x08005ea8
 8004f84:	08005e68 	.word	0x08005e68

08004f88 <__swsetup_r>:
 8004f88:	4b32      	ldr	r3, [pc, #200]	; (8005054 <__swsetup_r+0xcc>)
 8004f8a:	b570      	push	{r4, r5, r6, lr}
 8004f8c:	681d      	ldr	r5, [r3, #0]
 8004f8e:	4606      	mov	r6, r0
 8004f90:	460c      	mov	r4, r1
 8004f92:	b125      	cbz	r5, 8004f9e <__swsetup_r+0x16>
 8004f94:	69ab      	ldr	r3, [r5, #24]
 8004f96:	b913      	cbnz	r3, 8004f9e <__swsetup_r+0x16>
 8004f98:	4628      	mov	r0, r5
 8004f9a:	f000 f97d 	bl	8005298 <__sinit>
 8004f9e:	4b2e      	ldr	r3, [pc, #184]	; (8005058 <__swsetup_r+0xd0>)
 8004fa0:	429c      	cmp	r4, r3
 8004fa2:	d10f      	bne.n	8004fc4 <__swsetup_r+0x3c>
 8004fa4:	686c      	ldr	r4, [r5, #4]
 8004fa6:	89a3      	ldrh	r3, [r4, #12]
 8004fa8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004fac:	0719      	lsls	r1, r3, #28
 8004fae:	d42c      	bmi.n	800500a <__swsetup_r+0x82>
 8004fb0:	06dd      	lsls	r5, r3, #27
 8004fb2:	d411      	bmi.n	8004fd8 <__swsetup_r+0x50>
 8004fb4:	2309      	movs	r3, #9
 8004fb6:	6033      	str	r3, [r6, #0]
 8004fb8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004fbc:	81a3      	strh	r3, [r4, #12]
 8004fbe:	f04f 30ff 	mov.w	r0, #4294967295
 8004fc2:	e03e      	b.n	8005042 <__swsetup_r+0xba>
 8004fc4:	4b25      	ldr	r3, [pc, #148]	; (800505c <__swsetup_r+0xd4>)
 8004fc6:	429c      	cmp	r4, r3
 8004fc8:	d101      	bne.n	8004fce <__swsetup_r+0x46>
 8004fca:	68ac      	ldr	r4, [r5, #8]
 8004fcc:	e7eb      	b.n	8004fa6 <__swsetup_r+0x1e>
 8004fce:	4b24      	ldr	r3, [pc, #144]	; (8005060 <__swsetup_r+0xd8>)
 8004fd0:	429c      	cmp	r4, r3
 8004fd2:	bf08      	it	eq
 8004fd4:	68ec      	ldreq	r4, [r5, #12]
 8004fd6:	e7e6      	b.n	8004fa6 <__swsetup_r+0x1e>
 8004fd8:	0758      	lsls	r0, r3, #29
 8004fda:	d512      	bpl.n	8005002 <__swsetup_r+0x7a>
 8004fdc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004fde:	b141      	cbz	r1, 8004ff2 <__swsetup_r+0x6a>
 8004fe0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004fe4:	4299      	cmp	r1, r3
 8004fe6:	d002      	beq.n	8004fee <__swsetup_r+0x66>
 8004fe8:	4630      	mov	r0, r6
 8004fea:	f000 fa5b 	bl	80054a4 <_free_r>
 8004fee:	2300      	movs	r3, #0
 8004ff0:	6363      	str	r3, [r4, #52]	; 0x34
 8004ff2:	89a3      	ldrh	r3, [r4, #12]
 8004ff4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004ff8:	81a3      	strh	r3, [r4, #12]
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	6063      	str	r3, [r4, #4]
 8004ffe:	6923      	ldr	r3, [r4, #16]
 8005000:	6023      	str	r3, [r4, #0]
 8005002:	89a3      	ldrh	r3, [r4, #12]
 8005004:	f043 0308 	orr.w	r3, r3, #8
 8005008:	81a3      	strh	r3, [r4, #12]
 800500a:	6923      	ldr	r3, [r4, #16]
 800500c:	b94b      	cbnz	r3, 8005022 <__swsetup_r+0x9a>
 800500e:	89a3      	ldrh	r3, [r4, #12]
 8005010:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005014:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005018:	d003      	beq.n	8005022 <__swsetup_r+0x9a>
 800501a:	4621      	mov	r1, r4
 800501c:	4630      	mov	r0, r6
 800501e:	f000 fa01 	bl	8005424 <__smakebuf_r>
 8005022:	89a0      	ldrh	r0, [r4, #12]
 8005024:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005028:	f010 0301 	ands.w	r3, r0, #1
 800502c:	d00a      	beq.n	8005044 <__swsetup_r+0xbc>
 800502e:	2300      	movs	r3, #0
 8005030:	60a3      	str	r3, [r4, #8]
 8005032:	6963      	ldr	r3, [r4, #20]
 8005034:	425b      	negs	r3, r3
 8005036:	61a3      	str	r3, [r4, #24]
 8005038:	6923      	ldr	r3, [r4, #16]
 800503a:	b943      	cbnz	r3, 800504e <__swsetup_r+0xc6>
 800503c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005040:	d1ba      	bne.n	8004fb8 <__swsetup_r+0x30>
 8005042:	bd70      	pop	{r4, r5, r6, pc}
 8005044:	0781      	lsls	r1, r0, #30
 8005046:	bf58      	it	pl
 8005048:	6963      	ldrpl	r3, [r4, #20]
 800504a:	60a3      	str	r3, [r4, #8]
 800504c:	e7f4      	b.n	8005038 <__swsetup_r+0xb0>
 800504e:	2000      	movs	r0, #0
 8005050:	e7f7      	b.n	8005042 <__swsetup_r+0xba>
 8005052:	bf00      	nop
 8005054:	20000010 	.word	0x20000010
 8005058:	08005e88 	.word	0x08005e88
 800505c:	08005ea8 	.word	0x08005ea8
 8005060:	08005e68 	.word	0x08005e68

08005064 <__sflush_r>:
 8005064:	898a      	ldrh	r2, [r1, #12]
 8005066:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800506a:	4605      	mov	r5, r0
 800506c:	0710      	lsls	r0, r2, #28
 800506e:	460c      	mov	r4, r1
 8005070:	d458      	bmi.n	8005124 <__sflush_r+0xc0>
 8005072:	684b      	ldr	r3, [r1, #4]
 8005074:	2b00      	cmp	r3, #0
 8005076:	dc05      	bgt.n	8005084 <__sflush_r+0x20>
 8005078:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800507a:	2b00      	cmp	r3, #0
 800507c:	dc02      	bgt.n	8005084 <__sflush_r+0x20>
 800507e:	2000      	movs	r0, #0
 8005080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005084:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005086:	2e00      	cmp	r6, #0
 8005088:	d0f9      	beq.n	800507e <__sflush_r+0x1a>
 800508a:	2300      	movs	r3, #0
 800508c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005090:	682f      	ldr	r7, [r5, #0]
 8005092:	602b      	str	r3, [r5, #0]
 8005094:	d032      	beq.n	80050fc <__sflush_r+0x98>
 8005096:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005098:	89a3      	ldrh	r3, [r4, #12]
 800509a:	075a      	lsls	r2, r3, #29
 800509c:	d505      	bpl.n	80050aa <__sflush_r+0x46>
 800509e:	6863      	ldr	r3, [r4, #4]
 80050a0:	1ac0      	subs	r0, r0, r3
 80050a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80050a4:	b10b      	cbz	r3, 80050aa <__sflush_r+0x46>
 80050a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80050a8:	1ac0      	subs	r0, r0, r3
 80050aa:	2300      	movs	r3, #0
 80050ac:	4602      	mov	r2, r0
 80050ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80050b0:	6a21      	ldr	r1, [r4, #32]
 80050b2:	4628      	mov	r0, r5
 80050b4:	47b0      	blx	r6
 80050b6:	1c43      	adds	r3, r0, #1
 80050b8:	89a3      	ldrh	r3, [r4, #12]
 80050ba:	d106      	bne.n	80050ca <__sflush_r+0x66>
 80050bc:	6829      	ldr	r1, [r5, #0]
 80050be:	291d      	cmp	r1, #29
 80050c0:	d82c      	bhi.n	800511c <__sflush_r+0xb8>
 80050c2:	4a2a      	ldr	r2, [pc, #168]	; (800516c <__sflush_r+0x108>)
 80050c4:	40ca      	lsrs	r2, r1
 80050c6:	07d6      	lsls	r6, r2, #31
 80050c8:	d528      	bpl.n	800511c <__sflush_r+0xb8>
 80050ca:	2200      	movs	r2, #0
 80050cc:	6062      	str	r2, [r4, #4]
 80050ce:	04d9      	lsls	r1, r3, #19
 80050d0:	6922      	ldr	r2, [r4, #16]
 80050d2:	6022      	str	r2, [r4, #0]
 80050d4:	d504      	bpl.n	80050e0 <__sflush_r+0x7c>
 80050d6:	1c42      	adds	r2, r0, #1
 80050d8:	d101      	bne.n	80050de <__sflush_r+0x7a>
 80050da:	682b      	ldr	r3, [r5, #0]
 80050dc:	b903      	cbnz	r3, 80050e0 <__sflush_r+0x7c>
 80050de:	6560      	str	r0, [r4, #84]	; 0x54
 80050e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80050e2:	602f      	str	r7, [r5, #0]
 80050e4:	2900      	cmp	r1, #0
 80050e6:	d0ca      	beq.n	800507e <__sflush_r+0x1a>
 80050e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80050ec:	4299      	cmp	r1, r3
 80050ee:	d002      	beq.n	80050f6 <__sflush_r+0x92>
 80050f0:	4628      	mov	r0, r5
 80050f2:	f000 f9d7 	bl	80054a4 <_free_r>
 80050f6:	2000      	movs	r0, #0
 80050f8:	6360      	str	r0, [r4, #52]	; 0x34
 80050fa:	e7c1      	b.n	8005080 <__sflush_r+0x1c>
 80050fc:	6a21      	ldr	r1, [r4, #32]
 80050fe:	2301      	movs	r3, #1
 8005100:	4628      	mov	r0, r5
 8005102:	47b0      	blx	r6
 8005104:	1c41      	adds	r1, r0, #1
 8005106:	d1c7      	bne.n	8005098 <__sflush_r+0x34>
 8005108:	682b      	ldr	r3, [r5, #0]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d0c4      	beq.n	8005098 <__sflush_r+0x34>
 800510e:	2b1d      	cmp	r3, #29
 8005110:	d001      	beq.n	8005116 <__sflush_r+0xb2>
 8005112:	2b16      	cmp	r3, #22
 8005114:	d101      	bne.n	800511a <__sflush_r+0xb6>
 8005116:	602f      	str	r7, [r5, #0]
 8005118:	e7b1      	b.n	800507e <__sflush_r+0x1a>
 800511a:	89a3      	ldrh	r3, [r4, #12]
 800511c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005120:	81a3      	strh	r3, [r4, #12]
 8005122:	e7ad      	b.n	8005080 <__sflush_r+0x1c>
 8005124:	690f      	ldr	r7, [r1, #16]
 8005126:	2f00      	cmp	r7, #0
 8005128:	d0a9      	beq.n	800507e <__sflush_r+0x1a>
 800512a:	0793      	lsls	r3, r2, #30
 800512c:	680e      	ldr	r6, [r1, #0]
 800512e:	bf08      	it	eq
 8005130:	694b      	ldreq	r3, [r1, #20]
 8005132:	600f      	str	r7, [r1, #0]
 8005134:	bf18      	it	ne
 8005136:	2300      	movne	r3, #0
 8005138:	eba6 0807 	sub.w	r8, r6, r7
 800513c:	608b      	str	r3, [r1, #8]
 800513e:	f1b8 0f00 	cmp.w	r8, #0
 8005142:	dd9c      	ble.n	800507e <__sflush_r+0x1a>
 8005144:	6a21      	ldr	r1, [r4, #32]
 8005146:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005148:	4643      	mov	r3, r8
 800514a:	463a      	mov	r2, r7
 800514c:	4628      	mov	r0, r5
 800514e:	47b0      	blx	r6
 8005150:	2800      	cmp	r0, #0
 8005152:	dc06      	bgt.n	8005162 <__sflush_r+0xfe>
 8005154:	89a3      	ldrh	r3, [r4, #12]
 8005156:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800515a:	81a3      	strh	r3, [r4, #12]
 800515c:	f04f 30ff 	mov.w	r0, #4294967295
 8005160:	e78e      	b.n	8005080 <__sflush_r+0x1c>
 8005162:	4407      	add	r7, r0
 8005164:	eba8 0800 	sub.w	r8, r8, r0
 8005168:	e7e9      	b.n	800513e <__sflush_r+0xda>
 800516a:	bf00      	nop
 800516c:	20400001 	.word	0x20400001

08005170 <_fflush_r>:
 8005170:	b538      	push	{r3, r4, r5, lr}
 8005172:	690b      	ldr	r3, [r1, #16]
 8005174:	4605      	mov	r5, r0
 8005176:	460c      	mov	r4, r1
 8005178:	b913      	cbnz	r3, 8005180 <_fflush_r+0x10>
 800517a:	2500      	movs	r5, #0
 800517c:	4628      	mov	r0, r5
 800517e:	bd38      	pop	{r3, r4, r5, pc}
 8005180:	b118      	cbz	r0, 800518a <_fflush_r+0x1a>
 8005182:	6983      	ldr	r3, [r0, #24]
 8005184:	b90b      	cbnz	r3, 800518a <_fflush_r+0x1a>
 8005186:	f000 f887 	bl	8005298 <__sinit>
 800518a:	4b14      	ldr	r3, [pc, #80]	; (80051dc <_fflush_r+0x6c>)
 800518c:	429c      	cmp	r4, r3
 800518e:	d11b      	bne.n	80051c8 <_fflush_r+0x58>
 8005190:	686c      	ldr	r4, [r5, #4]
 8005192:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d0ef      	beq.n	800517a <_fflush_r+0xa>
 800519a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800519c:	07d0      	lsls	r0, r2, #31
 800519e:	d404      	bmi.n	80051aa <_fflush_r+0x3a>
 80051a0:	0599      	lsls	r1, r3, #22
 80051a2:	d402      	bmi.n	80051aa <_fflush_r+0x3a>
 80051a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80051a6:	f000 f915 	bl	80053d4 <__retarget_lock_acquire_recursive>
 80051aa:	4628      	mov	r0, r5
 80051ac:	4621      	mov	r1, r4
 80051ae:	f7ff ff59 	bl	8005064 <__sflush_r>
 80051b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80051b4:	07da      	lsls	r2, r3, #31
 80051b6:	4605      	mov	r5, r0
 80051b8:	d4e0      	bmi.n	800517c <_fflush_r+0xc>
 80051ba:	89a3      	ldrh	r3, [r4, #12]
 80051bc:	059b      	lsls	r3, r3, #22
 80051be:	d4dd      	bmi.n	800517c <_fflush_r+0xc>
 80051c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80051c2:	f000 f908 	bl	80053d6 <__retarget_lock_release_recursive>
 80051c6:	e7d9      	b.n	800517c <_fflush_r+0xc>
 80051c8:	4b05      	ldr	r3, [pc, #20]	; (80051e0 <_fflush_r+0x70>)
 80051ca:	429c      	cmp	r4, r3
 80051cc:	d101      	bne.n	80051d2 <_fflush_r+0x62>
 80051ce:	68ac      	ldr	r4, [r5, #8]
 80051d0:	e7df      	b.n	8005192 <_fflush_r+0x22>
 80051d2:	4b04      	ldr	r3, [pc, #16]	; (80051e4 <_fflush_r+0x74>)
 80051d4:	429c      	cmp	r4, r3
 80051d6:	bf08      	it	eq
 80051d8:	68ec      	ldreq	r4, [r5, #12]
 80051da:	e7da      	b.n	8005192 <_fflush_r+0x22>
 80051dc:	08005e88 	.word	0x08005e88
 80051e0:	08005ea8 	.word	0x08005ea8
 80051e4:	08005e68 	.word	0x08005e68

080051e8 <std>:
 80051e8:	2300      	movs	r3, #0
 80051ea:	b510      	push	{r4, lr}
 80051ec:	4604      	mov	r4, r0
 80051ee:	e9c0 3300 	strd	r3, r3, [r0]
 80051f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80051f6:	6083      	str	r3, [r0, #8]
 80051f8:	8181      	strh	r1, [r0, #12]
 80051fa:	6643      	str	r3, [r0, #100]	; 0x64
 80051fc:	81c2      	strh	r2, [r0, #14]
 80051fe:	6183      	str	r3, [r0, #24]
 8005200:	4619      	mov	r1, r3
 8005202:	2208      	movs	r2, #8
 8005204:	305c      	adds	r0, #92	; 0x5c
 8005206:	f7ff fdd7 	bl	8004db8 <memset>
 800520a:	4b05      	ldr	r3, [pc, #20]	; (8005220 <std+0x38>)
 800520c:	6263      	str	r3, [r4, #36]	; 0x24
 800520e:	4b05      	ldr	r3, [pc, #20]	; (8005224 <std+0x3c>)
 8005210:	62a3      	str	r3, [r4, #40]	; 0x28
 8005212:	4b05      	ldr	r3, [pc, #20]	; (8005228 <std+0x40>)
 8005214:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005216:	4b05      	ldr	r3, [pc, #20]	; (800522c <std+0x44>)
 8005218:	6224      	str	r4, [r4, #32]
 800521a:	6323      	str	r3, [r4, #48]	; 0x30
 800521c:	bd10      	pop	{r4, pc}
 800521e:	bf00      	nop
 8005220:	08005c61 	.word	0x08005c61
 8005224:	08005c83 	.word	0x08005c83
 8005228:	08005cbb 	.word	0x08005cbb
 800522c:	08005cdf 	.word	0x08005cdf

08005230 <_cleanup_r>:
 8005230:	4901      	ldr	r1, [pc, #4]	; (8005238 <_cleanup_r+0x8>)
 8005232:	f000 b8af 	b.w	8005394 <_fwalk_reent>
 8005236:	bf00      	nop
 8005238:	08005171 	.word	0x08005171

0800523c <__sfmoreglue>:
 800523c:	b570      	push	{r4, r5, r6, lr}
 800523e:	2268      	movs	r2, #104	; 0x68
 8005240:	1e4d      	subs	r5, r1, #1
 8005242:	4355      	muls	r5, r2
 8005244:	460e      	mov	r6, r1
 8005246:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800524a:	f000 f997 	bl	800557c <_malloc_r>
 800524e:	4604      	mov	r4, r0
 8005250:	b140      	cbz	r0, 8005264 <__sfmoreglue+0x28>
 8005252:	2100      	movs	r1, #0
 8005254:	e9c0 1600 	strd	r1, r6, [r0]
 8005258:	300c      	adds	r0, #12
 800525a:	60a0      	str	r0, [r4, #8]
 800525c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005260:	f7ff fdaa 	bl	8004db8 <memset>
 8005264:	4620      	mov	r0, r4
 8005266:	bd70      	pop	{r4, r5, r6, pc}

08005268 <__sfp_lock_acquire>:
 8005268:	4801      	ldr	r0, [pc, #4]	; (8005270 <__sfp_lock_acquire+0x8>)
 800526a:	f000 b8b3 	b.w	80053d4 <__retarget_lock_acquire_recursive>
 800526e:	bf00      	nop
 8005270:	200040d5 	.word	0x200040d5

08005274 <__sfp_lock_release>:
 8005274:	4801      	ldr	r0, [pc, #4]	; (800527c <__sfp_lock_release+0x8>)
 8005276:	f000 b8ae 	b.w	80053d6 <__retarget_lock_release_recursive>
 800527a:	bf00      	nop
 800527c:	200040d5 	.word	0x200040d5

08005280 <__sinit_lock_acquire>:
 8005280:	4801      	ldr	r0, [pc, #4]	; (8005288 <__sinit_lock_acquire+0x8>)
 8005282:	f000 b8a7 	b.w	80053d4 <__retarget_lock_acquire_recursive>
 8005286:	bf00      	nop
 8005288:	200040d6 	.word	0x200040d6

0800528c <__sinit_lock_release>:
 800528c:	4801      	ldr	r0, [pc, #4]	; (8005294 <__sinit_lock_release+0x8>)
 800528e:	f000 b8a2 	b.w	80053d6 <__retarget_lock_release_recursive>
 8005292:	bf00      	nop
 8005294:	200040d6 	.word	0x200040d6

08005298 <__sinit>:
 8005298:	b510      	push	{r4, lr}
 800529a:	4604      	mov	r4, r0
 800529c:	f7ff fff0 	bl	8005280 <__sinit_lock_acquire>
 80052a0:	69a3      	ldr	r3, [r4, #24]
 80052a2:	b11b      	cbz	r3, 80052ac <__sinit+0x14>
 80052a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052a8:	f7ff bff0 	b.w	800528c <__sinit_lock_release>
 80052ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80052b0:	6523      	str	r3, [r4, #80]	; 0x50
 80052b2:	4b13      	ldr	r3, [pc, #76]	; (8005300 <__sinit+0x68>)
 80052b4:	4a13      	ldr	r2, [pc, #76]	; (8005304 <__sinit+0x6c>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	62a2      	str	r2, [r4, #40]	; 0x28
 80052ba:	42a3      	cmp	r3, r4
 80052bc:	bf04      	itt	eq
 80052be:	2301      	moveq	r3, #1
 80052c0:	61a3      	streq	r3, [r4, #24]
 80052c2:	4620      	mov	r0, r4
 80052c4:	f000 f820 	bl	8005308 <__sfp>
 80052c8:	6060      	str	r0, [r4, #4]
 80052ca:	4620      	mov	r0, r4
 80052cc:	f000 f81c 	bl	8005308 <__sfp>
 80052d0:	60a0      	str	r0, [r4, #8]
 80052d2:	4620      	mov	r0, r4
 80052d4:	f000 f818 	bl	8005308 <__sfp>
 80052d8:	2200      	movs	r2, #0
 80052da:	60e0      	str	r0, [r4, #12]
 80052dc:	2104      	movs	r1, #4
 80052de:	6860      	ldr	r0, [r4, #4]
 80052e0:	f7ff ff82 	bl	80051e8 <std>
 80052e4:	68a0      	ldr	r0, [r4, #8]
 80052e6:	2201      	movs	r2, #1
 80052e8:	2109      	movs	r1, #9
 80052ea:	f7ff ff7d 	bl	80051e8 <std>
 80052ee:	68e0      	ldr	r0, [r4, #12]
 80052f0:	2202      	movs	r2, #2
 80052f2:	2112      	movs	r1, #18
 80052f4:	f7ff ff78 	bl	80051e8 <std>
 80052f8:	2301      	movs	r3, #1
 80052fa:	61a3      	str	r3, [r4, #24]
 80052fc:	e7d2      	b.n	80052a4 <__sinit+0xc>
 80052fe:	bf00      	nop
 8005300:	08005e64 	.word	0x08005e64
 8005304:	08005231 	.word	0x08005231

08005308 <__sfp>:
 8005308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800530a:	4607      	mov	r7, r0
 800530c:	f7ff ffac 	bl	8005268 <__sfp_lock_acquire>
 8005310:	4b1e      	ldr	r3, [pc, #120]	; (800538c <__sfp+0x84>)
 8005312:	681e      	ldr	r6, [r3, #0]
 8005314:	69b3      	ldr	r3, [r6, #24]
 8005316:	b913      	cbnz	r3, 800531e <__sfp+0x16>
 8005318:	4630      	mov	r0, r6
 800531a:	f7ff ffbd 	bl	8005298 <__sinit>
 800531e:	3648      	adds	r6, #72	; 0x48
 8005320:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005324:	3b01      	subs	r3, #1
 8005326:	d503      	bpl.n	8005330 <__sfp+0x28>
 8005328:	6833      	ldr	r3, [r6, #0]
 800532a:	b30b      	cbz	r3, 8005370 <__sfp+0x68>
 800532c:	6836      	ldr	r6, [r6, #0]
 800532e:	e7f7      	b.n	8005320 <__sfp+0x18>
 8005330:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005334:	b9d5      	cbnz	r5, 800536c <__sfp+0x64>
 8005336:	4b16      	ldr	r3, [pc, #88]	; (8005390 <__sfp+0x88>)
 8005338:	60e3      	str	r3, [r4, #12]
 800533a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800533e:	6665      	str	r5, [r4, #100]	; 0x64
 8005340:	f000 f847 	bl	80053d2 <__retarget_lock_init_recursive>
 8005344:	f7ff ff96 	bl	8005274 <__sfp_lock_release>
 8005348:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800534c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005350:	6025      	str	r5, [r4, #0]
 8005352:	61a5      	str	r5, [r4, #24]
 8005354:	2208      	movs	r2, #8
 8005356:	4629      	mov	r1, r5
 8005358:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800535c:	f7ff fd2c 	bl	8004db8 <memset>
 8005360:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005364:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005368:	4620      	mov	r0, r4
 800536a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800536c:	3468      	adds	r4, #104	; 0x68
 800536e:	e7d9      	b.n	8005324 <__sfp+0x1c>
 8005370:	2104      	movs	r1, #4
 8005372:	4638      	mov	r0, r7
 8005374:	f7ff ff62 	bl	800523c <__sfmoreglue>
 8005378:	4604      	mov	r4, r0
 800537a:	6030      	str	r0, [r6, #0]
 800537c:	2800      	cmp	r0, #0
 800537e:	d1d5      	bne.n	800532c <__sfp+0x24>
 8005380:	f7ff ff78 	bl	8005274 <__sfp_lock_release>
 8005384:	230c      	movs	r3, #12
 8005386:	603b      	str	r3, [r7, #0]
 8005388:	e7ee      	b.n	8005368 <__sfp+0x60>
 800538a:	bf00      	nop
 800538c:	08005e64 	.word	0x08005e64
 8005390:	ffff0001 	.word	0xffff0001

08005394 <_fwalk_reent>:
 8005394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005398:	4606      	mov	r6, r0
 800539a:	4688      	mov	r8, r1
 800539c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80053a0:	2700      	movs	r7, #0
 80053a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80053a6:	f1b9 0901 	subs.w	r9, r9, #1
 80053aa:	d505      	bpl.n	80053b8 <_fwalk_reent+0x24>
 80053ac:	6824      	ldr	r4, [r4, #0]
 80053ae:	2c00      	cmp	r4, #0
 80053b0:	d1f7      	bne.n	80053a2 <_fwalk_reent+0xe>
 80053b2:	4638      	mov	r0, r7
 80053b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053b8:	89ab      	ldrh	r3, [r5, #12]
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d907      	bls.n	80053ce <_fwalk_reent+0x3a>
 80053be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80053c2:	3301      	adds	r3, #1
 80053c4:	d003      	beq.n	80053ce <_fwalk_reent+0x3a>
 80053c6:	4629      	mov	r1, r5
 80053c8:	4630      	mov	r0, r6
 80053ca:	47c0      	blx	r8
 80053cc:	4307      	orrs	r7, r0
 80053ce:	3568      	adds	r5, #104	; 0x68
 80053d0:	e7e9      	b.n	80053a6 <_fwalk_reent+0x12>

080053d2 <__retarget_lock_init_recursive>:
 80053d2:	4770      	bx	lr

080053d4 <__retarget_lock_acquire_recursive>:
 80053d4:	4770      	bx	lr

080053d6 <__retarget_lock_release_recursive>:
 80053d6:	4770      	bx	lr

080053d8 <__swhatbuf_r>:
 80053d8:	b570      	push	{r4, r5, r6, lr}
 80053da:	460e      	mov	r6, r1
 80053dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053e0:	2900      	cmp	r1, #0
 80053e2:	b096      	sub	sp, #88	; 0x58
 80053e4:	4614      	mov	r4, r2
 80053e6:	461d      	mov	r5, r3
 80053e8:	da08      	bge.n	80053fc <__swhatbuf_r+0x24>
 80053ea:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80053ee:	2200      	movs	r2, #0
 80053f0:	602a      	str	r2, [r5, #0]
 80053f2:	061a      	lsls	r2, r3, #24
 80053f4:	d410      	bmi.n	8005418 <__swhatbuf_r+0x40>
 80053f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053fa:	e00e      	b.n	800541a <__swhatbuf_r+0x42>
 80053fc:	466a      	mov	r2, sp
 80053fe:	f000 fc95 	bl	8005d2c <_fstat_r>
 8005402:	2800      	cmp	r0, #0
 8005404:	dbf1      	blt.n	80053ea <__swhatbuf_r+0x12>
 8005406:	9a01      	ldr	r2, [sp, #4]
 8005408:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800540c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005410:	425a      	negs	r2, r3
 8005412:	415a      	adcs	r2, r3
 8005414:	602a      	str	r2, [r5, #0]
 8005416:	e7ee      	b.n	80053f6 <__swhatbuf_r+0x1e>
 8005418:	2340      	movs	r3, #64	; 0x40
 800541a:	2000      	movs	r0, #0
 800541c:	6023      	str	r3, [r4, #0]
 800541e:	b016      	add	sp, #88	; 0x58
 8005420:	bd70      	pop	{r4, r5, r6, pc}
	...

08005424 <__smakebuf_r>:
 8005424:	898b      	ldrh	r3, [r1, #12]
 8005426:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005428:	079d      	lsls	r5, r3, #30
 800542a:	4606      	mov	r6, r0
 800542c:	460c      	mov	r4, r1
 800542e:	d507      	bpl.n	8005440 <__smakebuf_r+0x1c>
 8005430:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005434:	6023      	str	r3, [r4, #0]
 8005436:	6123      	str	r3, [r4, #16]
 8005438:	2301      	movs	r3, #1
 800543a:	6163      	str	r3, [r4, #20]
 800543c:	b002      	add	sp, #8
 800543e:	bd70      	pop	{r4, r5, r6, pc}
 8005440:	ab01      	add	r3, sp, #4
 8005442:	466a      	mov	r2, sp
 8005444:	f7ff ffc8 	bl	80053d8 <__swhatbuf_r>
 8005448:	9900      	ldr	r1, [sp, #0]
 800544a:	4605      	mov	r5, r0
 800544c:	4630      	mov	r0, r6
 800544e:	f000 f895 	bl	800557c <_malloc_r>
 8005452:	b948      	cbnz	r0, 8005468 <__smakebuf_r+0x44>
 8005454:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005458:	059a      	lsls	r2, r3, #22
 800545a:	d4ef      	bmi.n	800543c <__smakebuf_r+0x18>
 800545c:	f023 0303 	bic.w	r3, r3, #3
 8005460:	f043 0302 	orr.w	r3, r3, #2
 8005464:	81a3      	strh	r3, [r4, #12]
 8005466:	e7e3      	b.n	8005430 <__smakebuf_r+0xc>
 8005468:	4b0d      	ldr	r3, [pc, #52]	; (80054a0 <__smakebuf_r+0x7c>)
 800546a:	62b3      	str	r3, [r6, #40]	; 0x28
 800546c:	89a3      	ldrh	r3, [r4, #12]
 800546e:	6020      	str	r0, [r4, #0]
 8005470:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005474:	81a3      	strh	r3, [r4, #12]
 8005476:	9b00      	ldr	r3, [sp, #0]
 8005478:	6163      	str	r3, [r4, #20]
 800547a:	9b01      	ldr	r3, [sp, #4]
 800547c:	6120      	str	r0, [r4, #16]
 800547e:	b15b      	cbz	r3, 8005498 <__smakebuf_r+0x74>
 8005480:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005484:	4630      	mov	r0, r6
 8005486:	f000 fc63 	bl	8005d50 <_isatty_r>
 800548a:	b128      	cbz	r0, 8005498 <__smakebuf_r+0x74>
 800548c:	89a3      	ldrh	r3, [r4, #12]
 800548e:	f023 0303 	bic.w	r3, r3, #3
 8005492:	f043 0301 	orr.w	r3, r3, #1
 8005496:	81a3      	strh	r3, [r4, #12]
 8005498:	89a0      	ldrh	r0, [r4, #12]
 800549a:	4305      	orrs	r5, r0
 800549c:	81a5      	strh	r5, [r4, #12]
 800549e:	e7cd      	b.n	800543c <__smakebuf_r+0x18>
 80054a0:	08005231 	.word	0x08005231

080054a4 <_free_r>:
 80054a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80054a6:	2900      	cmp	r1, #0
 80054a8:	d044      	beq.n	8005534 <_free_r+0x90>
 80054aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054ae:	9001      	str	r0, [sp, #4]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	f1a1 0404 	sub.w	r4, r1, #4
 80054b6:	bfb8      	it	lt
 80054b8:	18e4      	addlt	r4, r4, r3
 80054ba:	f000 fc6b 	bl	8005d94 <__malloc_lock>
 80054be:	4a1e      	ldr	r2, [pc, #120]	; (8005538 <_free_r+0x94>)
 80054c0:	9801      	ldr	r0, [sp, #4]
 80054c2:	6813      	ldr	r3, [r2, #0]
 80054c4:	b933      	cbnz	r3, 80054d4 <_free_r+0x30>
 80054c6:	6063      	str	r3, [r4, #4]
 80054c8:	6014      	str	r4, [r2, #0]
 80054ca:	b003      	add	sp, #12
 80054cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80054d0:	f000 bc66 	b.w	8005da0 <__malloc_unlock>
 80054d4:	42a3      	cmp	r3, r4
 80054d6:	d908      	bls.n	80054ea <_free_r+0x46>
 80054d8:	6825      	ldr	r5, [r4, #0]
 80054da:	1961      	adds	r1, r4, r5
 80054dc:	428b      	cmp	r3, r1
 80054de:	bf01      	itttt	eq
 80054e0:	6819      	ldreq	r1, [r3, #0]
 80054e2:	685b      	ldreq	r3, [r3, #4]
 80054e4:	1949      	addeq	r1, r1, r5
 80054e6:	6021      	streq	r1, [r4, #0]
 80054e8:	e7ed      	b.n	80054c6 <_free_r+0x22>
 80054ea:	461a      	mov	r2, r3
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	b10b      	cbz	r3, 80054f4 <_free_r+0x50>
 80054f0:	42a3      	cmp	r3, r4
 80054f2:	d9fa      	bls.n	80054ea <_free_r+0x46>
 80054f4:	6811      	ldr	r1, [r2, #0]
 80054f6:	1855      	adds	r5, r2, r1
 80054f8:	42a5      	cmp	r5, r4
 80054fa:	d10b      	bne.n	8005514 <_free_r+0x70>
 80054fc:	6824      	ldr	r4, [r4, #0]
 80054fe:	4421      	add	r1, r4
 8005500:	1854      	adds	r4, r2, r1
 8005502:	42a3      	cmp	r3, r4
 8005504:	6011      	str	r1, [r2, #0]
 8005506:	d1e0      	bne.n	80054ca <_free_r+0x26>
 8005508:	681c      	ldr	r4, [r3, #0]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	6053      	str	r3, [r2, #4]
 800550e:	4421      	add	r1, r4
 8005510:	6011      	str	r1, [r2, #0]
 8005512:	e7da      	b.n	80054ca <_free_r+0x26>
 8005514:	d902      	bls.n	800551c <_free_r+0x78>
 8005516:	230c      	movs	r3, #12
 8005518:	6003      	str	r3, [r0, #0]
 800551a:	e7d6      	b.n	80054ca <_free_r+0x26>
 800551c:	6825      	ldr	r5, [r4, #0]
 800551e:	1961      	adds	r1, r4, r5
 8005520:	428b      	cmp	r3, r1
 8005522:	bf04      	itt	eq
 8005524:	6819      	ldreq	r1, [r3, #0]
 8005526:	685b      	ldreq	r3, [r3, #4]
 8005528:	6063      	str	r3, [r4, #4]
 800552a:	bf04      	itt	eq
 800552c:	1949      	addeq	r1, r1, r5
 800552e:	6021      	streq	r1, [r4, #0]
 8005530:	6054      	str	r4, [r2, #4]
 8005532:	e7ca      	b.n	80054ca <_free_r+0x26>
 8005534:	b003      	add	sp, #12
 8005536:	bd30      	pop	{r4, r5, pc}
 8005538:	200040d8 	.word	0x200040d8

0800553c <sbrk_aligned>:
 800553c:	b570      	push	{r4, r5, r6, lr}
 800553e:	4e0e      	ldr	r6, [pc, #56]	; (8005578 <sbrk_aligned+0x3c>)
 8005540:	460c      	mov	r4, r1
 8005542:	6831      	ldr	r1, [r6, #0]
 8005544:	4605      	mov	r5, r0
 8005546:	b911      	cbnz	r1, 800554e <sbrk_aligned+0x12>
 8005548:	f000 fb7a 	bl	8005c40 <_sbrk_r>
 800554c:	6030      	str	r0, [r6, #0]
 800554e:	4621      	mov	r1, r4
 8005550:	4628      	mov	r0, r5
 8005552:	f000 fb75 	bl	8005c40 <_sbrk_r>
 8005556:	1c43      	adds	r3, r0, #1
 8005558:	d00a      	beq.n	8005570 <sbrk_aligned+0x34>
 800555a:	1cc4      	adds	r4, r0, #3
 800555c:	f024 0403 	bic.w	r4, r4, #3
 8005560:	42a0      	cmp	r0, r4
 8005562:	d007      	beq.n	8005574 <sbrk_aligned+0x38>
 8005564:	1a21      	subs	r1, r4, r0
 8005566:	4628      	mov	r0, r5
 8005568:	f000 fb6a 	bl	8005c40 <_sbrk_r>
 800556c:	3001      	adds	r0, #1
 800556e:	d101      	bne.n	8005574 <sbrk_aligned+0x38>
 8005570:	f04f 34ff 	mov.w	r4, #4294967295
 8005574:	4620      	mov	r0, r4
 8005576:	bd70      	pop	{r4, r5, r6, pc}
 8005578:	200040dc 	.word	0x200040dc

0800557c <_malloc_r>:
 800557c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005580:	1ccd      	adds	r5, r1, #3
 8005582:	f025 0503 	bic.w	r5, r5, #3
 8005586:	3508      	adds	r5, #8
 8005588:	2d0c      	cmp	r5, #12
 800558a:	bf38      	it	cc
 800558c:	250c      	movcc	r5, #12
 800558e:	2d00      	cmp	r5, #0
 8005590:	4607      	mov	r7, r0
 8005592:	db01      	blt.n	8005598 <_malloc_r+0x1c>
 8005594:	42a9      	cmp	r1, r5
 8005596:	d905      	bls.n	80055a4 <_malloc_r+0x28>
 8005598:	230c      	movs	r3, #12
 800559a:	603b      	str	r3, [r7, #0]
 800559c:	2600      	movs	r6, #0
 800559e:	4630      	mov	r0, r6
 80055a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055a4:	4e2e      	ldr	r6, [pc, #184]	; (8005660 <_malloc_r+0xe4>)
 80055a6:	f000 fbf5 	bl	8005d94 <__malloc_lock>
 80055aa:	6833      	ldr	r3, [r6, #0]
 80055ac:	461c      	mov	r4, r3
 80055ae:	bb34      	cbnz	r4, 80055fe <_malloc_r+0x82>
 80055b0:	4629      	mov	r1, r5
 80055b2:	4638      	mov	r0, r7
 80055b4:	f7ff ffc2 	bl	800553c <sbrk_aligned>
 80055b8:	1c43      	adds	r3, r0, #1
 80055ba:	4604      	mov	r4, r0
 80055bc:	d14d      	bne.n	800565a <_malloc_r+0xde>
 80055be:	6834      	ldr	r4, [r6, #0]
 80055c0:	4626      	mov	r6, r4
 80055c2:	2e00      	cmp	r6, #0
 80055c4:	d140      	bne.n	8005648 <_malloc_r+0xcc>
 80055c6:	6823      	ldr	r3, [r4, #0]
 80055c8:	4631      	mov	r1, r6
 80055ca:	4638      	mov	r0, r7
 80055cc:	eb04 0803 	add.w	r8, r4, r3
 80055d0:	f000 fb36 	bl	8005c40 <_sbrk_r>
 80055d4:	4580      	cmp	r8, r0
 80055d6:	d13a      	bne.n	800564e <_malloc_r+0xd2>
 80055d8:	6821      	ldr	r1, [r4, #0]
 80055da:	3503      	adds	r5, #3
 80055dc:	1a6d      	subs	r5, r5, r1
 80055de:	f025 0503 	bic.w	r5, r5, #3
 80055e2:	3508      	adds	r5, #8
 80055e4:	2d0c      	cmp	r5, #12
 80055e6:	bf38      	it	cc
 80055e8:	250c      	movcc	r5, #12
 80055ea:	4629      	mov	r1, r5
 80055ec:	4638      	mov	r0, r7
 80055ee:	f7ff ffa5 	bl	800553c <sbrk_aligned>
 80055f2:	3001      	adds	r0, #1
 80055f4:	d02b      	beq.n	800564e <_malloc_r+0xd2>
 80055f6:	6823      	ldr	r3, [r4, #0]
 80055f8:	442b      	add	r3, r5
 80055fa:	6023      	str	r3, [r4, #0]
 80055fc:	e00e      	b.n	800561c <_malloc_r+0xa0>
 80055fe:	6822      	ldr	r2, [r4, #0]
 8005600:	1b52      	subs	r2, r2, r5
 8005602:	d41e      	bmi.n	8005642 <_malloc_r+0xc6>
 8005604:	2a0b      	cmp	r2, #11
 8005606:	d916      	bls.n	8005636 <_malloc_r+0xba>
 8005608:	1961      	adds	r1, r4, r5
 800560a:	42a3      	cmp	r3, r4
 800560c:	6025      	str	r5, [r4, #0]
 800560e:	bf18      	it	ne
 8005610:	6059      	strne	r1, [r3, #4]
 8005612:	6863      	ldr	r3, [r4, #4]
 8005614:	bf08      	it	eq
 8005616:	6031      	streq	r1, [r6, #0]
 8005618:	5162      	str	r2, [r4, r5]
 800561a:	604b      	str	r3, [r1, #4]
 800561c:	4638      	mov	r0, r7
 800561e:	f104 060b 	add.w	r6, r4, #11
 8005622:	f000 fbbd 	bl	8005da0 <__malloc_unlock>
 8005626:	f026 0607 	bic.w	r6, r6, #7
 800562a:	1d23      	adds	r3, r4, #4
 800562c:	1af2      	subs	r2, r6, r3
 800562e:	d0b6      	beq.n	800559e <_malloc_r+0x22>
 8005630:	1b9b      	subs	r3, r3, r6
 8005632:	50a3      	str	r3, [r4, r2]
 8005634:	e7b3      	b.n	800559e <_malloc_r+0x22>
 8005636:	6862      	ldr	r2, [r4, #4]
 8005638:	42a3      	cmp	r3, r4
 800563a:	bf0c      	ite	eq
 800563c:	6032      	streq	r2, [r6, #0]
 800563e:	605a      	strne	r2, [r3, #4]
 8005640:	e7ec      	b.n	800561c <_malloc_r+0xa0>
 8005642:	4623      	mov	r3, r4
 8005644:	6864      	ldr	r4, [r4, #4]
 8005646:	e7b2      	b.n	80055ae <_malloc_r+0x32>
 8005648:	4634      	mov	r4, r6
 800564a:	6876      	ldr	r6, [r6, #4]
 800564c:	e7b9      	b.n	80055c2 <_malloc_r+0x46>
 800564e:	230c      	movs	r3, #12
 8005650:	603b      	str	r3, [r7, #0]
 8005652:	4638      	mov	r0, r7
 8005654:	f000 fba4 	bl	8005da0 <__malloc_unlock>
 8005658:	e7a1      	b.n	800559e <_malloc_r+0x22>
 800565a:	6025      	str	r5, [r4, #0]
 800565c:	e7de      	b.n	800561c <_malloc_r+0xa0>
 800565e:	bf00      	nop
 8005660:	200040d8 	.word	0x200040d8

08005664 <__sfputc_r>:
 8005664:	6893      	ldr	r3, [r2, #8]
 8005666:	3b01      	subs	r3, #1
 8005668:	2b00      	cmp	r3, #0
 800566a:	b410      	push	{r4}
 800566c:	6093      	str	r3, [r2, #8]
 800566e:	da08      	bge.n	8005682 <__sfputc_r+0x1e>
 8005670:	6994      	ldr	r4, [r2, #24]
 8005672:	42a3      	cmp	r3, r4
 8005674:	db01      	blt.n	800567a <__sfputc_r+0x16>
 8005676:	290a      	cmp	r1, #10
 8005678:	d103      	bne.n	8005682 <__sfputc_r+0x1e>
 800567a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800567e:	f7ff bc31 	b.w	8004ee4 <__swbuf_r>
 8005682:	6813      	ldr	r3, [r2, #0]
 8005684:	1c58      	adds	r0, r3, #1
 8005686:	6010      	str	r0, [r2, #0]
 8005688:	7019      	strb	r1, [r3, #0]
 800568a:	4608      	mov	r0, r1
 800568c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005690:	4770      	bx	lr

08005692 <__sfputs_r>:
 8005692:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005694:	4606      	mov	r6, r0
 8005696:	460f      	mov	r7, r1
 8005698:	4614      	mov	r4, r2
 800569a:	18d5      	adds	r5, r2, r3
 800569c:	42ac      	cmp	r4, r5
 800569e:	d101      	bne.n	80056a4 <__sfputs_r+0x12>
 80056a0:	2000      	movs	r0, #0
 80056a2:	e007      	b.n	80056b4 <__sfputs_r+0x22>
 80056a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056a8:	463a      	mov	r2, r7
 80056aa:	4630      	mov	r0, r6
 80056ac:	f7ff ffda 	bl	8005664 <__sfputc_r>
 80056b0:	1c43      	adds	r3, r0, #1
 80056b2:	d1f3      	bne.n	800569c <__sfputs_r+0xa>
 80056b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080056b8 <_vfiprintf_r>:
 80056b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056bc:	460d      	mov	r5, r1
 80056be:	b09d      	sub	sp, #116	; 0x74
 80056c0:	4614      	mov	r4, r2
 80056c2:	4698      	mov	r8, r3
 80056c4:	4606      	mov	r6, r0
 80056c6:	b118      	cbz	r0, 80056d0 <_vfiprintf_r+0x18>
 80056c8:	6983      	ldr	r3, [r0, #24]
 80056ca:	b90b      	cbnz	r3, 80056d0 <_vfiprintf_r+0x18>
 80056cc:	f7ff fde4 	bl	8005298 <__sinit>
 80056d0:	4b89      	ldr	r3, [pc, #548]	; (80058f8 <_vfiprintf_r+0x240>)
 80056d2:	429d      	cmp	r5, r3
 80056d4:	d11b      	bne.n	800570e <_vfiprintf_r+0x56>
 80056d6:	6875      	ldr	r5, [r6, #4]
 80056d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80056da:	07d9      	lsls	r1, r3, #31
 80056dc:	d405      	bmi.n	80056ea <_vfiprintf_r+0x32>
 80056de:	89ab      	ldrh	r3, [r5, #12]
 80056e0:	059a      	lsls	r2, r3, #22
 80056e2:	d402      	bmi.n	80056ea <_vfiprintf_r+0x32>
 80056e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80056e6:	f7ff fe75 	bl	80053d4 <__retarget_lock_acquire_recursive>
 80056ea:	89ab      	ldrh	r3, [r5, #12]
 80056ec:	071b      	lsls	r3, r3, #28
 80056ee:	d501      	bpl.n	80056f4 <_vfiprintf_r+0x3c>
 80056f0:	692b      	ldr	r3, [r5, #16]
 80056f2:	b9eb      	cbnz	r3, 8005730 <_vfiprintf_r+0x78>
 80056f4:	4629      	mov	r1, r5
 80056f6:	4630      	mov	r0, r6
 80056f8:	f7ff fc46 	bl	8004f88 <__swsetup_r>
 80056fc:	b1c0      	cbz	r0, 8005730 <_vfiprintf_r+0x78>
 80056fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005700:	07dc      	lsls	r4, r3, #31
 8005702:	d50e      	bpl.n	8005722 <_vfiprintf_r+0x6a>
 8005704:	f04f 30ff 	mov.w	r0, #4294967295
 8005708:	b01d      	add	sp, #116	; 0x74
 800570a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800570e:	4b7b      	ldr	r3, [pc, #492]	; (80058fc <_vfiprintf_r+0x244>)
 8005710:	429d      	cmp	r5, r3
 8005712:	d101      	bne.n	8005718 <_vfiprintf_r+0x60>
 8005714:	68b5      	ldr	r5, [r6, #8]
 8005716:	e7df      	b.n	80056d8 <_vfiprintf_r+0x20>
 8005718:	4b79      	ldr	r3, [pc, #484]	; (8005900 <_vfiprintf_r+0x248>)
 800571a:	429d      	cmp	r5, r3
 800571c:	bf08      	it	eq
 800571e:	68f5      	ldreq	r5, [r6, #12]
 8005720:	e7da      	b.n	80056d8 <_vfiprintf_r+0x20>
 8005722:	89ab      	ldrh	r3, [r5, #12]
 8005724:	0598      	lsls	r0, r3, #22
 8005726:	d4ed      	bmi.n	8005704 <_vfiprintf_r+0x4c>
 8005728:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800572a:	f7ff fe54 	bl	80053d6 <__retarget_lock_release_recursive>
 800572e:	e7e9      	b.n	8005704 <_vfiprintf_r+0x4c>
 8005730:	2300      	movs	r3, #0
 8005732:	9309      	str	r3, [sp, #36]	; 0x24
 8005734:	2320      	movs	r3, #32
 8005736:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800573a:	f8cd 800c 	str.w	r8, [sp, #12]
 800573e:	2330      	movs	r3, #48	; 0x30
 8005740:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005904 <_vfiprintf_r+0x24c>
 8005744:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005748:	f04f 0901 	mov.w	r9, #1
 800574c:	4623      	mov	r3, r4
 800574e:	469a      	mov	sl, r3
 8005750:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005754:	b10a      	cbz	r2, 800575a <_vfiprintf_r+0xa2>
 8005756:	2a25      	cmp	r2, #37	; 0x25
 8005758:	d1f9      	bne.n	800574e <_vfiprintf_r+0x96>
 800575a:	ebba 0b04 	subs.w	fp, sl, r4
 800575e:	d00b      	beq.n	8005778 <_vfiprintf_r+0xc0>
 8005760:	465b      	mov	r3, fp
 8005762:	4622      	mov	r2, r4
 8005764:	4629      	mov	r1, r5
 8005766:	4630      	mov	r0, r6
 8005768:	f7ff ff93 	bl	8005692 <__sfputs_r>
 800576c:	3001      	adds	r0, #1
 800576e:	f000 80aa 	beq.w	80058c6 <_vfiprintf_r+0x20e>
 8005772:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005774:	445a      	add	r2, fp
 8005776:	9209      	str	r2, [sp, #36]	; 0x24
 8005778:	f89a 3000 	ldrb.w	r3, [sl]
 800577c:	2b00      	cmp	r3, #0
 800577e:	f000 80a2 	beq.w	80058c6 <_vfiprintf_r+0x20e>
 8005782:	2300      	movs	r3, #0
 8005784:	f04f 32ff 	mov.w	r2, #4294967295
 8005788:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800578c:	f10a 0a01 	add.w	sl, sl, #1
 8005790:	9304      	str	r3, [sp, #16]
 8005792:	9307      	str	r3, [sp, #28]
 8005794:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005798:	931a      	str	r3, [sp, #104]	; 0x68
 800579a:	4654      	mov	r4, sl
 800579c:	2205      	movs	r2, #5
 800579e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057a2:	4858      	ldr	r0, [pc, #352]	; (8005904 <_vfiprintf_r+0x24c>)
 80057a4:	f7fa fd34 	bl	8000210 <memchr>
 80057a8:	9a04      	ldr	r2, [sp, #16]
 80057aa:	b9d8      	cbnz	r0, 80057e4 <_vfiprintf_r+0x12c>
 80057ac:	06d1      	lsls	r1, r2, #27
 80057ae:	bf44      	itt	mi
 80057b0:	2320      	movmi	r3, #32
 80057b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057b6:	0713      	lsls	r3, r2, #28
 80057b8:	bf44      	itt	mi
 80057ba:	232b      	movmi	r3, #43	; 0x2b
 80057bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057c0:	f89a 3000 	ldrb.w	r3, [sl]
 80057c4:	2b2a      	cmp	r3, #42	; 0x2a
 80057c6:	d015      	beq.n	80057f4 <_vfiprintf_r+0x13c>
 80057c8:	9a07      	ldr	r2, [sp, #28]
 80057ca:	4654      	mov	r4, sl
 80057cc:	2000      	movs	r0, #0
 80057ce:	f04f 0c0a 	mov.w	ip, #10
 80057d2:	4621      	mov	r1, r4
 80057d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80057d8:	3b30      	subs	r3, #48	; 0x30
 80057da:	2b09      	cmp	r3, #9
 80057dc:	d94e      	bls.n	800587c <_vfiprintf_r+0x1c4>
 80057de:	b1b0      	cbz	r0, 800580e <_vfiprintf_r+0x156>
 80057e0:	9207      	str	r2, [sp, #28]
 80057e2:	e014      	b.n	800580e <_vfiprintf_r+0x156>
 80057e4:	eba0 0308 	sub.w	r3, r0, r8
 80057e8:	fa09 f303 	lsl.w	r3, r9, r3
 80057ec:	4313      	orrs	r3, r2
 80057ee:	9304      	str	r3, [sp, #16]
 80057f0:	46a2      	mov	sl, r4
 80057f2:	e7d2      	b.n	800579a <_vfiprintf_r+0xe2>
 80057f4:	9b03      	ldr	r3, [sp, #12]
 80057f6:	1d19      	adds	r1, r3, #4
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	9103      	str	r1, [sp, #12]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	bfbb      	ittet	lt
 8005800:	425b      	neglt	r3, r3
 8005802:	f042 0202 	orrlt.w	r2, r2, #2
 8005806:	9307      	strge	r3, [sp, #28]
 8005808:	9307      	strlt	r3, [sp, #28]
 800580a:	bfb8      	it	lt
 800580c:	9204      	strlt	r2, [sp, #16]
 800580e:	7823      	ldrb	r3, [r4, #0]
 8005810:	2b2e      	cmp	r3, #46	; 0x2e
 8005812:	d10c      	bne.n	800582e <_vfiprintf_r+0x176>
 8005814:	7863      	ldrb	r3, [r4, #1]
 8005816:	2b2a      	cmp	r3, #42	; 0x2a
 8005818:	d135      	bne.n	8005886 <_vfiprintf_r+0x1ce>
 800581a:	9b03      	ldr	r3, [sp, #12]
 800581c:	1d1a      	adds	r2, r3, #4
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	9203      	str	r2, [sp, #12]
 8005822:	2b00      	cmp	r3, #0
 8005824:	bfb8      	it	lt
 8005826:	f04f 33ff 	movlt.w	r3, #4294967295
 800582a:	3402      	adds	r4, #2
 800582c:	9305      	str	r3, [sp, #20]
 800582e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005914 <_vfiprintf_r+0x25c>
 8005832:	7821      	ldrb	r1, [r4, #0]
 8005834:	2203      	movs	r2, #3
 8005836:	4650      	mov	r0, sl
 8005838:	f7fa fcea 	bl	8000210 <memchr>
 800583c:	b140      	cbz	r0, 8005850 <_vfiprintf_r+0x198>
 800583e:	2340      	movs	r3, #64	; 0x40
 8005840:	eba0 000a 	sub.w	r0, r0, sl
 8005844:	fa03 f000 	lsl.w	r0, r3, r0
 8005848:	9b04      	ldr	r3, [sp, #16]
 800584a:	4303      	orrs	r3, r0
 800584c:	3401      	adds	r4, #1
 800584e:	9304      	str	r3, [sp, #16]
 8005850:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005854:	482c      	ldr	r0, [pc, #176]	; (8005908 <_vfiprintf_r+0x250>)
 8005856:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800585a:	2206      	movs	r2, #6
 800585c:	f7fa fcd8 	bl	8000210 <memchr>
 8005860:	2800      	cmp	r0, #0
 8005862:	d03f      	beq.n	80058e4 <_vfiprintf_r+0x22c>
 8005864:	4b29      	ldr	r3, [pc, #164]	; (800590c <_vfiprintf_r+0x254>)
 8005866:	bb1b      	cbnz	r3, 80058b0 <_vfiprintf_r+0x1f8>
 8005868:	9b03      	ldr	r3, [sp, #12]
 800586a:	3307      	adds	r3, #7
 800586c:	f023 0307 	bic.w	r3, r3, #7
 8005870:	3308      	adds	r3, #8
 8005872:	9303      	str	r3, [sp, #12]
 8005874:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005876:	443b      	add	r3, r7
 8005878:	9309      	str	r3, [sp, #36]	; 0x24
 800587a:	e767      	b.n	800574c <_vfiprintf_r+0x94>
 800587c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005880:	460c      	mov	r4, r1
 8005882:	2001      	movs	r0, #1
 8005884:	e7a5      	b.n	80057d2 <_vfiprintf_r+0x11a>
 8005886:	2300      	movs	r3, #0
 8005888:	3401      	adds	r4, #1
 800588a:	9305      	str	r3, [sp, #20]
 800588c:	4619      	mov	r1, r3
 800588e:	f04f 0c0a 	mov.w	ip, #10
 8005892:	4620      	mov	r0, r4
 8005894:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005898:	3a30      	subs	r2, #48	; 0x30
 800589a:	2a09      	cmp	r2, #9
 800589c:	d903      	bls.n	80058a6 <_vfiprintf_r+0x1ee>
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d0c5      	beq.n	800582e <_vfiprintf_r+0x176>
 80058a2:	9105      	str	r1, [sp, #20]
 80058a4:	e7c3      	b.n	800582e <_vfiprintf_r+0x176>
 80058a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80058aa:	4604      	mov	r4, r0
 80058ac:	2301      	movs	r3, #1
 80058ae:	e7f0      	b.n	8005892 <_vfiprintf_r+0x1da>
 80058b0:	ab03      	add	r3, sp, #12
 80058b2:	9300      	str	r3, [sp, #0]
 80058b4:	462a      	mov	r2, r5
 80058b6:	4b16      	ldr	r3, [pc, #88]	; (8005910 <_vfiprintf_r+0x258>)
 80058b8:	a904      	add	r1, sp, #16
 80058ba:	4630      	mov	r0, r6
 80058bc:	f3af 8000 	nop.w
 80058c0:	4607      	mov	r7, r0
 80058c2:	1c78      	adds	r0, r7, #1
 80058c4:	d1d6      	bne.n	8005874 <_vfiprintf_r+0x1bc>
 80058c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80058c8:	07d9      	lsls	r1, r3, #31
 80058ca:	d405      	bmi.n	80058d8 <_vfiprintf_r+0x220>
 80058cc:	89ab      	ldrh	r3, [r5, #12]
 80058ce:	059a      	lsls	r2, r3, #22
 80058d0:	d402      	bmi.n	80058d8 <_vfiprintf_r+0x220>
 80058d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80058d4:	f7ff fd7f 	bl	80053d6 <__retarget_lock_release_recursive>
 80058d8:	89ab      	ldrh	r3, [r5, #12]
 80058da:	065b      	lsls	r3, r3, #25
 80058dc:	f53f af12 	bmi.w	8005704 <_vfiprintf_r+0x4c>
 80058e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80058e2:	e711      	b.n	8005708 <_vfiprintf_r+0x50>
 80058e4:	ab03      	add	r3, sp, #12
 80058e6:	9300      	str	r3, [sp, #0]
 80058e8:	462a      	mov	r2, r5
 80058ea:	4b09      	ldr	r3, [pc, #36]	; (8005910 <_vfiprintf_r+0x258>)
 80058ec:	a904      	add	r1, sp, #16
 80058ee:	4630      	mov	r0, r6
 80058f0:	f000 f880 	bl	80059f4 <_printf_i>
 80058f4:	e7e4      	b.n	80058c0 <_vfiprintf_r+0x208>
 80058f6:	bf00      	nop
 80058f8:	08005e88 	.word	0x08005e88
 80058fc:	08005ea8 	.word	0x08005ea8
 8005900:	08005e68 	.word	0x08005e68
 8005904:	08005ec8 	.word	0x08005ec8
 8005908:	08005ed2 	.word	0x08005ed2
 800590c:	00000000 	.word	0x00000000
 8005910:	08005693 	.word	0x08005693
 8005914:	08005ece 	.word	0x08005ece

08005918 <_printf_common>:
 8005918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800591c:	4616      	mov	r6, r2
 800591e:	4699      	mov	r9, r3
 8005920:	688a      	ldr	r2, [r1, #8]
 8005922:	690b      	ldr	r3, [r1, #16]
 8005924:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005928:	4293      	cmp	r3, r2
 800592a:	bfb8      	it	lt
 800592c:	4613      	movlt	r3, r2
 800592e:	6033      	str	r3, [r6, #0]
 8005930:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005934:	4607      	mov	r7, r0
 8005936:	460c      	mov	r4, r1
 8005938:	b10a      	cbz	r2, 800593e <_printf_common+0x26>
 800593a:	3301      	adds	r3, #1
 800593c:	6033      	str	r3, [r6, #0]
 800593e:	6823      	ldr	r3, [r4, #0]
 8005940:	0699      	lsls	r1, r3, #26
 8005942:	bf42      	ittt	mi
 8005944:	6833      	ldrmi	r3, [r6, #0]
 8005946:	3302      	addmi	r3, #2
 8005948:	6033      	strmi	r3, [r6, #0]
 800594a:	6825      	ldr	r5, [r4, #0]
 800594c:	f015 0506 	ands.w	r5, r5, #6
 8005950:	d106      	bne.n	8005960 <_printf_common+0x48>
 8005952:	f104 0a19 	add.w	sl, r4, #25
 8005956:	68e3      	ldr	r3, [r4, #12]
 8005958:	6832      	ldr	r2, [r6, #0]
 800595a:	1a9b      	subs	r3, r3, r2
 800595c:	42ab      	cmp	r3, r5
 800595e:	dc26      	bgt.n	80059ae <_printf_common+0x96>
 8005960:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005964:	1e13      	subs	r3, r2, #0
 8005966:	6822      	ldr	r2, [r4, #0]
 8005968:	bf18      	it	ne
 800596a:	2301      	movne	r3, #1
 800596c:	0692      	lsls	r2, r2, #26
 800596e:	d42b      	bmi.n	80059c8 <_printf_common+0xb0>
 8005970:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005974:	4649      	mov	r1, r9
 8005976:	4638      	mov	r0, r7
 8005978:	47c0      	blx	r8
 800597a:	3001      	adds	r0, #1
 800597c:	d01e      	beq.n	80059bc <_printf_common+0xa4>
 800597e:	6823      	ldr	r3, [r4, #0]
 8005980:	68e5      	ldr	r5, [r4, #12]
 8005982:	6832      	ldr	r2, [r6, #0]
 8005984:	f003 0306 	and.w	r3, r3, #6
 8005988:	2b04      	cmp	r3, #4
 800598a:	bf08      	it	eq
 800598c:	1aad      	subeq	r5, r5, r2
 800598e:	68a3      	ldr	r3, [r4, #8]
 8005990:	6922      	ldr	r2, [r4, #16]
 8005992:	bf0c      	ite	eq
 8005994:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005998:	2500      	movne	r5, #0
 800599a:	4293      	cmp	r3, r2
 800599c:	bfc4      	itt	gt
 800599e:	1a9b      	subgt	r3, r3, r2
 80059a0:	18ed      	addgt	r5, r5, r3
 80059a2:	2600      	movs	r6, #0
 80059a4:	341a      	adds	r4, #26
 80059a6:	42b5      	cmp	r5, r6
 80059a8:	d11a      	bne.n	80059e0 <_printf_common+0xc8>
 80059aa:	2000      	movs	r0, #0
 80059ac:	e008      	b.n	80059c0 <_printf_common+0xa8>
 80059ae:	2301      	movs	r3, #1
 80059b0:	4652      	mov	r2, sl
 80059b2:	4649      	mov	r1, r9
 80059b4:	4638      	mov	r0, r7
 80059b6:	47c0      	blx	r8
 80059b8:	3001      	adds	r0, #1
 80059ba:	d103      	bne.n	80059c4 <_printf_common+0xac>
 80059bc:	f04f 30ff 	mov.w	r0, #4294967295
 80059c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059c4:	3501      	adds	r5, #1
 80059c6:	e7c6      	b.n	8005956 <_printf_common+0x3e>
 80059c8:	18e1      	adds	r1, r4, r3
 80059ca:	1c5a      	adds	r2, r3, #1
 80059cc:	2030      	movs	r0, #48	; 0x30
 80059ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80059d2:	4422      	add	r2, r4
 80059d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80059d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80059dc:	3302      	adds	r3, #2
 80059de:	e7c7      	b.n	8005970 <_printf_common+0x58>
 80059e0:	2301      	movs	r3, #1
 80059e2:	4622      	mov	r2, r4
 80059e4:	4649      	mov	r1, r9
 80059e6:	4638      	mov	r0, r7
 80059e8:	47c0      	blx	r8
 80059ea:	3001      	adds	r0, #1
 80059ec:	d0e6      	beq.n	80059bc <_printf_common+0xa4>
 80059ee:	3601      	adds	r6, #1
 80059f0:	e7d9      	b.n	80059a6 <_printf_common+0x8e>
	...

080059f4 <_printf_i>:
 80059f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80059f8:	7e0f      	ldrb	r7, [r1, #24]
 80059fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80059fc:	2f78      	cmp	r7, #120	; 0x78
 80059fe:	4691      	mov	r9, r2
 8005a00:	4680      	mov	r8, r0
 8005a02:	460c      	mov	r4, r1
 8005a04:	469a      	mov	sl, r3
 8005a06:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005a0a:	d807      	bhi.n	8005a1c <_printf_i+0x28>
 8005a0c:	2f62      	cmp	r7, #98	; 0x62
 8005a0e:	d80a      	bhi.n	8005a26 <_printf_i+0x32>
 8005a10:	2f00      	cmp	r7, #0
 8005a12:	f000 80d8 	beq.w	8005bc6 <_printf_i+0x1d2>
 8005a16:	2f58      	cmp	r7, #88	; 0x58
 8005a18:	f000 80a3 	beq.w	8005b62 <_printf_i+0x16e>
 8005a1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005a24:	e03a      	b.n	8005a9c <_printf_i+0xa8>
 8005a26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005a2a:	2b15      	cmp	r3, #21
 8005a2c:	d8f6      	bhi.n	8005a1c <_printf_i+0x28>
 8005a2e:	a101      	add	r1, pc, #4	; (adr r1, 8005a34 <_printf_i+0x40>)
 8005a30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a34:	08005a8d 	.word	0x08005a8d
 8005a38:	08005aa1 	.word	0x08005aa1
 8005a3c:	08005a1d 	.word	0x08005a1d
 8005a40:	08005a1d 	.word	0x08005a1d
 8005a44:	08005a1d 	.word	0x08005a1d
 8005a48:	08005a1d 	.word	0x08005a1d
 8005a4c:	08005aa1 	.word	0x08005aa1
 8005a50:	08005a1d 	.word	0x08005a1d
 8005a54:	08005a1d 	.word	0x08005a1d
 8005a58:	08005a1d 	.word	0x08005a1d
 8005a5c:	08005a1d 	.word	0x08005a1d
 8005a60:	08005bad 	.word	0x08005bad
 8005a64:	08005ad1 	.word	0x08005ad1
 8005a68:	08005b8f 	.word	0x08005b8f
 8005a6c:	08005a1d 	.word	0x08005a1d
 8005a70:	08005a1d 	.word	0x08005a1d
 8005a74:	08005bcf 	.word	0x08005bcf
 8005a78:	08005a1d 	.word	0x08005a1d
 8005a7c:	08005ad1 	.word	0x08005ad1
 8005a80:	08005a1d 	.word	0x08005a1d
 8005a84:	08005a1d 	.word	0x08005a1d
 8005a88:	08005b97 	.word	0x08005b97
 8005a8c:	682b      	ldr	r3, [r5, #0]
 8005a8e:	1d1a      	adds	r2, r3, #4
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	602a      	str	r2, [r5, #0]
 8005a94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e0a3      	b.n	8005be8 <_printf_i+0x1f4>
 8005aa0:	6820      	ldr	r0, [r4, #0]
 8005aa2:	6829      	ldr	r1, [r5, #0]
 8005aa4:	0606      	lsls	r6, r0, #24
 8005aa6:	f101 0304 	add.w	r3, r1, #4
 8005aaa:	d50a      	bpl.n	8005ac2 <_printf_i+0xce>
 8005aac:	680e      	ldr	r6, [r1, #0]
 8005aae:	602b      	str	r3, [r5, #0]
 8005ab0:	2e00      	cmp	r6, #0
 8005ab2:	da03      	bge.n	8005abc <_printf_i+0xc8>
 8005ab4:	232d      	movs	r3, #45	; 0x2d
 8005ab6:	4276      	negs	r6, r6
 8005ab8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005abc:	485e      	ldr	r0, [pc, #376]	; (8005c38 <_printf_i+0x244>)
 8005abe:	230a      	movs	r3, #10
 8005ac0:	e019      	b.n	8005af6 <_printf_i+0x102>
 8005ac2:	680e      	ldr	r6, [r1, #0]
 8005ac4:	602b      	str	r3, [r5, #0]
 8005ac6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005aca:	bf18      	it	ne
 8005acc:	b236      	sxthne	r6, r6
 8005ace:	e7ef      	b.n	8005ab0 <_printf_i+0xbc>
 8005ad0:	682b      	ldr	r3, [r5, #0]
 8005ad2:	6820      	ldr	r0, [r4, #0]
 8005ad4:	1d19      	adds	r1, r3, #4
 8005ad6:	6029      	str	r1, [r5, #0]
 8005ad8:	0601      	lsls	r1, r0, #24
 8005ada:	d501      	bpl.n	8005ae0 <_printf_i+0xec>
 8005adc:	681e      	ldr	r6, [r3, #0]
 8005ade:	e002      	b.n	8005ae6 <_printf_i+0xf2>
 8005ae0:	0646      	lsls	r6, r0, #25
 8005ae2:	d5fb      	bpl.n	8005adc <_printf_i+0xe8>
 8005ae4:	881e      	ldrh	r6, [r3, #0]
 8005ae6:	4854      	ldr	r0, [pc, #336]	; (8005c38 <_printf_i+0x244>)
 8005ae8:	2f6f      	cmp	r7, #111	; 0x6f
 8005aea:	bf0c      	ite	eq
 8005aec:	2308      	moveq	r3, #8
 8005aee:	230a      	movne	r3, #10
 8005af0:	2100      	movs	r1, #0
 8005af2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005af6:	6865      	ldr	r5, [r4, #4]
 8005af8:	60a5      	str	r5, [r4, #8]
 8005afa:	2d00      	cmp	r5, #0
 8005afc:	bfa2      	ittt	ge
 8005afe:	6821      	ldrge	r1, [r4, #0]
 8005b00:	f021 0104 	bicge.w	r1, r1, #4
 8005b04:	6021      	strge	r1, [r4, #0]
 8005b06:	b90e      	cbnz	r6, 8005b0c <_printf_i+0x118>
 8005b08:	2d00      	cmp	r5, #0
 8005b0a:	d04d      	beq.n	8005ba8 <_printf_i+0x1b4>
 8005b0c:	4615      	mov	r5, r2
 8005b0e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005b12:	fb03 6711 	mls	r7, r3, r1, r6
 8005b16:	5dc7      	ldrb	r7, [r0, r7]
 8005b18:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005b1c:	4637      	mov	r7, r6
 8005b1e:	42bb      	cmp	r3, r7
 8005b20:	460e      	mov	r6, r1
 8005b22:	d9f4      	bls.n	8005b0e <_printf_i+0x11a>
 8005b24:	2b08      	cmp	r3, #8
 8005b26:	d10b      	bne.n	8005b40 <_printf_i+0x14c>
 8005b28:	6823      	ldr	r3, [r4, #0]
 8005b2a:	07de      	lsls	r6, r3, #31
 8005b2c:	d508      	bpl.n	8005b40 <_printf_i+0x14c>
 8005b2e:	6923      	ldr	r3, [r4, #16]
 8005b30:	6861      	ldr	r1, [r4, #4]
 8005b32:	4299      	cmp	r1, r3
 8005b34:	bfde      	ittt	le
 8005b36:	2330      	movle	r3, #48	; 0x30
 8005b38:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005b3c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005b40:	1b52      	subs	r2, r2, r5
 8005b42:	6122      	str	r2, [r4, #16]
 8005b44:	f8cd a000 	str.w	sl, [sp]
 8005b48:	464b      	mov	r3, r9
 8005b4a:	aa03      	add	r2, sp, #12
 8005b4c:	4621      	mov	r1, r4
 8005b4e:	4640      	mov	r0, r8
 8005b50:	f7ff fee2 	bl	8005918 <_printf_common>
 8005b54:	3001      	adds	r0, #1
 8005b56:	d14c      	bne.n	8005bf2 <_printf_i+0x1fe>
 8005b58:	f04f 30ff 	mov.w	r0, #4294967295
 8005b5c:	b004      	add	sp, #16
 8005b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b62:	4835      	ldr	r0, [pc, #212]	; (8005c38 <_printf_i+0x244>)
 8005b64:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005b68:	6829      	ldr	r1, [r5, #0]
 8005b6a:	6823      	ldr	r3, [r4, #0]
 8005b6c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005b70:	6029      	str	r1, [r5, #0]
 8005b72:	061d      	lsls	r5, r3, #24
 8005b74:	d514      	bpl.n	8005ba0 <_printf_i+0x1ac>
 8005b76:	07df      	lsls	r7, r3, #31
 8005b78:	bf44      	itt	mi
 8005b7a:	f043 0320 	orrmi.w	r3, r3, #32
 8005b7e:	6023      	strmi	r3, [r4, #0]
 8005b80:	b91e      	cbnz	r6, 8005b8a <_printf_i+0x196>
 8005b82:	6823      	ldr	r3, [r4, #0]
 8005b84:	f023 0320 	bic.w	r3, r3, #32
 8005b88:	6023      	str	r3, [r4, #0]
 8005b8a:	2310      	movs	r3, #16
 8005b8c:	e7b0      	b.n	8005af0 <_printf_i+0xfc>
 8005b8e:	6823      	ldr	r3, [r4, #0]
 8005b90:	f043 0320 	orr.w	r3, r3, #32
 8005b94:	6023      	str	r3, [r4, #0]
 8005b96:	2378      	movs	r3, #120	; 0x78
 8005b98:	4828      	ldr	r0, [pc, #160]	; (8005c3c <_printf_i+0x248>)
 8005b9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005b9e:	e7e3      	b.n	8005b68 <_printf_i+0x174>
 8005ba0:	0659      	lsls	r1, r3, #25
 8005ba2:	bf48      	it	mi
 8005ba4:	b2b6      	uxthmi	r6, r6
 8005ba6:	e7e6      	b.n	8005b76 <_printf_i+0x182>
 8005ba8:	4615      	mov	r5, r2
 8005baa:	e7bb      	b.n	8005b24 <_printf_i+0x130>
 8005bac:	682b      	ldr	r3, [r5, #0]
 8005bae:	6826      	ldr	r6, [r4, #0]
 8005bb0:	6961      	ldr	r1, [r4, #20]
 8005bb2:	1d18      	adds	r0, r3, #4
 8005bb4:	6028      	str	r0, [r5, #0]
 8005bb6:	0635      	lsls	r5, r6, #24
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	d501      	bpl.n	8005bc0 <_printf_i+0x1cc>
 8005bbc:	6019      	str	r1, [r3, #0]
 8005bbe:	e002      	b.n	8005bc6 <_printf_i+0x1d2>
 8005bc0:	0670      	lsls	r0, r6, #25
 8005bc2:	d5fb      	bpl.n	8005bbc <_printf_i+0x1c8>
 8005bc4:	8019      	strh	r1, [r3, #0]
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	6123      	str	r3, [r4, #16]
 8005bca:	4615      	mov	r5, r2
 8005bcc:	e7ba      	b.n	8005b44 <_printf_i+0x150>
 8005bce:	682b      	ldr	r3, [r5, #0]
 8005bd0:	1d1a      	adds	r2, r3, #4
 8005bd2:	602a      	str	r2, [r5, #0]
 8005bd4:	681d      	ldr	r5, [r3, #0]
 8005bd6:	6862      	ldr	r2, [r4, #4]
 8005bd8:	2100      	movs	r1, #0
 8005bda:	4628      	mov	r0, r5
 8005bdc:	f7fa fb18 	bl	8000210 <memchr>
 8005be0:	b108      	cbz	r0, 8005be6 <_printf_i+0x1f2>
 8005be2:	1b40      	subs	r0, r0, r5
 8005be4:	6060      	str	r0, [r4, #4]
 8005be6:	6863      	ldr	r3, [r4, #4]
 8005be8:	6123      	str	r3, [r4, #16]
 8005bea:	2300      	movs	r3, #0
 8005bec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bf0:	e7a8      	b.n	8005b44 <_printf_i+0x150>
 8005bf2:	6923      	ldr	r3, [r4, #16]
 8005bf4:	462a      	mov	r2, r5
 8005bf6:	4649      	mov	r1, r9
 8005bf8:	4640      	mov	r0, r8
 8005bfa:	47d0      	blx	sl
 8005bfc:	3001      	adds	r0, #1
 8005bfe:	d0ab      	beq.n	8005b58 <_printf_i+0x164>
 8005c00:	6823      	ldr	r3, [r4, #0]
 8005c02:	079b      	lsls	r3, r3, #30
 8005c04:	d413      	bmi.n	8005c2e <_printf_i+0x23a>
 8005c06:	68e0      	ldr	r0, [r4, #12]
 8005c08:	9b03      	ldr	r3, [sp, #12]
 8005c0a:	4298      	cmp	r0, r3
 8005c0c:	bfb8      	it	lt
 8005c0e:	4618      	movlt	r0, r3
 8005c10:	e7a4      	b.n	8005b5c <_printf_i+0x168>
 8005c12:	2301      	movs	r3, #1
 8005c14:	4632      	mov	r2, r6
 8005c16:	4649      	mov	r1, r9
 8005c18:	4640      	mov	r0, r8
 8005c1a:	47d0      	blx	sl
 8005c1c:	3001      	adds	r0, #1
 8005c1e:	d09b      	beq.n	8005b58 <_printf_i+0x164>
 8005c20:	3501      	adds	r5, #1
 8005c22:	68e3      	ldr	r3, [r4, #12]
 8005c24:	9903      	ldr	r1, [sp, #12]
 8005c26:	1a5b      	subs	r3, r3, r1
 8005c28:	42ab      	cmp	r3, r5
 8005c2a:	dcf2      	bgt.n	8005c12 <_printf_i+0x21e>
 8005c2c:	e7eb      	b.n	8005c06 <_printf_i+0x212>
 8005c2e:	2500      	movs	r5, #0
 8005c30:	f104 0619 	add.w	r6, r4, #25
 8005c34:	e7f5      	b.n	8005c22 <_printf_i+0x22e>
 8005c36:	bf00      	nop
 8005c38:	08005ed9 	.word	0x08005ed9
 8005c3c:	08005eea 	.word	0x08005eea

08005c40 <_sbrk_r>:
 8005c40:	b538      	push	{r3, r4, r5, lr}
 8005c42:	4d06      	ldr	r5, [pc, #24]	; (8005c5c <_sbrk_r+0x1c>)
 8005c44:	2300      	movs	r3, #0
 8005c46:	4604      	mov	r4, r0
 8005c48:	4608      	mov	r0, r1
 8005c4a:	602b      	str	r3, [r5, #0]
 8005c4c:	f7fb fb2e 	bl	80012ac <_sbrk>
 8005c50:	1c43      	adds	r3, r0, #1
 8005c52:	d102      	bne.n	8005c5a <_sbrk_r+0x1a>
 8005c54:	682b      	ldr	r3, [r5, #0]
 8005c56:	b103      	cbz	r3, 8005c5a <_sbrk_r+0x1a>
 8005c58:	6023      	str	r3, [r4, #0]
 8005c5a:	bd38      	pop	{r3, r4, r5, pc}
 8005c5c:	200040e0 	.word	0x200040e0

08005c60 <__sread>:
 8005c60:	b510      	push	{r4, lr}
 8005c62:	460c      	mov	r4, r1
 8005c64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c68:	f000 f8a0 	bl	8005dac <_read_r>
 8005c6c:	2800      	cmp	r0, #0
 8005c6e:	bfab      	itete	ge
 8005c70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005c72:	89a3      	ldrhlt	r3, [r4, #12]
 8005c74:	181b      	addge	r3, r3, r0
 8005c76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005c7a:	bfac      	ite	ge
 8005c7c:	6563      	strge	r3, [r4, #84]	; 0x54
 8005c7e:	81a3      	strhlt	r3, [r4, #12]
 8005c80:	bd10      	pop	{r4, pc}

08005c82 <__swrite>:
 8005c82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c86:	461f      	mov	r7, r3
 8005c88:	898b      	ldrh	r3, [r1, #12]
 8005c8a:	05db      	lsls	r3, r3, #23
 8005c8c:	4605      	mov	r5, r0
 8005c8e:	460c      	mov	r4, r1
 8005c90:	4616      	mov	r6, r2
 8005c92:	d505      	bpl.n	8005ca0 <__swrite+0x1e>
 8005c94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c98:	2302      	movs	r3, #2
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f000 f868 	bl	8005d70 <_lseek_r>
 8005ca0:	89a3      	ldrh	r3, [r4, #12]
 8005ca2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ca6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005caa:	81a3      	strh	r3, [r4, #12]
 8005cac:	4632      	mov	r2, r6
 8005cae:	463b      	mov	r3, r7
 8005cb0:	4628      	mov	r0, r5
 8005cb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005cb6:	f000 b817 	b.w	8005ce8 <_write_r>

08005cba <__sseek>:
 8005cba:	b510      	push	{r4, lr}
 8005cbc:	460c      	mov	r4, r1
 8005cbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cc2:	f000 f855 	bl	8005d70 <_lseek_r>
 8005cc6:	1c43      	adds	r3, r0, #1
 8005cc8:	89a3      	ldrh	r3, [r4, #12]
 8005cca:	bf15      	itete	ne
 8005ccc:	6560      	strne	r0, [r4, #84]	; 0x54
 8005cce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005cd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005cd6:	81a3      	strheq	r3, [r4, #12]
 8005cd8:	bf18      	it	ne
 8005cda:	81a3      	strhne	r3, [r4, #12]
 8005cdc:	bd10      	pop	{r4, pc}

08005cde <__sclose>:
 8005cde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ce2:	f000 b813 	b.w	8005d0c <_close_r>
	...

08005ce8 <_write_r>:
 8005ce8:	b538      	push	{r3, r4, r5, lr}
 8005cea:	4d07      	ldr	r5, [pc, #28]	; (8005d08 <_write_r+0x20>)
 8005cec:	4604      	mov	r4, r0
 8005cee:	4608      	mov	r0, r1
 8005cf0:	4611      	mov	r1, r2
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	602a      	str	r2, [r5, #0]
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	f7fb fa88 	bl	800120c <_write>
 8005cfc:	1c43      	adds	r3, r0, #1
 8005cfe:	d102      	bne.n	8005d06 <_write_r+0x1e>
 8005d00:	682b      	ldr	r3, [r5, #0]
 8005d02:	b103      	cbz	r3, 8005d06 <_write_r+0x1e>
 8005d04:	6023      	str	r3, [r4, #0]
 8005d06:	bd38      	pop	{r3, r4, r5, pc}
 8005d08:	200040e0 	.word	0x200040e0

08005d0c <_close_r>:
 8005d0c:	b538      	push	{r3, r4, r5, lr}
 8005d0e:	4d06      	ldr	r5, [pc, #24]	; (8005d28 <_close_r+0x1c>)
 8005d10:	2300      	movs	r3, #0
 8005d12:	4604      	mov	r4, r0
 8005d14:	4608      	mov	r0, r1
 8005d16:	602b      	str	r3, [r5, #0]
 8005d18:	f7fb fa94 	bl	8001244 <_close>
 8005d1c:	1c43      	adds	r3, r0, #1
 8005d1e:	d102      	bne.n	8005d26 <_close_r+0x1a>
 8005d20:	682b      	ldr	r3, [r5, #0]
 8005d22:	b103      	cbz	r3, 8005d26 <_close_r+0x1a>
 8005d24:	6023      	str	r3, [r4, #0]
 8005d26:	bd38      	pop	{r3, r4, r5, pc}
 8005d28:	200040e0 	.word	0x200040e0

08005d2c <_fstat_r>:
 8005d2c:	b538      	push	{r3, r4, r5, lr}
 8005d2e:	4d07      	ldr	r5, [pc, #28]	; (8005d4c <_fstat_r+0x20>)
 8005d30:	2300      	movs	r3, #0
 8005d32:	4604      	mov	r4, r0
 8005d34:	4608      	mov	r0, r1
 8005d36:	4611      	mov	r1, r2
 8005d38:	602b      	str	r3, [r5, #0]
 8005d3a:	f7fb fa8f 	bl	800125c <_fstat>
 8005d3e:	1c43      	adds	r3, r0, #1
 8005d40:	d102      	bne.n	8005d48 <_fstat_r+0x1c>
 8005d42:	682b      	ldr	r3, [r5, #0]
 8005d44:	b103      	cbz	r3, 8005d48 <_fstat_r+0x1c>
 8005d46:	6023      	str	r3, [r4, #0]
 8005d48:	bd38      	pop	{r3, r4, r5, pc}
 8005d4a:	bf00      	nop
 8005d4c:	200040e0 	.word	0x200040e0

08005d50 <_isatty_r>:
 8005d50:	b538      	push	{r3, r4, r5, lr}
 8005d52:	4d06      	ldr	r5, [pc, #24]	; (8005d6c <_isatty_r+0x1c>)
 8005d54:	2300      	movs	r3, #0
 8005d56:	4604      	mov	r4, r0
 8005d58:	4608      	mov	r0, r1
 8005d5a:	602b      	str	r3, [r5, #0]
 8005d5c:	f7fb fa8e 	bl	800127c <_isatty>
 8005d60:	1c43      	adds	r3, r0, #1
 8005d62:	d102      	bne.n	8005d6a <_isatty_r+0x1a>
 8005d64:	682b      	ldr	r3, [r5, #0]
 8005d66:	b103      	cbz	r3, 8005d6a <_isatty_r+0x1a>
 8005d68:	6023      	str	r3, [r4, #0]
 8005d6a:	bd38      	pop	{r3, r4, r5, pc}
 8005d6c:	200040e0 	.word	0x200040e0

08005d70 <_lseek_r>:
 8005d70:	b538      	push	{r3, r4, r5, lr}
 8005d72:	4d07      	ldr	r5, [pc, #28]	; (8005d90 <_lseek_r+0x20>)
 8005d74:	4604      	mov	r4, r0
 8005d76:	4608      	mov	r0, r1
 8005d78:	4611      	mov	r1, r2
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	602a      	str	r2, [r5, #0]
 8005d7e:	461a      	mov	r2, r3
 8005d80:	f7fb fa87 	bl	8001292 <_lseek>
 8005d84:	1c43      	adds	r3, r0, #1
 8005d86:	d102      	bne.n	8005d8e <_lseek_r+0x1e>
 8005d88:	682b      	ldr	r3, [r5, #0]
 8005d8a:	b103      	cbz	r3, 8005d8e <_lseek_r+0x1e>
 8005d8c:	6023      	str	r3, [r4, #0]
 8005d8e:	bd38      	pop	{r3, r4, r5, pc}
 8005d90:	200040e0 	.word	0x200040e0

08005d94 <__malloc_lock>:
 8005d94:	4801      	ldr	r0, [pc, #4]	; (8005d9c <__malloc_lock+0x8>)
 8005d96:	f7ff bb1d 	b.w	80053d4 <__retarget_lock_acquire_recursive>
 8005d9a:	bf00      	nop
 8005d9c:	200040d4 	.word	0x200040d4

08005da0 <__malloc_unlock>:
 8005da0:	4801      	ldr	r0, [pc, #4]	; (8005da8 <__malloc_unlock+0x8>)
 8005da2:	f7ff bb18 	b.w	80053d6 <__retarget_lock_release_recursive>
 8005da6:	bf00      	nop
 8005da8:	200040d4 	.word	0x200040d4

08005dac <_read_r>:
 8005dac:	b538      	push	{r3, r4, r5, lr}
 8005dae:	4d07      	ldr	r5, [pc, #28]	; (8005dcc <_read_r+0x20>)
 8005db0:	4604      	mov	r4, r0
 8005db2:	4608      	mov	r0, r1
 8005db4:	4611      	mov	r1, r2
 8005db6:	2200      	movs	r2, #0
 8005db8:	602a      	str	r2, [r5, #0]
 8005dba:	461a      	mov	r2, r3
 8005dbc:	f7fb fa09 	bl	80011d2 <_read>
 8005dc0:	1c43      	adds	r3, r0, #1
 8005dc2:	d102      	bne.n	8005dca <_read_r+0x1e>
 8005dc4:	682b      	ldr	r3, [r5, #0]
 8005dc6:	b103      	cbz	r3, 8005dca <_read_r+0x1e>
 8005dc8:	6023      	str	r3, [r4, #0]
 8005dca:	bd38      	pop	{r3, r4, r5, pc}
 8005dcc:	200040e0 	.word	0x200040e0

08005dd0 <_init>:
 8005dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dd2:	bf00      	nop
 8005dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dd6:	bc08      	pop	{r3}
 8005dd8:	469e      	mov	lr, r3
 8005dda:	4770      	bx	lr

08005ddc <_fini>:
 8005ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dde:	bf00      	nop
 8005de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005de2:	bc08      	pop	{r3}
 8005de4:	469e      	mov	lr, r3
 8005de6:	4770      	bx	lr

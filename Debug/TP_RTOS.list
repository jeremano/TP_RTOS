
TP_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d00  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000308  08007ed0  08007ed0  00017ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080081d8  080081d8  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  080081d8  080081d8  000181d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080081e0  080081e0  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080081e0  080081e0  000181e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080081e4  080081e4  000181e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080081e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007fd8  2000007c  08008264  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20008054  08008264  00028054  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013821  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003364  00000000  00000000  000338cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f10  00000000  00000000  00036c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000db8  00000000  00000000  00037b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028d2f  00000000  00000000  00038900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001337b  00000000  00000000  0006162f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f252e  00000000  00000000  000749aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00166ed8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004590  00000000  00000000  00166f28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007eb8 	.word	0x08007eb8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000080 	.word	0x20000080
 800020c:	08007eb8 	.word	0x08007eb8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005b4:	b480      	push	{r7}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	4a07      	ldr	r2, [pc, #28]	; (80005e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80005c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	4a06      	ldr	r2, [pc, #24]	; (80005e4 <vApplicationGetIdleTaskMemory+0x30>)
 80005ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2280      	movs	r2, #128	; 0x80
 80005d0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005d2:	bf00      	nop
 80005d4:	3714      	adds	r7, #20
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	2000009c 	.word	0x2000009c
 80005e4:	200000f0 	.word	0x200000f0

080005e8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005e8:	b5b0      	push	{r4, r5, r7, lr}
 80005ea:	b088      	sub	sp, #32
 80005ec:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005ee:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <MX_FREERTOS_Init+0x30>)
 80005f0:	1d3c      	adds	r4, r7, #4
 80005f2:	461d      	mov	r5, r3
 80005f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000600:	1d3b      	adds	r3, r7, #4
 8000602:	2100      	movs	r1, #0
 8000604:	4618      	mov	r0, r3
 8000606:	f004 f9e4 	bl	80049d2 <osThreadCreate>
 800060a:	4603      	mov	r3, r0
 800060c:	4a03      	ldr	r2, [pc, #12]	; (800061c <MX_FREERTOS_Init+0x34>)
 800060e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000610:	bf00      	nop
 8000612:	3720      	adds	r7, #32
 8000614:	46bd      	mov	sp, r7
 8000616:	bdb0      	pop	{r4, r5, r7, pc}
 8000618:	08007edc 	.word	0x08007edc
 800061c:	20000098 	.word	0x20000098

08000620 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000628:	2001      	movs	r0, #1
 800062a:	f004 fa1e 	bl	8004a6a <osDelay>
 800062e:	e7fb      	b.n	8000628 <StartDefaultTask+0x8>

08000630 <MX_GPIO_Init>:
 8000630:	b580      	push	{r7, lr}
 8000632:	b090      	sub	sp, #64	; 0x40
 8000634:	af00      	add	r7, sp, #0
 8000636:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]
 8000644:	611a      	str	r2, [r3, #16]
 8000646:	4bad      	ldr	r3, [pc, #692]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	4aac      	ldr	r2, [pc, #688]	; (80008fc <MX_GPIO_Init+0x2cc>)
 800064c:	f043 0310 	orr.w	r3, r3, #16
 8000650:	6313      	str	r3, [r2, #48]	; 0x30
 8000652:	4baa      	ldr	r3, [pc, #680]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	f003 0310 	and.w	r3, r3, #16
 800065a:	62bb      	str	r3, [r7, #40]	; 0x28
 800065c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800065e:	4ba7      	ldr	r3, [pc, #668]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	4aa6      	ldr	r2, [pc, #664]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000664:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000668:	6313      	str	r3, [r2, #48]	; 0x30
 800066a:	4ba4      	ldr	r3, [pc, #656]	; (80008fc <MX_GPIO_Init+0x2cc>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000672:	627b      	str	r3, [r7, #36]	; 0x24
 8000674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000676:	4ba1      	ldr	r3, [pc, #644]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	4aa0      	ldr	r2, [pc, #640]	; (80008fc <MX_GPIO_Init+0x2cc>)
 800067c:	f043 0302 	orr.w	r3, r3, #2
 8000680:	6313      	str	r3, [r2, #48]	; 0x30
 8000682:	4b9e      	ldr	r3, [pc, #632]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	f003 0302 	and.w	r3, r3, #2
 800068a:	623b      	str	r3, [r7, #32]
 800068c:	6a3b      	ldr	r3, [r7, #32]
 800068e:	4b9b      	ldr	r3, [pc, #620]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	4a9a      	ldr	r2, [pc, #616]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000694:	f043 0308 	orr.w	r3, r3, #8
 8000698:	6313      	str	r3, [r2, #48]	; 0x30
 800069a:	4b98      	ldr	r3, [pc, #608]	; (80008fc <MX_GPIO_Init+0x2cc>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	f003 0308 	and.w	r3, r3, #8
 80006a2:	61fb      	str	r3, [r7, #28]
 80006a4:	69fb      	ldr	r3, [r7, #28]
 80006a6:	4b95      	ldr	r3, [pc, #596]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	4a94      	ldr	r2, [pc, #592]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006ac:	f043 0304 	orr.w	r3, r3, #4
 80006b0:	6313      	str	r3, [r2, #48]	; 0x30
 80006b2:	4b92      	ldr	r3, [pc, #584]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	f003 0304 	and.w	r3, r3, #4
 80006ba:	61bb      	str	r3, [r7, #24]
 80006bc:	69bb      	ldr	r3, [r7, #24]
 80006be:	4b8f      	ldr	r3, [pc, #572]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4a8e      	ldr	r2, [pc, #568]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006c4:	f043 0301 	orr.w	r3, r3, #1
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ca:	4b8c      	ldr	r3, [pc, #560]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	617b      	str	r3, [r7, #20]
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	4b89      	ldr	r3, [pc, #548]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	4a88      	ldr	r2, [pc, #544]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006e0:	6313      	str	r3, [r2, #48]	; 0x30
 80006e2:	4b86      	ldr	r3, [pc, #536]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80006ea:	613b      	str	r3, [r7, #16]
 80006ec:	693b      	ldr	r3, [r7, #16]
 80006ee:	4b83      	ldr	r3, [pc, #524]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	4a82      	ldr	r2, [pc, #520]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006f8:	6313      	str	r3, [r2, #48]	; 0x30
 80006fa:	4b80      	ldr	r3, [pc, #512]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	4b7d      	ldr	r3, [pc, #500]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a7c      	ldr	r2, [pc, #496]	; (80008fc <MX_GPIO_Init+0x2cc>)
 800070c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b7a      	ldr	r3, [pc, #488]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800071a:	60bb      	str	r3, [r7, #8]
 800071c:	68bb      	ldr	r3, [r7, #8]
 800071e:	4b77      	ldr	r3, [pc, #476]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a76      	ldr	r2, [pc, #472]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000724:	f043 0320 	orr.w	r3, r3, #32
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b74      	ldr	r3, [pc, #464]	; (80008fc <MX_GPIO_Init+0x2cc>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0320 	and.w	r3, r3, #32
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	4b71      	ldr	r3, [pc, #452]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a70      	ldr	r2, [pc, #448]	; (80008fc <MX_GPIO_Init+0x2cc>)
 800073c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b6e      	ldr	r3, [pc, #440]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800074a:	603b      	str	r3, [r7, #0]
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	2201      	movs	r2, #1
 8000750:	2120      	movs	r1, #32
 8000752:	486b      	ldr	r0, [pc, #428]	; (8000900 <MX_GPIO_Init+0x2d0>)
 8000754:	f001 fd3a 	bl	80021cc <HAL_GPIO_WritePin>
 8000758:	2200      	movs	r2, #0
 800075a:	f241 010e 	movw	r1, #4110	; 0x100e
 800075e:	4869      	ldr	r0, [pc, #420]	; (8000904 <MX_GPIO_Init+0x2d4>)
 8000760:	f001 fd34 	bl	80021cc <HAL_GPIO_WritePin>
 8000764:	2200      	movs	r2, #0
 8000766:	2108      	movs	r1, #8
 8000768:	4867      	ldr	r0, [pc, #412]	; (8000908 <MX_GPIO_Init+0x2d8>)
 800076a:	f001 fd2f 	bl	80021cc <HAL_GPIO_WritePin>
 800076e:	2200      	movs	r2, #0
 8000770:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000774:	4865      	ldr	r0, [pc, #404]	; (800090c <MX_GPIO_Init+0x2dc>)
 8000776:	f001 fd29 	bl	80021cc <HAL_GPIO_WritePin>
 800077a:	2200      	movs	r2, #0
 800077c:	21c8      	movs	r1, #200	; 0xc8
 800077e:	4864      	ldr	r0, [pc, #400]	; (8000910 <MX_GPIO_Init+0x2e0>)
 8000780:	f001 fd24 	bl	80021cc <HAL_GPIO_WritePin>
 8000784:	2310      	movs	r3, #16
 8000786:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000788:	2302      	movs	r3, #2
 800078a:	633b      	str	r3, [r7, #48]	; 0x30
 800078c:	2300      	movs	r3, #0
 800078e:	637b      	str	r3, [r7, #52]	; 0x34
 8000790:	2300      	movs	r3, #0
 8000792:	63bb      	str	r3, [r7, #56]	; 0x38
 8000794:	230e      	movs	r3, #14
 8000796:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000798:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800079c:	4619      	mov	r1, r3
 800079e:	485d      	ldr	r0, [pc, #372]	; (8000914 <MX_GPIO_Init+0x2e4>)
 80007a0:	f001 fb68 	bl	8001e74 <HAL_GPIO_Init>
 80007a4:	2308      	movs	r3, #8
 80007a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80007a8:	2300      	movs	r3, #0
 80007aa:	633b      	str	r3, [r7, #48]	; 0x30
 80007ac:	2300      	movs	r3, #0
 80007ae:	637b      	str	r3, [r7, #52]	; 0x34
 80007b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007b4:	4619      	mov	r1, r3
 80007b6:	4857      	ldr	r0, [pc, #348]	; (8000914 <MX_GPIO_Init+0x2e4>)
 80007b8:	f001 fb5c 	bl	8001e74 <HAL_GPIO_Init>
 80007bc:	2304      	movs	r3, #4
 80007be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80007c0:	2302      	movs	r3, #2
 80007c2:	633b      	str	r3, [r7, #48]	; 0x30
 80007c4:	2300      	movs	r3, #0
 80007c6:	637b      	str	r3, [r7, #52]	; 0x34
 80007c8:	2303      	movs	r3, #3
 80007ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80007cc:	2309      	movs	r3, #9
 80007ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80007d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007d4:	4619      	mov	r1, r3
 80007d6:	484f      	ldr	r0, [pc, #316]	; (8000914 <MX_GPIO_Init+0x2e4>)
 80007d8:	f001 fb4c 	bl	8001e74 <HAL_GPIO_Init>
 80007dc:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80007e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80007e2:	2302      	movs	r3, #2
 80007e4:	633b      	str	r3, [r7, #48]	; 0x30
 80007e6:	2300      	movs	r3, #0
 80007e8:	637b      	str	r3, [r7, #52]	; 0x34
 80007ea:	2303      	movs	r3, #3
 80007ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80007ee:	230b      	movs	r3, #11
 80007f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80007f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007f6:	4619      	mov	r1, r3
 80007f8:	4845      	ldr	r0, [pc, #276]	; (8000910 <MX_GPIO_Init+0x2e0>)
 80007fa:	f001 fb3b 	bl	8001e74 <HAL_GPIO_Init>
 80007fe:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000802:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000804:	2302      	movs	r3, #2
 8000806:	633b      	str	r3, [r7, #48]	; 0x30
 8000808:	2300      	movs	r3, #0
 800080a:	637b      	str	r3, [r7, #52]	; 0x34
 800080c:	2303      	movs	r3, #3
 800080e:	63bb      	str	r3, [r7, #56]	; 0x38
 8000810:	230c      	movs	r3, #12
 8000812:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000814:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000818:	4619      	mov	r1, r3
 800081a:	483e      	ldr	r0, [pc, #248]	; (8000914 <MX_GPIO_Init+0x2e4>)
 800081c:	f001 fb2a 	bl	8001e74 <HAL_GPIO_Init>
 8000820:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000824:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000826:	2312      	movs	r3, #18
 8000828:	633b      	str	r3, [r7, #48]	; 0x30
 800082a:	2300      	movs	r3, #0
 800082c:	637b      	str	r3, [r7, #52]	; 0x34
 800082e:	2300      	movs	r3, #0
 8000830:	63bb      	str	r3, [r7, #56]	; 0x38
 8000832:	2304      	movs	r3, #4
 8000834:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000836:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800083a:	4619      	mov	r1, r3
 800083c:	4836      	ldr	r0, [pc, #216]	; (8000918 <MX_GPIO_Init+0x2e8>)
 800083e:	f001 fb19 	bl	8001e74 <HAL_GPIO_Init>
 8000842:	f643 4321 	movw	r3, #15393	; 0x3c21
 8000846:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000848:	2302      	movs	r3, #2
 800084a:	633b      	str	r3, [r7, #48]	; 0x30
 800084c:	2300      	movs	r3, #0
 800084e:	637b      	str	r3, [r7, #52]	; 0x34
 8000850:	2303      	movs	r3, #3
 8000852:	63bb      	str	r3, [r7, #56]	; 0x38
 8000854:	230a      	movs	r3, #10
 8000856:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000858:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800085c:	4619      	mov	r1, r3
 800085e:	482e      	ldr	r0, [pc, #184]	; (8000918 <MX_GPIO_Init+0x2e8>)
 8000860:	f001 fb08 	bl	8001e74 <HAL_GPIO_Init>
 8000864:	2310      	movs	r3, #16
 8000866:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000868:	2302      	movs	r3, #2
 800086a:	633b      	str	r3, [r7, #48]	; 0x30
 800086c:	2300      	movs	r3, #0
 800086e:	637b      	str	r3, [r7, #52]	; 0x34
 8000870:	2300      	movs	r3, #0
 8000872:	63bb      	str	r3, [r7, #56]	; 0x38
 8000874:	2302      	movs	r3, #2
 8000876:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000878:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800087c:	4619      	mov	r1, r3
 800087e:	4826      	ldr	r0, [pc, #152]	; (8000918 <MX_GPIO_Init+0x2e8>)
 8000880:	f001 faf8 	bl	8001e74 <HAL_GPIO_Init>
 8000884:	2380      	movs	r3, #128	; 0x80
 8000886:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000888:	2302      	movs	r3, #2
 800088a:	633b      	str	r3, [r7, #48]	; 0x30
 800088c:	2300      	movs	r3, #0
 800088e:	637b      	str	r3, [r7, #52]	; 0x34
 8000890:	2300      	movs	r3, #0
 8000892:	63bb      	str	r3, [r7, #56]	; 0x38
 8000894:	2308      	movs	r3, #8
 8000896:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000898:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800089c:	4619      	mov	r1, r3
 800089e:	4818      	ldr	r0, [pc, #96]	; (8000900 <MX_GPIO_Init+0x2d0>)
 80008a0:	f001 fae8 	bl	8001e74 <HAL_GPIO_Init>
 80008a4:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80008a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80008aa:	2302      	movs	r3, #2
 80008ac:	633b      	str	r3, [r7, #48]	; 0x30
 80008ae:	2300      	movs	r3, #0
 80008b0:	637b      	str	r3, [r7, #52]	; 0x34
 80008b2:	2303      	movs	r3, #3
 80008b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80008b6:	230c      	movs	r3, #12
 80008b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80008ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008be:	4619      	mov	r1, r3
 80008c0:	4816      	ldr	r0, [pc, #88]	; (800091c <MX_GPIO_Init+0x2ec>)
 80008c2:	f001 fad7 	bl	8001e74 <HAL_GPIO_Init>
 80008c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80008cc:	2302      	movs	r3, #2
 80008ce:	633b      	str	r3, [r7, #48]	; 0x30
 80008d0:	2300      	movs	r3, #0
 80008d2:	637b      	str	r3, [r7, #52]	; 0x34
 80008d4:	2300      	movs	r3, #0
 80008d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80008d8:	2301      	movs	r3, #1
 80008da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80008dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008e0:	4619      	mov	r1, r3
 80008e2:	480f      	ldr	r0, [pc, #60]	; (8000920 <MX_GPIO_Init+0x2f0>)
 80008e4:	f001 fac6 	bl	8001e74 <HAL_GPIO_Init>
 80008e8:	2360      	movs	r3, #96	; 0x60
 80008ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80008ec:	2302      	movs	r3, #2
 80008ee:	633b      	str	r3, [r7, #48]	; 0x30
 80008f0:	2300      	movs	r3, #0
 80008f2:	637b      	str	r3, [r7, #52]	; 0x34
 80008f4:	2300      	movs	r3, #0
 80008f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80008f8:	230d      	movs	r3, #13
 80008fa:	e013      	b.n	8000924 <MX_GPIO_Init+0x2f4>
 80008fc:	40023800 	.word	0x40023800
 8000900:	40020c00 	.word	0x40020c00
 8000904:	40022000 	.word	0x40022000
 8000908:	40022800 	.word	0x40022800
 800090c:	40021c00 	.word	0x40021c00
 8000910:	40021800 	.word	0x40021800
 8000914:	40021000 	.word	0x40021000
 8000918:	40020400 	.word	0x40020400
 800091c:	40020800 	.word	0x40020800
 8000920:	40020000 	.word	0x40020000
 8000924:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000926:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800092a:	4619      	mov	r1, r3
 800092c:	48bc      	ldr	r0, [pc, #752]	; (8000c20 <MX_GPIO_Init+0x5f0>)
 800092e:	f001 faa1 	bl	8001e74 <HAL_GPIO_Init>
 8000932:	2340      	movs	r3, #64	; 0x40
 8000934:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000936:	2302      	movs	r3, #2
 8000938:	633b      	str	r3, [r7, #48]	; 0x30
 800093a:	2300      	movs	r3, #0
 800093c:	637b      	str	r3, [r7, #52]	; 0x34
 800093e:	2303      	movs	r3, #3
 8000940:	63bb      	str	r3, [r7, #56]	; 0x38
 8000942:	230a      	movs	r3, #10
 8000944:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000946:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800094a:	4619      	mov	r1, r3
 800094c:	48b5      	ldr	r0, [pc, #724]	; (8000c24 <MX_GPIO_Init+0x5f4>)
 800094e:	f001 fa91 	bl	8001e74 <HAL_GPIO_Init>
 8000952:	f248 1333 	movw	r3, #33075	; 0x8133
 8000956:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000958:	2302      	movs	r3, #2
 800095a:	633b      	str	r3, [r7, #48]	; 0x30
 800095c:	2300      	movs	r3, #0
 800095e:	637b      	str	r3, [r7, #52]	; 0x34
 8000960:	2303      	movs	r3, #3
 8000962:	63bb      	str	r3, [r7, #56]	; 0x38
 8000964:	230c      	movs	r3, #12
 8000966:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000968:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800096c:	4619      	mov	r1, r3
 800096e:	48ae      	ldr	r0, [pc, #696]	; (8000c28 <MX_GPIO_Init+0x5f8>)
 8000970:	f001 fa80 	bl	8001e74 <HAL_GPIO_Init>
 8000974:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8000978:	62fb      	str	r3, [r7, #44]	; 0x2c
 800097a:	2302      	movs	r3, #2
 800097c:	633b      	str	r3, [r7, #48]	; 0x30
 800097e:	2300      	movs	r3, #0
 8000980:	637b      	str	r3, [r7, #52]	; 0x34
 8000982:	2300      	movs	r3, #0
 8000984:	63bb      	str	r3, [r7, #56]	; 0x38
 8000986:	230e      	movs	r3, #14
 8000988:	63fb      	str	r3, [r7, #60]	; 0x3c
 800098a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800098e:	4619      	mov	r1, r3
 8000990:	48a6      	ldr	r0, [pc, #664]	; (8000c2c <MX_GPIO_Init+0x5fc>)
 8000992:	f001 fa6f 	bl	8001e74 <HAL_GPIO_Init>
 8000996:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800099a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800099c:	2300      	movs	r3, #0
 800099e:	633b      	str	r3, [r7, #48]	; 0x30
 80009a0:	2300      	movs	r3, #0
 80009a2:	637b      	str	r3, [r7, #52]	; 0x34
 80009a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009a8:	4619      	mov	r1, r3
 80009aa:	48a0      	ldr	r0, [pc, #640]	; (8000c2c <MX_GPIO_Init+0x5fc>)
 80009ac:	f001 fa62 	bl	8001e74 <HAL_GPIO_Init>
 80009b0:	2340      	movs	r3, #64	; 0x40
 80009b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80009b4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009b8:	633b      	str	r3, [r7, #48]	; 0x30
 80009ba:	2300      	movs	r3, #0
 80009bc:	637b      	str	r3, [r7, #52]	; 0x34
 80009be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009c2:	4619      	mov	r1, r3
 80009c4:	489a      	ldr	r0, [pc, #616]	; (8000c30 <MX_GPIO_Init+0x600>)
 80009c6:	f001 fa55 	bl	8001e74 <HAL_GPIO_Init>
 80009ca:	f24c 7303 	movw	r3, #50947	; 0xc703
 80009ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80009d0:	2302      	movs	r3, #2
 80009d2:	633b      	str	r3, [r7, #48]	; 0x30
 80009d4:	2300      	movs	r3, #0
 80009d6:	637b      	str	r3, [r7, #52]	; 0x34
 80009d8:	2303      	movs	r3, #3
 80009da:	63bb      	str	r3, [r7, #56]	; 0x38
 80009dc:	230c      	movs	r3, #12
 80009de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80009e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009e4:	4619      	mov	r1, r3
 80009e6:	4892      	ldr	r0, [pc, #584]	; (8000c30 <MX_GPIO_Init+0x600>)
 80009e8:	f001 fa44 	bl	8001e74 <HAL_GPIO_Init>
 80009ec:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80009f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80009f2:	2302      	movs	r3, #2
 80009f4:	633b      	str	r3, [r7, #48]	; 0x30
 80009f6:	2300      	movs	r3, #0
 80009f8:	637b      	str	r3, [r7, #52]	; 0x34
 80009fa:	2303      	movs	r3, #3
 80009fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80009fe:	230a      	movs	r3, #10
 8000a00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000a02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a06:	4619      	mov	r1, r3
 8000a08:	488a      	ldr	r0, [pc, #552]	; (8000c34 <MX_GPIO_Init+0x604>)
 8000a0a:	f001 fa33 	bl	8001e74 <HAL_GPIO_Init>
 8000a0e:	23f0      	movs	r3, #240	; 0xf0
 8000a10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a12:	2302      	movs	r3, #2
 8000a14:	633b      	str	r3, [r7, #48]	; 0x30
 8000a16:	2300      	movs	r3, #0
 8000a18:	637b      	str	r3, [r7, #52]	; 0x34
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	63bb      	str	r3, [r7, #56]	; 0x38
 8000a1e:	230a      	movs	r3, #10
 8000a20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000a22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a26:	4619      	mov	r1, r3
 8000a28:	4883      	ldr	r0, [pc, #524]	; (8000c38 <MX_GPIO_Init+0x608>)
 8000a2a:	f001 fa23 	bl	8001e74 <HAL_GPIO_Init>
 8000a2e:	23f7      	movs	r3, #247	; 0xf7
 8000a30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a32:	2302      	movs	r3, #2
 8000a34:	633b      	str	r3, [r7, #48]	; 0x30
 8000a36:	2300      	movs	r3, #0
 8000a38:	637b      	str	r3, [r7, #52]	; 0x34
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	63bb      	str	r3, [r7, #56]	; 0x38
 8000a3e:	230e      	movs	r3, #14
 8000a40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000a42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a46:	4619      	mov	r1, r3
 8000a48:	487c      	ldr	r0, [pc, #496]	; (8000c3c <MX_GPIO_Init+0x60c>)
 8000a4a:	f001 fa13 	bl	8001e74 <HAL_GPIO_Init>
 8000a4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a54:	2302      	movs	r3, #2
 8000a56:	633b      	str	r3, [r7, #48]	; 0x30
 8000a58:	2300      	movs	r3, #0
 8000a5a:	637b      	str	r3, [r7, #52]	; 0x34
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8000a60:	2309      	movs	r3, #9
 8000a62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000a64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a68:	4619      	mov	r1, r3
 8000a6a:	486f      	ldr	r0, [pc, #444]	; (8000c28 <MX_GPIO_Init+0x5f8>)
 8000a6c:	f001 fa02 	bl	8001e74 <HAL_GPIO_Init>
 8000a70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a76:	2302      	movs	r3, #2
 8000a78:	633b      	str	r3, [r7, #48]	; 0x30
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	637b      	str	r3, [r7, #52]	; 0x34
 8000a7e:	2300      	movs	r3, #0
 8000a80:	63bb      	str	r3, [r7, #56]	; 0x38
 8000a82:	230a      	movs	r3, #10
 8000a84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000a86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4866      	ldr	r0, [pc, #408]	; (8000c28 <MX_GPIO_Init+0x5f8>)
 8000a8e:	f001 f9f1 	bl	8001e74 <HAL_GPIO_Init>
 8000a92:	2320      	movs	r3, #32
 8000a94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a96:	2301      	movs	r3, #1
 8000a98:	633b      	str	r3, [r7, #48]	; 0x30
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	637b      	str	r3, [r7, #52]	; 0x34
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	63bb      	str	r3, [r7, #56]	; 0x38
 8000aa2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4861      	ldr	r0, [pc, #388]	; (8000c30 <MX_GPIO_Init+0x600>)
 8000aaa:	f001 f9e3 	bl	8001e74 <HAL_GPIO_Init>
 8000aae:	2308      	movs	r3, #8
 8000ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	633b      	str	r3, [r7, #48]	; 0x30
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	637b      	str	r3, [r7, #52]	; 0x34
 8000aba:	2300      	movs	r3, #0
 8000abc:	63bb      	str	r3, [r7, #56]	; 0x38
 8000abe:	230d      	movs	r3, #13
 8000ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000ac2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4859      	ldr	r0, [pc, #356]	; (8000c30 <MX_GPIO_Init+0x600>)
 8000aca:	f001 f9d3 	bl	8001e74 <HAL_GPIO_Init>
 8000ace:	f241 030e 	movw	r3, #4110	; 0x100e
 8000ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	633b      	str	r3, [r7, #48]	; 0x30
 8000ad8:	2300      	movs	r3, #0
 8000ada:	637b      	str	r3, [r7, #52]	; 0x34
 8000adc:	2300      	movs	r3, #0
 8000ade:	63bb      	str	r3, [r7, #56]	; 0x38
 8000ae0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4854      	ldr	r0, [pc, #336]	; (8000c38 <MX_GPIO_Init+0x608>)
 8000ae8:	f001 f9c4 	bl	8001e74 <HAL_GPIO_Init>
 8000aec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000af0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000af2:	2300      	movs	r3, #0
 8000af4:	633b      	str	r3, [r7, #48]	; 0x30
 8000af6:	2300      	movs	r3, #0
 8000af8:	637b      	str	r3, [r7, #52]	; 0x34
 8000afa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000afe:	4619      	mov	r1, r3
 8000b00:	484f      	ldr	r0, [pc, #316]	; (8000c40 <MX_GPIO_Init+0x610>)
 8000b02:	f001 f9b7 	bl	8001e74 <HAL_GPIO_Init>
 8000b06:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	633b      	str	r3, [r7, #48]	; 0x30
 8000b10:	2300      	movs	r3, #0
 8000b12:	637b      	str	r3, [r7, #52]	; 0x34
 8000b14:	2303      	movs	r3, #3
 8000b16:	63bb      	str	r3, [r7, #56]	; 0x38
 8000b18:	230c      	movs	r3, #12
 8000b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000b1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b20:	4619      	mov	r1, r3
 8000b22:	4848      	ldr	r0, [pc, #288]	; (8000c44 <MX_GPIO_Init+0x614>)
 8000b24:	f001 f9a6 	bl	8001e74 <HAL_GPIO_Init>
 8000b28:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8000b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b2e:	2302      	movs	r3, #2
 8000b30:	633b      	str	r3, [r7, #48]	; 0x30
 8000b32:	2300      	movs	r3, #0
 8000b34:	637b      	str	r3, [r7, #52]	; 0x34
 8000b36:	2300      	movs	r3, #0
 8000b38:	63bb      	str	r3, [r7, #56]	; 0x38
 8000b3a:	230e      	movs	r3, #14
 8000b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000b3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b42:	4619      	mov	r1, r3
 8000b44:	483c      	ldr	r0, [pc, #240]	; (8000c38 <MX_GPIO_Init+0x608>)
 8000b46:	f001 f995 	bl	8001e74 <HAL_GPIO_Init>
 8000b4a:	2308      	movs	r3, #8
 8000b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b4e:	2301      	movs	r3, #1
 8000b50:	633b      	str	r3, [r7, #48]	; 0x30
 8000b52:	2300      	movs	r3, #0
 8000b54:	637b      	str	r3, [r7, #52]	; 0x34
 8000b56:	2300      	movs	r3, #0
 8000b58:	63bb      	str	r3, [r7, #56]	; 0x38
 8000b5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4836      	ldr	r0, [pc, #216]	; (8000c3c <MX_GPIO_Init+0x60c>)
 8000b62:	f001 f987 	bl	8001e74 <HAL_GPIO_Init>
 8000b66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	633b      	str	r3, [r7, #48]	; 0x30
 8000b70:	2300      	movs	r3, #0
 8000b72:	637b      	str	r3, [r7, #52]	; 0x34
 8000b74:	2300      	movs	r3, #0
 8000b76:	63bb      	str	r3, [r7, #56]	; 0x38
 8000b78:	230d      	movs	r3, #13
 8000b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000b7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b80:	4619      	mov	r1, r3
 8000b82:	4829      	ldr	r0, [pc, #164]	; (8000c28 <MX_GPIO_Init+0x5f8>)
 8000b84:	f001 f976 	bl	8001e74 <HAL_GPIO_Init>
 8000b88:	2310      	movs	r3, #16
 8000b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	633b      	str	r3, [r7, #48]	; 0x30
 8000b90:	2300      	movs	r3, #0
 8000b92:	637b      	str	r3, [r7, #52]	; 0x34
 8000b94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4825      	ldr	r0, [pc, #148]	; (8000c30 <MX_GPIO_Init+0x600>)
 8000b9c:	f001 f96a 	bl	8001e74 <HAL_GPIO_Init>
 8000ba0:	2304      	movs	r3, #4
 8000ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	633b      	str	r3, [r7, #48]	; 0x30
 8000ba8:	2300      	movs	r3, #0
 8000baa:	637b      	str	r3, [r7, #52]	; 0x34
 8000bac:	2303      	movs	r3, #3
 8000bae:	63bb      	str	r3, [r7, #56]	; 0x38
 8000bb0:	230c      	movs	r3, #12
 8000bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000bb4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bb8:	4619      	mov	r1, r3
 8000bba:	481d      	ldr	r0, [pc, #116]	; (8000c30 <MX_GPIO_Init+0x600>)
 8000bbc:	f001 f95a 	bl	8001e74 <HAL_GPIO_Init>
 8000bc0:	f248 0304 	movw	r3, #32772	; 0x8004
 8000bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	633b      	str	r3, [r7, #48]	; 0x30
 8000bca:	2300      	movs	r3, #0
 8000bcc:	637b      	str	r3, [r7, #52]	; 0x34
 8000bce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	481c      	ldr	r0, [pc, #112]	; (8000c48 <MX_GPIO_Init+0x618>)
 8000bd6:	f001 f94d 	bl	8001e74 <HAL_GPIO_Init>
 8000bda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000be0:	2301      	movs	r3, #1
 8000be2:	633b      	str	r3, [r7, #48]	; 0x30
 8000be4:	2300      	movs	r3, #0
 8000be6:	637b      	str	r3, [r7, #52]	; 0x34
 8000be8:	2300      	movs	r3, #0
 8000bea:	63bb      	str	r3, [r7, #56]	; 0x38
 8000bec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4815      	ldr	r0, [pc, #84]	; (8000c48 <MX_GPIO_Init+0x618>)
 8000bf4:	f001 f93e 	bl	8001e74 <HAL_GPIO_Init>
 8000bf8:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8000bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000bfe:	2302      	movs	r3, #2
 8000c00:	633b      	str	r3, [r7, #48]	; 0x30
 8000c02:	2300      	movs	r3, #0
 8000c04:	637b      	str	r3, [r7, #52]	; 0x34
 8000c06:	2300      	movs	r3, #0
 8000c08:	63bb      	str	r3, [r7, #56]	; 0x38
 8000c0a:	230d      	movs	r3, #13
 8000c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000c0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c12:	4619      	mov	r1, r3
 8000c14:	480c      	ldr	r0, [pc, #48]	; (8000c48 <MX_GPIO_Init+0x618>)
 8000c16:	f001 f92d 	bl	8001e74 <HAL_GPIO_Init>
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	e016      	b.n	8000c4c <MX_GPIO_Init+0x61c>
 8000c1e:	bf00      	nop
 8000c20:	40021000 	.word	0x40021000
 8000c24:	40020400 	.word	0x40020400
 8000c28:	40021800 	.word	0x40021800
 8000c2c:	40022400 	.word	0x40022400
 8000c30:	40020c00 	.word	0x40020c00
 8000c34:	40020000 	.word	0x40020000
 8000c38:	40022000 	.word	0x40022000
 8000c3c:	40022800 	.word	0x40022800
 8000c40:	40020800 	.word	0x40020800
 8000c44:	40021400 	.word	0x40021400
 8000c48:	40021c00 	.word	0x40021c00
 8000c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c4e:	2302      	movs	r3, #2
 8000c50:	633b      	str	r3, [r7, #48]	; 0x30
 8000c52:	2300      	movs	r3, #0
 8000c54:	637b      	str	r3, [r7, #52]	; 0x34
 8000c56:	2300      	movs	r3, #0
 8000c58:	63bb      	str	r3, [r7, #56]	; 0x38
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000c5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c62:	4619      	mov	r1, r3
 8000c64:	48a4      	ldr	r0, [pc, #656]	; (8000ef8 <MX_GPIO_Init+0x8c8>)
 8000c66:	f001 f905 	bl	8001e74 <HAL_GPIO_Init>
 8000c6a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c70:	2300      	movs	r3, #0
 8000c72:	633b      	str	r3, [r7, #48]	; 0x30
 8000c74:	2300      	movs	r3, #0
 8000c76:	637b      	str	r3, [r7, #52]	; 0x34
 8000c78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	489e      	ldr	r0, [pc, #632]	; (8000ef8 <MX_GPIO_Init+0x8c8>)
 8000c80:	f001 f8f8 	bl	8001e74 <HAL_GPIO_Init>
 8000c84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	633b      	str	r3, [r7, #48]	; 0x30
 8000c8e:	2300      	movs	r3, #0
 8000c90:	637b      	str	r3, [r7, #52]	; 0x34
 8000c92:	2300      	movs	r3, #0
 8000c94:	63bb      	str	r3, [r7, #56]	; 0x38
 8000c96:	2301      	movs	r3, #1
 8000c98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000c9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4896      	ldr	r0, [pc, #600]	; (8000efc <MX_GPIO_Init+0x8cc>)
 8000ca2:	f001 f8e7 	bl	8001e74 <HAL_GPIO_Init>
 8000ca6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000caa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000cac:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000cb0:	633b      	str	r3, [r7, #48]	; 0x30
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	637b      	str	r3, [r7, #52]	; 0x34
 8000cb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cba:	4619      	mov	r1, r3
 8000cbc:	488e      	ldr	r0, [pc, #568]	; (8000ef8 <MX_GPIO_Init+0x8c8>)
 8000cbe:	f001 f8d9 	bl	8001e74 <HAL_GPIO_Init>
 8000cc2:	23c0      	movs	r3, #192	; 0xc0
 8000cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	633b      	str	r3, [r7, #48]	; 0x30
 8000cca:	2300      	movs	r3, #0
 8000ccc:	637b      	str	r3, [r7, #52]	; 0x34
 8000cce:	2303      	movs	r3, #3
 8000cd0:	63bb      	str	r3, [r7, #56]	; 0x38
 8000cd2:	2308      	movs	r3, #8
 8000cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000cd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4888      	ldr	r0, [pc, #544]	; (8000f00 <MX_GPIO_Init+0x8d0>)
 8000cde:	f001 f8c9 	bl	8001e74 <HAL_GPIO_Init>
 8000ce2:	2310      	movs	r3, #16
 8000ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	633b      	str	r3, [r7, #48]	; 0x30
 8000cea:	2300      	movs	r3, #0
 8000cec:	637b      	str	r3, [r7, #52]	; 0x34
 8000cee:	2303      	movs	r3, #3
 8000cf0:	63bb      	str	r3, [r7, #56]	; 0x38
 8000cf2:	230a      	movs	r3, #10
 8000cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000cf6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4881      	ldr	r0, [pc, #516]	; (8000f04 <MX_GPIO_Init+0x8d4>)
 8000cfe:	f001 f8b9 	bl	8001e74 <HAL_GPIO_Init>
 8000d02:	2328      	movs	r3, #40	; 0x28
 8000d04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d06:	2302      	movs	r3, #2
 8000d08:	633b      	str	r3, [r7, #48]	; 0x30
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	637b      	str	r3, [r7, #52]	; 0x34
 8000d0e:	2303      	movs	r3, #3
 8000d10:	63bb      	str	r3, [r7, #56]	; 0x38
 8000d12:	230c      	movs	r3, #12
 8000d14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000d16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4879      	ldr	r0, [pc, #484]	; (8000f04 <MX_GPIO_Init+0x8d4>)
 8000d1e:	f001 f8a9 	bl	8001e74 <HAL_GPIO_Init>
 8000d22:	23c8      	movs	r3, #200	; 0xc8
 8000d24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d26:	2301      	movs	r3, #1
 8000d28:	633b      	str	r3, [r7, #48]	; 0x30
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	637b      	str	r3, [r7, #52]	; 0x34
 8000d2e:	2300      	movs	r3, #0
 8000d30:	63bb      	str	r3, [r7, #56]	; 0x38
 8000d32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d36:	4619      	mov	r1, r3
 8000d38:	4873      	ldr	r0, [pc, #460]	; (8000f08 <MX_GPIO_Init+0x8d8>)
 8000d3a:	f001 f89b 	bl	8001e74 <HAL_GPIO_Init>
 8000d3e:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8000d42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d44:	2303      	movs	r3, #3
 8000d46:	633b      	str	r3, [r7, #48]	; 0x30
 8000d48:	2300      	movs	r3, #0
 8000d4a:	637b      	str	r3, [r7, #52]	; 0x34
 8000d4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d50:	4619      	mov	r1, r3
 8000d52:	486e      	ldr	r0, [pc, #440]	; (8000f0c <MX_GPIO_Init+0x8dc>)
 8000d54:	f001 f88e 	bl	8001e74 <HAL_GPIO_Init>
 8000d58:	2308      	movs	r3, #8
 8000d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	633b      	str	r3, [r7, #48]	; 0x30
 8000d60:	2300      	movs	r3, #0
 8000d62:	637b      	str	r3, [r7, #52]	; 0x34
 8000d64:	2303      	movs	r3, #3
 8000d66:	63bb      	str	r3, [r7, #56]	; 0x38
 8000d68:	230c      	movs	r3, #12
 8000d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000d6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d70:	4619      	mov	r1, r3
 8000d72:	4863      	ldr	r0, [pc, #396]	; (8000f00 <MX_GPIO_Init+0x8d0>)
 8000d74:	f001 f87e 	bl	8001e74 <HAL_GPIO_Init>
 8000d78:	2305      	movs	r3, #5
 8000d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	633b      	str	r3, [r7, #48]	; 0x30
 8000d80:	2300      	movs	r3, #0
 8000d82:	637b      	str	r3, [r7, #52]	; 0x34
 8000d84:	2303      	movs	r3, #3
 8000d86:	63bb      	str	r3, [r7, #56]	; 0x38
 8000d88:	230a      	movs	r3, #10
 8000d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000d8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d90:	4619      	mov	r1, r3
 8000d92:	485b      	ldr	r0, [pc, #364]	; (8000f00 <MX_GPIO_Init+0x8d0>)
 8000d94:	f001 f86e 	bl	8001e74 <HAL_GPIO_Init>
 8000d98:	2332      	movs	r3, #50	; 0x32
 8000d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	633b      	str	r3, [r7, #48]	; 0x30
 8000da0:	2300      	movs	r3, #0
 8000da2:	637b      	str	r3, [r7, #52]	; 0x34
 8000da4:	2303      	movs	r3, #3
 8000da6:	63bb      	str	r3, [r7, #56]	; 0x38
 8000da8:	230b      	movs	r3, #11
 8000daa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000dac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000db0:	4619      	mov	r1, r3
 8000db2:	4853      	ldr	r0, [pc, #332]	; (8000f00 <MX_GPIO_Init+0x8d0>)
 8000db4:	f001 f85e 	bl	8001e74 <HAL_GPIO_Init>
 8000db8:	2304      	movs	r3, #4
 8000dba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	633b      	str	r3, [r7, #48]	; 0x30
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	637b      	str	r3, [r7, #52]	; 0x34
 8000dc4:	2303      	movs	r3, #3
 8000dc6:	63bb      	str	r3, [r7, #56]	; 0x38
 8000dc8:	2309      	movs	r3, #9
 8000dca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000dcc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	484f      	ldr	r0, [pc, #316]	; (8000f10 <MX_GPIO_Init+0x8e0>)
 8000dd4:	f001 f84e 	bl	8001e74 <HAL_GPIO_Init>
 8000dd8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000dde:	2302      	movs	r3, #2
 8000de0:	633b      	str	r3, [r7, #48]	; 0x30
 8000de2:	2300      	movs	r3, #0
 8000de4:	637b      	str	r3, [r7, #52]	; 0x34
 8000de6:	2303      	movs	r3, #3
 8000de8:	63bb      	str	r3, [r7, #56]	; 0x38
 8000dea:	2309      	movs	r3, #9
 8000dec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000dee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000df2:	4619      	mov	r1, r3
 8000df4:	4847      	ldr	r0, [pc, #284]	; (8000f14 <MX_GPIO_Init+0x8e4>)
 8000df6:	f001 f83d 	bl	8001e74 <HAL_GPIO_Init>
 8000dfa:	2304      	movs	r3, #4
 8000dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000dfe:	2300      	movs	r3, #0
 8000e00:	633b      	str	r3, [r7, #48]	; 0x30
 8000e02:	2300      	movs	r3, #0
 8000e04:	637b      	str	r3, [r7, #52]	; 0x34
 8000e06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	483e      	ldr	r0, [pc, #248]	; (8000f08 <MX_GPIO_Init+0x8d8>)
 8000e0e:	f001 f831 	bl	8001e74 <HAL_GPIO_Init>
 8000e12:	2386      	movs	r3, #134	; 0x86
 8000e14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e16:	2302      	movs	r3, #2
 8000e18:	633b      	str	r3, [r7, #48]	; 0x30
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	637b      	str	r3, [r7, #52]	; 0x34
 8000e1e:	2303      	movs	r3, #3
 8000e20:	63bb      	str	r3, [r7, #56]	; 0x38
 8000e22:	230b      	movs	r3, #11
 8000e24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000e26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4833      	ldr	r0, [pc, #204]	; (8000efc <MX_GPIO_Init+0x8cc>)
 8000e2e:	f001 f821 	bl	8001e74 <HAL_GPIO_Init>
 8000e32:	2301      	movs	r3, #1
 8000e34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e36:	2303      	movs	r3, #3
 8000e38:	633b      	str	r3, [r7, #48]	; 0x30
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	637b      	str	r3, [r7, #52]	; 0x34
 8000e3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e42:	4619      	mov	r1, r3
 8000e44:	482d      	ldr	r0, [pc, #180]	; (8000efc <MX_GPIO_Init+0x8cc>)
 8000e46:	f001 f815 	bl	8001e74 <HAL_GPIO_Init>
 8000e4a:	2350      	movs	r3, #80	; 0x50
 8000e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e4e:	2302      	movs	r3, #2
 8000e50:	633b      	str	r3, [r7, #48]	; 0x30
 8000e52:	2300      	movs	r3, #0
 8000e54:	637b      	str	r3, [r7, #52]	; 0x34
 8000e56:	2300      	movs	r3, #0
 8000e58:	63bb      	str	r3, [r7, #56]	; 0x38
 8000e5a:	230d      	movs	r3, #13
 8000e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000e5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e62:	4619      	mov	r1, r3
 8000e64:	4825      	ldr	r0, [pc, #148]	; (8000efc <MX_GPIO_Init+0x8cc>)
 8000e66:	f001 f805 	bl	8001e74 <HAL_GPIO_Init>
 8000e6a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e70:	2312      	movs	r3, #18
 8000e72:	633b      	str	r3, [r7, #48]	; 0x30
 8000e74:	2300      	movs	r3, #0
 8000e76:	637b      	str	r3, [r7, #52]	; 0x34
 8000e78:	2303      	movs	r3, #3
 8000e7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8000e7c:	2304      	movs	r3, #4
 8000e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000e80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e84:	4619      	mov	r1, r3
 8000e86:	481f      	ldr	r0, [pc, #124]	; (8000f04 <MX_GPIO_Init+0x8d4>)
 8000e88:	f000 fff4 	bl	8001e74 <HAL_GPIO_Init>
 8000e8c:	2328      	movs	r3, #40	; 0x28
 8000e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e90:	2302      	movs	r3, #2
 8000e92:	633b      	str	r3, [r7, #48]	; 0x30
 8000e94:	2300      	movs	r3, #0
 8000e96:	637b      	str	r3, [r7, #52]	; 0x34
 8000e98:	2303      	movs	r3, #3
 8000e9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8000e9c:	230a      	movs	r3, #10
 8000e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000ea0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4815      	ldr	r0, [pc, #84]	; (8000efc <MX_GPIO_Init+0x8cc>)
 8000ea8:	f000 ffe4 	bl	8001e74 <HAL_GPIO_Init>
 8000eac:	2340      	movs	r3, #64	; 0x40
 8000eae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	633b      	str	r3, [r7, #48]	; 0x30
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	637b      	str	r3, [r7, #52]	; 0x34
 8000eb8:	2300      	movs	r3, #0
 8000eba:	63bb      	str	r3, [r7, #56]	; 0x38
 8000ebc:	2309      	movs	r3, #9
 8000ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000ec0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	480f      	ldr	r0, [pc, #60]	; (8000f04 <MX_GPIO_Init+0x8d4>)
 8000ec8:	f000 ffd4 	bl	8001e74 <HAL_GPIO_Init>
 8000ecc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	633b      	str	r3, [r7, #48]	; 0x30
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	637b      	str	r3, [r7, #52]	; 0x34
 8000eda:	2300      	movs	r3, #0
 8000edc:	63bb      	str	r3, [r7, #56]	; 0x38
 8000ede:	2305      	movs	r3, #5
 8000ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000ee2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4809      	ldr	r0, [pc, #36]	; (8000f10 <MX_GPIO_Init+0x8e0>)
 8000eea:	f000 ffc3 	bl	8001e74 <HAL_GPIO_Init>
 8000eee:	bf00      	nop
 8000ef0:	3740      	adds	r7, #64	; 0x40
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40022000 	.word	0x40022000
 8000efc:	40020000 	.word	0x40020000
 8000f00:	40020800 	.word	0x40020800
 8000f04:	40021c00 	.word	0x40021c00
 8000f08:	40021800 	.word	0x40021800
 8000f0c:	40021400 	.word	0x40021400
 8000f10:	40020400 	.word	0x40020400
 8000f14:	40020c00 	.word	0x40020c00

08000f18 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000f20:	1d39      	adds	r1, r7, #4
 8000f22:	f04f 33ff 	mov.w	r3, #4294967295
 8000f26:	2201      	movs	r2, #1
 8000f28:	4803      	ldr	r0, [pc, #12]	; (8000f38 <__io_putchar+0x20>)
 8000f2a:	f002 fa9b 	bl	8003464 <HAL_UART_Transmit>
	return ch;
 8000f2e:	687b      	ldr	r3, [r7, #4]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	2000066c 	.word	0x2000066c

08000f3c <fonction>:

int fonction(int argc, char ** argv)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < argc; ++i) {
 8000f46:	2300      	movs	r3, #0
 8000f48:	60fb      	str	r3, [r7, #12]
 8000f4a:	e00c      	b.n	8000f66 <fonction+0x2a>
		printf("argument %d = %s \r\n",i,argv[i]);
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	683a      	ldr	r2, [r7, #0]
 8000f52:	4413      	add	r3, r2
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	461a      	mov	r2, r3
 8000f58:	68f9      	ldr	r1, [r7, #12]
 8000f5a:	4807      	ldr	r0, [pc, #28]	; (8000f78 <fonction+0x3c>)
 8000f5c:	f005 fd3a 	bl	80069d4 <iprintf>
	for (int i = 0; i < argc; ++i) {
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	3301      	adds	r3, #1
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	68fa      	ldr	r2, [r7, #12]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	429a      	cmp	r2, r3
 8000f6c:	dbee      	blt.n	8000f4c <fonction+0x10>
	}


	return 0;
 8000f6e:	2300      	movs	r3, #0
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	08007ef8 	.word	0x08007ef8

08000f7c <gereLed>:
		printf("%d\r\n", RxBuffer);
	}
}

void gereLed(void * unused)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if(activateL == 1){
 8000f84:	4b0d      	ldr	r3, [pc, #52]	; (8000fbc <gereLed+0x40>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d1fb      	bne.n	8000f84 <gereLed+0x8>
			if(delaiL > 0){
 8000f8c:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <gereLed+0x44>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	dd09      	ble.n	8000fa8 <gereLed+0x2c>
				HAL_GPIO_TogglePin(LED_Green_GPIO_Port, LED_Green_Pin);
 8000f94:	2102      	movs	r1, #2
 8000f96:	480b      	ldr	r0, [pc, #44]	; (8000fc4 <gereLed+0x48>)
 8000f98:	f001 f931 	bl	80021fe <HAL_GPIO_TogglePin>
				vTaskDelay(delaiL);
 8000f9c:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <gereLed+0x44>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f004 fabb 	bl	800551c <vTaskDelay>
 8000fa6:	e7ed      	b.n	8000f84 <gereLed+0x8>
			}
			else {
				activateL = 0;
 8000fa8:	4b04      	ldr	r3, [pc, #16]	; (8000fbc <gereLed+0x40>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, 0);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2102      	movs	r1, #2
 8000fb2:	4804      	ldr	r0, [pc, #16]	; (8000fc4 <gereLed+0x48>)
 8000fb4:	f001 f90a 	bl	80021cc <HAL_GPIO_WritePin>
		if(activateL == 1){
 8000fb8:	e7e4      	b.n	8000f84 <gereLed+0x8>
 8000fba:	bf00      	nop
 8000fbc:	200002f8 	.word	0x200002f8
 8000fc0:	200002f0 	.word	0x200002f0
 8000fc4:	40022000 	.word	0x40022000

08000fc8 <spam>:
		}
	}
}

void spam(void * unused)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if(activateS == 1){
 8000fd0:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <spam+0x3c>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d1fb      	bne.n	8000fd0 <spam+0x8>
			if(delaiS > 0){
 8000fd8:	4b0b      	ldr	r3, [pc, #44]	; (8001008 <spam+0x40>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	dd0c      	ble.n	8000ffa <spam+0x32>
				HAL_UART_Transmit(&huart1, "Q\r\n", 1, HAL_MAX_DELAY);
 8000fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	4909      	ldr	r1, [pc, #36]	; (800100c <spam+0x44>)
 8000fe8:	4809      	ldr	r0, [pc, #36]	; (8001010 <spam+0x48>)
 8000fea:	f002 fa3b 	bl	8003464 <HAL_UART_Transmit>
				vTaskDelay(delaiS);
 8000fee:	4b06      	ldr	r3, [pc, #24]	; (8001008 <spam+0x40>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f004 fa92 	bl	800551c <vTaskDelay>
 8000ff8:	e7ea      	b.n	8000fd0 <spam+0x8>
			}
			else {
				activateS = 0;
 8000ffa:	4b02      	ldr	r3, [pc, #8]	; (8001004 <spam+0x3c>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
		if(activateS == 1){
 8001000:	e7e6      	b.n	8000fd0 <spam+0x8>
 8001002:	bf00      	nop
 8001004:	200002fc 	.word	0x200002fc
 8001008:	200002f4 	.word	0x200002f4
 800100c:	08007f44 	.word	0x08007f44
 8001010:	2000066c 	.word	0x2000066c

08001014 <crash>:
		}
	}
}

void crash(void * unused)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af02      	add	r7, sp, #8
 800101a:	6078      	str	r0, [r7, #4]
	while(1)
	{
	  	if (xTaskCreate(crash, "crash", 1000, NULL, 1, &xHandle1) != pdPASS)
 800101c:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <crash+0x3c>)
 800101e:	9301      	str	r3, [sp, #4]
 8001020:	2301      	movs	r3, #1
 8001022:	9300      	str	r3, [sp, #0]
 8001024:	2300      	movs	r3, #0
 8001026:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800102a:	490a      	ldr	r1, [pc, #40]	; (8001054 <crash+0x40>)
 800102c:	480a      	ldr	r0, [pc, #40]	; (8001058 <crash+0x44>)
 800102e:	f004 f93c 	bl	80052aa <xTaskCreate>
 8001032:	4603      	mov	r3, r0
 8001034:	2b01      	cmp	r3, #1
 8001036:	d004      	beq.n	8001042 <crash+0x2e>
		{
			printf("ERROR\r\n");
 8001038:	4808      	ldr	r0, [pc, #32]	; (800105c <crash+0x48>)
 800103a:	f005 fd51 	bl	8006ae0 <puts>
			Error_Handler();
 800103e:	f000 f953 	bl	80012e8 <Error_Handler>
		}
		printf("Plot \r\n");
 8001042:	4807      	ldr	r0, [pc, #28]	; (8001060 <crash+0x4c>)
 8001044:	f005 fd4c 	bl	8006ae0 <puts>
	  	vTaskDelay(100);
 8001048:	2064      	movs	r0, #100	; 0x64
 800104a:	f004 fa67 	bl	800551c <vTaskDelay>
	  	if (xTaskCreate(crash, "crash", 1000, NULL, 1, &xHandle1) != pdPASS)
 800104e:	e7e5      	b.n	800101c <crash+0x8>
 8001050:	20000300 	.word	0x20000300
 8001054:	08007f48 	.word	0x08007f48
 8001058:	08001015 	.word	0x08001015
 800105c:	08007f2c 	.word	0x08007f2c
 8001060:	08007f50 	.word	0x08007f50

08001064 <shell>:
	}
}

void shell(void * unused)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
	shell_run();
 800106c:	f000 faa6 	bl	80015bc <shell_run>
}
 8001070:	bf00      	nop
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <led>:

int led(int argc, char ** argv)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
	activateL = 1;
 8001082:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <led+0x2c>)
 8001084:	2201      	movs	r2, #1
 8001086:	601a      	str	r2, [r3, #0]
	delaiL = atoi(argv[1]);
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	3304      	adds	r3, #4
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4618      	mov	r0, r3
 8001090:	f005 fc5c 	bl	800694c <atoi>
 8001094:	4603      	mov	r3, r0
 8001096:	4a04      	ldr	r2, [pc, #16]	; (80010a8 <led+0x30>)
 8001098:	6013      	str	r3, [r2, #0]
	return 0;
 800109a:	2300      	movs	r3, #0
}
 800109c:	4618      	mov	r0, r3
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	200002f8 	.word	0x200002f8
 80010a8:	200002f0 	.word	0x200002f0

080010ac <spamchar>:

int spamchar(int argc, char ** argv)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
	activateS = 1;
 80010b6:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <spamchar+0x2c>)
 80010b8:	2201      	movs	r2, #1
 80010ba:	601a      	str	r2, [r3, #0]
	delaiS = atoi(argv[1]);
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	3304      	adds	r3, #4
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f005 fc42 	bl	800694c <atoi>
 80010c8:	4603      	mov	r3, r0
 80010ca:	4a04      	ldr	r2, [pc, #16]	; (80010dc <spamchar+0x30>)
 80010cc:	6013      	str	r3, [r2, #0]
	return 0;
 80010ce:	2300      	movs	r3, #0
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	200002fc 	.word	0x200002fc
 80010dc:	200002f4 	.word	0x200002f4

080010e0 <crashshell>:

int crashshell(int argc, char ** argv)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af02      	add	r7, sp, #8
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]
  	if (xTaskCreate(crash, "crash", 1000, NULL, 1, &xHandle1) != pdPASS)
 80010ea:	4b0d      	ldr	r3, [pc, #52]	; (8001120 <crashshell+0x40>)
 80010ec:	9301      	str	r3, [sp, #4]
 80010ee:	2301      	movs	r3, #1
 80010f0:	9300      	str	r3, [sp, #0]
 80010f2:	2300      	movs	r3, #0
 80010f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010f8:	490a      	ldr	r1, [pc, #40]	; (8001124 <crashshell+0x44>)
 80010fa:	480b      	ldr	r0, [pc, #44]	; (8001128 <crashshell+0x48>)
 80010fc:	f004 f8d5 	bl	80052aa <xTaskCreate>
 8001100:	4603      	mov	r3, r0
 8001102:	2b01      	cmp	r3, #1
 8001104:	d004      	beq.n	8001110 <crashshell+0x30>
	{
		printf("ERROR\r\n");
 8001106:	4809      	ldr	r0, [pc, #36]	; (800112c <crashshell+0x4c>)
 8001108:	f005 fcea 	bl	8006ae0 <puts>
		Error_Handler();
 800110c:	f000 f8ec 	bl	80012e8 <Error_Handler>
	}
  	printf("Plot \r\n");
 8001110:	4807      	ldr	r0, [pc, #28]	; (8001130 <crashshell+0x50>)
 8001112:	f005 fce5 	bl	8006ae0 <puts>
}
 8001116:	bf00      	nop
 8001118:	4618      	mov	r0, r3
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	20000300 	.word	0x20000300
 8001124:	08007f48 	.word	0x08007f48
 8001128:	08001015 	.word	0x08001015
 800112c:	08007f2c 	.word	0x08007f2c
 8001130:	08007f50 	.word	0x08007f50

08001134 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800113a:	f000 fc9a 	bl	8001a72 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800113e:	f000 f865 	bl	800120c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001142:	f7ff fa75 	bl	8000630 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001146:	f000 fbb1 	bl	80018ac <MX_USART1_UART_Init>

//****************************************//

//****************************************//

	shell_init();
 800114a:	f000 f95f 	bl	800140c <shell_init>
	shell_add('f', fonction, "Une fonction inutile");
 800114e:	4a1e      	ldr	r2, [pc, #120]	; (80011c8 <main+0x94>)
 8001150:	491e      	ldr	r1, [pc, #120]	; (80011cc <main+0x98>)
 8001152:	2066      	movs	r0, #102	; 0x66
 8001154:	f000 f986 	bl	8001464 <shell_add>
	shell_add('l', led, "j'allume le led");
 8001158:	4a1d      	ldr	r2, [pc, #116]	; (80011d0 <main+0x9c>)
 800115a:	491e      	ldr	r1, [pc, #120]	; (80011d4 <main+0xa0>)
 800115c:	206c      	movs	r0, #108	; 0x6c
 800115e:	f000 f981 	bl	8001464 <shell_add>
	shell_add('s', spamchar, "je spam de fou");
 8001162:	4a1d      	ldr	r2, [pc, #116]	; (80011d8 <main+0xa4>)
 8001164:	491d      	ldr	r1, [pc, #116]	; (80011dc <main+0xa8>)
 8001166:	2073      	movs	r0, #115	; 0x73
 8001168:	f000 f97c 	bl	8001464 <shell_add>
	shell_add('c', crashshell, "J'explose ton PC");
 800116c:	4a1c      	ldr	r2, [pc, #112]	; (80011e0 <main+0xac>)
 800116e:	491d      	ldr	r1, [pc, #116]	; (80011e4 <main+0xb0>)
 8001170:	2063      	movs	r0, #99	; 0x63
 8001172:	f000 f977 	bl	8001464 <shell_add>
	xTaskCreate(shell, "shell", 1000, NULL, 2, &xHandle2);
 8001176:	4b1c      	ldr	r3, [pc, #112]	; (80011e8 <main+0xb4>)
 8001178:	9301      	str	r3, [sp, #4]
 800117a:	2302      	movs	r3, #2
 800117c:	9300      	str	r3, [sp, #0]
 800117e:	2300      	movs	r3, #0
 8001180:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001184:	4919      	ldr	r1, [pc, #100]	; (80011ec <main+0xb8>)
 8001186:	481a      	ldr	r0, [pc, #104]	; (80011f0 <main+0xbc>)
 8001188:	f004 f88f 	bl	80052aa <xTaskCreate>
  	xTaskCreate(gereLed, "gereled", 1000, NULL, 1, &xHandle3);
 800118c:	4b19      	ldr	r3, [pc, #100]	; (80011f4 <main+0xc0>)
 800118e:	9301      	str	r3, [sp, #4]
 8001190:	2301      	movs	r3, #1
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	2300      	movs	r3, #0
 8001196:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800119a:	4917      	ldr	r1, [pc, #92]	; (80011f8 <main+0xc4>)
 800119c:	4817      	ldr	r0, [pc, #92]	; (80011fc <main+0xc8>)
 800119e:	f004 f884 	bl	80052aa <xTaskCreate>
  	xTaskCreate(spam, "spam", 1000, NULL, 1, &xHandle4);
 80011a2:	4b17      	ldr	r3, [pc, #92]	; (8001200 <main+0xcc>)
 80011a4:	9301      	str	r3, [sp, #4]
 80011a6:	2301      	movs	r3, #1
 80011a8:	9300      	str	r3, [sp, #0]
 80011aa:	2300      	movs	r3, #0
 80011ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011b0:	4914      	ldr	r1, [pc, #80]	; (8001204 <main+0xd0>)
 80011b2:	4815      	ldr	r0, [pc, #84]	; (8001208 <main+0xd4>)
 80011b4:	f004 f879 	bl	80052aa <xTaskCreate>


	//configASSERT(pdTRUE==xReturned);

	vTaskStartScheduler();
 80011b8:	f004 f9e6 	bl	8005588 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80011bc:	f7ff fa14 	bl	80005e8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80011c0:	f003 fc00 	bl	80049c4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80011c4:	e7fe      	b.n	80011c4 <main+0x90>
 80011c6:	bf00      	nop
 80011c8:	08007f58 	.word	0x08007f58
 80011cc:	08000f3d 	.word	0x08000f3d
 80011d0:	08007f70 	.word	0x08007f70
 80011d4:	08001079 	.word	0x08001079
 80011d8:	08007f80 	.word	0x08007f80
 80011dc:	080010ad 	.word	0x080010ad
 80011e0:	08007f90 	.word	0x08007f90
 80011e4:	080010e1 	.word	0x080010e1
 80011e8:	20000304 	.word	0x20000304
 80011ec:	08007fa4 	.word	0x08007fa4
 80011f0:	08001065 	.word	0x08001065
 80011f4:	20000308 	.word	0x20000308
 80011f8:	08007fac 	.word	0x08007fac
 80011fc:	08000f7d 	.word	0x08000f7d
 8001200:	2000030c 	.word	0x2000030c
 8001204:	08007fb4 	.word	0x08007fb4
 8001208:	08000fc9 	.word	0x08000fc9

0800120c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b094      	sub	sp, #80	; 0x50
 8001210:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001212:	f107 0320 	add.w	r3, r7, #32
 8001216:	2230      	movs	r2, #48	; 0x30
 8001218:	2100      	movs	r1, #0
 800121a:	4618      	mov	r0, r3
 800121c:	f005 fbd2 	bl	80069c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001220:	f107 030c 	add.w	r3, r7, #12
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
 800122e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001230:	4b2b      	ldr	r3, [pc, #172]	; (80012e0 <SystemClock_Config+0xd4>)
 8001232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001234:	4a2a      	ldr	r2, [pc, #168]	; (80012e0 <SystemClock_Config+0xd4>)
 8001236:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800123a:	6413      	str	r3, [r2, #64]	; 0x40
 800123c:	4b28      	ldr	r3, [pc, #160]	; (80012e0 <SystemClock_Config+0xd4>)
 800123e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001240:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001244:	60bb      	str	r3, [r7, #8]
 8001246:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001248:	4b26      	ldr	r3, [pc, #152]	; (80012e4 <SystemClock_Config+0xd8>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a25      	ldr	r2, [pc, #148]	; (80012e4 <SystemClock_Config+0xd8>)
 800124e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001252:	6013      	str	r3, [r2, #0]
 8001254:	4b23      	ldr	r3, [pc, #140]	; (80012e4 <SystemClock_Config+0xd8>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800125c:	607b      	str	r3, [r7, #4]
 800125e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001260:	2301      	movs	r3, #1
 8001262:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001264:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001268:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800126a:	2302      	movs	r3, #2
 800126c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800126e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001272:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001274:	2319      	movs	r3, #25
 8001276:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8001278:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 800127c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800127e:	2302      	movs	r3, #2
 8001280:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001282:	2302      	movs	r3, #2
 8001284:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001286:	f107 0320 	add.w	r3, r7, #32
 800128a:	4618      	mov	r0, r3
 800128c:	f001 f822 	bl	80022d4 <HAL_RCC_OscConfig>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001296:	f000 f827 	bl	80012e8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800129a:	f000 ffcb 	bl	8002234 <HAL_PWREx_EnableOverDrive>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80012a4:	f000 f820 	bl	80012e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012a8:	230f      	movs	r3, #15
 80012aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012ac:	2302      	movs	r3, #2
 80012ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012b4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80012c0:	f107 030c 	add.w	r3, r7, #12
 80012c4:	2107      	movs	r1, #7
 80012c6:	4618      	mov	r0, r3
 80012c8:	f001 faa8 	bl	800281c <HAL_RCC_ClockConfig>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80012d2:	f000 f809 	bl	80012e8 <Error_Handler>
  }
}
 80012d6:	bf00      	nop
 80012d8:	3750      	adds	r7, #80	; 0x50
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40023800 	.word	0x40023800
 80012e4:	40007000 	.word	0x40007000

080012e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012ec:	b672      	cpsid	i
}
 80012ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80012f0:	e7fe      	b.n	80012f0 <Error_Handler+0x8>
	...

080012f4 <uart_read>:

static char print_buffer[BUFFER_SIZE];

SemaphoreHandle_t sem_uart;

static char uart_read() {
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
	char c;

	HAL_UART_Receive_IT(&UART_DEVICE, (uint8_t*)(&c), 1);
 80012fa:	1dfb      	adds	r3, r7, #7
 80012fc:	2201      	movs	r2, #1
 80012fe:	4619      	mov	r1, r3
 8001300:	4807      	ldr	r0, [pc, #28]	; (8001320 <uart_read+0x2c>)
 8001302:	f002 f932 	bl	800356a <HAL_UART_Receive_IT>

	// semaphore take
	xSemaphoreTake(sem_uart, portMAX_DELAY);
 8001306:	4b07      	ldr	r3, [pc, #28]	; (8001324 <uart_read+0x30>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f04f 31ff 	mov.w	r1, #4294967295
 800130e:	4618      	mov	r0, r3
 8001310:	f003 fdd4 	bl	8004ebc <xQueueSemaphoreTake>

	return c;
 8001314:	79fb      	ldrb	r3, [r7, #7]
}
 8001316:	4618      	mov	r0, r3
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	2000066c 	.word	0x2000066c
 8001324:	2000063c 	.word	0x2000063c

08001328 <uart_irq_cb>:

void uart_irq_cb(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
	BaseType_t taskWoken = pdFALSE;
 800132e:	2300      	movs	r3, #0
 8001330:	607b      	str	r3, [r7, #4]
	// semaphore give
	xSemaphoreGiveFromISR(sem_uart, &taskWoken);
 8001332:	4b0b      	ldr	r3, [pc, #44]	; (8001360 <uart_irq_cb+0x38>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	1d3a      	adds	r2, r7, #4
 8001338:	4611      	mov	r1, r2
 800133a:	4618      	mov	r0, r3
 800133c:	f003 fd29 	bl	8004d92 <xQueueGiveFromISR>

	// xSemaphoreGiveFromISR écrit dans taskWoken (c'est pour ça qu'on passe un pointer) si elle a réveillé une tâche plus prioritaire
	// on passe taskWoken en paramètre a portYIELD_FROM_ISR qui va appeler le scheduler si une tache plus prioritaire est réveillée

	portYIELD_FROM_ISR(taskWoken)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d007      	beq.n	8001356 <uart_irq_cb+0x2e>
 8001346:	4b07      	ldr	r3, [pc, #28]	; (8001364 <uart_irq_cb+0x3c>)
 8001348:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	f3bf 8f4f 	dsb	sy
 8001352:	f3bf 8f6f 	isb	sy
}
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	2000063c 	.word	0x2000063c
 8001364:	e000ed04 	.word	0xe000ed04

08001368 <uart_write>:

static int uart_write(char * s, uint16_t size) {
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	460b      	mov	r3, r1
 8001372:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&UART_DEVICE, (uint8_t*)s, size, HAL_MAX_DELAY);
 8001374:	887a      	ldrh	r2, [r7, #2]
 8001376:	f04f 33ff 	mov.w	r3, #4294967295
 800137a:	6879      	ldr	r1, [r7, #4]
 800137c:	4803      	ldr	r0, [pc, #12]	; (800138c <uart_write+0x24>)
 800137e:	f002 f871 	bl	8003464 <HAL_UART_Transmit>
	return size;
 8001382:	887b      	ldrh	r3, [r7, #2]
}
 8001384:	4618      	mov	r0, r3
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	2000066c 	.word	0x2000066c

08001390 <sh_help>:

static int sh_help(int argc, char ** argv) {
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af02      	add	r7, sp, #8
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
	int i;
	for(i = 0 ; i < shell_func_list_size ; i++) {
 800139a:	2300      	movs	r3, #0
 800139c:	60fb      	str	r3, [r7, #12]
 800139e:	e022      	b.n	80013e6 <sh_help+0x56>
		int size;
		size = snprintf (print_buffer, BUFFER_SIZE, "%c: %s\r\n", shell_func_list[i].c, shell_func_list[i].description);
 80013a0:	4916      	ldr	r1, [pc, #88]	; (80013fc <sh_help+0x6c>)
 80013a2:	68fa      	ldr	r2, [r7, #12]
 80013a4:	4613      	mov	r3, r2
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	4413      	add	r3, r2
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	440b      	add	r3, r1
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	4618      	mov	r0, r3
 80013b2:	4912      	ldr	r1, [pc, #72]	; (80013fc <sh_help+0x6c>)
 80013b4:	68fa      	ldr	r2, [r7, #12]
 80013b6:	4613      	mov	r3, r2
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	4413      	add	r3, r2
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	440b      	add	r3, r1
 80013c0:	3308      	adds	r3, #8
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	9300      	str	r3, [sp, #0]
 80013c6:	4603      	mov	r3, r0
 80013c8:	4a0d      	ldr	r2, [pc, #52]	; (8001400 <sh_help+0x70>)
 80013ca:	2128      	movs	r1, #40	; 0x28
 80013cc:	480d      	ldr	r0, [pc, #52]	; (8001404 <sh_help+0x74>)
 80013ce:	f005 fb8f 	bl	8006af0 <sniprintf>
 80013d2:	60b8      	str	r0, [r7, #8]
		uart_write(print_buffer, size);
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	4619      	mov	r1, r3
 80013da:	480a      	ldr	r0, [pc, #40]	; (8001404 <sh_help+0x74>)
 80013dc:	f7ff ffc4 	bl	8001368 <uart_write>
	for(i = 0 ; i < shell_func_list_size ; i++) {
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	3301      	adds	r3, #1
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	4b08      	ldr	r3, [pc, #32]	; (8001408 <sh_help+0x78>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	68fa      	ldr	r2, [r7, #12]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	dbd7      	blt.n	80013a0 <sh_help+0x10>
	}

	return 0;
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	20000314 	.word	0x20000314
 8001400:	08007fbc 	.word	0x08007fbc
 8001404:	20000614 	.word	0x20000614
 8001408:	20000310 	.word	0x20000310

0800140c <shell_init>:

void shell_init() {
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
	int size = 0;
 8001412:	2300      	movs	r3, #0
 8001414:	607b      	str	r3, [r7, #4]

	size = snprintf (print_buffer, BUFFER_SIZE, "\r\n\r\n===== Monsieur Shell v0.2 =====\r\n");
 8001416:	4a0e      	ldr	r2, [pc, #56]	; (8001450 <shell_init+0x44>)
 8001418:	2128      	movs	r1, #40	; 0x28
 800141a:	480e      	ldr	r0, [pc, #56]	; (8001454 <shell_init+0x48>)
 800141c:	f005 fb68 	bl	8006af0 <sniprintf>
 8001420:	6078      	str	r0, [r7, #4]
	uart_write(print_buffer, size);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	b29b      	uxth	r3, r3
 8001426:	4619      	mov	r1, r3
 8001428:	480a      	ldr	r0, [pc, #40]	; (8001454 <shell_init+0x48>)
 800142a:	f7ff ff9d 	bl	8001368 <uart_write>

	sem_uart = xSemaphoreCreateBinary();
 800142e:	2203      	movs	r2, #3
 8001430:	2100      	movs	r1, #0
 8001432:	2001      	movs	r0, #1
 8001434:	f003 fc4c 	bl	8004cd0 <xQueueGenericCreate>
 8001438:	4603      	mov	r3, r0
 800143a:	4a07      	ldr	r2, [pc, #28]	; (8001458 <shell_init+0x4c>)
 800143c:	6013      	str	r3, [r2, #0]

	shell_add('h', sh_help, "Help");
 800143e:	4a07      	ldr	r2, [pc, #28]	; (800145c <shell_init+0x50>)
 8001440:	4907      	ldr	r1, [pc, #28]	; (8001460 <shell_init+0x54>)
 8001442:	2068      	movs	r0, #104	; 0x68
 8001444:	f000 f80e 	bl	8001464 <shell_add>
}
 8001448:	bf00      	nop
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	08007fc8 	.word	0x08007fc8
 8001454:	20000614 	.word	0x20000614
 8001458:	2000063c 	.word	0x2000063c
 800145c:	08007ff0 	.word	0x08007ff0
 8001460:	08001391 	.word	0x08001391

08001464 <shell_add>:

int shell_add(char c, int (* pfunc)(int argc, char ** argv), char * description) {
 8001464:	b480      	push	{r7}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
 8001470:	73fb      	strb	r3, [r7, #15]
	if (shell_func_list_size < SHELL_FUNC_LIST_MAX_SIZE) {
 8001472:	4b19      	ldr	r3, [pc, #100]	; (80014d8 <shell_add+0x74>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	2b3f      	cmp	r3, #63	; 0x3f
 8001478:	dc26      	bgt.n	80014c8 <shell_add+0x64>
		shell_func_list[shell_func_list_size].c = c;
 800147a:	4b17      	ldr	r3, [pc, #92]	; (80014d8 <shell_add+0x74>)
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	4917      	ldr	r1, [pc, #92]	; (80014dc <shell_add+0x78>)
 8001480:	4613      	mov	r3, r2
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	4413      	add	r3, r2
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	440b      	add	r3, r1
 800148a:	7bfa      	ldrb	r2, [r7, #15]
 800148c:	701a      	strb	r2, [r3, #0]
		shell_func_list[shell_func_list_size].func = pfunc;
 800148e:	4b12      	ldr	r3, [pc, #72]	; (80014d8 <shell_add+0x74>)
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	4912      	ldr	r1, [pc, #72]	; (80014dc <shell_add+0x78>)
 8001494:	4613      	mov	r3, r2
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	4413      	add	r3, r2
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	440b      	add	r3, r1
 800149e:	3304      	adds	r3, #4
 80014a0:	68ba      	ldr	r2, [r7, #8]
 80014a2:	601a      	str	r2, [r3, #0]
		shell_func_list[shell_func_list_size].description = description;
 80014a4:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <shell_add+0x74>)
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	490c      	ldr	r1, [pc, #48]	; (80014dc <shell_add+0x78>)
 80014aa:	4613      	mov	r3, r2
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	4413      	add	r3, r2
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	440b      	add	r3, r1
 80014b4:	3308      	adds	r3, #8
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	601a      	str	r2, [r3, #0]
		shell_func_list_size++;
 80014ba:	4b07      	ldr	r3, [pc, #28]	; (80014d8 <shell_add+0x74>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	3301      	adds	r3, #1
 80014c0:	4a05      	ldr	r2, [pc, #20]	; (80014d8 <shell_add+0x74>)
 80014c2:	6013      	str	r3, [r2, #0]
		return 0;
 80014c4:	2300      	movs	r3, #0
 80014c6:	e001      	b.n	80014cc <shell_add+0x68>
	}

	return -1;
 80014c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3714      	adds	r7, #20
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	20000310 	.word	0x20000310
 80014dc:	20000314 	.word	0x20000314

080014e0 <shell_exec>:

static int shell_exec(char * buf) {
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b090      	sub	sp, #64	; 0x40
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
	int i;

	char c = buf[0];
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	int argc;
	char * argv[ARGC_MAX];
	char *p;

	for(i = 0 ; i < shell_func_list_size ; i++) {
 80014f0:	2300      	movs	r3, #0
 80014f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80014f4:	e040      	b.n	8001578 <shell_exec+0x98>
		if (shell_func_list[i].c == c) {
 80014f6:	492d      	ldr	r1, [pc, #180]	; (80015ac <shell_exec+0xcc>)
 80014f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80014fa:	4613      	mov	r3, r2
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	4413      	add	r3, r2
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	440b      	add	r3, r1
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800150a:	429a      	cmp	r2, r3
 800150c:	d131      	bne.n	8001572 <shell_exec+0x92>
			argc = 1;
 800150e:	2301      	movs	r3, #1
 8001510:	63bb      	str	r3, [r7, #56]	; 0x38
			argv[0] = buf;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	60fb      	str	r3, [r7, #12]

			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	637b      	str	r3, [r7, #52]	; 0x34
 800151a:	e013      	b.n	8001544 <shell_exec+0x64>
				if(*p == ' ') {
 800151c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b20      	cmp	r3, #32
 8001522:	d10c      	bne.n	800153e <shell_exec+0x5e>
					*p = '\0';
 8001524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001526:	2200      	movs	r2, #0
 8001528:	701a      	strb	r2, [r3, #0]
					argv[argc++] = p+1;
 800152a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800152c:	1c5a      	adds	r2, r3, #1
 800152e:	63ba      	str	r2, [r7, #56]	; 0x38
 8001530:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001532:	3201      	adds	r2, #1
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	3340      	adds	r3, #64	; 0x40
 8001538:	443b      	add	r3, r7
 800153a:	f843 2c34 	str.w	r2, [r3, #-52]
			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 800153e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001540:	3301      	adds	r3, #1
 8001542:	637b      	str	r3, [r7, #52]	; 0x34
 8001544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d002      	beq.n	8001552 <shell_exec+0x72>
 800154c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800154e:	2b07      	cmp	r3, #7
 8001550:	dde4      	ble.n	800151c <shell_exec+0x3c>
				}
			}

			return shell_func_list[i].func(argc, argv);
 8001552:	4916      	ldr	r1, [pc, #88]	; (80015ac <shell_exec+0xcc>)
 8001554:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001556:	4613      	mov	r3, r2
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	4413      	add	r3, r2
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	440b      	add	r3, r1
 8001560:	3304      	adds	r3, #4
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f107 020c 	add.w	r2, r7, #12
 8001568:	4611      	mov	r1, r2
 800156a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800156c:	4798      	blx	r3
 800156e:	4603      	mov	r3, r0
 8001570:	e017      	b.n	80015a2 <shell_exec+0xc2>
	for(i = 0 ; i < shell_func_list_size ; i++) {
 8001572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001574:	3301      	adds	r3, #1
 8001576:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001578:	4b0d      	ldr	r3, [pc, #52]	; (80015b0 <shell_exec+0xd0>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800157e:	429a      	cmp	r2, r3
 8001580:	dbb9      	blt.n	80014f6 <shell_exec+0x16>
		}
	}

	int size;
	size = snprintf (print_buffer, BUFFER_SIZE, "%c: no such command\r\n", c);
 8001582:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001586:	4a0b      	ldr	r2, [pc, #44]	; (80015b4 <shell_exec+0xd4>)
 8001588:	2128      	movs	r1, #40	; 0x28
 800158a:	480b      	ldr	r0, [pc, #44]	; (80015b8 <shell_exec+0xd8>)
 800158c:	f005 fab0 	bl	8006af0 <sniprintf>
 8001590:	62f8      	str	r0, [r7, #44]	; 0x2c
	uart_write(print_buffer, size);
 8001592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001594:	b29b      	uxth	r3, r3
 8001596:	4619      	mov	r1, r3
 8001598:	4807      	ldr	r0, [pc, #28]	; (80015b8 <shell_exec+0xd8>)
 800159a:	f7ff fee5 	bl	8001368 <uart_write>
	return -1;
 800159e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3740      	adds	r7, #64	; 0x40
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	20000314 	.word	0x20000314
 80015b0:	20000310 	.word	0x20000310
 80015b4:	08007ff8 	.word	0x08007ff8
 80015b8:	20000614 	.word	0x20000614

080015bc <shell_run>:

static char backspace[] = "\b \b";
static char prompt[] = "> ";

int shell_run() {
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
	int reading = 0;
 80015c2:	2300      	movs	r3, #0
 80015c4:	60fb      	str	r3, [r7, #12]
	int pos = 0;
 80015c6:	2300      	movs	r3, #0
 80015c8:	60bb      	str	r3, [r7, #8]

	static char cmd_buffer[BUFFER_SIZE];

	while (1) {
		uart_write(prompt, 2);
 80015ca:	2102      	movs	r1, #2
 80015cc:	482a      	ldr	r0, [pc, #168]	; (8001678 <shell_run+0xbc>)
 80015ce:	f7ff fecb 	bl	8001368 <uart_write>
		reading = 1;
 80015d2:	2301      	movs	r3, #1
 80015d4:	60fb      	str	r3, [r7, #12]

		while(reading) {
 80015d6:	e047      	b.n	8001668 <shell_run+0xac>
			char c = uart_read();
 80015d8:	f7ff fe8c 	bl	80012f4 <uart_read>
 80015dc:	4603      	mov	r3, r0
 80015de:	70fb      	strb	r3, [r7, #3]
			int size;

			switch (c) {
 80015e0:	78fb      	ldrb	r3, [r7, #3]
 80015e2:	2b08      	cmp	r3, #8
 80015e4:	d025      	beq.n	8001632 <shell_run+0x76>
 80015e6:	2b0d      	cmp	r3, #13
 80015e8:	d12e      	bne.n	8001648 <shell_run+0x8c>
			//process RETURN key
			case '\r':
				//case '\n':
				size = snprintf (print_buffer, BUFFER_SIZE, "\r\n");
 80015ea:	4a24      	ldr	r2, [pc, #144]	; (800167c <shell_run+0xc0>)
 80015ec:	2128      	movs	r1, #40	; 0x28
 80015ee:	4824      	ldr	r0, [pc, #144]	; (8001680 <shell_run+0xc4>)
 80015f0:	f005 fa7e 	bl	8006af0 <sniprintf>
 80015f4:	6078      	str	r0, [r7, #4]
				uart_write(print_buffer, size);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	4619      	mov	r1, r3
 80015fc:	4820      	ldr	r0, [pc, #128]	; (8001680 <shell_run+0xc4>)
 80015fe:	f7ff feb3 	bl	8001368 <uart_write>
				cmd_buffer[pos++] = 0;     //add \0 char at end of string
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	1c5a      	adds	r2, r3, #1
 8001606:	60ba      	str	r2, [r7, #8]
 8001608:	4a1e      	ldr	r2, [pc, #120]	; (8001684 <shell_run+0xc8>)
 800160a:	2100      	movs	r1, #0
 800160c:	54d1      	strb	r1, [r2, r3]
				size = snprintf (print_buffer, BUFFER_SIZE, ":%s\r\n", cmd_buffer);
 800160e:	4b1d      	ldr	r3, [pc, #116]	; (8001684 <shell_run+0xc8>)
 8001610:	4a1d      	ldr	r2, [pc, #116]	; (8001688 <shell_run+0xcc>)
 8001612:	2128      	movs	r1, #40	; 0x28
 8001614:	481a      	ldr	r0, [pc, #104]	; (8001680 <shell_run+0xc4>)
 8001616:	f005 fa6b 	bl	8006af0 <sniprintf>
 800161a:	6078      	str	r0, [r7, #4]
				uart_write(print_buffer, size);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	b29b      	uxth	r3, r3
 8001620:	4619      	mov	r1, r3
 8001622:	4817      	ldr	r0, [pc, #92]	; (8001680 <shell_run+0xc4>)
 8001624:	f7ff fea0 	bl	8001368 <uart_write>
				reading = 0;        //exit read loop
 8001628:	2300      	movs	r3, #0
 800162a:	60fb      	str	r3, [r7, #12]
				pos = 0;            //reset buffer
 800162c:	2300      	movs	r3, #0
 800162e:	60bb      	str	r3, [r7, #8]
				break;
 8001630:	e01a      	b.n	8001668 <shell_run+0xac>
				//backspace
			case '\b':
				if (pos > 0) {      //is there a char to delete?
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	2b00      	cmp	r3, #0
 8001636:	dd16      	ble.n	8001666 <shell_run+0xaa>
					pos--;          //remove it in buffer
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	3b01      	subs	r3, #1
 800163c:	60bb      	str	r3, [r7, #8]

					uart_write(backspace, 3);	// delete the char on the terminal
 800163e:	2103      	movs	r1, #3
 8001640:	4812      	ldr	r0, [pc, #72]	; (800168c <shell_run+0xd0>)
 8001642:	f7ff fe91 	bl	8001368 <uart_write>
				}
				break;
 8001646:	e00e      	b.n	8001666 <shell_run+0xaa>
				//other characters
			default:
				//only store characters if buffer has space
				if (pos < BUFFER_SIZE) {
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	2b27      	cmp	r3, #39	; 0x27
 800164c:	dc0c      	bgt.n	8001668 <shell_run+0xac>
					uart_write(&c, 1);
 800164e:	1cfb      	adds	r3, r7, #3
 8001650:	2101      	movs	r1, #1
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff fe88 	bl	8001368 <uart_write>
					cmd_buffer[pos++] = c; //store
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	1c5a      	adds	r2, r3, #1
 800165c:	60ba      	str	r2, [r7, #8]
 800165e:	78f9      	ldrb	r1, [r7, #3]
 8001660:	4a08      	ldr	r2, [pc, #32]	; (8001684 <shell_run+0xc8>)
 8001662:	54d1      	strb	r1, [r2, r3]
 8001664:	e000      	b.n	8001668 <shell_run+0xac>
				break;
 8001666:	bf00      	nop
		while(reading) {
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d1b4      	bne.n	80015d8 <shell_run+0x1c>
				}
			}
		}
		shell_exec(cmd_buffer);
 800166e:	4805      	ldr	r0, [pc, #20]	; (8001684 <shell_run+0xc8>)
 8001670:	f7ff ff36 	bl	80014e0 <shell_exec>
		uart_write(prompt, 2);
 8001674:	e7a9      	b.n	80015ca <shell_run+0xe>
 8001676:	bf00      	nop
 8001678:	20000004 	.word	0x20000004
 800167c:	08008010 	.word	0x08008010
 8001680:	20000614 	.word	0x20000614
 8001684:	20000640 	.word	0x20000640
 8001688:	08008014 	.word	0x08008014
 800168c:	20000000 	.word	0x20000000

08001690 <HAL_MspInit>:
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	4b11      	ldr	r3, [pc, #68]	; (80016dc <HAL_MspInit+0x4c>)
 8001698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169a:	4a10      	ldr	r2, [pc, #64]	; (80016dc <HAL_MspInit+0x4c>)
 800169c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016a0:	6413      	str	r3, [r2, #64]	; 0x40
 80016a2:	4b0e      	ldr	r3, [pc, #56]	; (80016dc <HAL_MspInit+0x4c>)
 80016a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016aa:	607b      	str	r3, [r7, #4]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	4b0b      	ldr	r3, [pc, #44]	; (80016dc <HAL_MspInit+0x4c>)
 80016b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b2:	4a0a      	ldr	r2, [pc, #40]	; (80016dc <HAL_MspInit+0x4c>)
 80016b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016b8:	6453      	str	r3, [r2, #68]	; 0x44
 80016ba:	4b08      	ldr	r3, [pc, #32]	; (80016dc <HAL_MspInit+0x4c>)
 80016bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016c2:	603b      	str	r3, [r7, #0]
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	2200      	movs	r2, #0
 80016c8:	210f      	movs	r1, #15
 80016ca:	f06f 0001 	mvn.w	r0, #1
 80016ce:	f000 fb08 	bl	8001ce2 <HAL_NVIC_SetPriority>
 80016d2:	bf00      	nop
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40023800 	.word	0x40023800

080016e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016e4:	e7fe      	b.n	80016e4 <NMI_Handler+0x4>

080016e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016e6:	b480      	push	{r7}
 80016e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ea:	e7fe      	b.n	80016ea <HardFault_Handler+0x4>

080016ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016f0:	e7fe      	b.n	80016f0 <MemManage_Handler+0x4>

080016f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016f2:	b480      	push	{r7}
 80016f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016f6:	e7fe      	b.n	80016f6 <BusFault_Handler+0x4>

080016f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016fc:	e7fe      	b.n	80016fc <UsageFault_Handler+0x4>

080016fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016fe:	b480      	push	{r7}
 8001700:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001702:	bf00      	nop
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001710:	f000 f9ec 	bl	8001aec <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001714:	f004 fb4a 	bl	8005dac <xTaskGetSchedulerState>
 8001718:	4603      	mov	r3, r0
 800171a:	2b01      	cmp	r3, #1
 800171c:	d001      	beq.n	8001722 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800171e:	f004 fe9b 	bl	8006458 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001722:	bf00      	nop
 8001724:	bd80      	pop	{r7, pc}
	...

08001728 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	uart_irq_cb();
 800172c:	f7ff fdfc 	bl	8001328 <uart_irq_cb>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001730:	4802      	ldr	r0, [pc, #8]	; (800173c <USART1_IRQHandler+0x14>)
 8001732:	f001 ff5f 	bl	80035f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	2000066c 	.word	0x2000066c

08001740 <_read>:
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	607a      	str	r2, [r7, #4]
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]
 8001750:	e00a      	b.n	8001768 <_read+0x28>
 8001752:	f3af 8000 	nop.w
 8001756:	4601      	mov	r1, r0
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	1c5a      	adds	r2, r3, #1
 800175c:	60ba      	str	r2, [r7, #8]
 800175e:	b2ca      	uxtb	r2, r1
 8001760:	701a      	strb	r2, [r3, #0]
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	3301      	adds	r3, #1
 8001766:	617b      	str	r3, [r7, #20]
 8001768:	697a      	ldr	r2, [r7, #20]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	429a      	cmp	r2, r3
 800176e:	dbf0      	blt.n	8001752 <_read+0x12>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	4618      	mov	r0, r3
 8001774:	3718      	adds	r7, #24
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <_write>:
 800177a:	b580      	push	{r7, lr}
 800177c:	b086      	sub	sp, #24
 800177e:	af00      	add	r7, sp, #0
 8001780:	60f8      	str	r0, [r7, #12]
 8001782:	60b9      	str	r1, [r7, #8]
 8001784:	607a      	str	r2, [r7, #4]
 8001786:	2300      	movs	r3, #0
 8001788:	617b      	str	r3, [r7, #20]
 800178a:	e009      	b.n	80017a0 <_write+0x26>
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	1c5a      	adds	r2, r3, #1
 8001790:	60ba      	str	r2, [r7, #8]
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff fbbf 	bl	8000f18 <__io_putchar>
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	3301      	adds	r3, #1
 800179e:	617b      	str	r3, [r7, #20]
 80017a0:	697a      	ldr	r2, [r7, #20]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	dbf1      	blt.n	800178c <_write+0x12>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	4618      	mov	r0, r3
 80017ac:	3718      	adds	r7, #24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <_close>:
 80017b2:	b480      	push	{r7}
 80017b4:	b083      	sub	sp, #12
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
 80017ba:	f04f 33ff 	mov.w	r3, #4294967295
 80017be:	4618      	mov	r0, r3
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <_fstat>:
 80017ca:	b480      	push	{r7}
 80017cc:	b083      	sub	sp, #12
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
 80017d2:	6039      	str	r1, [r7, #0]
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017da:	605a      	str	r2, [r3, #4]
 80017dc:	2300      	movs	r3, #0
 80017de:	4618      	mov	r0, r3
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr

080017ea <_isatty>:
 80017ea:	b480      	push	{r7}
 80017ec:	b083      	sub	sp, #12
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
 80017f2:	2301      	movs	r3, #1
 80017f4:	4618      	mov	r0, r3
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <_lseek>:
 8001800:	b480      	push	{r7}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	607a      	str	r2, [r7, #4]
 800180c:	2300      	movs	r3, #0
 800180e:	4618      	mov	r0, r3
 8001810:	3714      	adds	r7, #20
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
	...

0800181c <_sbrk>:
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	4a14      	ldr	r2, [pc, #80]	; (8001878 <_sbrk+0x5c>)
 8001826:	4b15      	ldr	r3, [pc, #84]	; (800187c <_sbrk+0x60>)
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	617b      	str	r3, [r7, #20]
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	613b      	str	r3, [r7, #16]
 8001830:	4b13      	ldr	r3, [pc, #76]	; (8001880 <_sbrk+0x64>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d102      	bne.n	800183e <_sbrk+0x22>
 8001838:	4b11      	ldr	r3, [pc, #68]	; (8001880 <_sbrk+0x64>)
 800183a:	4a12      	ldr	r2, [pc, #72]	; (8001884 <_sbrk+0x68>)
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	4b10      	ldr	r3, [pc, #64]	; (8001880 <_sbrk+0x64>)
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4413      	add	r3, r2
 8001846:	693a      	ldr	r2, [r7, #16]
 8001848:	429a      	cmp	r2, r3
 800184a:	d207      	bcs.n	800185c <_sbrk+0x40>
 800184c:	f005 f882 	bl	8006954 <__errno>
 8001850:	4603      	mov	r3, r0
 8001852:	220c      	movs	r2, #12
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	f04f 33ff 	mov.w	r3, #4294967295
 800185a:	e009      	b.n	8001870 <_sbrk+0x54>
 800185c:	4b08      	ldr	r3, [pc, #32]	; (8001880 <_sbrk+0x64>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	4b07      	ldr	r3, [pc, #28]	; (8001880 <_sbrk+0x64>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4413      	add	r3, r2
 800186a:	4a05      	ldr	r2, [pc, #20]	; (8001880 <_sbrk+0x64>)
 800186c:	6013      	str	r3, [r2, #0]
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	4618      	mov	r0, r3
 8001872:	3718      	adds	r7, #24
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	20050000 	.word	0x20050000
 800187c:	00000400 	.word	0x00000400
 8001880:	20000668 	.word	0x20000668
 8001884:	20008058 	.word	0x20008058

08001888 <SystemInit>:
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
 800188c:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <SystemInit+0x20>)
 800188e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001892:	4a05      	ldr	r2, [pc, #20]	; (80018a8 <SystemInit+0x20>)
 8001894:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001898:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	e000ed00 	.word	0xe000ed00

080018ac <MX_USART1_UART_Init>:
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	4b14      	ldr	r3, [pc, #80]	; (8001904 <MX_USART1_UART_Init+0x58>)
 80018b2:	4a15      	ldr	r2, [pc, #84]	; (8001908 <MX_USART1_UART_Init+0x5c>)
 80018b4:	601a      	str	r2, [r3, #0]
 80018b6:	4b13      	ldr	r3, [pc, #76]	; (8001904 <MX_USART1_UART_Init+0x58>)
 80018b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018bc:	605a      	str	r2, [r3, #4]
 80018be:	4b11      	ldr	r3, [pc, #68]	; (8001904 <MX_USART1_UART_Init+0x58>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	609a      	str	r2, [r3, #8]
 80018c4:	4b0f      	ldr	r3, [pc, #60]	; (8001904 <MX_USART1_UART_Init+0x58>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	60da      	str	r2, [r3, #12]
 80018ca:	4b0e      	ldr	r3, [pc, #56]	; (8001904 <MX_USART1_UART_Init+0x58>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	611a      	str	r2, [r3, #16]
 80018d0:	4b0c      	ldr	r3, [pc, #48]	; (8001904 <MX_USART1_UART_Init+0x58>)
 80018d2:	220c      	movs	r2, #12
 80018d4:	615a      	str	r2, [r3, #20]
 80018d6:	4b0b      	ldr	r3, [pc, #44]	; (8001904 <MX_USART1_UART_Init+0x58>)
 80018d8:	2200      	movs	r2, #0
 80018da:	619a      	str	r2, [r3, #24]
 80018dc:	4b09      	ldr	r3, [pc, #36]	; (8001904 <MX_USART1_UART_Init+0x58>)
 80018de:	2200      	movs	r2, #0
 80018e0:	61da      	str	r2, [r3, #28]
 80018e2:	4b08      	ldr	r3, [pc, #32]	; (8001904 <MX_USART1_UART_Init+0x58>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	621a      	str	r2, [r3, #32]
 80018e8:	4b06      	ldr	r3, [pc, #24]	; (8001904 <MX_USART1_UART_Init+0x58>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	625a      	str	r2, [r3, #36]	; 0x24
 80018ee:	4805      	ldr	r0, [pc, #20]	; (8001904 <MX_USART1_UART_Init+0x58>)
 80018f0:	f001 fd6a 	bl	80033c8 <HAL_UART_Init>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <MX_USART1_UART_Init+0x52>
 80018fa:	f7ff fcf5 	bl	80012e8 <Error_Handler>
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	2000066c 	.word	0x2000066c
 8001908:	40011000 	.word	0x40011000

0800190c <HAL_UART_MspInit>:
 800190c:	b580      	push	{r7, lr}
 800190e:	b0ac      	sub	sp, #176	; 0xb0
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	605a      	str	r2, [r3, #4]
 800191e:	609a      	str	r2, [r3, #8]
 8001920:	60da      	str	r2, [r3, #12]
 8001922:	611a      	str	r2, [r3, #16]
 8001924:	f107 0318 	add.w	r3, r7, #24
 8001928:	2284      	movs	r2, #132	; 0x84
 800192a:	2100      	movs	r1, #0
 800192c:	4618      	mov	r0, r3
 800192e:	f005 f849 	bl	80069c4 <memset>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a36      	ldr	r2, [pc, #216]	; (8001a10 <HAL_UART_MspInit+0x104>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d164      	bne.n	8001a06 <HAL_UART_MspInit+0xfa>
 800193c:	2340      	movs	r3, #64	; 0x40
 800193e:	61bb      	str	r3, [r7, #24]
 8001940:	2300      	movs	r3, #0
 8001942:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001944:	f107 0318 	add.w	r3, r7, #24
 8001948:	4618      	mov	r0, r3
 800194a:	f001 f94d 	bl	8002be8 <HAL_RCCEx_PeriphCLKConfig>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <HAL_UART_MspInit+0x4c>
 8001954:	f7ff fcc8 	bl	80012e8 <Error_Handler>
 8001958:	4b2e      	ldr	r3, [pc, #184]	; (8001a14 <HAL_UART_MspInit+0x108>)
 800195a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195c:	4a2d      	ldr	r2, [pc, #180]	; (8001a14 <HAL_UART_MspInit+0x108>)
 800195e:	f043 0310 	orr.w	r3, r3, #16
 8001962:	6453      	str	r3, [r2, #68]	; 0x44
 8001964:	4b2b      	ldr	r3, [pc, #172]	; (8001a14 <HAL_UART_MspInit+0x108>)
 8001966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001968:	f003 0310 	and.w	r3, r3, #16
 800196c:	617b      	str	r3, [r7, #20]
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	4b28      	ldr	r3, [pc, #160]	; (8001a14 <HAL_UART_MspInit+0x108>)
 8001972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001974:	4a27      	ldr	r2, [pc, #156]	; (8001a14 <HAL_UART_MspInit+0x108>)
 8001976:	f043 0302 	orr.w	r3, r3, #2
 800197a:	6313      	str	r3, [r2, #48]	; 0x30
 800197c:	4b25      	ldr	r3, [pc, #148]	; (8001a14 <HAL_UART_MspInit+0x108>)
 800197e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001980:	f003 0302 	and.w	r3, r3, #2
 8001984:	613b      	str	r3, [r7, #16]
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	4b22      	ldr	r3, [pc, #136]	; (8001a14 <HAL_UART_MspInit+0x108>)
 800198a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198c:	4a21      	ldr	r2, [pc, #132]	; (8001a14 <HAL_UART_MspInit+0x108>)
 800198e:	f043 0301 	orr.w	r3, r3, #1
 8001992:	6313      	str	r3, [r2, #48]	; 0x30
 8001994:	4b1f      	ldr	r3, [pc, #124]	; (8001a14 <HAL_UART_MspInit+0x108>)
 8001996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001998:	f003 0301 	and.w	r3, r3, #1
 800199c:	60fb      	str	r3, [r7, #12]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2380      	movs	r3, #128	; 0x80
 80019a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80019a6:	2302      	movs	r3, #2
 80019a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80019ac:	2300      	movs	r3, #0
 80019ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80019b2:	2300      	movs	r3, #0
 80019b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80019b8:	2307      	movs	r3, #7
 80019ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80019be:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80019c2:	4619      	mov	r1, r3
 80019c4:	4814      	ldr	r0, [pc, #80]	; (8001a18 <HAL_UART_MspInit+0x10c>)
 80019c6:	f000 fa55 	bl	8001e74 <HAL_GPIO_Init>
 80019ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80019d2:	2302      	movs	r3, #2
 80019d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80019d8:	2300      	movs	r3, #0
 80019da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80019de:	2300      	movs	r3, #0
 80019e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80019e4:	2307      	movs	r3, #7
 80019e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80019ea:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80019ee:	4619      	mov	r1, r3
 80019f0:	480a      	ldr	r0, [pc, #40]	; (8001a1c <HAL_UART_MspInit+0x110>)
 80019f2:	f000 fa3f 	bl	8001e74 <HAL_GPIO_Init>
 80019f6:	2200      	movs	r2, #0
 80019f8:	2105      	movs	r1, #5
 80019fa:	2025      	movs	r0, #37	; 0x25
 80019fc:	f000 f971 	bl	8001ce2 <HAL_NVIC_SetPriority>
 8001a00:	2025      	movs	r0, #37	; 0x25
 8001a02:	f000 f98a 	bl	8001d1a <HAL_NVIC_EnableIRQ>
 8001a06:	bf00      	nop
 8001a08:	37b0      	adds	r7, #176	; 0xb0
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	40011000 	.word	0x40011000
 8001a14:	40023800 	.word	0x40023800
 8001a18:	40020400 	.word	0x40020400
 8001a1c:	40020000 	.word	0x40020000

08001a20 <Reset_Handler>:
 8001a20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a58 <LoopFillZerobss+0x12>
 8001a24:	480d      	ldr	r0, [pc, #52]	; (8001a5c <LoopFillZerobss+0x16>)
 8001a26:	490e      	ldr	r1, [pc, #56]	; (8001a60 <LoopFillZerobss+0x1a>)
 8001a28:	4a0e      	ldr	r2, [pc, #56]	; (8001a64 <LoopFillZerobss+0x1e>)
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	e002      	b.n	8001a34 <LoopCopyDataInit>

08001a2e <CopyDataInit>:
 8001a2e:	58d4      	ldr	r4, [r2, r3]
 8001a30:	50c4      	str	r4, [r0, r3]
 8001a32:	3304      	adds	r3, #4

08001a34 <LoopCopyDataInit>:
 8001a34:	18c4      	adds	r4, r0, r3
 8001a36:	428c      	cmp	r4, r1
 8001a38:	d3f9      	bcc.n	8001a2e <CopyDataInit>
 8001a3a:	4a0b      	ldr	r2, [pc, #44]	; (8001a68 <LoopFillZerobss+0x22>)
 8001a3c:	4c0b      	ldr	r4, [pc, #44]	; (8001a6c <LoopFillZerobss+0x26>)
 8001a3e:	2300      	movs	r3, #0
 8001a40:	e001      	b.n	8001a46 <LoopFillZerobss>

08001a42 <FillZerobss>:
 8001a42:	6013      	str	r3, [r2, #0]
 8001a44:	3204      	adds	r2, #4

08001a46 <LoopFillZerobss>:
 8001a46:	42a2      	cmp	r2, r4
 8001a48:	d3fb      	bcc.n	8001a42 <FillZerobss>
 8001a4a:	f7ff ff1d 	bl	8001888 <SystemInit>
 8001a4e:	f004 ff87 	bl	8006960 <__libc_init_array>
 8001a52:	f7ff fb6f 	bl	8001134 <main>
 8001a56:	4770      	bx	lr
 8001a58:	20050000 	.word	0x20050000
 8001a5c:	20000000 	.word	0x20000000
 8001a60:	2000007c 	.word	0x2000007c
 8001a64:	080081e8 	.word	0x080081e8
 8001a68:	2000007c 	.word	0x2000007c
 8001a6c:	20008054 	.word	0x20008054

08001a70 <ADC_IRQHandler>:
 8001a70:	e7fe      	b.n	8001a70 <ADC_IRQHandler>

08001a72 <HAL_Init>:
 8001a72:	b580      	push	{r7, lr}
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	2003      	movs	r0, #3
 8001a78:	f000 f928 	bl	8001ccc <HAL_NVIC_SetPriorityGrouping>
 8001a7c:	200f      	movs	r0, #15
 8001a7e:	f000 f805 	bl	8001a8c <HAL_InitTick>
 8001a82:	f7ff fe05 	bl	8001690 <HAL_MspInit>
 8001a86:	2300      	movs	r3, #0
 8001a88:	4618      	mov	r0, r3
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <HAL_InitTick>:
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	4b12      	ldr	r3, [pc, #72]	; (8001ae0 <HAL_InitTick+0x54>)
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	4b12      	ldr	r3, [pc, #72]	; (8001ae4 <HAL_InitTick+0x58>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f000 f943 	bl	8001d36 <HAL_SYSTICK_Config>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <HAL_InitTick+0x2e>
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e00e      	b.n	8001ad8 <HAL_InitTick+0x4c>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2b0f      	cmp	r3, #15
 8001abe:	d80a      	bhi.n	8001ad6 <HAL_InitTick+0x4a>
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	6879      	ldr	r1, [r7, #4]
 8001ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac8:	f000 f90b 	bl	8001ce2 <HAL_NVIC_SetPriority>
 8001acc:	4a06      	ldr	r2, [pc, #24]	; (8001ae8 <HAL_InitTick+0x5c>)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6013      	str	r3, [r2, #0]
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	e000      	b.n	8001ad8 <HAL_InitTick+0x4c>
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3708      	adds	r7, #8
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	20000008 	.word	0x20000008
 8001ae4:	20000010 	.word	0x20000010
 8001ae8:	2000000c 	.word	0x2000000c

08001aec <HAL_IncTick>:
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	4b06      	ldr	r3, [pc, #24]	; (8001b0c <HAL_IncTick+0x20>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	461a      	mov	r2, r3
 8001af6:	4b06      	ldr	r3, [pc, #24]	; (8001b10 <HAL_IncTick+0x24>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4413      	add	r3, r2
 8001afc:	4a04      	ldr	r2, [pc, #16]	; (8001b10 <HAL_IncTick+0x24>)
 8001afe:	6013      	str	r3, [r2, #0]
 8001b00:	bf00      	nop
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	20000010 	.word	0x20000010
 8001b10:	200006f4 	.word	0x200006f4

08001b14 <HAL_GetTick>:
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	4b03      	ldr	r3, [pc, #12]	; (8001b28 <HAL_GetTick+0x14>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	200006f4 	.word	0x200006f4

08001b2c <__NVIC_SetPriorityGrouping>:
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f003 0307 	and.w	r3, r3, #7
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	4b0b      	ldr	r3, [pc, #44]	; (8001b6c <__NVIC_SetPriorityGrouping+0x40>)
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	60bb      	str	r3, [r7, #8]
 8001b42:	68ba      	ldr	r2, [r7, #8]
 8001b44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b48:	4013      	ands	r3, r2
 8001b4a:	60bb      	str	r3, [r7, #8]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	021a      	lsls	r2, r3, #8
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	431a      	orrs	r2, r3
 8001b54:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <__NVIC_SetPriorityGrouping+0x44>)
 8001b56:	4313      	orrs	r3, r2
 8001b58:	60bb      	str	r3, [r7, #8]
 8001b5a:	4a04      	ldr	r2, [pc, #16]	; (8001b6c <__NVIC_SetPriorityGrouping+0x40>)
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	60d3      	str	r3, [r2, #12]
 8001b60:	bf00      	nop
 8001b62:	3714      	adds	r7, #20
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	e000ed00 	.word	0xe000ed00
 8001b70:	05fa0000 	.word	0x05fa0000

08001b74 <__NVIC_GetPriorityGrouping>:
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	4b04      	ldr	r3, [pc, #16]	; (8001b8c <__NVIC_GetPriorityGrouping+0x18>)
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	0a1b      	lsrs	r3, r3, #8
 8001b7e:	f003 0307 	and.w	r3, r3, #7
 8001b82:	4618      	mov	r0, r3
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr
 8001b8c:	e000ed00 	.word	0xe000ed00

08001b90 <__NVIC_EnableIRQ>:
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	71fb      	strb	r3, [r7, #7]
 8001b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	db0b      	blt.n	8001bba <__NVIC_EnableIRQ+0x2a>
 8001ba2:	79fb      	ldrb	r3, [r7, #7]
 8001ba4:	f003 021f 	and.w	r2, r3, #31
 8001ba8:	4907      	ldr	r1, [pc, #28]	; (8001bc8 <__NVIC_EnableIRQ+0x38>)
 8001baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bae:	095b      	lsrs	r3, r3, #5
 8001bb0:	2001      	movs	r0, #1
 8001bb2:	fa00 f202 	lsl.w	r2, r0, r2
 8001bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001bba:	bf00      	nop
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	e000e100 	.word	0xe000e100

08001bcc <__NVIC_SetPriority>:
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	6039      	str	r1, [r7, #0]
 8001bd6:	71fb      	strb	r3, [r7, #7]
 8001bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	db0a      	blt.n	8001bf6 <__NVIC_SetPriority+0x2a>
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	b2da      	uxtb	r2, r3
 8001be4:	490c      	ldr	r1, [pc, #48]	; (8001c18 <__NVIC_SetPriority+0x4c>)
 8001be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bea:	0112      	lsls	r2, r2, #4
 8001bec:	b2d2      	uxtb	r2, r2
 8001bee:	440b      	add	r3, r1
 8001bf0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8001bf4:	e00a      	b.n	8001c0c <__NVIC_SetPriority+0x40>
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	b2da      	uxtb	r2, r3
 8001bfa:	4908      	ldr	r1, [pc, #32]	; (8001c1c <__NVIC_SetPriority+0x50>)
 8001bfc:	79fb      	ldrb	r3, [r7, #7]
 8001bfe:	f003 030f 	and.w	r3, r3, #15
 8001c02:	3b04      	subs	r3, #4
 8001c04:	0112      	lsls	r2, r2, #4
 8001c06:	b2d2      	uxtb	r2, r2
 8001c08:	440b      	add	r3, r1
 8001c0a:	761a      	strb	r2, [r3, #24]
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr
 8001c18:	e000e100 	.word	0xe000e100
 8001c1c:	e000ed00 	.word	0xe000ed00

08001c20 <NVIC_EncodePriority>:
 8001c20:	b480      	push	{r7}
 8001c22:	b089      	sub	sp, #36	; 0x24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	60b9      	str	r1, [r7, #8]
 8001c2a:	607a      	str	r2, [r7, #4]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	f003 0307 	and.w	r3, r3, #7
 8001c32:	61fb      	str	r3, [r7, #28]
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	f1c3 0307 	rsb	r3, r3, #7
 8001c3a:	2b04      	cmp	r3, #4
 8001c3c:	bf28      	it	cs
 8001c3e:	2304      	movcs	r3, #4
 8001c40:	61bb      	str	r3, [r7, #24]
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	3304      	adds	r3, #4
 8001c46:	2b06      	cmp	r3, #6
 8001c48:	d902      	bls.n	8001c50 <NVIC_EncodePriority+0x30>
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	3b03      	subs	r3, #3
 8001c4e:	e000      	b.n	8001c52 <NVIC_EncodePriority+0x32>
 8001c50:	2300      	movs	r3, #0
 8001c52:	617b      	str	r3, [r7, #20]
 8001c54:	f04f 32ff 	mov.w	r2, #4294967295
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5e:	43da      	mvns	r2, r3
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	401a      	ands	r2, r3
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	409a      	lsls	r2, r3
 8001c68:	f04f 31ff 	mov.w	r1, #4294967295
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c72:	43d9      	mvns	r1, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	400b      	ands	r3, r1
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3724      	adds	r7, #36	; 0x24
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
	...

08001c88 <SysTick_Config>:
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	3b01      	subs	r3, #1
 8001c94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c98:	d301      	bcc.n	8001c9e <SysTick_Config+0x16>
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e00f      	b.n	8001cbe <SysTick_Config+0x36>
 8001c9e:	4a0a      	ldr	r2, [pc, #40]	; (8001cc8 <SysTick_Config+0x40>)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	6053      	str	r3, [r2, #4]
 8001ca6:	210f      	movs	r1, #15
 8001ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cac:	f7ff ff8e 	bl	8001bcc <__NVIC_SetPriority>
 8001cb0:	4b05      	ldr	r3, [pc, #20]	; (8001cc8 <SysTick_Config+0x40>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	609a      	str	r2, [r3, #8]
 8001cb6:	4b04      	ldr	r3, [pc, #16]	; (8001cc8 <SysTick_Config+0x40>)
 8001cb8:	2207      	movs	r2, #7
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	e000e010 	.word	0xe000e010

08001ccc <HAL_NVIC_SetPriorityGrouping>:
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f7ff ff29 	bl	8001b2c <__NVIC_SetPriorityGrouping>
 8001cda:	bf00      	nop
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <HAL_NVIC_SetPriority>:
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b086      	sub	sp, #24
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	4603      	mov	r3, r0
 8001cea:	60b9      	str	r1, [r7, #8]
 8001cec:	607a      	str	r2, [r7, #4]
 8001cee:	73fb      	strb	r3, [r7, #15]
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	617b      	str	r3, [r7, #20]
 8001cf4:	f7ff ff3e 	bl	8001b74 <__NVIC_GetPriorityGrouping>
 8001cf8:	6178      	str	r0, [r7, #20]
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	68b9      	ldr	r1, [r7, #8]
 8001cfe:	6978      	ldr	r0, [r7, #20]
 8001d00:	f7ff ff8e 	bl	8001c20 <NVIC_EncodePriority>
 8001d04:	4602      	mov	r2, r0
 8001d06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d0a:	4611      	mov	r1, r2
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff ff5d 	bl	8001bcc <__NVIC_SetPriority>
 8001d12:	bf00      	nop
 8001d14:	3718      	adds	r7, #24
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <HAL_NVIC_EnableIRQ>:
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b082      	sub	sp, #8
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	4603      	mov	r3, r0
 8001d22:	71fb      	strb	r3, [r7, #7]
 8001d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff ff31 	bl	8001b90 <__NVIC_EnableIRQ>
 8001d2e:	bf00      	nop
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <HAL_SYSTICK_Config>:
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b082      	sub	sp, #8
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f7ff ffa2 	bl	8001c88 <SysTick_Config>
 8001d44:	4603      	mov	r3, r0
 8001d46:	4618      	mov	r0, r3
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <HAL_DMA_Abort>:
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b084      	sub	sp, #16
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d5a:	60fb      	str	r3, [r7, #12]
 8001d5c:	f7ff feda 	bl	8001b14 <HAL_GetTick>
 8001d60:	60b8      	str	r0, [r7, #8]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d008      	beq.n	8001d80 <HAL_DMA_Abort+0x32>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2280      	movs	r2, #128	; 0x80
 8001d72:	655a      	str	r2, [r3, #84]	; 0x54
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e052      	b.n	8001e26 <HAL_DMA_Abort+0xd8>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f022 0216 	bic.w	r2, r2, #22
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	695a      	ldr	r2, [r3, #20]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d9e:	615a      	str	r2, [r3, #20]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d103      	bne.n	8001db0 <HAL_DMA_Abort+0x62>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d007      	beq.n	8001dc0 <HAL_DMA_Abort+0x72>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f022 0208 	bic.w	r2, r2, #8
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f022 0201 	bic.w	r2, r2, #1
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	e013      	b.n	8001dfa <HAL_DMA_Abort+0xac>
 8001dd2:	f7ff fe9f 	bl	8001b14 <HAL_GetTick>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	2b05      	cmp	r3, #5
 8001dde:	d90c      	bls.n	8001dfa <HAL_DMA_Abort+0xac>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2220      	movs	r2, #32
 8001de4:	655a      	str	r2, [r3, #84]	; 0x54
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2203      	movs	r2, #3
 8001dea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8001df6:	2303      	movs	r3, #3
 8001df8:	e015      	b.n	8001e26 <HAL_DMA_Abort+0xd8>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0301 	and.w	r3, r3, #1
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d1e4      	bne.n	8001dd2 <HAL_DMA_Abort+0x84>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e0c:	223f      	movs	r2, #63	; 0x3f
 8001e0e:	409a      	lsls	r2, r3
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	609a      	str	r2, [r3, #8]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2201      	movs	r2, #1
 8001e18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8001e24:	2300      	movs	r3, #0
 8001e26:	4618      	mov	r0, r3
 8001e28:	3710      	adds	r7, #16
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <HAL_DMA_Abort_IT>:
 8001e2e:	b480      	push	{r7}
 8001e30:	b083      	sub	sp, #12
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d004      	beq.n	8001e4c <HAL_DMA_Abort_IT+0x1e>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2280      	movs	r2, #128	; 0x80
 8001e46:	655a      	str	r2, [r3, #84]	; 0x54
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e00c      	b.n	8001e66 <HAL_DMA_Abort_IT+0x38>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2205      	movs	r2, #5
 8001e50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f022 0201 	bic.w	r2, r2, #1
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	2300      	movs	r3, #0
 8001e66:	4618      	mov	r0, r3
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
	...

08001e74 <HAL_GPIO_Init>:
 8001e74:	b480      	push	{r7}
 8001e76:	b089      	sub	sp, #36	; 0x24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
 8001e7e:	2300      	movs	r3, #0
 8001e80:	61fb      	str	r3, [r7, #28]
 8001e82:	2300      	movs	r3, #0
 8001e84:	617b      	str	r3, [r7, #20]
 8001e86:	2300      	movs	r3, #0
 8001e88:	613b      	str	r3, [r7, #16]
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61bb      	str	r3, [r7, #24]
 8001e8e:	2300      	movs	r3, #0
 8001e90:	61fb      	str	r3, [r7, #28]
 8001e92:	e175      	b.n	8002180 <HAL_GPIO_Init+0x30c>
 8001e94:	2201      	movs	r2, #1
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	617b      	str	r3, [r7, #20]
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	697a      	ldr	r2, [r7, #20]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	613b      	str	r3, [r7, #16]
 8001ea8:	693a      	ldr	r2, [r7, #16]
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	f040 8164 	bne.w	800217a <HAL_GPIO_Init+0x306>
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f003 0303 	and.w	r3, r3, #3
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d005      	beq.n	8001eca <HAL_GPIO_Init+0x56>
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f003 0303 	and.w	r3, r3, #3
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d130      	bne.n	8001f2c <HAL_GPIO_Init+0xb8>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	61bb      	str	r3, [r7, #24]
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	2203      	movs	r2, #3
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	43db      	mvns	r3, r3
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	68da      	ldr	r2, [r3, #12]
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	fa02 f303 	lsl.w	r3, r2, r3
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	609a      	str	r2, [r3, #8]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	61bb      	str	r3, [r7, #24]
 8001f00:	2201      	movs	r2, #1
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	091b      	lsrs	r3, r3, #4
 8001f16:	f003 0201 	and.w	r2, r3, #1
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	605a      	str	r2, [r3, #4]
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f003 0303 	and.w	r3, r3, #3
 8001f34:	2b03      	cmp	r3, #3
 8001f36:	d017      	beq.n	8001f68 <HAL_GPIO_Init+0xf4>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	61bb      	str	r3, [r7, #24]
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	2203      	movs	r2, #3
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	61bb      	str	r3, [r7, #24]
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	689a      	ldr	r2, [r3, #8]
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	60da      	str	r2, [r3, #12]
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f003 0303 	and.w	r3, r3, #3
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d123      	bne.n	8001fbc <HAL_GPIO_Init+0x148>
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	08da      	lsrs	r2, r3, #3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	3208      	adds	r2, #8
 8001f7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f80:	61bb      	str	r3, [r7, #24]
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	f003 0307 	and.w	r3, r3, #7
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	220f      	movs	r2, #15
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	43db      	mvns	r3, r3
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	4013      	ands	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	691a      	ldr	r2, [r3, #16]
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	f003 0307 	and.w	r3, r3, #7
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	61bb      	str	r3, [r7, #24]
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	08da      	lsrs	r2, r3, #3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	3208      	adds	r2, #8
 8001fb6:	69b9      	ldr	r1, [r7, #24]
 8001fb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	61bb      	str	r3, [r7, #24]
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	2203      	movs	r2, #3
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	61bb      	str	r3, [r7, #24]
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f003 0203 	and.w	r2, r3, #3
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	61bb      	str	r3, [r7, #24]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	601a      	str	r2, [r3, #0]
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	f000 80be 	beq.w	800217a <HAL_GPIO_Init+0x306>
 8001ffe:	4b66      	ldr	r3, [pc, #408]	; (8002198 <HAL_GPIO_Init+0x324>)
 8002000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002002:	4a65      	ldr	r2, [pc, #404]	; (8002198 <HAL_GPIO_Init+0x324>)
 8002004:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002008:	6453      	str	r3, [r2, #68]	; 0x44
 800200a:	4b63      	ldr	r3, [pc, #396]	; (8002198 <HAL_GPIO_Init+0x324>)
 800200c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002012:	60fb      	str	r3, [r7, #12]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	4a61      	ldr	r2, [pc, #388]	; (800219c <HAL_GPIO_Init+0x328>)
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	089b      	lsrs	r3, r3, #2
 800201c:	3302      	adds	r3, #2
 800201e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002022:	61bb      	str	r3, [r7, #24]
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	f003 0303 	and.w	r3, r3, #3
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	220f      	movs	r2, #15
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	43db      	mvns	r3, r3
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	4013      	ands	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a58      	ldr	r2, [pc, #352]	; (80021a0 <HAL_GPIO_Init+0x32c>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d037      	beq.n	80020b2 <HAL_GPIO_Init+0x23e>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a57      	ldr	r2, [pc, #348]	; (80021a4 <HAL_GPIO_Init+0x330>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d031      	beq.n	80020ae <HAL_GPIO_Init+0x23a>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a56      	ldr	r2, [pc, #344]	; (80021a8 <HAL_GPIO_Init+0x334>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d02b      	beq.n	80020aa <HAL_GPIO_Init+0x236>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a55      	ldr	r2, [pc, #340]	; (80021ac <HAL_GPIO_Init+0x338>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d025      	beq.n	80020a6 <HAL_GPIO_Init+0x232>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a54      	ldr	r2, [pc, #336]	; (80021b0 <HAL_GPIO_Init+0x33c>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d01f      	beq.n	80020a2 <HAL_GPIO_Init+0x22e>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a53      	ldr	r2, [pc, #332]	; (80021b4 <HAL_GPIO_Init+0x340>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d019      	beq.n	800209e <HAL_GPIO_Init+0x22a>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a52      	ldr	r2, [pc, #328]	; (80021b8 <HAL_GPIO_Init+0x344>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d013      	beq.n	800209a <HAL_GPIO_Init+0x226>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a51      	ldr	r2, [pc, #324]	; (80021bc <HAL_GPIO_Init+0x348>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d00d      	beq.n	8002096 <HAL_GPIO_Init+0x222>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a50      	ldr	r2, [pc, #320]	; (80021c0 <HAL_GPIO_Init+0x34c>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d007      	beq.n	8002092 <HAL_GPIO_Init+0x21e>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a4f      	ldr	r2, [pc, #316]	; (80021c4 <HAL_GPIO_Init+0x350>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d101      	bne.n	800208e <HAL_GPIO_Init+0x21a>
 800208a:	2309      	movs	r3, #9
 800208c:	e012      	b.n	80020b4 <HAL_GPIO_Init+0x240>
 800208e:	230a      	movs	r3, #10
 8002090:	e010      	b.n	80020b4 <HAL_GPIO_Init+0x240>
 8002092:	2308      	movs	r3, #8
 8002094:	e00e      	b.n	80020b4 <HAL_GPIO_Init+0x240>
 8002096:	2307      	movs	r3, #7
 8002098:	e00c      	b.n	80020b4 <HAL_GPIO_Init+0x240>
 800209a:	2306      	movs	r3, #6
 800209c:	e00a      	b.n	80020b4 <HAL_GPIO_Init+0x240>
 800209e:	2305      	movs	r3, #5
 80020a0:	e008      	b.n	80020b4 <HAL_GPIO_Init+0x240>
 80020a2:	2304      	movs	r3, #4
 80020a4:	e006      	b.n	80020b4 <HAL_GPIO_Init+0x240>
 80020a6:	2303      	movs	r3, #3
 80020a8:	e004      	b.n	80020b4 <HAL_GPIO_Init+0x240>
 80020aa:	2302      	movs	r3, #2
 80020ac:	e002      	b.n	80020b4 <HAL_GPIO_Init+0x240>
 80020ae:	2301      	movs	r3, #1
 80020b0:	e000      	b.n	80020b4 <HAL_GPIO_Init+0x240>
 80020b2:	2300      	movs	r3, #0
 80020b4:	69fa      	ldr	r2, [r7, #28]
 80020b6:	f002 0203 	and.w	r2, r2, #3
 80020ba:	0092      	lsls	r2, r2, #2
 80020bc:	4093      	lsls	r3, r2
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
 80020c4:	4935      	ldr	r1, [pc, #212]	; (800219c <HAL_GPIO_Init+0x328>)
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	089b      	lsrs	r3, r3, #2
 80020ca:	3302      	adds	r3, #2
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80020d2:	4b3d      	ldr	r3, [pc, #244]	; (80021c8 <HAL_GPIO_Init+0x354>)
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	61bb      	str	r3, [r7, #24]
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	43db      	mvns	r3, r3
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	4013      	ands	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d003      	beq.n	80020f6 <HAL_GPIO_Init+0x282>
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
 80020f6:	4a34      	ldr	r2, [pc, #208]	; (80021c8 <HAL_GPIO_Init+0x354>)
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	6093      	str	r3, [r2, #8]
 80020fc:	4b32      	ldr	r3, [pc, #200]	; (80021c8 <HAL_GPIO_Init+0x354>)
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	61bb      	str	r3, [r7, #24]
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	43db      	mvns	r3, r3
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	4013      	ands	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d003      	beq.n	8002120 <HAL_GPIO_Init+0x2ac>
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	4313      	orrs	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
 8002120:	4a29      	ldr	r2, [pc, #164]	; (80021c8 <HAL_GPIO_Init+0x354>)
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	60d3      	str	r3, [r2, #12]
 8002126:	4b28      	ldr	r3, [pc, #160]	; (80021c8 <HAL_GPIO_Init+0x354>)
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	61bb      	str	r3, [r7, #24]
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	43db      	mvns	r3, r3
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	4013      	ands	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d003      	beq.n	800214a <HAL_GPIO_Init+0x2d6>
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	4313      	orrs	r3, r2
 8002148:	61bb      	str	r3, [r7, #24]
 800214a:	4a1f      	ldr	r2, [pc, #124]	; (80021c8 <HAL_GPIO_Init+0x354>)
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	6053      	str	r3, [r2, #4]
 8002150:	4b1d      	ldr	r3, [pc, #116]	; (80021c8 <HAL_GPIO_Init+0x354>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	61bb      	str	r3, [r7, #24]
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	43db      	mvns	r3, r3
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	4013      	ands	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d003      	beq.n	8002174 <HAL_GPIO_Init+0x300>
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	4313      	orrs	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]
 8002174:	4a14      	ldr	r2, [pc, #80]	; (80021c8 <HAL_GPIO_Init+0x354>)
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	6013      	str	r3, [r2, #0]
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	3301      	adds	r3, #1
 800217e:	61fb      	str	r3, [r7, #28]
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	2b0f      	cmp	r3, #15
 8002184:	f67f ae86 	bls.w	8001e94 <HAL_GPIO_Init+0x20>
 8002188:	bf00      	nop
 800218a:	bf00      	nop
 800218c:	3724      	adds	r7, #36	; 0x24
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	40023800 	.word	0x40023800
 800219c:	40013800 	.word	0x40013800
 80021a0:	40020000 	.word	0x40020000
 80021a4:	40020400 	.word	0x40020400
 80021a8:	40020800 	.word	0x40020800
 80021ac:	40020c00 	.word	0x40020c00
 80021b0:	40021000 	.word	0x40021000
 80021b4:	40021400 	.word	0x40021400
 80021b8:	40021800 	.word	0x40021800
 80021bc:	40021c00 	.word	0x40021c00
 80021c0:	40022000 	.word	0x40022000
 80021c4:	40022400 	.word	0x40022400
 80021c8:	40013c00 	.word	0x40013c00

080021cc <HAL_GPIO_WritePin>:
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	460b      	mov	r3, r1
 80021d6:	807b      	strh	r3, [r7, #2]
 80021d8:	4613      	mov	r3, r2
 80021da:	707b      	strb	r3, [r7, #1]
 80021dc:	787b      	ldrb	r3, [r7, #1]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d003      	beq.n	80021ea <HAL_GPIO_WritePin+0x1e>
 80021e2:	887a      	ldrh	r2, [r7, #2]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	619a      	str	r2, [r3, #24]
 80021e8:	e003      	b.n	80021f2 <HAL_GPIO_WritePin+0x26>
 80021ea:	887b      	ldrh	r3, [r7, #2]
 80021ec:	041a      	lsls	r2, r3, #16
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	619a      	str	r2, [r3, #24]
 80021f2:	bf00      	nop
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr

080021fe <HAL_GPIO_TogglePin>:
 80021fe:	b480      	push	{r7}
 8002200:	b085      	sub	sp, #20
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
 8002206:	460b      	mov	r3, r1
 8002208:	807b      	strh	r3, [r7, #2]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	695b      	ldr	r3, [r3, #20]
 800220e:	60fb      	str	r3, [r7, #12]
 8002210:	887a      	ldrh	r2, [r7, #2]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	4013      	ands	r3, r2
 8002216:	041a      	lsls	r2, r3, #16
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	43d9      	mvns	r1, r3
 800221c:	887b      	ldrh	r3, [r7, #2]
 800221e:	400b      	ands	r3, r1
 8002220:	431a      	orrs	r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	619a      	str	r2, [r3, #24]
 8002226:	bf00      	nop
 8002228:	3714      	adds	r7, #20
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
	...

08002234 <HAL_PWREx_EnableOverDrive>:
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	2300      	movs	r3, #0
 800223c:	607b      	str	r3, [r7, #4]
 800223e:	4b23      	ldr	r3, [pc, #140]	; (80022cc <HAL_PWREx_EnableOverDrive+0x98>)
 8002240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002242:	4a22      	ldr	r2, [pc, #136]	; (80022cc <HAL_PWREx_EnableOverDrive+0x98>)
 8002244:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002248:	6413      	str	r3, [r2, #64]	; 0x40
 800224a:	4b20      	ldr	r3, [pc, #128]	; (80022cc <HAL_PWREx_EnableOverDrive+0x98>)
 800224c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002252:	603b      	str	r3, [r7, #0]
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	4b1e      	ldr	r3, [pc, #120]	; (80022d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a1d      	ldr	r2, [pc, #116]	; (80022d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800225c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002260:	6013      	str	r3, [r2, #0]
 8002262:	f7ff fc57 	bl	8001b14 <HAL_GetTick>
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	e009      	b.n	800227e <HAL_PWREx_EnableOverDrive+0x4a>
 800226a:	f7ff fc53 	bl	8001b14 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002278:	d901      	bls.n	800227e <HAL_PWREx_EnableOverDrive+0x4a>
 800227a:	2303      	movs	r3, #3
 800227c:	e022      	b.n	80022c4 <HAL_PWREx_EnableOverDrive+0x90>
 800227e:	4b14      	ldr	r3, [pc, #80]	; (80022d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002286:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800228a:	d1ee      	bne.n	800226a <HAL_PWREx_EnableOverDrive+0x36>
 800228c:	4b10      	ldr	r3, [pc, #64]	; (80022d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a0f      	ldr	r2, [pc, #60]	; (80022d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002292:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002296:	6013      	str	r3, [r2, #0]
 8002298:	f7ff fc3c 	bl	8001b14 <HAL_GetTick>
 800229c:	6078      	str	r0, [r7, #4]
 800229e:	e009      	b.n	80022b4 <HAL_PWREx_EnableOverDrive+0x80>
 80022a0:	f7ff fc38 	bl	8001b14 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022ae:	d901      	bls.n	80022b4 <HAL_PWREx_EnableOverDrive+0x80>
 80022b0:	2303      	movs	r3, #3
 80022b2:	e007      	b.n	80022c4 <HAL_PWREx_EnableOverDrive+0x90>
 80022b4:	4b06      	ldr	r3, [pc, #24]	; (80022d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80022c0:	d1ee      	bne.n	80022a0 <HAL_PWREx_EnableOverDrive+0x6c>
 80022c2:	2300      	movs	r3, #0
 80022c4:	4618      	mov	r0, r3
 80022c6:	3708      	adds	r7, #8
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	40023800 	.word	0x40023800
 80022d0:	40007000 	.word	0x40007000

080022d4 <HAL_RCC_OscConfig>:
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	2300      	movs	r3, #0
 80022de:	75fb      	strb	r3, [r7, #23]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d101      	bne.n	80022ea <HAL_RCC_OscConfig+0x16>
 80022e6:	2301      	movs	r3, #1
 80022e8:	e291      	b.n	800280e <HAL_RCC_OscConfig+0x53a>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	f000 8087 	beq.w	8002406 <HAL_RCC_OscConfig+0x132>
 80022f8:	4b96      	ldr	r3, [pc, #600]	; (8002554 <HAL_RCC_OscConfig+0x280>)
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f003 030c 	and.w	r3, r3, #12
 8002300:	2b04      	cmp	r3, #4
 8002302:	d00c      	beq.n	800231e <HAL_RCC_OscConfig+0x4a>
 8002304:	4b93      	ldr	r3, [pc, #588]	; (8002554 <HAL_RCC_OscConfig+0x280>)
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f003 030c 	and.w	r3, r3, #12
 800230c:	2b08      	cmp	r3, #8
 800230e:	d112      	bne.n	8002336 <HAL_RCC_OscConfig+0x62>
 8002310:	4b90      	ldr	r3, [pc, #576]	; (8002554 <HAL_RCC_OscConfig+0x280>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002318:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800231c:	d10b      	bne.n	8002336 <HAL_RCC_OscConfig+0x62>
 800231e:	4b8d      	ldr	r3, [pc, #564]	; (8002554 <HAL_RCC_OscConfig+0x280>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d06c      	beq.n	8002404 <HAL_RCC_OscConfig+0x130>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d168      	bne.n	8002404 <HAL_RCC_OscConfig+0x130>
 8002332:	2301      	movs	r3, #1
 8002334:	e26b      	b.n	800280e <HAL_RCC_OscConfig+0x53a>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800233e:	d106      	bne.n	800234e <HAL_RCC_OscConfig+0x7a>
 8002340:	4b84      	ldr	r3, [pc, #528]	; (8002554 <HAL_RCC_OscConfig+0x280>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a83      	ldr	r2, [pc, #524]	; (8002554 <HAL_RCC_OscConfig+0x280>)
 8002346:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800234a:	6013      	str	r3, [r2, #0]
 800234c:	e02e      	b.n	80023ac <HAL_RCC_OscConfig+0xd8>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d10c      	bne.n	8002370 <HAL_RCC_OscConfig+0x9c>
 8002356:	4b7f      	ldr	r3, [pc, #508]	; (8002554 <HAL_RCC_OscConfig+0x280>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a7e      	ldr	r2, [pc, #504]	; (8002554 <HAL_RCC_OscConfig+0x280>)
 800235c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002360:	6013      	str	r3, [r2, #0]
 8002362:	4b7c      	ldr	r3, [pc, #496]	; (8002554 <HAL_RCC_OscConfig+0x280>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a7b      	ldr	r2, [pc, #492]	; (8002554 <HAL_RCC_OscConfig+0x280>)
 8002368:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800236c:	6013      	str	r3, [r2, #0]
 800236e:	e01d      	b.n	80023ac <HAL_RCC_OscConfig+0xd8>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002378:	d10c      	bne.n	8002394 <HAL_RCC_OscConfig+0xc0>
 800237a:	4b76      	ldr	r3, [pc, #472]	; (8002554 <HAL_RCC_OscConfig+0x280>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a75      	ldr	r2, [pc, #468]	; (8002554 <HAL_RCC_OscConfig+0x280>)
 8002380:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002384:	6013      	str	r3, [r2, #0]
 8002386:	4b73      	ldr	r3, [pc, #460]	; (8002554 <HAL_RCC_OscConfig+0x280>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a72      	ldr	r2, [pc, #456]	; (8002554 <HAL_RCC_OscConfig+0x280>)
 800238c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002390:	6013      	str	r3, [r2, #0]
 8002392:	e00b      	b.n	80023ac <HAL_RCC_OscConfig+0xd8>
 8002394:	4b6f      	ldr	r3, [pc, #444]	; (8002554 <HAL_RCC_OscConfig+0x280>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a6e      	ldr	r2, [pc, #440]	; (8002554 <HAL_RCC_OscConfig+0x280>)
 800239a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800239e:	6013      	str	r3, [r2, #0]
 80023a0:	4b6c      	ldr	r3, [pc, #432]	; (8002554 <HAL_RCC_OscConfig+0x280>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a6b      	ldr	r2, [pc, #428]	; (8002554 <HAL_RCC_OscConfig+0x280>)
 80023a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023aa:	6013      	str	r3, [r2, #0]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d013      	beq.n	80023dc <HAL_RCC_OscConfig+0x108>
 80023b4:	f7ff fbae 	bl	8001b14 <HAL_GetTick>
 80023b8:	6138      	str	r0, [r7, #16]
 80023ba:	e008      	b.n	80023ce <HAL_RCC_OscConfig+0xfa>
 80023bc:	f7ff fbaa 	bl	8001b14 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b64      	cmp	r3, #100	; 0x64
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0xfa>
 80023ca:	2303      	movs	r3, #3
 80023cc:	e21f      	b.n	800280e <HAL_RCC_OscConfig+0x53a>
 80023ce:	4b61      	ldr	r3, [pc, #388]	; (8002554 <HAL_RCC_OscConfig+0x280>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d0f0      	beq.n	80023bc <HAL_RCC_OscConfig+0xe8>
 80023da:	e014      	b.n	8002406 <HAL_RCC_OscConfig+0x132>
 80023dc:	f7ff fb9a 	bl	8001b14 <HAL_GetTick>
 80023e0:	6138      	str	r0, [r7, #16]
 80023e2:	e008      	b.n	80023f6 <HAL_RCC_OscConfig+0x122>
 80023e4:	f7ff fb96 	bl	8001b14 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b64      	cmp	r3, #100	; 0x64
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0x122>
 80023f2:	2303      	movs	r3, #3
 80023f4:	e20b      	b.n	800280e <HAL_RCC_OscConfig+0x53a>
 80023f6:	4b57      	ldr	r3, [pc, #348]	; (8002554 <HAL_RCC_OscConfig+0x280>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1f0      	bne.n	80023e4 <HAL_RCC_OscConfig+0x110>
 8002402:	e000      	b.n	8002406 <HAL_RCC_OscConfig+0x132>
 8002404:	bf00      	nop
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d069      	beq.n	80024e6 <HAL_RCC_OscConfig+0x212>
 8002412:	4b50      	ldr	r3, [pc, #320]	; (8002554 <HAL_RCC_OscConfig+0x280>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f003 030c 	and.w	r3, r3, #12
 800241a:	2b00      	cmp	r3, #0
 800241c:	d00b      	beq.n	8002436 <HAL_RCC_OscConfig+0x162>
 800241e:	4b4d      	ldr	r3, [pc, #308]	; (8002554 <HAL_RCC_OscConfig+0x280>)
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f003 030c 	and.w	r3, r3, #12
 8002426:	2b08      	cmp	r3, #8
 8002428:	d11c      	bne.n	8002464 <HAL_RCC_OscConfig+0x190>
 800242a:	4b4a      	ldr	r3, [pc, #296]	; (8002554 <HAL_RCC_OscConfig+0x280>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d116      	bne.n	8002464 <HAL_RCC_OscConfig+0x190>
 8002436:	4b47      	ldr	r3, [pc, #284]	; (8002554 <HAL_RCC_OscConfig+0x280>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d005      	beq.n	800244e <HAL_RCC_OscConfig+0x17a>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	2b01      	cmp	r3, #1
 8002448:	d001      	beq.n	800244e <HAL_RCC_OscConfig+0x17a>
 800244a:	2301      	movs	r3, #1
 800244c:	e1df      	b.n	800280e <HAL_RCC_OscConfig+0x53a>
 800244e:	4b41      	ldr	r3, [pc, #260]	; (8002554 <HAL_RCC_OscConfig+0x280>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	00db      	lsls	r3, r3, #3
 800245c:	493d      	ldr	r1, [pc, #244]	; (8002554 <HAL_RCC_OscConfig+0x280>)
 800245e:	4313      	orrs	r3, r2
 8002460:	600b      	str	r3, [r1, #0]
 8002462:	e040      	b.n	80024e6 <HAL_RCC_OscConfig+0x212>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d023      	beq.n	80024b4 <HAL_RCC_OscConfig+0x1e0>
 800246c:	4b39      	ldr	r3, [pc, #228]	; (8002554 <HAL_RCC_OscConfig+0x280>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a38      	ldr	r2, [pc, #224]	; (8002554 <HAL_RCC_OscConfig+0x280>)
 8002472:	f043 0301 	orr.w	r3, r3, #1
 8002476:	6013      	str	r3, [r2, #0]
 8002478:	f7ff fb4c 	bl	8001b14 <HAL_GetTick>
 800247c:	6138      	str	r0, [r7, #16]
 800247e:	e008      	b.n	8002492 <HAL_RCC_OscConfig+0x1be>
 8002480:	f7ff fb48 	bl	8001b14 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b02      	cmp	r3, #2
 800248c:	d901      	bls.n	8002492 <HAL_RCC_OscConfig+0x1be>
 800248e:	2303      	movs	r3, #3
 8002490:	e1bd      	b.n	800280e <HAL_RCC_OscConfig+0x53a>
 8002492:	4b30      	ldr	r3, [pc, #192]	; (8002554 <HAL_RCC_OscConfig+0x280>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	2b00      	cmp	r3, #0
 800249c:	d0f0      	beq.n	8002480 <HAL_RCC_OscConfig+0x1ac>
 800249e:	4b2d      	ldr	r3, [pc, #180]	; (8002554 <HAL_RCC_OscConfig+0x280>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	00db      	lsls	r3, r3, #3
 80024ac:	4929      	ldr	r1, [pc, #164]	; (8002554 <HAL_RCC_OscConfig+0x280>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	600b      	str	r3, [r1, #0]
 80024b2:	e018      	b.n	80024e6 <HAL_RCC_OscConfig+0x212>
 80024b4:	4b27      	ldr	r3, [pc, #156]	; (8002554 <HAL_RCC_OscConfig+0x280>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a26      	ldr	r2, [pc, #152]	; (8002554 <HAL_RCC_OscConfig+0x280>)
 80024ba:	f023 0301 	bic.w	r3, r3, #1
 80024be:	6013      	str	r3, [r2, #0]
 80024c0:	f7ff fb28 	bl	8001b14 <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]
 80024c6:	e008      	b.n	80024da <HAL_RCC_OscConfig+0x206>
 80024c8:	f7ff fb24 	bl	8001b14 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0x206>
 80024d6:	2303      	movs	r3, #3
 80024d8:	e199      	b.n	800280e <HAL_RCC_OscConfig+0x53a>
 80024da:	4b1e      	ldr	r3, [pc, #120]	; (8002554 <HAL_RCC_OscConfig+0x280>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d1f0      	bne.n	80024c8 <HAL_RCC_OscConfig+0x1f4>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0308 	and.w	r3, r3, #8
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d038      	beq.n	8002564 <HAL_RCC_OscConfig+0x290>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	695b      	ldr	r3, [r3, #20]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d019      	beq.n	800252e <HAL_RCC_OscConfig+0x25a>
 80024fa:	4b16      	ldr	r3, [pc, #88]	; (8002554 <HAL_RCC_OscConfig+0x280>)
 80024fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024fe:	4a15      	ldr	r2, [pc, #84]	; (8002554 <HAL_RCC_OscConfig+0x280>)
 8002500:	f043 0301 	orr.w	r3, r3, #1
 8002504:	6753      	str	r3, [r2, #116]	; 0x74
 8002506:	f7ff fb05 	bl	8001b14 <HAL_GetTick>
 800250a:	6138      	str	r0, [r7, #16]
 800250c:	e008      	b.n	8002520 <HAL_RCC_OscConfig+0x24c>
 800250e:	f7ff fb01 	bl	8001b14 <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	2b02      	cmp	r3, #2
 800251a:	d901      	bls.n	8002520 <HAL_RCC_OscConfig+0x24c>
 800251c:	2303      	movs	r3, #3
 800251e:	e176      	b.n	800280e <HAL_RCC_OscConfig+0x53a>
 8002520:	4b0c      	ldr	r3, [pc, #48]	; (8002554 <HAL_RCC_OscConfig+0x280>)
 8002522:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002524:	f003 0302 	and.w	r3, r3, #2
 8002528:	2b00      	cmp	r3, #0
 800252a:	d0f0      	beq.n	800250e <HAL_RCC_OscConfig+0x23a>
 800252c:	e01a      	b.n	8002564 <HAL_RCC_OscConfig+0x290>
 800252e:	4b09      	ldr	r3, [pc, #36]	; (8002554 <HAL_RCC_OscConfig+0x280>)
 8002530:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002532:	4a08      	ldr	r2, [pc, #32]	; (8002554 <HAL_RCC_OscConfig+0x280>)
 8002534:	f023 0301 	bic.w	r3, r3, #1
 8002538:	6753      	str	r3, [r2, #116]	; 0x74
 800253a:	f7ff faeb 	bl	8001b14 <HAL_GetTick>
 800253e:	6138      	str	r0, [r7, #16]
 8002540:	e00a      	b.n	8002558 <HAL_RCC_OscConfig+0x284>
 8002542:	f7ff fae7 	bl	8001b14 <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	2b02      	cmp	r3, #2
 800254e:	d903      	bls.n	8002558 <HAL_RCC_OscConfig+0x284>
 8002550:	2303      	movs	r3, #3
 8002552:	e15c      	b.n	800280e <HAL_RCC_OscConfig+0x53a>
 8002554:	40023800 	.word	0x40023800
 8002558:	4b91      	ldr	r3, [pc, #580]	; (80027a0 <HAL_RCC_OscConfig+0x4cc>)
 800255a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800255c:	f003 0302 	and.w	r3, r3, #2
 8002560:	2b00      	cmp	r3, #0
 8002562:	d1ee      	bne.n	8002542 <HAL_RCC_OscConfig+0x26e>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0304 	and.w	r3, r3, #4
 800256c:	2b00      	cmp	r3, #0
 800256e:	f000 80a4 	beq.w	80026ba <HAL_RCC_OscConfig+0x3e6>
 8002572:	4b8b      	ldr	r3, [pc, #556]	; (80027a0 <HAL_RCC_OscConfig+0x4cc>)
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d10d      	bne.n	800259a <HAL_RCC_OscConfig+0x2c6>
 800257e:	4b88      	ldr	r3, [pc, #544]	; (80027a0 <HAL_RCC_OscConfig+0x4cc>)
 8002580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002582:	4a87      	ldr	r2, [pc, #540]	; (80027a0 <HAL_RCC_OscConfig+0x4cc>)
 8002584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002588:	6413      	str	r3, [r2, #64]	; 0x40
 800258a:	4b85      	ldr	r3, [pc, #532]	; (80027a0 <HAL_RCC_OscConfig+0x4cc>)
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002592:	60bb      	str	r3, [r7, #8]
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	2301      	movs	r3, #1
 8002598:	75fb      	strb	r3, [r7, #23]
 800259a:	4b82      	ldr	r3, [pc, #520]	; (80027a4 <HAL_RCC_OscConfig+0x4d0>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d118      	bne.n	80025d8 <HAL_RCC_OscConfig+0x304>
 80025a6:	4b7f      	ldr	r3, [pc, #508]	; (80027a4 <HAL_RCC_OscConfig+0x4d0>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a7e      	ldr	r2, [pc, #504]	; (80027a4 <HAL_RCC_OscConfig+0x4d0>)
 80025ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025b0:	6013      	str	r3, [r2, #0]
 80025b2:	f7ff faaf 	bl	8001b14 <HAL_GetTick>
 80025b6:	6138      	str	r0, [r7, #16]
 80025b8:	e008      	b.n	80025cc <HAL_RCC_OscConfig+0x2f8>
 80025ba:	f7ff faab 	bl	8001b14 <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	2b64      	cmp	r3, #100	; 0x64
 80025c6:	d901      	bls.n	80025cc <HAL_RCC_OscConfig+0x2f8>
 80025c8:	2303      	movs	r3, #3
 80025ca:	e120      	b.n	800280e <HAL_RCC_OscConfig+0x53a>
 80025cc:	4b75      	ldr	r3, [pc, #468]	; (80027a4 <HAL_RCC_OscConfig+0x4d0>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d0f0      	beq.n	80025ba <HAL_RCC_OscConfig+0x2e6>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d106      	bne.n	80025ee <HAL_RCC_OscConfig+0x31a>
 80025e0:	4b6f      	ldr	r3, [pc, #444]	; (80027a0 <HAL_RCC_OscConfig+0x4cc>)
 80025e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e4:	4a6e      	ldr	r2, [pc, #440]	; (80027a0 <HAL_RCC_OscConfig+0x4cc>)
 80025e6:	f043 0301 	orr.w	r3, r3, #1
 80025ea:	6713      	str	r3, [r2, #112]	; 0x70
 80025ec:	e02d      	b.n	800264a <HAL_RCC_OscConfig+0x376>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d10c      	bne.n	8002610 <HAL_RCC_OscConfig+0x33c>
 80025f6:	4b6a      	ldr	r3, [pc, #424]	; (80027a0 <HAL_RCC_OscConfig+0x4cc>)
 80025f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025fa:	4a69      	ldr	r2, [pc, #420]	; (80027a0 <HAL_RCC_OscConfig+0x4cc>)
 80025fc:	f023 0301 	bic.w	r3, r3, #1
 8002600:	6713      	str	r3, [r2, #112]	; 0x70
 8002602:	4b67      	ldr	r3, [pc, #412]	; (80027a0 <HAL_RCC_OscConfig+0x4cc>)
 8002604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002606:	4a66      	ldr	r2, [pc, #408]	; (80027a0 <HAL_RCC_OscConfig+0x4cc>)
 8002608:	f023 0304 	bic.w	r3, r3, #4
 800260c:	6713      	str	r3, [r2, #112]	; 0x70
 800260e:	e01c      	b.n	800264a <HAL_RCC_OscConfig+0x376>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	2b05      	cmp	r3, #5
 8002616:	d10c      	bne.n	8002632 <HAL_RCC_OscConfig+0x35e>
 8002618:	4b61      	ldr	r3, [pc, #388]	; (80027a0 <HAL_RCC_OscConfig+0x4cc>)
 800261a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800261c:	4a60      	ldr	r2, [pc, #384]	; (80027a0 <HAL_RCC_OscConfig+0x4cc>)
 800261e:	f043 0304 	orr.w	r3, r3, #4
 8002622:	6713      	str	r3, [r2, #112]	; 0x70
 8002624:	4b5e      	ldr	r3, [pc, #376]	; (80027a0 <HAL_RCC_OscConfig+0x4cc>)
 8002626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002628:	4a5d      	ldr	r2, [pc, #372]	; (80027a0 <HAL_RCC_OscConfig+0x4cc>)
 800262a:	f043 0301 	orr.w	r3, r3, #1
 800262e:	6713      	str	r3, [r2, #112]	; 0x70
 8002630:	e00b      	b.n	800264a <HAL_RCC_OscConfig+0x376>
 8002632:	4b5b      	ldr	r3, [pc, #364]	; (80027a0 <HAL_RCC_OscConfig+0x4cc>)
 8002634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002636:	4a5a      	ldr	r2, [pc, #360]	; (80027a0 <HAL_RCC_OscConfig+0x4cc>)
 8002638:	f023 0301 	bic.w	r3, r3, #1
 800263c:	6713      	str	r3, [r2, #112]	; 0x70
 800263e:	4b58      	ldr	r3, [pc, #352]	; (80027a0 <HAL_RCC_OscConfig+0x4cc>)
 8002640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002642:	4a57      	ldr	r2, [pc, #348]	; (80027a0 <HAL_RCC_OscConfig+0x4cc>)
 8002644:	f023 0304 	bic.w	r3, r3, #4
 8002648:	6713      	str	r3, [r2, #112]	; 0x70
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d015      	beq.n	800267e <HAL_RCC_OscConfig+0x3aa>
 8002652:	f7ff fa5f 	bl	8001b14 <HAL_GetTick>
 8002656:	6138      	str	r0, [r7, #16]
 8002658:	e00a      	b.n	8002670 <HAL_RCC_OscConfig+0x39c>
 800265a:	f7ff fa5b 	bl	8001b14 <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	f241 3288 	movw	r2, #5000	; 0x1388
 8002668:	4293      	cmp	r3, r2
 800266a:	d901      	bls.n	8002670 <HAL_RCC_OscConfig+0x39c>
 800266c:	2303      	movs	r3, #3
 800266e:	e0ce      	b.n	800280e <HAL_RCC_OscConfig+0x53a>
 8002670:	4b4b      	ldr	r3, [pc, #300]	; (80027a0 <HAL_RCC_OscConfig+0x4cc>)
 8002672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002674:	f003 0302 	and.w	r3, r3, #2
 8002678:	2b00      	cmp	r3, #0
 800267a:	d0ee      	beq.n	800265a <HAL_RCC_OscConfig+0x386>
 800267c:	e014      	b.n	80026a8 <HAL_RCC_OscConfig+0x3d4>
 800267e:	f7ff fa49 	bl	8001b14 <HAL_GetTick>
 8002682:	6138      	str	r0, [r7, #16]
 8002684:	e00a      	b.n	800269c <HAL_RCC_OscConfig+0x3c8>
 8002686:	f7ff fa45 	bl	8001b14 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	f241 3288 	movw	r2, #5000	; 0x1388
 8002694:	4293      	cmp	r3, r2
 8002696:	d901      	bls.n	800269c <HAL_RCC_OscConfig+0x3c8>
 8002698:	2303      	movs	r3, #3
 800269a:	e0b8      	b.n	800280e <HAL_RCC_OscConfig+0x53a>
 800269c:	4b40      	ldr	r3, [pc, #256]	; (80027a0 <HAL_RCC_OscConfig+0x4cc>)
 800269e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a0:	f003 0302 	and.w	r3, r3, #2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d1ee      	bne.n	8002686 <HAL_RCC_OscConfig+0x3b2>
 80026a8:	7dfb      	ldrb	r3, [r7, #23]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d105      	bne.n	80026ba <HAL_RCC_OscConfig+0x3e6>
 80026ae:	4b3c      	ldr	r3, [pc, #240]	; (80027a0 <HAL_RCC_OscConfig+0x4cc>)
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	4a3b      	ldr	r2, [pc, #236]	; (80027a0 <HAL_RCC_OscConfig+0x4cc>)
 80026b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026b8:	6413      	str	r3, [r2, #64]	; 0x40
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	699b      	ldr	r3, [r3, #24]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	f000 80a4 	beq.w	800280c <HAL_RCC_OscConfig+0x538>
 80026c4:	4b36      	ldr	r3, [pc, #216]	; (80027a0 <HAL_RCC_OscConfig+0x4cc>)
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f003 030c 	and.w	r3, r3, #12
 80026cc:	2b08      	cmp	r3, #8
 80026ce:	d06b      	beq.n	80027a8 <HAL_RCC_OscConfig+0x4d4>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d149      	bne.n	800276c <HAL_RCC_OscConfig+0x498>
 80026d8:	4b31      	ldr	r3, [pc, #196]	; (80027a0 <HAL_RCC_OscConfig+0x4cc>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a30      	ldr	r2, [pc, #192]	; (80027a0 <HAL_RCC_OscConfig+0x4cc>)
 80026de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026e2:	6013      	str	r3, [r2, #0]
 80026e4:	f7ff fa16 	bl	8001b14 <HAL_GetTick>
 80026e8:	6138      	str	r0, [r7, #16]
 80026ea:	e008      	b.n	80026fe <HAL_RCC_OscConfig+0x42a>
 80026ec:	f7ff fa12 	bl	8001b14 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_OscConfig+0x42a>
 80026fa:	2303      	movs	r3, #3
 80026fc:	e087      	b.n	800280e <HAL_RCC_OscConfig+0x53a>
 80026fe:	4b28      	ldr	r3, [pc, #160]	; (80027a0 <HAL_RCC_OscConfig+0x4cc>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1f0      	bne.n	80026ec <HAL_RCC_OscConfig+0x418>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	69da      	ldr	r2, [r3, #28]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a1b      	ldr	r3, [r3, #32]
 8002712:	431a      	orrs	r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002718:	019b      	lsls	r3, r3, #6
 800271a:	431a      	orrs	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002720:	085b      	lsrs	r3, r3, #1
 8002722:	3b01      	subs	r3, #1
 8002724:	041b      	lsls	r3, r3, #16
 8002726:	431a      	orrs	r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800272c:	061b      	lsls	r3, r3, #24
 800272e:	4313      	orrs	r3, r2
 8002730:	4a1b      	ldr	r2, [pc, #108]	; (80027a0 <HAL_RCC_OscConfig+0x4cc>)
 8002732:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002736:	6053      	str	r3, [r2, #4]
 8002738:	4b19      	ldr	r3, [pc, #100]	; (80027a0 <HAL_RCC_OscConfig+0x4cc>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a18      	ldr	r2, [pc, #96]	; (80027a0 <HAL_RCC_OscConfig+0x4cc>)
 800273e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002742:	6013      	str	r3, [r2, #0]
 8002744:	f7ff f9e6 	bl	8001b14 <HAL_GetTick>
 8002748:	6138      	str	r0, [r7, #16]
 800274a:	e008      	b.n	800275e <HAL_RCC_OscConfig+0x48a>
 800274c:	f7ff f9e2 	bl	8001b14 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b02      	cmp	r3, #2
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0x48a>
 800275a:	2303      	movs	r3, #3
 800275c:	e057      	b.n	800280e <HAL_RCC_OscConfig+0x53a>
 800275e:	4b10      	ldr	r3, [pc, #64]	; (80027a0 <HAL_RCC_OscConfig+0x4cc>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d0f0      	beq.n	800274c <HAL_RCC_OscConfig+0x478>
 800276a:	e04f      	b.n	800280c <HAL_RCC_OscConfig+0x538>
 800276c:	4b0c      	ldr	r3, [pc, #48]	; (80027a0 <HAL_RCC_OscConfig+0x4cc>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a0b      	ldr	r2, [pc, #44]	; (80027a0 <HAL_RCC_OscConfig+0x4cc>)
 8002772:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002776:	6013      	str	r3, [r2, #0]
 8002778:	f7ff f9cc 	bl	8001b14 <HAL_GetTick>
 800277c:	6138      	str	r0, [r7, #16]
 800277e:	e008      	b.n	8002792 <HAL_RCC_OscConfig+0x4be>
 8002780:	f7ff f9c8 	bl	8001b14 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x4be>
 800278e:	2303      	movs	r3, #3
 8002790:	e03d      	b.n	800280e <HAL_RCC_OscConfig+0x53a>
 8002792:	4b03      	ldr	r3, [pc, #12]	; (80027a0 <HAL_RCC_OscConfig+0x4cc>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1f0      	bne.n	8002780 <HAL_RCC_OscConfig+0x4ac>
 800279e:	e035      	b.n	800280c <HAL_RCC_OscConfig+0x538>
 80027a0:	40023800 	.word	0x40023800
 80027a4:	40007000 	.word	0x40007000
 80027a8:	4b1b      	ldr	r3, [pc, #108]	; (8002818 <HAL_RCC_OscConfig+0x544>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	60fb      	str	r3, [r7, #12]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	699b      	ldr	r3, [r3, #24]
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d028      	beq.n	8002808 <HAL_RCC_OscConfig+0x534>
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	69db      	ldr	r3, [r3, #28]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d121      	bne.n	8002808 <HAL_RCC_OscConfig+0x534>
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a1b      	ldr	r3, [r3, #32]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d11a      	bne.n	8002808 <HAL_RCC_OscConfig+0x534>
 80027d2:	68fa      	ldr	r2, [r7, #12]
 80027d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80027d8:	4013      	ands	r3, r2
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027de:	0192      	lsls	r2, r2, #6
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d111      	bne.n	8002808 <HAL_RCC_OscConfig+0x534>
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ee:	085b      	lsrs	r3, r3, #1
 80027f0:	3b01      	subs	r3, #1
 80027f2:	041b      	lsls	r3, r3, #16
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d107      	bne.n	8002808 <HAL_RCC_OscConfig+0x534>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002802:	061b      	lsls	r3, r3, #24
 8002804:	429a      	cmp	r2, r3
 8002806:	d001      	beq.n	800280c <HAL_RCC_OscConfig+0x538>
 8002808:	2301      	movs	r3, #1
 800280a:	e000      	b.n	800280e <HAL_RCC_OscConfig+0x53a>
 800280c:	2300      	movs	r3, #0
 800280e:	4618      	mov	r0, r3
 8002810:	3718      	adds	r7, #24
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	40023800 	.word	0x40023800

0800281c <HAL_RCC_ClockConfig>:
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
 8002826:	2300      	movs	r3, #0
 8002828:	60fb      	str	r3, [r7, #12]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d101      	bne.n	8002834 <HAL_RCC_ClockConfig+0x18>
 8002830:	2301      	movs	r3, #1
 8002832:	e0d0      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ba>
 8002834:	4b6a      	ldr	r3, [pc, #424]	; (80029e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 030f 	and.w	r3, r3, #15
 800283c:	683a      	ldr	r2, [r7, #0]
 800283e:	429a      	cmp	r2, r3
 8002840:	d910      	bls.n	8002864 <HAL_RCC_ClockConfig+0x48>
 8002842:	4b67      	ldr	r3, [pc, #412]	; (80029e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f023 020f 	bic.w	r2, r3, #15
 800284a:	4965      	ldr	r1, [pc, #404]	; (80029e0 <HAL_RCC_ClockConfig+0x1c4>)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	4313      	orrs	r3, r2
 8002850:	600b      	str	r3, [r1, #0]
 8002852:	4b63      	ldr	r3, [pc, #396]	; (80029e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 030f 	and.w	r3, r3, #15
 800285a:	683a      	ldr	r2, [r7, #0]
 800285c:	429a      	cmp	r2, r3
 800285e:	d001      	beq.n	8002864 <HAL_RCC_ClockConfig+0x48>
 8002860:	2301      	movs	r3, #1
 8002862:	e0b8      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ba>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0302 	and.w	r3, r3, #2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d020      	beq.n	80028b2 <HAL_RCC_ClockConfig+0x96>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0304 	and.w	r3, r3, #4
 8002878:	2b00      	cmp	r3, #0
 800287a:	d005      	beq.n	8002888 <HAL_RCC_ClockConfig+0x6c>
 800287c:	4b59      	ldr	r3, [pc, #356]	; (80029e4 <HAL_RCC_ClockConfig+0x1c8>)
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	4a58      	ldr	r2, [pc, #352]	; (80029e4 <HAL_RCC_ClockConfig+0x1c8>)
 8002882:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002886:	6093      	str	r3, [r2, #8]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0308 	and.w	r3, r3, #8
 8002890:	2b00      	cmp	r3, #0
 8002892:	d005      	beq.n	80028a0 <HAL_RCC_ClockConfig+0x84>
 8002894:	4b53      	ldr	r3, [pc, #332]	; (80029e4 <HAL_RCC_ClockConfig+0x1c8>)
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	4a52      	ldr	r2, [pc, #328]	; (80029e4 <HAL_RCC_ClockConfig+0x1c8>)
 800289a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800289e:	6093      	str	r3, [r2, #8]
 80028a0:	4b50      	ldr	r3, [pc, #320]	; (80029e4 <HAL_RCC_ClockConfig+0x1c8>)
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	494d      	ldr	r1, [pc, #308]	; (80029e4 <HAL_RCC_ClockConfig+0x1c8>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	608b      	str	r3, [r1, #8]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d040      	beq.n	8002940 <HAL_RCC_ClockConfig+0x124>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d107      	bne.n	80028d6 <HAL_RCC_ClockConfig+0xba>
 80028c6:	4b47      	ldr	r3, [pc, #284]	; (80029e4 <HAL_RCC_ClockConfig+0x1c8>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d115      	bne.n	80028fe <HAL_RCC_ClockConfig+0xe2>
 80028d2:	2301      	movs	r3, #1
 80028d4:	e07f      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ba>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d107      	bne.n	80028ee <HAL_RCC_ClockConfig+0xd2>
 80028de:	4b41      	ldr	r3, [pc, #260]	; (80029e4 <HAL_RCC_ClockConfig+0x1c8>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d109      	bne.n	80028fe <HAL_RCC_ClockConfig+0xe2>
 80028ea:	2301      	movs	r3, #1
 80028ec:	e073      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ba>
 80028ee:	4b3d      	ldr	r3, [pc, #244]	; (80029e4 <HAL_RCC_ClockConfig+0x1c8>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <HAL_RCC_ClockConfig+0xe2>
 80028fa:	2301      	movs	r3, #1
 80028fc:	e06b      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ba>
 80028fe:	4b39      	ldr	r3, [pc, #228]	; (80029e4 <HAL_RCC_ClockConfig+0x1c8>)
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f023 0203 	bic.w	r2, r3, #3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	4936      	ldr	r1, [pc, #216]	; (80029e4 <HAL_RCC_ClockConfig+0x1c8>)
 800290c:	4313      	orrs	r3, r2
 800290e:	608b      	str	r3, [r1, #8]
 8002910:	f7ff f900 	bl	8001b14 <HAL_GetTick>
 8002914:	60f8      	str	r0, [r7, #12]
 8002916:	e00a      	b.n	800292e <HAL_RCC_ClockConfig+0x112>
 8002918:	f7ff f8fc 	bl	8001b14 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	f241 3288 	movw	r2, #5000	; 0x1388
 8002926:	4293      	cmp	r3, r2
 8002928:	d901      	bls.n	800292e <HAL_RCC_ClockConfig+0x112>
 800292a:	2303      	movs	r3, #3
 800292c:	e053      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ba>
 800292e:	4b2d      	ldr	r3, [pc, #180]	; (80029e4 <HAL_RCC_ClockConfig+0x1c8>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f003 020c 	and.w	r2, r3, #12
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	429a      	cmp	r2, r3
 800293e:	d1eb      	bne.n	8002918 <HAL_RCC_ClockConfig+0xfc>
 8002940:	4b27      	ldr	r3, [pc, #156]	; (80029e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 030f 	and.w	r3, r3, #15
 8002948:	683a      	ldr	r2, [r7, #0]
 800294a:	429a      	cmp	r2, r3
 800294c:	d210      	bcs.n	8002970 <HAL_RCC_ClockConfig+0x154>
 800294e:	4b24      	ldr	r3, [pc, #144]	; (80029e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f023 020f 	bic.w	r2, r3, #15
 8002956:	4922      	ldr	r1, [pc, #136]	; (80029e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	4313      	orrs	r3, r2
 800295c:	600b      	str	r3, [r1, #0]
 800295e:	4b20      	ldr	r3, [pc, #128]	; (80029e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 030f 	and.w	r3, r3, #15
 8002966:	683a      	ldr	r2, [r7, #0]
 8002968:	429a      	cmp	r2, r3
 800296a:	d001      	beq.n	8002970 <HAL_RCC_ClockConfig+0x154>
 800296c:	2301      	movs	r3, #1
 800296e:	e032      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ba>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0304 	and.w	r3, r3, #4
 8002978:	2b00      	cmp	r3, #0
 800297a:	d008      	beq.n	800298e <HAL_RCC_ClockConfig+0x172>
 800297c:	4b19      	ldr	r3, [pc, #100]	; (80029e4 <HAL_RCC_ClockConfig+0x1c8>)
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	4916      	ldr	r1, [pc, #88]	; (80029e4 <HAL_RCC_ClockConfig+0x1c8>)
 800298a:	4313      	orrs	r3, r2
 800298c:	608b      	str	r3, [r1, #8]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0308 	and.w	r3, r3, #8
 8002996:	2b00      	cmp	r3, #0
 8002998:	d009      	beq.n	80029ae <HAL_RCC_ClockConfig+0x192>
 800299a:	4b12      	ldr	r3, [pc, #72]	; (80029e4 <HAL_RCC_ClockConfig+0x1c8>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	00db      	lsls	r3, r3, #3
 80029a8:	490e      	ldr	r1, [pc, #56]	; (80029e4 <HAL_RCC_ClockConfig+0x1c8>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	608b      	str	r3, [r1, #8]
 80029ae:	f000 f821 	bl	80029f4 <HAL_RCC_GetSysClockFreq>
 80029b2:	4602      	mov	r2, r0
 80029b4:	4b0b      	ldr	r3, [pc, #44]	; (80029e4 <HAL_RCC_ClockConfig+0x1c8>)
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	091b      	lsrs	r3, r3, #4
 80029ba:	f003 030f 	and.w	r3, r3, #15
 80029be:	490a      	ldr	r1, [pc, #40]	; (80029e8 <HAL_RCC_ClockConfig+0x1cc>)
 80029c0:	5ccb      	ldrb	r3, [r1, r3]
 80029c2:	fa22 f303 	lsr.w	r3, r2, r3
 80029c6:	4a09      	ldr	r2, [pc, #36]	; (80029ec <HAL_RCC_ClockConfig+0x1d0>)
 80029c8:	6013      	str	r3, [r2, #0]
 80029ca:	4b09      	ldr	r3, [pc, #36]	; (80029f0 <HAL_RCC_ClockConfig+0x1d4>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7ff f85c 	bl	8001a8c <HAL_InitTick>
 80029d4:	2300      	movs	r3, #0
 80029d6:	4618      	mov	r0, r3
 80029d8:	3710      	adds	r7, #16
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	40023c00 	.word	0x40023c00
 80029e4:	40023800 	.word	0x40023800
 80029e8:	08008024 	.word	0x08008024
 80029ec:	20000008 	.word	0x20000008
 80029f0:	2000000c 	.word	0x2000000c

080029f4 <HAL_RCC_GetSysClockFreq>:
 80029f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029f8:	b090      	sub	sp, #64	; 0x40
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	2300      	movs	r3, #0
 80029fe:	637b      	str	r3, [r7, #52]	; 0x34
 8002a00:	2300      	movs	r3, #0
 8002a02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a04:	2300      	movs	r3, #0
 8002a06:	633b      	str	r3, [r7, #48]	; 0x30
 8002a08:	2300      	movs	r3, #0
 8002a0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a0c:	4b59      	ldr	r3, [pc, #356]	; (8002b74 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f003 030c 	and.w	r3, r3, #12
 8002a14:	2b08      	cmp	r3, #8
 8002a16:	d00d      	beq.n	8002a34 <HAL_RCC_GetSysClockFreq+0x40>
 8002a18:	2b08      	cmp	r3, #8
 8002a1a:	f200 80a1 	bhi.w	8002b60 <HAL_RCC_GetSysClockFreq+0x16c>
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d002      	beq.n	8002a28 <HAL_RCC_GetSysClockFreq+0x34>
 8002a22:	2b04      	cmp	r3, #4
 8002a24:	d003      	beq.n	8002a2e <HAL_RCC_GetSysClockFreq+0x3a>
 8002a26:	e09b      	b.n	8002b60 <HAL_RCC_GetSysClockFreq+0x16c>
 8002a28:	4b53      	ldr	r3, [pc, #332]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x184>)
 8002a2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a2c:	e09b      	b.n	8002b66 <HAL_RCC_GetSysClockFreq+0x172>
 8002a2e:	4b53      	ldr	r3, [pc, #332]	; (8002b7c <HAL_RCC_GetSysClockFreq+0x188>)
 8002a30:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a32:	e098      	b.n	8002b66 <HAL_RCC_GetSysClockFreq+0x172>
 8002a34:	4b4f      	ldr	r3, [pc, #316]	; (8002b74 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a3c:	637b      	str	r3, [r7, #52]	; 0x34
 8002a3e:	4b4d      	ldr	r3, [pc, #308]	; (8002b74 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d028      	beq.n	8002a9c <HAL_RCC_GetSysClockFreq+0xa8>
 8002a4a:	4b4a      	ldr	r3, [pc, #296]	; (8002b74 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	099b      	lsrs	r3, r3, #6
 8002a50:	2200      	movs	r2, #0
 8002a52:	623b      	str	r3, [r7, #32]
 8002a54:	627a      	str	r2, [r7, #36]	; 0x24
 8002a56:	6a3b      	ldr	r3, [r7, #32]
 8002a58:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002a5c:	2100      	movs	r1, #0
 8002a5e:	4b47      	ldr	r3, [pc, #284]	; (8002b7c <HAL_RCC_GetSysClockFreq+0x188>)
 8002a60:	fb03 f201 	mul.w	r2, r3, r1
 8002a64:	2300      	movs	r3, #0
 8002a66:	fb00 f303 	mul.w	r3, r0, r3
 8002a6a:	4413      	add	r3, r2
 8002a6c:	4a43      	ldr	r2, [pc, #268]	; (8002b7c <HAL_RCC_GetSysClockFreq+0x188>)
 8002a6e:	fba0 1202 	umull	r1, r2, r0, r2
 8002a72:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a74:	460a      	mov	r2, r1
 8002a76:	62ba      	str	r2, [r7, #40]	; 0x28
 8002a78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a7a:	4413      	add	r3, r2
 8002a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a80:	2200      	movs	r2, #0
 8002a82:	61bb      	str	r3, [r7, #24]
 8002a84:	61fa      	str	r2, [r7, #28]
 8002a86:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a8a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002a8e:	f7fd fc0f 	bl	80002b0 <__aeabi_uldivmod>
 8002a92:	4602      	mov	r2, r0
 8002a94:	460b      	mov	r3, r1
 8002a96:	4613      	mov	r3, r2
 8002a98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a9a:	e053      	b.n	8002b44 <HAL_RCC_GetSysClockFreq+0x150>
 8002a9c:	4b35      	ldr	r3, [pc, #212]	; (8002b74 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	099b      	lsrs	r3, r3, #6
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	613b      	str	r3, [r7, #16]
 8002aa6:	617a      	str	r2, [r7, #20]
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002aae:	f04f 0b00 	mov.w	fp, #0
 8002ab2:	4652      	mov	r2, sl
 8002ab4:	465b      	mov	r3, fp
 8002ab6:	f04f 0000 	mov.w	r0, #0
 8002aba:	f04f 0100 	mov.w	r1, #0
 8002abe:	0159      	lsls	r1, r3, #5
 8002ac0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ac4:	0150      	lsls	r0, r2, #5
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	460b      	mov	r3, r1
 8002aca:	ebb2 080a 	subs.w	r8, r2, sl
 8002ace:	eb63 090b 	sbc.w	r9, r3, fp
 8002ad2:	f04f 0200 	mov.w	r2, #0
 8002ad6:	f04f 0300 	mov.w	r3, #0
 8002ada:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002ade:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002ae2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002ae6:	ebb2 0408 	subs.w	r4, r2, r8
 8002aea:	eb63 0509 	sbc.w	r5, r3, r9
 8002aee:	f04f 0200 	mov.w	r2, #0
 8002af2:	f04f 0300 	mov.w	r3, #0
 8002af6:	00eb      	lsls	r3, r5, #3
 8002af8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002afc:	00e2      	lsls	r2, r4, #3
 8002afe:	4614      	mov	r4, r2
 8002b00:	461d      	mov	r5, r3
 8002b02:	eb14 030a 	adds.w	r3, r4, sl
 8002b06:	603b      	str	r3, [r7, #0]
 8002b08:	eb45 030b 	adc.w	r3, r5, fp
 8002b0c:	607b      	str	r3, [r7, #4]
 8002b0e:	f04f 0200 	mov.w	r2, #0
 8002b12:	f04f 0300 	mov.w	r3, #0
 8002b16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b1a:	4629      	mov	r1, r5
 8002b1c:	028b      	lsls	r3, r1, #10
 8002b1e:	4621      	mov	r1, r4
 8002b20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b24:	4621      	mov	r1, r4
 8002b26:	028a      	lsls	r2, r1, #10
 8002b28:	4610      	mov	r0, r2
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b2e:	2200      	movs	r2, #0
 8002b30:	60bb      	str	r3, [r7, #8]
 8002b32:	60fa      	str	r2, [r7, #12]
 8002b34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b38:	f7fd fbba 	bl	80002b0 <__aeabi_uldivmod>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	460b      	mov	r3, r1
 8002b40:	4613      	mov	r3, r2
 8002b42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b44:	4b0b      	ldr	r3, [pc, #44]	; (8002b74 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	0c1b      	lsrs	r3, r3, #16
 8002b4a:	f003 0303 	and.w	r3, r3, #3
 8002b4e:	3301      	adds	r3, #1
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	633b      	str	r3, [r7, #48]	; 0x30
 8002b54:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b5c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b5e:	e002      	b.n	8002b66 <HAL_RCC_GetSysClockFreq+0x172>
 8002b60:	4b05      	ldr	r3, [pc, #20]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x184>)
 8002b62:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b64:	bf00      	nop
 8002b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3740      	adds	r7, #64	; 0x40
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b72:	bf00      	nop
 8002b74:	40023800 	.word	0x40023800
 8002b78:	00f42400 	.word	0x00f42400
 8002b7c:	017d7840 	.word	0x017d7840

08002b80 <HAL_RCC_GetHCLKFreq>:
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	4b03      	ldr	r3, [pc, #12]	; (8002b94 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	20000008 	.word	0x20000008

08002b98 <HAL_RCC_GetPCLK1Freq>:
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	f7ff fff0 	bl	8002b80 <HAL_RCC_GetHCLKFreq>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	4b05      	ldr	r3, [pc, #20]	; (8002bb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	0a9b      	lsrs	r3, r3, #10
 8002ba8:	f003 0307 	and.w	r3, r3, #7
 8002bac:	4903      	ldr	r1, [pc, #12]	; (8002bbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bae:	5ccb      	ldrb	r3, [r1, r3]
 8002bb0:	fa22 f303 	lsr.w	r3, r2, r3
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	40023800 	.word	0x40023800
 8002bbc:	08008034 	.word	0x08008034

08002bc0 <HAL_RCC_GetPCLK2Freq>:
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	f7ff ffdc 	bl	8002b80 <HAL_RCC_GetHCLKFreq>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	4b05      	ldr	r3, [pc, #20]	; (8002be0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	0b5b      	lsrs	r3, r3, #13
 8002bd0:	f003 0307 	and.w	r3, r3, #7
 8002bd4:	4903      	ldr	r1, [pc, #12]	; (8002be4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bd6:	5ccb      	ldrb	r3, [r1, r3]
 8002bd8:	fa22 f303 	lsr.w	r3, r2, r3
 8002bdc:	4618      	mov	r0, r3
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	40023800 	.word	0x40023800
 8002be4:	08008034 	.word	0x08008034

08002be8 <HAL_RCCEx_PeriphCLKConfig>:
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b088      	sub	sp, #32
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	617b      	str	r3, [r7, #20]
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	613b      	str	r3, [r7, #16]
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	60fb      	str	r3, [r7, #12]
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	61fb      	str	r3, [r7, #28]
 8002c00:	2300      	movs	r3, #0
 8002c02:	61bb      	str	r3, [r7, #24]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0301 	and.w	r3, r3, #1
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d012      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002c10:	4b69      	ldr	r3, [pc, #420]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	4a68      	ldr	r2, [pc, #416]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c16:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002c1a:	6093      	str	r3, [r2, #8]
 8002c1c:	4b66      	ldr	r3, [pc, #408]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c1e:	689a      	ldr	r2, [r3, #8]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c24:	4964      	ldr	r1, [pc, #400]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	608b      	str	r3, [r1, #8]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d101      	bne.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002c32:	2301      	movs	r3, #1
 8002c34:	61fb      	str	r3, [r7, #28]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d017      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8002c42:	4b5d      	ldr	r3, [pc, #372]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c48:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c50:	4959      	ldr	r1, [pc, #356]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c60:	d101      	bne.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
 8002c62:	2301      	movs	r3, #1
 8002c64:	61fb      	str	r3, [r7, #28]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d101      	bne.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8002c6e:	2301      	movs	r3, #1
 8002c70:	61bb      	str	r3, [r7, #24]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d017      	beq.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0xc6>
 8002c7e:	4b4e      	ldr	r3, [pc, #312]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c84:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8c:	494a      	ldr	r1, [pc, #296]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c9c:	d101      	bne.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0xba>
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	61fb      	str	r3, [r7, #28]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d101      	bne.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0xc6>
 8002caa:	2301      	movs	r3, #1
 8002cac:	61bb      	str	r3, [r7, #24]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0xd6>
 8002cba:	2301      	movs	r3, #1
 8002cbc:	61fb      	str	r3, [r7, #28]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0320 	and.w	r3, r3, #32
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	f000 808b 	beq.w	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002ccc:	4b3a      	ldr	r3, [pc, #232]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd0:	4a39      	ldr	r2, [pc, #228]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cd6:	6413      	str	r3, [r2, #64]	; 0x40
 8002cd8:	4b37      	ldr	r3, [pc, #220]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ce0:	60bb      	str	r3, [r7, #8]
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	4b35      	ldr	r3, [pc, #212]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a34      	ldr	r2, [pc, #208]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002cea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cee:	6013      	str	r3, [r2, #0]
 8002cf0:	f7fe ff10 	bl	8001b14 <HAL_GetTick>
 8002cf4:	6178      	str	r0, [r7, #20]
 8002cf6:	e008      	b.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x122>
 8002cf8:	f7fe ff0c 	bl	8001b14 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b64      	cmp	r3, #100	; 0x64
 8002d04:	d901      	bls.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x122>
 8002d06:	2303      	movs	r3, #3
 8002d08:	e357      	b.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002d0a:	4b2c      	ldr	r3, [pc, #176]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d0f0      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002d16:	4b28      	ldr	r3, [pc, #160]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d1e:	613b      	str	r3, [r7, #16]
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d035      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d2e:	693a      	ldr	r2, [r7, #16]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d02e      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002d34:	4b20      	ldr	r3, [pc, #128]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d3c:	613b      	str	r3, [r7, #16]
 8002d3e:	4b1e      	ldr	r3, [pc, #120]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d42:	4a1d      	ldr	r2, [pc, #116]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d48:	6713      	str	r3, [r2, #112]	; 0x70
 8002d4a:	4b1b      	ldr	r3, [pc, #108]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d4e:	4a1a      	ldr	r2, [pc, #104]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d54:	6713      	str	r3, [r2, #112]	; 0x70
 8002d56:	4a18      	ldr	r2, [pc, #96]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d5c:	4b16      	ldr	r3, [pc, #88]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d60:	f003 0301 	and.w	r3, r3, #1
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d114      	bne.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002d68:	f7fe fed4 	bl	8001b14 <HAL_GetTick>
 8002d6c:	6178      	str	r0, [r7, #20]
 8002d6e:	e00a      	b.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8002d70:	f7fe fed0 	bl	8001b14 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d901      	bls.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8002d82:	2303      	movs	r3, #3
 8002d84:	e319      	b.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002d86:	4b0c      	ldr	r3, [pc, #48]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d8a:	f003 0302 	and.w	r3, r3, #2
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d0ee      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d9e:	d111      	bne.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002da0:	4b05      	ldr	r3, [pc, #20]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002dac:	4b04      	ldr	r3, [pc, #16]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002dae:	400b      	ands	r3, r1
 8002db0:	4901      	ldr	r1, [pc, #4]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	608b      	str	r3, [r1, #8]
 8002db6:	e00b      	b.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002db8:	40023800 	.word	0x40023800
 8002dbc:	40007000 	.word	0x40007000
 8002dc0:	0ffffcff 	.word	0x0ffffcff
 8002dc4:	4baa      	ldr	r3, [pc, #680]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	4aa9      	ldr	r2, [pc, #676]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dca:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002dce:	6093      	str	r3, [r2, #8]
 8002dd0:	4ba7      	ldr	r3, [pc, #668]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dd2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ddc:	49a4      	ldr	r1, [pc, #656]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	670b      	str	r3, [r1, #112]	; 0x70
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0310 	and.w	r3, r3, #16
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d010      	beq.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8002dee:	4ba0      	ldr	r3, [pc, #640]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002df0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002df4:	4a9e      	ldr	r2, [pc, #632]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002df6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dfa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002dfe:	4b9c      	ldr	r3, [pc, #624]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e00:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e08:	4999      	ldr	r1, [pc, #612]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d00a      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8002e1c:	4b94      	ldr	r3, [pc, #592]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e22:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e2a:	4991      	ldr	r1, [pc, #580]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d00a      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002e3e:	4b8c      	ldr	r3, [pc, #560]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e44:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e4c:	4988      	ldr	r1, [pc, #544]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d00a      	beq.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8002e60:	4b83      	ldr	r3, [pc, #524]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e66:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e6e:	4980      	ldr	r1, [pc, #512]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d00a      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002e82:	4b7b      	ldr	r3, [pc, #492]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e88:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e90:	4977      	ldr	r1, [pc, #476]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d00a      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002ea4:	4b72      	ldr	r3, [pc, #456]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eaa:	f023 0203 	bic.w	r2, r3, #3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb2:	496f      	ldr	r1, [pc, #444]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d00a      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8002ec6:	4b6a      	ldr	r3, [pc, #424]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ecc:	f023 020c 	bic.w	r2, r3, #12
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ed4:	4966      	ldr	r1, [pc, #408]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d00a      	beq.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x316>
 8002ee8:	4b61      	ldr	r3, [pc, #388]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eee:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ef6:	495e      	ldr	r1, [pc, #376]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d00a      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x338>
 8002f0a:	4b59      	ldr	r3, [pc, #356]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f10:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f18:	4955      	ldr	r1, [pc, #340]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d00a      	beq.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8002f2c:	4b50      	ldr	r3, [pc, #320]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f32:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f3a:	494d      	ldr	r1, [pc, #308]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d00a      	beq.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x37c>
 8002f4e:	4b48      	ldr	r3, [pc, #288]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f54:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f5c:	4944      	ldr	r1, [pc, #272]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d00a      	beq.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x39e>
 8002f70:	4b3f      	ldr	r3, [pc, #252]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f76:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f7e:	493c      	ldr	r1, [pc, #240]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f80:	4313      	orrs	r3, r2
 8002f82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d00a      	beq.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8002f92:	4b37      	ldr	r3, [pc, #220]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f98:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fa0:	4933      	ldr	r1, [pc, #204]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d00a      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8002fb4:	4b2e      	ldr	r3, [pc, #184]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fba:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fc2:	492b      	ldr	r1, [pc, #172]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d011      	beq.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x412>
 8002fd6:	4b26      	ldr	r3, [pc, #152]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fdc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fe4:	4922      	ldr	r1, [pc, #136]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ff0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ff4:	d101      	bne.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x412>
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	61bb      	str	r3, [r7, #24]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0308 	and.w	r3, r3, #8
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x422>
 8003006:	2301      	movs	r3, #1
 8003008:	61bb      	str	r3, [r7, #24]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00a      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x444>
 8003016:	4b16      	ldr	r3, [pc, #88]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003018:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800301c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003024:	4912      	ldr	r1, [pc, #72]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003026:	4313      	orrs	r3, r2
 8003028:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d00b      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x468>
 8003038:	4b0d      	ldr	r3, [pc, #52]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800303a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800303e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003048:	4909      	ldr	r1, [pc, #36]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800304a:	4313      	orrs	r3, r2
 800304c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	2b01      	cmp	r3, #1
 8003054:	d006      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800305e:	2b00      	cmp	r3, #0
 8003060:	f000 80d9 	beq.w	8003216 <HAL_RCCEx_PeriphCLKConfig+0x62e>
 8003064:	4b02      	ldr	r3, [pc, #8]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a01      	ldr	r2, [pc, #4]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800306a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800306e:	e001      	b.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003070:	40023800 	.word	0x40023800
 8003074:	6013      	str	r3, [r2, #0]
 8003076:	f7fe fd4d 	bl	8001b14 <HAL_GetTick>
 800307a:	6178      	str	r0, [r7, #20]
 800307c:	e008      	b.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800307e:	f7fe fd49 	bl	8001b14 <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	2b64      	cmp	r3, #100	; 0x64
 800308a:	d901      	bls.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800308c:	2303      	movs	r3, #3
 800308e:	e194      	b.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003090:	4b6c      	ldr	r3, [pc, #432]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d1f0      	bne.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x496>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0301 	and.w	r3, r3, #1
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d021      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x504>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d11d      	bne.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x504>
 80030b0:	4b64      	ldr	r3, [pc, #400]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030b6:	0c1b      	lsrs	r3, r3, #16
 80030b8:	f003 0303 	and.w	r3, r3, #3
 80030bc:	613b      	str	r3, [r7, #16]
 80030be:	4b61      	ldr	r3, [pc, #388]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030c4:	0e1b      	lsrs	r3, r3, #24
 80030c6:	f003 030f 	and.w	r3, r3, #15
 80030ca:	60fb      	str	r3, [r7, #12]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	019a      	lsls	r2, r3, #6
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	041b      	lsls	r3, r3, #16
 80030d6:	431a      	orrs	r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	061b      	lsls	r3, r3, #24
 80030dc:	431a      	orrs	r2, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	071b      	lsls	r3, r3, #28
 80030e4:	4957      	ldr	r1, [pc, #348]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d004      	beq.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003100:	d00a      	beq.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x530>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d02e      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x584>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003112:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003116:	d129      	bne.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x584>
 8003118:	4b4a      	ldr	r3, [pc, #296]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800311a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800311e:	0c1b      	lsrs	r3, r3, #16
 8003120:	f003 0303 	and.w	r3, r3, #3
 8003124:	613b      	str	r3, [r7, #16]
 8003126:	4b47      	ldr	r3, [pc, #284]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003128:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800312c:	0f1b      	lsrs	r3, r3, #28
 800312e:	f003 0307 	and.w	r3, r3, #7
 8003132:	60fb      	str	r3, [r7, #12]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	019a      	lsls	r2, r3, #6
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	041b      	lsls	r3, r3, #16
 800313e:	431a      	orrs	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	061b      	lsls	r3, r3, #24
 8003146:	431a      	orrs	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	071b      	lsls	r3, r3, #28
 800314c:	493d      	ldr	r1, [pc, #244]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800314e:	4313      	orrs	r3, r2
 8003150:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 8003154:	4b3b      	ldr	r3, [pc, #236]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003156:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800315a:	f023 021f 	bic.w	r2, r3, #31
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003162:	3b01      	subs	r3, #1
 8003164:	4937      	ldr	r1, [pc, #220]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003166:	4313      	orrs	r3, r2
 8003168:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d01d      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003178:	4b32      	ldr	r3, [pc, #200]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800317a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800317e:	0e1b      	lsrs	r3, r3, #24
 8003180:	f003 030f 	and.w	r3, r3, #15
 8003184:	613b      	str	r3, [r7, #16]
 8003186:	4b2f      	ldr	r3, [pc, #188]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003188:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800318c:	0f1b      	lsrs	r3, r3, #28
 800318e:	f003 0307 	and.w	r3, r3, #7
 8003192:	60fb      	str	r3, [r7, #12]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	019a      	lsls	r2, r3, #6
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	041b      	lsls	r3, r3, #16
 80031a0:	431a      	orrs	r2, r3
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	061b      	lsls	r3, r3, #24
 80031a6:	431a      	orrs	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	071b      	lsls	r3, r3, #28
 80031ac:	4925      	ldr	r1, [pc, #148]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d011      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	019a      	lsls	r2, r3, #6
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	041b      	lsls	r3, r3, #16
 80031cc:	431a      	orrs	r2, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	061b      	lsls	r3, r3, #24
 80031d4:	431a      	orrs	r2, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	071b      	lsls	r3, r3, #28
 80031dc:	4919      	ldr	r1, [pc, #100]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 80031e4:	4b17      	ldr	r3, [pc, #92]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a16      	ldr	r2, [pc, #88]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80031ee:	6013      	str	r3, [r2, #0]
 80031f0:	f7fe fc90 	bl	8001b14 <HAL_GetTick>
 80031f4:	6178      	str	r0, [r7, #20]
 80031f6:	e008      	b.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x622>
 80031f8:	f7fe fc8c 	bl	8001b14 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b64      	cmp	r3, #100	; 0x64
 8003204:	d901      	bls.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x622>
 8003206:	2303      	movs	r3, #3
 8003208:	e0d7      	b.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800320a:	4b0e      	ldr	r3, [pc, #56]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d0f0      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x610>
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	2b01      	cmp	r3, #1
 800321a:	f040 80cd 	bne.w	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
 800321e:	4b09      	ldr	r3, [pc, #36]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a08      	ldr	r2, [pc, #32]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003224:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003228:	6013      	str	r3, [r2, #0]
 800322a:	f7fe fc73 	bl	8001b14 <HAL_GetTick>
 800322e:	6178      	str	r0, [r7, #20]
 8003230:	e00a      	b.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x660>
 8003232:	f7fe fc6f 	bl	8001b14 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	2b64      	cmp	r3, #100	; 0x64
 800323e:	d903      	bls.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x660>
 8003240:	2303      	movs	r3, #3
 8003242:	e0ba      	b.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003244:	40023800 	.word	0x40023800
 8003248:	4b5e      	ldr	r3, [pc, #376]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003250:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003254:	d0ed      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x64a>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d003      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003266:	2b00      	cmp	r3, #0
 8003268:	d009      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x696>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d02e      	beq.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327a:	2b00      	cmp	r3, #0
 800327c:	d12a      	bne.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
 800327e:	4b51      	ldr	r3, [pc, #324]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003284:	0c1b      	lsrs	r3, r3, #16
 8003286:	f003 0303 	and.w	r3, r3, #3
 800328a:	613b      	str	r3, [r7, #16]
 800328c:	4b4d      	ldr	r3, [pc, #308]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800328e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003292:	0f1b      	lsrs	r3, r3, #28
 8003294:	f003 0307 	and.w	r3, r3, #7
 8003298:	60fb      	str	r3, [r7, #12]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	019a      	lsls	r2, r3, #6
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	041b      	lsls	r3, r3, #16
 80032a4:	431a      	orrs	r2, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	699b      	ldr	r3, [r3, #24]
 80032aa:	061b      	lsls	r3, r3, #24
 80032ac:	431a      	orrs	r2, r3
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	071b      	lsls	r3, r3, #28
 80032b2:	4944      	ldr	r1, [pc, #272]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80032ba:	4b42      	ldr	r3, [pc, #264]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032c0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c8:	3b01      	subs	r3, #1
 80032ca:	021b      	lsls	r3, r3, #8
 80032cc:	493d      	ldr	r1, [pc, #244]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d022      	beq.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032e8:	d11d      	bne.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80032ea:	4b36      	ldr	r3, [pc, #216]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f0:	0e1b      	lsrs	r3, r3, #24
 80032f2:	f003 030f 	and.w	r3, r3, #15
 80032f6:	613b      	str	r3, [r7, #16]
 80032f8:	4b32      	ldr	r3, [pc, #200]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032fe:	0f1b      	lsrs	r3, r3, #28
 8003300:	f003 0307 	and.w	r3, r3, #7
 8003304:	60fb      	str	r3, [r7, #12]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	019a      	lsls	r2, r3, #6
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a1b      	ldr	r3, [r3, #32]
 8003310:	041b      	lsls	r3, r3, #16
 8003312:	431a      	orrs	r2, r3
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	061b      	lsls	r3, r3, #24
 8003318:	431a      	orrs	r2, r3
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	071b      	lsls	r3, r3, #28
 800331e:	4929      	ldr	r1, [pc, #164]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003320:	4313      	orrs	r3, r2
 8003322:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0308 	and.w	r3, r3, #8
 800332e:	2b00      	cmp	r3, #0
 8003330:	d028      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x79c>
 8003332:	4b24      	ldr	r3, [pc, #144]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003338:	0e1b      	lsrs	r3, r3, #24
 800333a:	f003 030f 	and.w	r3, r3, #15
 800333e:	613b      	str	r3, [r7, #16]
 8003340:	4b20      	ldr	r3, [pc, #128]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003346:	0c1b      	lsrs	r3, r3, #16
 8003348:	f003 0303 	and.w	r3, r3, #3
 800334c:	60fb      	str	r3, [r7, #12]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	695b      	ldr	r3, [r3, #20]
 8003352:	019a      	lsls	r2, r3, #6
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	041b      	lsls	r3, r3, #16
 8003358:	431a      	orrs	r2, r3
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	061b      	lsls	r3, r3, #24
 800335e:	431a      	orrs	r2, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	69db      	ldr	r3, [r3, #28]
 8003364:	071b      	lsls	r3, r3, #28
 8003366:	4917      	ldr	r1, [pc, #92]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003368:	4313      	orrs	r3, r2
 800336a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800336e:	4b15      	ldr	r3, [pc, #84]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003370:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003374:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800337c:	4911      	ldr	r1, [pc, #68]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800337e:	4313      	orrs	r3, r2
 8003380:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 8003384:	4b0f      	ldr	r3, [pc, #60]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a0e      	ldr	r2, [pc, #56]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800338a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800338e:	6013      	str	r3, [r2, #0]
 8003390:	f7fe fbc0 	bl	8001b14 <HAL_GetTick>
 8003394:	6178      	str	r0, [r7, #20]
 8003396:	e008      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x7c2>
 8003398:	f7fe fbbc 	bl	8001b14 <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b64      	cmp	r3, #100	; 0x64
 80033a4:	d901      	bls.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x7c2>
 80033a6:	2303      	movs	r3, #3
 80033a8:	e007      	b.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80033aa:	4b06      	ldr	r3, [pc, #24]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033b6:	d1ef      	bne.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
 80033b8:	2300      	movs	r3, #0
 80033ba:	4618      	mov	r0, r3
 80033bc:	3720      	adds	r7, #32
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	40023800 	.word	0x40023800

080033c8 <HAL_UART_Init>:
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d101      	bne.n	80033da <HAL_UART_Init+0x12>
 80033d6:	2301      	movs	r3, #1
 80033d8:	e040      	b.n	800345c <HAL_UART_Init+0x94>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d106      	bne.n	80033f0 <HAL_UART_Init+0x28>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f7fe fa8e 	bl	800190c <HAL_UART_MspInit>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2224      	movs	r2, #36	; 0x24
 80033f4:	67da      	str	r2, [r3, #124]	; 0x7c
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f022 0201 	bic.w	r2, r2, #1
 8003404:	601a      	str	r2, [r3, #0]
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f000 fbf0 	bl	8003bec <UART_SetConfig>
 800340c:	4603      	mov	r3, r0
 800340e:	2b01      	cmp	r3, #1
 8003410:	d101      	bne.n	8003416 <HAL_UART_Init+0x4e>
 8003412:	2301      	movs	r3, #1
 8003414:	e022      	b.n	800345c <HAL_UART_Init+0x94>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341a:	2b00      	cmp	r3, #0
 800341c:	d002      	beq.n	8003424 <HAL_UART_Init+0x5c>
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 fe48 	bl	80040b4 <UART_AdvFeatureConfig>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	685a      	ldr	r2, [r3, #4]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003432:	605a      	str	r2, [r3, #4]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	689a      	ldr	r2, [r3, #8]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003442:	609a      	str	r2, [r3, #8]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f042 0201 	orr.w	r2, r2, #1
 8003452:	601a      	str	r2, [r3, #0]
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 fecf 	bl	80041f8 <UART_CheckIdleState>
 800345a:	4603      	mov	r3, r0
 800345c:	4618      	mov	r0, r3
 800345e:	3708      	adds	r7, #8
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <HAL_UART_Transmit>:
 8003464:	b580      	push	{r7, lr}
 8003466:	b08a      	sub	sp, #40	; 0x28
 8003468:	af02      	add	r7, sp, #8
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	60b9      	str	r1, [r7, #8]
 800346e:	603b      	str	r3, [r7, #0]
 8003470:	4613      	mov	r3, r2
 8003472:	80fb      	strh	r3, [r7, #6]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003478:	2b20      	cmp	r3, #32
 800347a:	d171      	bne.n	8003560 <HAL_UART_Transmit+0xfc>
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d002      	beq.n	8003488 <HAL_UART_Transmit+0x24>
 8003482:	88fb      	ldrh	r3, [r7, #6]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d101      	bne.n	800348c <HAL_UART_Transmit+0x28>
 8003488:	2301      	movs	r3, #1
 800348a:	e06a      	b.n	8003562 <HAL_UART_Transmit+0xfe>
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2200      	movs	r2, #0
 8003490:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2221      	movs	r2, #33	; 0x21
 8003498:	67da      	str	r2, [r3, #124]	; 0x7c
 800349a:	f7fe fb3b 	bl	8001b14 <HAL_GetTick>
 800349e:	6178      	str	r0, [r7, #20]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	88fa      	ldrh	r2, [r7, #6]
 80034a4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	88fa      	ldrh	r2, [r7, #6]
 80034ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034b8:	d108      	bne.n	80034cc <HAL_UART_Transmit+0x68>
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d104      	bne.n	80034cc <HAL_UART_Transmit+0x68>
 80034c2:	2300      	movs	r3, #0
 80034c4:	61fb      	str	r3, [r7, #28]
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	61bb      	str	r3, [r7, #24]
 80034ca:	e003      	b.n	80034d4 <HAL_UART_Transmit+0x70>
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	61fb      	str	r3, [r7, #28]
 80034d0:	2300      	movs	r3, #0
 80034d2:	61bb      	str	r3, [r7, #24]
 80034d4:	e02c      	b.n	8003530 <HAL_UART_Transmit+0xcc>
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	9300      	str	r3, [sp, #0]
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	2200      	movs	r2, #0
 80034de:	2180      	movs	r1, #128	; 0x80
 80034e0:	68f8      	ldr	r0, [r7, #12]
 80034e2:	f000 fec0 	bl	8004266 <UART_WaitOnFlagUntilTimeout>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d001      	beq.n	80034f0 <HAL_UART_Transmit+0x8c>
 80034ec:	2303      	movs	r3, #3
 80034ee:	e038      	b.n	8003562 <HAL_UART_Transmit+0xfe>
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d10b      	bne.n	800350e <HAL_UART_Transmit+0xaa>
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	881b      	ldrh	r3, [r3, #0]
 80034fa:	461a      	mov	r2, r3
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003504:	629a      	str	r2, [r3, #40]	; 0x28
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	3302      	adds	r3, #2
 800350a:	61bb      	str	r3, [r7, #24]
 800350c:	e007      	b.n	800351e <HAL_UART_Transmit+0xba>
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	781a      	ldrb	r2, [r3, #0]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	629a      	str	r2, [r3, #40]	; 0x28
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	3301      	adds	r3, #1
 800351c:	61fb      	str	r3, [r7, #28]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003524:	b29b      	uxth	r3, r3
 8003526:	3b01      	subs	r3, #1
 8003528:	b29a      	uxth	r2, r3
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003536:	b29b      	uxth	r3, r3
 8003538:	2b00      	cmp	r3, #0
 800353a:	d1cc      	bne.n	80034d6 <HAL_UART_Transmit+0x72>
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	9300      	str	r3, [sp, #0]
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	2200      	movs	r2, #0
 8003544:	2140      	movs	r1, #64	; 0x40
 8003546:	68f8      	ldr	r0, [r7, #12]
 8003548:	f000 fe8d 	bl	8004266 <UART_WaitOnFlagUntilTimeout>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <HAL_UART_Transmit+0xf2>
 8003552:	2303      	movs	r3, #3
 8003554:	e005      	b.n	8003562 <HAL_UART_Transmit+0xfe>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2220      	movs	r2, #32
 800355a:	67da      	str	r2, [r3, #124]	; 0x7c
 800355c:	2300      	movs	r3, #0
 800355e:	e000      	b.n	8003562 <HAL_UART_Transmit+0xfe>
 8003560:	2302      	movs	r3, #2
 8003562:	4618      	mov	r0, r3
 8003564:	3720      	adds	r7, #32
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}

0800356a <HAL_UART_Receive_IT>:
 800356a:	b580      	push	{r7, lr}
 800356c:	b08a      	sub	sp, #40	; 0x28
 800356e:	af00      	add	r7, sp, #0
 8003570:	60f8      	str	r0, [r7, #12]
 8003572:	60b9      	str	r1, [r7, #8]
 8003574:	4613      	mov	r3, r2
 8003576:	80fb      	strh	r3, [r7, #6]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800357e:	2b20      	cmp	r3, #32
 8003580:	d132      	bne.n	80035e8 <HAL_UART_Receive_IT+0x7e>
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d002      	beq.n	800358e <HAL_UART_Receive_IT+0x24>
 8003588:	88fb      	ldrh	r3, [r7, #6]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <HAL_UART_Receive_IT+0x28>
 800358e:	2301      	movs	r3, #1
 8003590:	e02b      	b.n	80035ea <HAL_UART_Receive_IT+0x80>
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	661a      	str	r2, [r3, #96]	; 0x60
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d018      	beq.n	80035d8 <HAL_UART_Receive_IT+0x6e>
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	617b      	str	r3, [r7, #20]
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	e853 3f00 	ldrex	r3, [r3]
 80035b2:	613b      	str	r3, [r7, #16]
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80035ba:	627b      	str	r3, [r7, #36]	; 0x24
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	461a      	mov	r2, r3
 80035c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c4:	623b      	str	r3, [r7, #32]
 80035c6:	61fa      	str	r2, [r7, #28]
 80035c8:	69f9      	ldr	r1, [r7, #28]
 80035ca:	6a3a      	ldr	r2, [r7, #32]
 80035cc:	e841 2300 	strex	r3, r2, [r1]
 80035d0:	61bb      	str	r3, [r7, #24]
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d1e6      	bne.n	80035a6 <HAL_UART_Receive_IT+0x3c>
 80035d8:	88fb      	ldrh	r3, [r7, #6]
 80035da:	461a      	mov	r2, r3
 80035dc:	68b9      	ldr	r1, [r7, #8]
 80035de:	68f8      	ldr	r0, [r7, #12]
 80035e0:	f000 ff08 	bl	80043f4 <UART_Start_Receive_IT>
 80035e4:	4603      	mov	r3, r0
 80035e6:	e000      	b.n	80035ea <HAL_UART_Receive_IT+0x80>
 80035e8:	2302      	movs	r3, #2
 80035ea:	4618      	mov	r0, r3
 80035ec:	3728      	adds	r7, #40	; 0x28
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
	...

080035f4 <HAL_UART_IRQHandler>:
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b0ba      	sub	sp, #232	; 0xe8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	69db      	ldr	r3, [r3, #28]
 8003602:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800361a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800361e:	f640 030f 	movw	r3, #2063	; 0x80f
 8003622:	4013      	ands	r3, r2
 8003624:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003628:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800362c:	2b00      	cmp	r3, #0
 800362e:	d115      	bne.n	800365c <HAL_UART_IRQHandler+0x68>
 8003630:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003634:	f003 0320 	and.w	r3, r3, #32
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00f      	beq.n	800365c <HAL_UART_IRQHandler+0x68>
 800363c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003640:	f003 0320 	and.w	r3, r3, #32
 8003644:	2b00      	cmp	r3, #0
 8003646:	d009      	beq.n	800365c <HAL_UART_IRQHandler+0x68>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800364c:	2b00      	cmp	r3, #0
 800364e:	f000 8297 	beq.w	8003b80 <HAL_UART_IRQHandler+0x58c>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	4798      	blx	r3
 800365a:	e291      	b.n	8003b80 <HAL_UART_IRQHandler+0x58c>
 800365c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003660:	2b00      	cmp	r3, #0
 8003662:	f000 8117 	beq.w	8003894 <HAL_UART_IRQHandler+0x2a0>
 8003666:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800366a:	f003 0301 	and.w	r3, r3, #1
 800366e:	2b00      	cmp	r3, #0
 8003670:	d106      	bne.n	8003680 <HAL_UART_IRQHandler+0x8c>
 8003672:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003676:	4b85      	ldr	r3, [pc, #532]	; (800388c <HAL_UART_IRQHandler+0x298>)
 8003678:	4013      	ands	r3, r2
 800367a:	2b00      	cmp	r3, #0
 800367c:	f000 810a 	beq.w	8003894 <HAL_UART_IRQHandler+0x2a0>
 8003680:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003684:	f003 0301 	and.w	r3, r3, #1
 8003688:	2b00      	cmp	r3, #0
 800368a:	d011      	beq.n	80036b0 <HAL_UART_IRQHandler+0xbc>
 800368c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003694:	2b00      	cmp	r3, #0
 8003696:	d00b      	beq.n	80036b0 <HAL_UART_IRQHandler+0xbc>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2201      	movs	r2, #1
 800369e:	621a      	str	r2, [r3, #32]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036a6:	f043 0201 	orr.w	r2, r3, #1
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80036b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036b4:	f003 0302 	and.w	r3, r3, #2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d011      	beq.n	80036e0 <HAL_UART_IRQHandler+0xec>
 80036bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036c0:	f003 0301 	and.w	r3, r3, #1
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d00b      	beq.n	80036e0 <HAL_UART_IRQHandler+0xec>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2202      	movs	r2, #2
 80036ce:	621a      	str	r2, [r3, #32]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036d6:	f043 0204 	orr.w	r2, r3, #4
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80036e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036e4:	f003 0304 	and.w	r3, r3, #4
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d011      	beq.n	8003710 <HAL_UART_IRQHandler+0x11c>
 80036ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036f0:	f003 0301 	and.w	r3, r3, #1
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d00b      	beq.n	8003710 <HAL_UART_IRQHandler+0x11c>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2204      	movs	r2, #4
 80036fe:	621a      	str	r2, [r3, #32]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003706:	f043 0202 	orr.w	r2, r3, #2
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8003710:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003714:	f003 0308 	and.w	r3, r3, #8
 8003718:	2b00      	cmp	r3, #0
 800371a:	d017      	beq.n	800374c <HAL_UART_IRQHandler+0x158>
 800371c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003720:	f003 0320 	and.w	r3, r3, #32
 8003724:	2b00      	cmp	r3, #0
 8003726:	d105      	bne.n	8003734 <HAL_UART_IRQHandler+0x140>
 8003728:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800372c:	f003 0301 	and.w	r3, r3, #1
 8003730:	2b00      	cmp	r3, #0
 8003732:	d00b      	beq.n	800374c <HAL_UART_IRQHandler+0x158>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2208      	movs	r2, #8
 800373a:	621a      	str	r2, [r3, #32]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003742:	f043 0208 	orr.w	r2, r3, #8
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800374c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003750:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003754:	2b00      	cmp	r3, #0
 8003756:	d012      	beq.n	800377e <HAL_UART_IRQHandler+0x18a>
 8003758:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800375c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d00c      	beq.n	800377e <HAL_UART_IRQHandler+0x18a>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800376c:	621a      	str	r2, [r3, #32]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003774:	f043 0220 	orr.w	r2, r3, #32
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003784:	2b00      	cmp	r3, #0
 8003786:	f000 81fd 	beq.w	8003b84 <HAL_UART_IRQHandler+0x590>
 800378a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800378e:	f003 0320 	and.w	r3, r3, #32
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00d      	beq.n	80037b2 <HAL_UART_IRQHandler+0x1be>
 8003796:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800379a:	f003 0320 	and.w	r3, r3, #32
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d007      	beq.n	80037b2 <HAL_UART_IRQHandler+0x1be>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d003      	beq.n	80037b2 <HAL_UART_IRQHandler+0x1be>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	4798      	blx	r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037c6:	2b40      	cmp	r3, #64	; 0x40
 80037c8:	d005      	beq.n	80037d6 <HAL_UART_IRQHandler+0x1e2>
 80037ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80037ce:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d04f      	beq.n	8003876 <HAL_UART_IRQHandler+0x282>
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 fed2 	bl	8004580 <UART_EndRxTransfer>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037e6:	2b40      	cmp	r3, #64	; 0x40
 80037e8:	d141      	bne.n	800386e <HAL_UART_IRQHandler+0x27a>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	3308      	adds	r3, #8
 80037f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80037f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80037f8:	e853 3f00 	ldrex	r3, [r3]
 80037fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003800:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003804:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003808:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	3308      	adds	r3, #8
 8003812:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003816:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800381a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800381e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003822:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003826:	e841 2300 	strex	r3, r2, [r1]
 800382a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800382e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d1d9      	bne.n	80037ea <HAL_UART_IRQHandler+0x1f6>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800383a:	2b00      	cmp	r3, #0
 800383c:	d013      	beq.n	8003866 <HAL_UART_IRQHandler+0x272>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003842:	4a13      	ldr	r2, [pc, #76]	; (8003890 <HAL_UART_IRQHandler+0x29c>)
 8003844:	651a      	str	r2, [r3, #80]	; 0x50
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800384a:	4618      	mov	r0, r3
 800384c:	f7fe faef 	bl	8001e2e <HAL_DMA_Abort_IT>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d017      	beq.n	8003886 <HAL_UART_IRQHandler+0x292>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800385a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003860:	4610      	mov	r0, r2
 8003862:	4798      	blx	r3
 8003864:	e00f      	b.n	8003886 <HAL_UART_IRQHandler+0x292>
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 f9aa 	bl	8003bc0 <HAL_UART_ErrorCallback>
 800386c:	e00b      	b.n	8003886 <HAL_UART_IRQHandler+0x292>
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 f9a6 	bl	8003bc0 <HAL_UART_ErrorCallback>
 8003874:	e007      	b.n	8003886 <HAL_UART_IRQHandler+0x292>
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 f9a2 	bl	8003bc0 <HAL_UART_ErrorCallback>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8003884:	e17e      	b.n	8003b84 <HAL_UART_IRQHandler+0x590>
 8003886:	bf00      	nop
 8003888:	e17c      	b.n	8003b84 <HAL_UART_IRQHandler+0x590>
 800388a:	bf00      	nop
 800388c:	04000120 	.word	0x04000120
 8003890:	08004649 	.word	0x08004649
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003898:	2b01      	cmp	r3, #1
 800389a:	f040 814c 	bne.w	8003b36 <HAL_UART_IRQHandler+0x542>
 800389e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038a2:	f003 0310 	and.w	r3, r3, #16
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	f000 8145 	beq.w	8003b36 <HAL_UART_IRQHandler+0x542>
 80038ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038b0:	f003 0310 	and.w	r3, r3, #16
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	f000 813e 	beq.w	8003b36 <HAL_UART_IRQHandler+0x542>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2210      	movs	r2, #16
 80038c0:	621a      	str	r2, [r3, #32]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038cc:	2b40      	cmp	r3, #64	; 0x40
 80038ce:	f040 80b6 	bne.w	8003a3e <HAL_UART_IRQHandler+0x44a>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 80038de:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	f000 8150 	beq.w	8003b88 <HAL_UART_IRQHandler+0x594>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80038ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80038f2:	429a      	cmp	r2, r3
 80038f4:	f080 8148 	bcs.w	8003b88 <HAL_UART_IRQHandler+0x594>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80038fe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003906:	69db      	ldr	r3, [r3, #28]
 8003908:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800390c:	f000 8086 	beq.w	8003a1c <HAL_UART_IRQHandler+0x428>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003918:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800391c:	e853 3f00 	ldrex	r3, [r3]
 8003920:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003924:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003928:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800392c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	461a      	mov	r2, r3
 8003936:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800393a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800393e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8003942:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003946:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800394a:	e841 2300 	strex	r3, r2, [r1]
 800394e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003952:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003956:	2b00      	cmp	r3, #0
 8003958:	d1da      	bne.n	8003910 <HAL_UART_IRQHandler+0x31c>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	3308      	adds	r3, #8
 8003960:	677b      	str	r3, [r7, #116]	; 0x74
 8003962:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003964:	e853 3f00 	ldrex	r3, [r3]
 8003968:	673b      	str	r3, [r7, #112]	; 0x70
 800396a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800396c:	f023 0301 	bic.w	r3, r3, #1
 8003970:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	3308      	adds	r3, #8
 800397a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800397e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003982:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003984:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003986:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800398a:	e841 2300 	strex	r3, r2, [r1]
 800398e:	67bb      	str	r3, [r7, #120]	; 0x78
 8003990:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003992:	2b00      	cmp	r3, #0
 8003994:	d1e1      	bne.n	800395a <HAL_UART_IRQHandler+0x366>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	3308      	adds	r3, #8
 800399c:	663b      	str	r3, [r7, #96]	; 0x60
 800399e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039a0:	e853 3f00 	ldrex	r3, [r3]
 80039a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	3308      	adds	r3, #8
 80039b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80039ba:	66fa      	str	r2, [r7, #108]	; 0x6c
 80039bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80039be:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80039c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80039c2:	e841 2300 	strex	r3, r2, [r1]
 80039c6:	667b      	str	r3, [r7, #100]	; 0x64
 80039c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d1e3      	bne.n	8003996 <HAL_UART_IRQHandler+0x3a2>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2220      	movs	r2, #32
 80039d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	661a      	str	r2, [r3, #96]	; 0x60
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039e4:	e853 3f00 	ldrex	r3, [r3]
 80039e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80039ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039ec:	f023 0310 	bic.w	r3, r3, #16
 80039f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	461a      	mov	r2, r3
 80039fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80039fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8003a00:	657a      	str	r2, [r7, #84]	; 0x54
 8003a02:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003a04:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a06:	e841 2300 	strex	r3, r2, [r1]
 8003a0a:	653b      	str	r3, [r7, #80]	; 0x50
 8003a0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1e4      	bne.n	80039dc <HAL_UART_IRQHandler+0x3e8>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7fe f999 	bl	8001d4e <HAL_DMA_Abort>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2202      	movs	r2, #2
 8003a20:	665a      	str	r2, [r3, #100]	; 0x64
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	4619      	mov	r1, r3
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 f8cc 	bl	8003bd4 <HAL_UARTEx_RxEventCallback>
 8003a3c:	e0a4      	b.n	8003b88 <HAL_UART_IRQHandler+0x594>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	f000 8096 	beq.w	8003b8c <HAL_UART_IRQHandler+0x598>
 8003a60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f000 8091 	beq.w	8003b8c <HAL_UART_IRQHandler+0x598>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a72:	e853 3f00 	ldrex	r3, [r3]
 8003a76:	637b      	str	r3, [r7, #52]	; 0x34
 8003a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a7a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a7e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	461a      	mov	r2, r3
 8003a88:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003a8c:	647b      	str	r3, [r7, #68]	; 0x44
 8003a8e:	643a      	str	r2, [r7, #64]	; 0x40
 8003a90:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003a92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a94:	e841 2300 	strex	r3, r2, [r1]
 8003a98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d1e4      	bne.n	8003a6a <HAL_UART_IRQHandler+0x476>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	3308      	adds	r3, #8
 8003aa6:	627b      	str	r3, [r7, #36]	; 0x24
 8003aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aaa:	e853 3f00 	ldrex	r3, [r3]
 8003aae:	623b      	str	r3, [r7, #32]
 8003ab0:	6a3b      	ldr	r3, [r7, #32]
 8003ab2:	f023 0301 	bic.w	r3, r3, #1
 8003ab6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	3308      	adds	r3, #8
 8003ac0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003ac4:	633a      	str	r2, [r7, #48]	; 0x30
 8003ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ac8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003aca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003acc:	e841 2300 	strex	r3, r2, [r1]
 8003ad0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d1e3      	bne.n	8003aa0 <HAL_UART_IRQHandler+0x4ac>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2220      	movs	r2, #32
 8003adc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	661a      	str	r2, [r3, #96]	; 0x60
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	669a      	str	r2, [r3, #104]	; 0x68
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	613b      	str	r3, [r7, #16]
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	e853 3f00 	ldrex	r3, [r3]
 8003af8:	60fb      	str	r3, [r7, #12]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f023 0310 	bic.w	r3, r3, #16
 8003b00:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	461a      	mov	r2, r3
 8003b0a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003b0e:	61fb      	str	r3, [r7, #28]
 8003b10:	61ba      	str	r2, [r7, #24]
 8003b12:	69b9      	ldr	r1, [r7, #24]
 8003b14:	69fa      	ldr	r2, [r7, #28]
 8003b16:	e841 2300 	strex	r3, r2, [r1]
 8003b1a:	617b      	str	r3, [r7, #20]
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d1e4      	bne.n	8003aec <HAL_UART_IRQHandler+0x4f8>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2202      	movs	r2, #2
 8003b26:	665a      	str	r2, [r3, #100]	; 0x64
 8003b28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 f850 	bl	8003bd4 <HAL_UARTEx_RxEventCallback>
 8003b34:	e02a      	b.n	8003b8c <HAL_UART_IRQHandler+0x598>
 8003b36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d00e      	beq.n	8003b60 <HAL_UART_IRQHandler+0x56c>
 8003b42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d008      	beq.n	8003b60 <HAL_UART_IRQHandler+0x56c>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d01c      	beq.n	8003b90 <HAL_UART_IRQHandler+0x59c>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	4798      	blx	r3
 8003b5e:	e017      	b.n	8003b90 <HAL_UART_IRQHandler+0x59c>
 8003b60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d012      	beq.n	8003b92 <HAL_UART_IRQHandler+0x59e>
 8003b6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d00c      	beq.n	8003b92 <HAL_UART_IRQHandler+0x59e>
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f000 fd7b 	bl	8004674 <UART_EndTransmit_IT>
 8003b7e:	e008      	b.n	8003b92 <HAL_UART_IRQHandler+0x59e>
 8003b80:	bf00      	nop
 8003b82:	e006      	b.n	8003b92 <HAL_UART_IRQHandler+0x59e>
 8003b84:	bf00      	nop
 8003b86:	e004      	b.n	8003b92 <HAL_UART_IRQHandler+0x59e>
 8003b88:	bf00      	nop
 8003b8a:	e002      	b.n	8003b92 <HAL_UART_IRQHandler+0x59e>
 8003b8c:	bf00      	nop
 8003b8e:	e000      	b.n	8003b92 <HAL_UART_IRQHandler+0x59e>
 8003b90:	bf00      	nop
 8003b92:	37e8      	adds	r7, #232	; 0xe8
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <HAL_UART_TxCpltCallback>:
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	bf00      	nop
 8003ba2:	370c      	adds	r7, #12
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <HAL_UART_RxCpltCallback>:
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	bf00      	nop
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <HAL_UART_ErrorCallback>:
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	bf00      	nop
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <HAL_UARTEx_RxEventCallback>:
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	460b      	mov	r3, r1
 8003bde:	807b      	strh	r3, [r7, #2]
 8003be0:	bf00      	nop
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <UART_SetConfig>:
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b088      	sub	sp, #32
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	77bb      	strb	r3, [r7, #30]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	689a      	ldr	r2, [r3, #8]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	691b      	ldr	r3, [r3, #16]
 8003c00:	431a      	orrs	r2, r3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	695b      	ldr	r3, [r3, #20]
 8003c06:	431a      	orrs	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	69db      	ldr	r3, [r3, #28]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	617b      	str	r3, [r7, #20]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	4ba6      	ldr	r3, [pc, #664]	; (8003eb0 <UART_SetConfig+0x2c4>)
 8003c18:	4013      	ands	r3, r2
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	6812      	ldr	r2, [r2, #0]
 8003c1e:	6979      	ldr	r1, [r7, #20]
 8003c20:	430b      	orrs	r3, r1
 8003c22:	6013      	str	r3, [r2, #0]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	68da      	ldr	r2, [r3, #12]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	430a      	orrs	r2, r1
 8003c38:	605a      	str	r2, [r3, #4]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	699b      	ldr	r3, [r3, #24]
 8003c3e:	617b      	str	r3, [r7, #20]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a1b      	ldr	r3, [r3, #32]
 8003c44:	697a      	ldr	r2, [r7, #20]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	617b      	str	r3, [r7, #20]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	697a      	ldr	r2, [r7, #20]
 8003c5a:	430a      	orrs	r2, r1
 8003c5c:	609a      	str	r2, [r3, #8]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a94      	ldr	r2, [pc, #592]	; (8003eb4 <UART_SetConfig+0x2c8>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d120      	bne.n	8003caa <UART_SetConfig+0xbe>
 8003c68:	4b93      	ldr	r3, [pc, #588]	; (8003eb8 <UART_SetConfig+0x2cc>)
 8003c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c6e:	f003 0303 	and.w	r3, r3, #3
 8003c72:	2b03      	cmp	r3, #3
 8003c74:	d816      	bhi.n	8003ca4 <UART_SetConfig+0xb8>
 8003c76:	a201      	add	r2, pc, #4	; (adr r2, 8003c7c <UART_SetConfig+0x90>)
 8003c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c7c:	08003c8d 	.word	0x08003c8d
 8003c80:	08003c99 	.word	0x08003c99
 8003c84:	08003c93 	.word	0x08003c93
 8003c88:	08003c9f 	.word	0x08003c9f
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	77fb      	strb	r3, [r7, #31]
 8003c90:	e150      	b.n	8003f34 <UART_SetConfig+0x348>
 8003c92:	2302      	movs	r3, #2
 8003c94:	77fb      	strb	r3, [r7, #31]
 8003c96:	e14d      	b.n	8003f34 <UART_SetConfig+0x348>
 8003c98:	2304      	movs	r3, #4
 8003c9a:	77fb      	strb	r3, [r7, #31]
 8003c9c:	e14a      	b.n	8003f34 <UART_SetConfig+0x348>
 8003c9e:	2308      	movs	r3, #8
 8003ca0:	77fb      	strb	r3, [r7, #31]
 8003ca2:	e147      	b.n	8003f34 <UART_SetConfig+0x348>
 8003ca4:	2310      	movs	r3, #16
 8003ca6:	77fb      	strb	r3, [r7, #31]
 8003ca8:	e144      	b.n	8003f34 <UART_SetConfig+0x348>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a83      	ldr	r2, [pc, #524]	; (8003ebc <UART_SetConfig+0x2d0>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d132      	bne.n	8003d1a <UART_SetConfig+0x12e>
 8003cb4:	4b80      	ldr	r3, [pc, #512]	; (8003eb8 <UART_SetConfig+0x2cc>)
 8003cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cba:	f003 030c 	and.w	r3, r3, #12
 8003cbe:	2b0c      	cmp	r3, #12
 8003cc0:	d828      	bhi.n	8003d14 <UART_SetConfig+0x128>
 8003cc2:	a201      	add	r2, pc, #4	; (adr r2, 8003cc8 <UART_SetConfig+0xdc>)
 8003cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc8:	08003cfd 	.word	0x08003cfd
 8003ccc:	08003d15 	.word	0x08003d15
 8003cd0:	08003d15 	.word	0x08003d15
 8003cd4:	08003d15 	.word	0x08003d15
 8003cd8:	08003d09 	.word	0x08003d09
 8003cdc:	08003d15 	.word	0x08003d15
 8003ce0:	08003d15 	.word	0x08003d15
 8003ce4:	08003d15 	.word	0x08003d15
 8003ce8:	08003d03 	.word	0x08003d03
 8003cec:	08003d15 	.word	0x08003d15
 8003cf0:	08003d15 	.word	0x08003d15
 8003cf4:	08003d15 	.word	0x08003d15
 8003cf8:	08003d0f 	.word	0x08003d0f
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	77fb      	strb	r3, [r7, #31]
 8003d00:	e118      	b.n	8003f34 <UART_SetConfig+0x348>
 8003d02:	2302      	movs	r3, #2
 8003d04:	77fb      	strb	r3, [r7, #31]
 8003d06:	e115      	b.n	8003f34 <UART_SetConfig+0x348>
 8003d08:	2304      	movs	r3, #4
 8003d0a:	77fb      	strb	r3, [r7, #31]
 8003d0c:	e112      	b.n	8003f34 <UART_SetConfig+0x348>
 8003d0e:	2308      	movs	r3, #8
 8003d10:	77fb      	strb	r3, [r7, #31]
 8003d12:	e10f      	b.n	8003f34 <UART_SetConfig+0x348>
 8003d14:	2310      	movs	r3, #16
 8003d16:	77fb      	strb	r3, [r7, #31]
 8003d18:	e10c      	b.n	8003f34 <UART_SetConfig+0x348>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a68      	ldr	r2, [pc, #416]	; (8003ec0 <UART_SetConfig+0x2d4>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d120      	bne.n	8003d66 <UART_SetConfig+0x17a>
 8003d24:	4b64      	ldr	r3, [pc, #400]	; (8003eb8 <UART_SetConfig+0x2cc>)
 8003d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d2a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003d2e:	2b30      	cmp	r3, #48	; 0x30
 8003d30:	d013      	beq.n	8003d5a <UART_SetConfig+0x16e>
 8003d32:	2b30      	cmp	r3, #48	; 0x30
 8003d34:	d814      	bhi.n	8003d60 <UART_SetConfig+0x174>
 8003d36:	2b20      	cmp	r3, #32
 8003d38:	d009      	beq.n	8003d4e <UART_SetConfig+0x162>
 8003d3a:	2b20      	cmp	r3, #32
 8003d3c:	d810      	bhi.n	8003d60 <UART_SetConfig+0x174>
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d002      	beq.n	8003d48 <UART_SetConfig+0x15c>
 8003d42:	2b10      	cmp	r3, #16
 8003d44:	d006      	beq.n	8003d54 <UART_SetConfig+0x168>
 8003d46:	e00b      	b.n	8003d60 <UART_SetConfig+0x174>
 8003d48:	2300      	movs	r3, #0
 8003d4a:	77fb      	strb	r3, [r7, #31]
 8003d4c:	e0f2      	b.n	8003f34 <UART_SetConfig+0x348>
 8003d4e:	2302      	movs	r3, #2
 8003d50:	77fb      	strb	r3, [r7, #31]
 8003d52:	e0ef      	b.n	8003f34 <UART_SetConfig+0x348>
 8003d54:	2304      	movs	r3, #4
 8003d56:	77fb      	strb	r3, [r7, #31]
 8003d58:	e0ec      	b.n	8003f34 <UART_SetConfig+0x348>
 8003d5a:	2308      	movs	r3, #8
 8003d5c:	77fb      	strb	r3, [r7, #31]
 8003d5e:	e0e9      	b.n	8003f34 <UART_SetConfig+0x348>
 8003d60:	2310      	movs	r3, #16
 8003d62:	77fb      	strb	r3, [r7, #31]
 8003d64:	e0e6      	b.n	8003f34 <UART_SetConfig+0x348>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a56      	ldr	r2, [pc, #344]	; (8003ec4 <UART_SetConfig+0x2d8>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d120      	bne.n	8003db2 <UART_SetConfig+0x1c6>
 8003d70:	4b51      	ldr	r3, [pc, #324]	; (8003eb8 <UART_SetConfig+0x2cc>)
 8003d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d76:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003d7a:	2bc0      	cmp	r3, #192	; 0xc0
 8003d7c:	d013      	beq.n	8003da6 <UART_SetConfig+0x1ba>
 8003d7e:	2bc0      	cmp	r3, #192	; 0xc0
 8003d80:	d814      	bhi.n	8003dac <UART_SetConfig+0x1c0>
 8003d82:	2b80      	cmp	r3, #128	; 0x80
 8003d84:	d009      	beq.n	8003d9a <UART_SetConfig+0x1ae>
 8003d86:	2b80      	cmp	r3, #128	; 0x80
 8003d88:	d810      	bhi.n	8003dac <UART_SetConfig+0x1c0>
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d002      	beq.n	8003d94 <UART_SetConfig+0x1a8>
 8003d8e:	2b40      	cmp	r3, #64	; 0x40
 8003d90:	d006      	beq.n	8003da0 <UART_SetConfig+0x1b4>
 8003d92:	e00b      	b.n	8003dac <UART_SetConfig+0x1c0>
 8003d94:	2300      	movs	r3, #0
 8003d96:	77fb      	strb	r3, [r7, #31]
 8003d98:	e0cc      	b.n	8003f34 <UART_SetConfig+0x348>
 8003d9a:	2302      	movs	r3, #2
 8003d9c:	77fb      	strb	r3, [r7, #31]
 8003d9e:	e0c9      	b.n	8003f34 <UART_SetConfig+0x348>
 8003da0:	2304      	movs	r3, #4
 8003da2:	77fb      	strb	r3, [r7, #31]
 8003da4:	e0c6      	b.n	8003f34 <UART_SetConfig+0x348>
 8003da6:	2308      	movs	r3, #8
 8003da8:	77fb      	strb	r3, [r7, #31]
 8003daa:	e0c3      	b.n	8003f34 <UART_SetConfig+0x348>
 8003dac:	2310      	movs	r3, #16
 8003dae:	77fb      	strb	r3, [r7, #31]
 8003db0:	e0c0      	b.n	8003f34 <UART_SetConfig+0x348>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a44      	ldr	r2, [pc, #272]	; (8003ec8 <UART_SetConfig+0x2dc>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d125      	bne.n	8003e08 <UART_SetConfig+0x21c>
 8003dbc:	4b3e      	ldr	r3, [pc, #248]	; (8003eb8 <UART_SetConfig+0x2cc>)
 8003dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dca:	d017      	beq.n	8003dfc <UART_SetConfig+0x210>
 8003dcc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dd0:	d817      	bhi.n	8003e02 <UART_SetConfig+0x216>
 8003dd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dd6:	d00b      	beq.n	8003df0 <UART_SetConfig+0x204>
 8003dd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ddc:	d811      	bhi.n	8003e02 <UART_SetConfig+0x216>
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d003      	beq.n	8003dea <UART_SetConfig+0x1fe>
 8003de2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003de6:	d006      	beq.n	8003df6 <UART_SetConfig+0x20a>
 8003de8:	e00b      	b.n	8003e02 <UART_SetConfig+0x216>
 8003dea:	2300      	movs	r3, #0
 8003dec:	77fb      	strb	r3, [r7, #31]
 8003dee:	e0a1      	b.n	8003f34 <UART_SetConfig+0x348>
 8003df0:	2302      	movs	r3, #2
 8003df2:	77fb      	strb	r3, [r7, #31]
 8003df4:	e09e      	b.n	8003f34 <UART_SetConfig+0x348>
 8003df6:	2304      	movs	r3, #4
 8003df8:	77fb      	strb	r3, [r7, #31]
 8003dfa:	e09b      	b.n	8003f34 <UART_SetConfig+0x348>
 8003dfc:	2308      	movs	r3, #8
 8003dfe:	77fb      	strb	r3, [r7, #31]
 8003e00:	e098      	b.n	8003f34 <UART_SetConfig+0x348>
 8003e02:	2310      	movs	r3, #16
 8003e04:	77fb      	strb	r3, [r7, #31]
 8003e06:	e095      	b.n	8003f34 <UART_SetConfig+0x348>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a2f      	ldr	r2, [pc, #188]	; (8003ecc <UART_SetConfig+0x2e0>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d125      	bne.n	8003e5e <UART_SetConfig+0x272>
 8003e12:	4b29      	ldr	r3, [pc, #164]	; (8003eb8 <UART_SetConfig+0x2cc>)
 8003e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e18:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003e1c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e20:	d017      	beq.n	8003e52 <UART_SetConfig+0x266>
 8003e22:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e26:	d817      	bhi.n	8003e58 <UART_SetConfig+0x26c>
 8003e28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e2c:	d00b      	beq.n	8003e46 <UART_SetConfig+0x25a>
 8003e2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e32:	d811      	bhi.n	8003e58 <UART_SetConfig+0x26c>
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d003      	beq.n	8003e40 <UART_SetConfig+0x254>
 8003e38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e3c:	d006      	beq.n	8003e4c <UART_SetConfig+0x260>
 8003e3e:	e00b      	b.n	8003e58 <UART_SetConfig+0x26c>
 8003e40:	2301      	movs	r3, #1
 8003e42:	77fb      	strb	r3, [r7, #31]
 8003e44:	e076      	b.n	8003f34 <UART_SetConfig+0x348>
 8003e46:	2302      	movs	r3, #2
 8003e48:	77fb      	strb	r3, [r7, #31]
 8003e4a:	e073      	b.n	8003f34 <UART_SetConfig+0x348>
 8003e4c:	2304      	movs	r3, #4
 8003e4e:	77fb      	strb	r3, [r7, #31]
 8003e50:	e070      	b.n	8003f34 <UART_SetConfig+0x348>
 8003e52:	2308      	movs	r3, #8
 8003e54:	77fb      	strb	r3, [r7, #31]
 8003e56:	e06d      	b.n	8003f34 <UART_SetConfig+0x348>
 8003e58:	2310      	movs	r3, #16
 8003e5a:	77fb      	strb	r3, [r7, #31]
 8003e5c:	e06a      	b.n	8003f34 <UART_SetConfig+0x348>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a1b      	ldr	r2, [pc, #108]	; (8003ed0 <UART_SetConfig+0x2e4>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d138      	bne.n	8003eda <UART_SetConfig+0x2ee>
 8003e68:	4b13      	ldr	r3, [pc, #76]	; (8003eb8 <UART_SetConfig+0x2cc>)
 8003e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e6e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003e72:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003e76:	d017      	beq.n	8003ea8 <UART_SetConfig+0x2bc>
 8003e78:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003e7c:	d82a      	bhi.n	8003ed4 <UART_SetConfig+0x2e8>
 8003e7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e82:	d00b      	beq.n	8003e9c <UART_SetConfig+0x2b0>
 8003e84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e88:	d824      	bhi.n	8003ed4 <UART_SetConfig+0x2e8>
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d003      	beq.n	8003e96 <UART_SetConfig+0x2aa>
 8003e8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e92:	d006      	beq.n	8003ea2 <UART_SetConfig+0x2b6>
 8003e94:	e01e      	b.n	8003ed4 <UART_SetConfig+0x2e8>
 8003e96:	2300      	movs	r3, #0
 8003e98:	77fb      	strb	r3, [r7, #31]
 8003e9a:	e04b      	b.n	8003f34 <UART_SetConfig+0x348>
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	77fb      	strb	r3, [r7, #31]
 8003ea0:	e048      	b.n	8003f34 <UART_SetConfig+0x348>
 8003ea2:	2304      	movs	r3, #4
 8003ea4:	77fb      	strb	r3, [r7, #31]
 8003ea6:	e045      	b.n	8003f34 <UART_SetConfig+0x348>
 8003ea8:	2308      	movs	r3, #8
 8003eaa:	77fb      	strb	r3, [r7, #31]
 8003eac:	e042      	b.n	8003f34 <UART_SetConfig+0x348>
 8003eae:	bf00      	nop
 8003eb0:	efff69f3 	.word	0xefff69f3
 8003eb4:	40011000 	.word	0x40011000
 8003eb8:	40023800 	.word	0x40023800
 8003ebc:	40004400 	.word	0x40004400
 8003ec0:	40004800 	.word	0x40004800
 8003ec4:	40004c00 	.word	0x40004c00
 8003ec8:	40005000 	.word	0x40005000
 8003ecc:	40011400 	.word	0x40011400
 8003ed0:	40007800 	.word	0x40007800
 8003ed4:	2310      	movs	r3, #16
 8003ed6:	77fb      	strb	r3, [r7, #31]
 8003ed8:	e02c      	b.n	8003f34 <UART_SetConfig+0x348>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a72      	ldr	r2, [pc, #456]	; (80040a8 <UART_SetConfig+0x4bc>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d125      	bne.n	8003f30 <UART_SetConfig+0x344>
 8003ee4:	4b71      	ldr	r3, [pc, #452]	; (80040ac <UART_SetConfig+0x4c0>)
 8003ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003eee:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003ef2:	d017      	beq.n	8003f24 <UART_SetConfig+0x338>
 8003ef4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003ef8:	d817      	bhi.n	8003f2a <UART_SetConfig+0x33e>
 8003efa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003efe:	d00b      	beq.n	8003f18 <UART_SetConfig+0x32c>
 8003f00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f04:	d811      	bhi.n	8003f2a <UART_SetConfig+0x33e>
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d003      	beq.n	8003f12 <UART_SetConfig+0x326>
 8003f0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f0e:	d006      	beq.n	8003f1e <UART_SetConfig+0x332>
 8003f10:	e00b      	b.n	8003f2a <UART_SetConfig+0x33e>
 8003f12:	2300      	movs	r3, #0
 8003f14:	77fb      	strb	r3, [r7, #31]
 8003f16:	e00d      	b.n	8003f34 <UART_SetConfig+0x348>
 8003f18:	2302      	movs	r3, #2
 8003f1a:	77fb      	strb	r3, [r7, #31]
 8003f1c:	e00a      	b.n	8003f34 <UART_SetConfig+0x348>
 8003f1e:	2304      	movs	r3, #4
 8003f20:	77fb      	strb	r3, [r7, #31]
 8003f22:	e007      	b.n	8003f34 <UART_SetConfig+0x348>
 8003f24:	2308      	movs	r3, #8
 8003f26:	77fb      	strb	r3, [r7, #31]
 8003f28:	e004      	b.n	8003f34 <UART_SetConfig+0x348>
 8003f2a:	2310      	movs	r3, #16
 8003f2c:	77fb      	strb	r3, [r7, #31]
 8003f2e:	e001      	b.n	8003f34 <UART_SetConfig+0x348>
 8003f30:	2310      	movs	r3, #16
 8003f32:	77fb      	strb	r3, [r7, #31]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	69db      	ldr	r3, [r3, #28]
 8003f38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f3c:	d15b      	bne.n	8003ff6 <UART_SetConfig+0x40a>
 8003f3e:	7ffb      	ldrb	r3, [r7, #31]
 8003f40:	2b08      	cmp	r3, #8
 8003f42:	d828      	bhi.n	8003f96 <UART_SetConfig+0x3aa>
 8003f44:	a201      	add	r2, pc, #4	; (adr r2, 8003f4c <UART_SetConfig+0x360>)
 8003f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f4a:	bf00      	nop
 8003f4c:	08003f71 	.word	0x08003f71
 8003f50:	08003f79 	.word	0x08003f79
 8003f54:	08003f81 	.word	0x08003f81
 8003f58:	08003f97 	.word	0x08003f97
 8003f5c:	08003f87 	.word	0x08003f87
 8003f60:	08003f97 	.word	0x08003f97
 8003f64:	08003f97 	.word	0x08003f97
 8003f68:	08003f97 	.word	0x08003f97
 8003f6c:	08003f8f 	.word	0x08003f8f
 8003f70:	f7fe fe12 	bl	8002b98 <HAL_RCC_GetPCLK1Freq>
 8003f74:	61b8      	str	r0, [r7, #24]
 8003f76:	e013      	b.n	8003fa0 <UART_SetConfig+0x3b4>
 8003f78:	f7fe fe22 	bl	8002bc0 <HAL_RCC_GetPCLK2Freq>
 8003f7c:	61b8      	str	r0, [r7, #24]
 8003f7e:	e00f      	b.n	8003fa0 <UART_SetConfig+0x3b4>
 8003f80:	4b4b      	ldr	r3, [pc, #300]	; (80040b0 <UART_SetConfig+0x4c4>)
 8003f82:	61bb      	str	r3, [r7, #24]
 8003f84:	e00c      	b.n	8003fa0 <UART_SetConfig+0x3b4>
 8003f86:	f7fe fd35 	bl	80029f4 <HAL_RCC_GetSysClockFreq>
 8003f8a:	61b8      	str	r0, [r7, #24]
 8003f8c:	e008      	b.n	8003fa0 <UART_SetConfig+0x3b4>
 8003f8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f92:	61bb      	str	r3, [r7, #24]
 8003f94:	e004      	b.n	8003fa0 <UART_SetConfig+0x3b4>
 8003f96:	2300      	movs	r3, #0
 8003f98:	61bb      	str	r3, [r7, #24]
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	77bb      	strb	r3, [r7, #30]
 8003f9e:	bf00      	nop
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d074      	beq.n	8004090 <UART_SetConfig+0x4a4>
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	005a      	lsls	r2, r3, #1
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	085b      	lsrs	r3, r3, #1
 8003fb0:	441a      	add	r2, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fba:	613b      	str	r3, [r7, #16]
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	2b0f      	cmp	r3, #15
 8003fc0:	d916      	bls.n	8003ff0 <UART_SetConfig+0x404>
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fc8:	d212      	bcs.n	8003ff0 <UART_SetConfig+0x404>
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	f023 030f 	bic.w	r3, r3, #15
 8003fd2:	81fb      	strh	r3, [r7, #14]
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	085b      	lsrs	r3, r3, #1
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	f003 0307 	and.w	r3, r3, #7
 8003fde:	b29a      	uxth	r2, r3
 8003fe0:	89fb      	ldrh	r3, [r7, #14]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	81fb      	strh	r3, [r7, #14]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	89fa      	ldrh	r2, [r7, #14]
 8003fec:	60da      	str	r2, [r3, #12]
 8003fee:	e04f      	b.n	8004090 <UART_SetConfig+0x4a4>
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	77bb      	strb	r3, [r7, #30]
 8003ff4:	e04c      	b.n	8004090 <UART_SetConfig+0x4a4>
 8003ff6:	7ffb      	ldrb	r3, [r7, #31]
 8003ff8:	2b08      	cmp	r3, #8
 8003ffa:	d828      	bhi.n	800404e <UART_SetConfig+0x462>
 8003ffc:	a201      	add	r2, pc, #4	; (adr r2, 8004004 <UART_SetConfig+0x418>)
 8003ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004002:	bf00      	nop
 8004004:	08004029 	.word	0x08004029
 8004008:	08004031 	.word	0x08004031
 800400c:	08004039 	.word	0x08004039
 8004010:	0800404f 	.word	0x0800404f
 8004014:	0800403f 	.word	0x0800403f
 8004018:	0800404f 	.word	0x0800404f
 800401c:	0800404f 	.word	0x0800404f
 8004020:	0800404f 	.word	0x0800404f
 8004024:	08004047 	.word	0x08004047
 8004028:	f7fe fdb6 	bl	8002b98 <HAL_RCC_GetPCLK1Freq>
 800402c:	61b8      	str	r0, [r7, #24]
 800402e:	e013      	b.n	8004058 <UART_SetConfig+0x46c>
 8004030:	f7fe fdc6 	bl	8002bc0 <HAL_RCC_GetPCLK2Freq>
 8004034:	61b8      	str	r0, [r7, #24]
 8004036:	e00f      	b.n	8004058 <UART_SetConfig+0x46c>
 8004038:	4b1d      	ldr	r3, [pc, #116]	; (80040b0 <UART_SetConfig+0x4c4>)
 800403a:	61bb      	str	r3, [r7, #24]
 800403c:	e00c      	b.n	8004058 <UART_SetConfig+0x46c>
 800403e:	f7fe fcd9 	bl	80029f4 <HAL_RCC_GetSysClockFreq>
 8004042:	61b8      	str	r0, [r7, #24]
 8004044:	e008      	b.n	8004058 <UART_SetConfig+0x46c>
 8004046:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800404a:	61bb      	str	r3, [r7, #24]
 800404c:	e004      	b.n	8004058 <UART_SetConfig+0x46c>
 800404e:	2300      	movs	r3, #0
 8004050:	61bb      	str	r3, [r7, #24]
 8004052:	2301      	movs	r3, #1
 8004054:	77bb      	strb	r3, [r7, #30]
 8004056:	bf00      	nop
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d018      	beq.n	8004090 <UART_SetConfig+0x4a4>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	085a      	lsrs	r2, r3, #1
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	441a      	add	r2, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004070:	613b      	str	r3, [r7, #16]
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	2b0f      	cmp	r3, #15
 8004076:	d909      	bls.n	800408c <UART_SetConfig+0x4a0>
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800407e:	d205      	bcs.n	800408c <UART_SetConfig+0x4a0>
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	b29a      	uxth	r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	60da      	str	r2, [r3, #12]
 800408a:	e001      	b.n	8004090 <UART_SetConfig+0x4a4>
 800408c:	2301      	movs	r3, #1
 800408e:	77bb      	strb	r3, [r7, #30]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	669a      	str	r2, [r3, #104]	; 0x68
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	66da      	str	r2, [r3, #108]	; 0x6c
 800409c:	7fbb      	ldrb	r3, [r7, #30]
 800409e:	4618      	mov	r0, r3
 80040a0:	3720      	adds	r7, #32
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	40007c00 	.word	0x40007c00
 80040ac:	40023800 	.word	0x40023800
 80040b0:	00f42400 	.word	0x00f42400

080040b4 <UART_AdvFeatureConfig>:
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c0:	f003 0301 	and.w	r3, r3, #1
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d00a      	beq.n	80040de <UART_AdvFeatureConfig+0x2a>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	430a      	orrs	r2, r1
 80040dc:	605a      	str	r2, [r3, #4]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e2:	f003 0302 	and.w	r3, r3, #2
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00a      	beq.n	8004100 <UART_AdvFeatureConfig+0x4c>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	430a      	orrs	r2, r1
 80040fe:	605a      	str	r2, [r3, #4]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004104:	f003 0304 	and.w	r3, r3, #4
 8004108:	2b00      	cmp	r3, #0
 800410a:	d00a      	beq.n	8004122 <UART_AdvFeatureConfig+0x6e>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	430a      	orrs	r2, r1
 8004120:	605a      	str	r2, [r3, #4]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004126:	f003 0308 	and.w	r3, r3, #8
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00a      	beq.n	8004144 <UART_AdvFeatureConfig+0x90>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	430a      	orrs	r2, r1
 8004142:	605a      	str	r2, [r3, #4]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004148:	f003 0310 	and.w	r3, r3, #16
 800414c:	2b00      	cmp	r3, #0
 800414e:	d00a      	beq.n	8004166 <UART_AdvFeatureConfig+0xb2>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	430a      	orrs	r2, r1
 8004164:	609a      	str	r2, [r3, #8]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416a:	f003 0320 	and.w	r3, r3, #32
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00a      	beq.n	8004188 <UART_AdvFeatureConfig+0xd4>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	430a      	orrs	r2, r1
 8004186:	609a      	str	r2, [r3, #8]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004190:	2b00      	cmp	r3, #0
 8004192:	d01a      	beq.n	80041ca <UART_AdvFeatureConfig+0x116>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	430a      	orrs	r2, r1
 80041a8:	605a      	str	r2, [r3, #4]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041b2:	d10a      	bne.n	80041ca <UART_AdvFeatureConfig+0x116>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	430a      	orrs	r2, r1
 80041c8:	605a      	str	r2, [r3, #4]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d00a      	beq.n	80041ec <UART_AdvFeatureConfig+0x138>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	430a      	orrs	r2, r1
 80041ea:	605a      	str	r2, [r3, #4]
 80041ec:	bf00      	nop
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <UART_CheckIdleState>:
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b086      	sub	sp, #24
 80041fc:	af02      	add	r7, sp, #8
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8004208:	f7fd fc84 	bl	8001b14 <HAL_GetTick>
 800420c:	60f8      	str	r0, [r7, #12]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0308 	and.w	r3, r3, #8
 8004218:	2b08      	cmp	r3, #8
 800421a:	d10e      	bne.n	800423a <UART_CheckIdleState+0x42>
 800421c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004220:	9300      	str	r3, [sp, #0]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2200      	movs	r2, #0
 8004226:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 f81b 	bl	8004266 <UART_WaitOnFlagUntilTimeout>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d001      	beq.n	800423a <UART_CheckIdleState+0x42>
 8004236:	2303      	movs	r3, #3
 8004238:	e011      	b.n	800425e <UART_CheckIdleState+0x66>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2220      	movs	r2, #32
 800423e:	67da      	str	r2, [r3, #124]	; 0x7c
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2220      	movs	r2, #32
 8004244:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	661a      	str	r2, [r3, #96]	; 0x60
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	665a      	str	r2, [r3, #100]	; 0x64
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 800425c:	2300      	movs	r3, #0
 800425e:	4618      	mov	r0, r3
 8004260:	3710      	adds	r7, #16
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}

08004266 <UART_WaitOnFlagUntilTimeout>:
 8004266:	b580      	push	{r7, lr}
 8004268:	b09c      	sub	sp, #112	; 0x70
 800426a:	af00      	add	r7, sp, #0
 800426c:	60f8      	str	r0, [r7, #12]
 800426e:	60b9      	str	r1, [r7, #8]
 8004270:	603b      	str	r3, [r7, #0]
 8004272:	4613      	mov	r3, r2
 8004274:	71fb      	strb	r3, [r7, #7]
 8004276:	e0a7      	b.n	80043c8 <UART_WaitOnFlagUntilTimeout+0x162>
 8004278:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800427a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800427e:	f000 80a3 	beq.w	80043c8 <UART_WaitOnFlagUntilTimeout+0x162>
 8004282:	f7fd fc47 	bl	8001b14 <HAL_GetTick>
 8004286:	4602      	mov	r2, r0
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800428e:	429a      	cmp	r2, r3
 8004290:	d302      	bcc.n	8004298 <UART_WaitOnFlagUntilTimeout+0x32>
 8004292:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004294:	2b00      	cmp	r3, #0
 8004296:	d13f      	bne.n	8004318 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	653b      	str	r3, [r7, #80]	; 0x50
 800429e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042a0:	e853 3f00 	ldrex	r3, [r3]
 80042a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80042ac:	667b      	str	r3, [r7, #100]	; 0x64
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	461a      	mov	r2, r3
 80042b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042b8:	65ba      	str	r2, [r7, #88]	; 0x58
 80042ba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80042bc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80042be:	e841 2300 	strex	r3, r2, [r1]
 80042c2:	657b      	str	r3, [r7, #84]	; 0x54
 80042c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d1e6      	bne.n	8004298 <UART_WaitOnFlagUntilTimeout+0x32>
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	3308      	adds	r3, #8
 80042d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042d4:	e853 3f00 	ldrex	r3, [r3]
 80042d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80042da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042dc:	f023 0301 	bic.w	r3, r3, #1
 80042e0:	663b      	str	r3, [r7, #96]	; 0x60
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	3308      	adds	r3, #8
 80042e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80042ea:	64ba      	str	r2, [r7, #72]	; 0x48
 80042ec:	647b      	str	r3, [r7, #68]	; 0x44
 80042ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80042f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042f2:	e841 2300 	strex	r3, r2, [r1]
 80042f6:	643b      	str	r3, [r7, #64]	; 0x40
 80042f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d1e5      	bne.n	80042ca <UART_WaitOnFlagUntilTimeout+0x64>
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2220      	movs	r2, #32
 8004302:	67da      	str	r2, [r3, #124]	; 0x7c
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2220      	movs	r2, #32
 8004308:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2200      	movs	r2, #0
 8004310:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 8004314:	2303      	movs	r3, #3
 8004316:	e068      	b.n	80043ea <UART_WaitOnFlagUntilTimeout+0x184>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0304 	and.w	r3, r3, #4
 8004322:	2b00      	cmp	r3, #0
 8004324:	d050      	beq.n	80043c8 <UART_WaitOnFlagUntilTimeout+0x162>
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	69db      	ldr	r3, [r3, #28]
 800432c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004330:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004334:	d148      	bne.n	80043c8 <UART_WaitOnFlagUntilTimeout+0x162>
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800433e:	621a      	str	r2, [r3, #32]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	62bb      	str	r3, [r7, #40]	; 0x28
 8004346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004348:	e853 3f00 	ldrex	r3, [r3]
 800434c:	627b      	str	r3, [r7, #36]	; 0x24
 800434e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004350:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004354:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	461a      	mov	r2, r3
 800435c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800435e:	637b      	str	r3, [r7, #52]	; 0x34
 8004360:	633a      	str	r2, [r7, #48]	; 0x30
 8004362:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004364:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004366:	e841 2300 	strex	r3, r2, [r1]
 800436a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800436c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800436e:	2b00      	cmp	r3, #0
 8004370:	d1e6      	bne.n	8004340 <UART_WaitOnFlagUntilTimeout+0xda>
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	3308      	adds	r3, #8
 8004378:	617b      	str	r3, [r7, #20]
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	e853 3f00 	ldrex	r3, [r3]
 8004380:	613b      	str	r3, [r7, #16]
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	f023 0301 	bic.w	r3, r3, #1
 8004388:	66bb      	str	r3, [r7, #104]	; 0x68
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	3308      	adds	r3, #8
 8004390:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004392:	623a      	str	r2, [r7, #32]
 8004394:	61fb      	str	r3, [r7, #28]
 8004396:	69f9      	ldr	r1, [r7, #28]
 8004398:	6a3a      	ldr	r2, [r7, #32]
 800439a:	e841 2300 	strex	r3, r2, [r1]
 800439e:	61bb      	str	r3, [r7, #24]
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d1e5      	bne.n	8004372 <UART_WaitOnFlagUntilTimeout+0x10c>
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2220      	movs	r2, #32
 80043aa:	67da      	str	r2, [r3, #124]	; 0x7c
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2220      	movs	r2, #32
 80043b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2220      	movs	r2, #32
 80043b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 80043c4:	2303      	movs	r3, #3
 80043c6:	e010      	b.n	80043ea <UART_WaitOnFlagUntilTimeout+0x184>
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	69da      	ldr	r2, [r3, #28]
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	4013      	ands	r3, r2
 80043d2:	68ba      	ldr	r2, [r7, #8]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	bf0c      	ite	eq
 80043d8:	2301      	moveq	r3, #1
 80043da:	2300      	movne	r3, #0
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	461a      	mov	r2, r3
 80043e0:	79fb      	ldrb	r3, [r7, #7]
 80043e2:	429a      	cmp	r2, r3
 80043e4:	f43f af48 	beq.w	8004278 <UART_WaitOnFlagUntilTimeout+0x12>
 80043e8:	2300      	movs	r3, #0
 80043ea:	4618      	mov	r0, r3
 80043ec:	3770      	adds	r7, #112	; 0x70
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
	...

080043f4 <UART_Start_Receive_IT>:
 80043f4:	b480      	push	{r7}
 80043f6:	b097      	sub	sp, #92	; 0x5c
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	4613      	mov	r3, r2
 8004400:	80fb      	strh	r3, [r7, #6]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	68ba      	ldr	r2, [r7, #8]
 8004406:	655a      	str	r2, [r3, #84]	; 0x54
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	88fa      	ldrh	r2, [r7, #6]
 800440c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	88fa      	ldrh	r2, [r7, #6]
 8004414:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2200      	movs	r2, #0
 800441c:	669a      	str	r2, [r3, #104]	; 0x68
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004426:	d10e      	bne.n	8004446 <UART_Start_Receive_IT+0x52>
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	691b      	ldr	r3, [r3, #16]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d105      	bne.n	800443c <UART_Start_Receive_IT+0x48>
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004436:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800443a:	e02d      	b.n	8004498 <UART_Start_Receive_IT+0xa4>
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	22ff      	movs	r2, #255	; 0xff
 8004440:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004444:	e028      	b.n	8004498 <UART_Start_Receive_IT+0xa4>
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d10d      	bne.n	800446a <UART_Start_Receive_IT+0x76>
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d104      	bne.n	8004460 <UART_Start_Receive_IT+0x6c>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	22ff      	movs	r2, #255	; 0xff
 800445a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800445e:	e01b      	b.n	8004498 <UART_Start_Receive_IT+0xa4>
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	227f      	movs	r2, #127	; 0x7f
 8004464:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004468:	e016      	b.n	8004498 <UART_Start_Receive_IT+0xa4>
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004472:	d10d      	bne.n	8004490 <UART_Start_Receive_IT+0x9c>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	691b      	ldr	r3, [r3, #16]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d104      	bne.n	8004486 <UART_Start_Receive_IT+0x92>
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	227f      	movs	r2, #127	; 0x7f
 8004480:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004484:	e008      	b.n	8004498 <UART_Start_Receive_IT+0xa4>
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	223f      	movs	r2, #63	; 0x3f
 800448a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800448e:	e003      	b.n	8004498 <UART_Start_Receive_IT+0xa4>
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2200      	movs	r2, #0
 8004494:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2200      	movs	r2, #0
 800449c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2222      	movs	r2, #34	; 0x22
 80044a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	3308      	adds	r3, #8
 80044ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044b2:	e853 3f00 	ldrex	r3, [r3]
 80044b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80044b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ba:	f043 0301 	orr.w	r3, r3, #1
 80044be:	657b      	str	r3, [r7, #84]	; 0x54
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	3308      	adds	r3, #8
 80044c6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80044c8:	64ba      	str	r2, [r7, #72]	; 0x48
 80044ca:	647b      	str	r3, [r7, #68]	; 0x44
 80044cc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80044ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044d0:	e841 2300 	strex	r3, r2, [r1]
 80044d4:	643b      	str	r3, [r7, #64]	; 0x40
 80044d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d1e5      	bne.n	80044a8 <UART_Start_Receive_IT+0xb4>
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044e4:	d107      	bne.n	80044f6 <UART_Start_Receive_IT+0x102>
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d103      	bne.n	80044f6 <UART_Start_Receive_IT+0x102>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	4a21      	ldr	r2, [pc, #132]	; (8004578 <UART_Start_Receive_IT+0x184>)
 80044f2:	669a      	str	r2, [r3, #104]	; 0x68
 80044f4:	e002      	b.n	80044fc <UART_Start_Receive_IT+0x108>
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	4a20      	ldr	r2, [pc, #128]	; (800457c <UART_Start_Receive_IT+0x188>)
 80044fa:	669a      	str	r2, [r3, #104]	; 0x68
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d019      	beq.n	8004538 <UART_Start_Receive_IT+0x144>
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	62bb      	str	r3, [r7, #40]	; 0x28
 800450a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800450c:	e853 3f00 	ldrex	r3, [r3]
 8004510:	627b      	str	r3, [r7, #36]	; 0x24
 8004512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004514:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004518:	64fb      	str	r3, [r7, #76]	; 0x4c
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	461a      	mov	r2, r3
 8004520:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004522:	637b      	str	r3, [r7, #52]	; 0x34
 8004524:	633a      	str	r2, [r7, #48]	; 0x30
 8004526:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004528:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800452a:	e841 2300 	strex	r3, r2, [r1]
 800452e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004532:	2b00      	cmp	r3, #0
 8004534:	d1e6      	bne.n	8004504 <UART_Start_Receive_IT+0x110>
 8004536:	e018      	b.n	800456a <UART_Start_Receive_IT+0x176>
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	617b      	str	r3, [r7, #20]
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	e853 3f00 	ldrex	r3, [r3]
 8004544:	613b      	str	r3, [r7, #16]
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	f043 0320 	orr.w	r3, r3, #32
 800454c:	653b      	str	r3, [r7, #80]	; 0x50
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	461a      	mov	r2, r3
 8004554:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004556:	623b      	str	r3, [r7, #32]
 8004558:	61fa      	str	r2, [r7, #28]
 800455a:	69f9      	ldr	r1, [r7, #28]
 800455c:	6a3a      	ldr	r2, [r7, #32]
 800455e:	e841 2300 	strex	r3, r2, [r1]
 8004562:	61bb      	str	r3, [r7, #24]
 8004564:	69bb      	ldr	r3, [r7, #24]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d1e6      	bne.n	8004538 <UART_Start_Receive_IT+0x144>
 800456a:	2300      	movs	r3, #0
 800456c:	4618      	mov	r0, r3
 800456e:	375c      	adds	r7, #92	; 0x5c
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr
 8004578:	0800482f 	.word	0x0800482f
 800457c:	080046c9 	.word	0x080046c9

08004580 <UART_EndRxTransfer>:
 8004580:	b480      	push	{r7}
 8004582:	b095      	sub	sp, #84	; 0x54
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	637b      	str	r3, [r7, #52]	; 0x34
 800458e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004590:	e853 3f00 	ldrex	r3, [r3]
 8004594:	633b      	str	r3, [r7, #48]	; 0x30
 8004596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004598:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800459c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	461a      	mov	r2, r3
 80045a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045a6:	643b      	str	r3, [r7, #64]	; 0x40
 80045a8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80045aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80045ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80045ae:	e841 2300 	strex	r3, r2, [r1]
 80045b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80045b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d1e6      	bne.n	8004588 <UART_EndRxTransfer+0x8>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	3308      	adds	r3, #8
 80045c0:	623b      	str	r3, [r7, #32]
 80045c2:	6a3b      	ldr	r3, [r7, #32]
 80045c4:	e853 3f00 	ldrex	r3, [r3]
 80045c8:	61fb      	str	r3, [r7, #28]
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	f023 0301 	bic.w	r3, r3, #1
 80045d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	3308      	adds	r3, #8
 80045d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80045de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045e2:	e841 2300 	strex	r3, r2, [r1]
 80045e6:	627b      	str	r3, [r7, #36]	; 0x24
 80045e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d1e5      	bne.n	80045ba <UART_EndRxTransfer+0x3a>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d118      	bne.n	8004628 <UART_EndRxTransfer+0xa8>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	60fb      	str	r3, [r7, #12]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	e853 3f00 	ldrex	r3, [r3]
 8004602:	60bb      	str	r3, [r7, #8]
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	f023 0310 	bic.w	r3, r3, #16
 800460a:	647b      	str	r3, [r7, #68]	; 0x44
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	461a      	mov	r2, r3
 8004612:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004614:	61bb      	str	r3, [r7, #24]
 8004616:	617a      	str	r2, [r7, #20]
 8004618:	6979      	ldr	r1, [r7, #20]
 800461a:	69ba      	ldr	r2, [r7, #24]
 800461c:	e841 2300 	strex	r3, r2, [r1]
 8004620:	613b      	str	r3, [r7, #16]
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d1e6      	bne.n	80045f6 <UART_EndRxTransfer+0x76>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2220      	movs	r2, #32
 800462c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	661a      	str	r2, [r3, #96]	; 0x60
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	669a      	str	r2, [r3, #104]	; 0x68
 800463c:	bf00      	nop
 800463e:	3754      	adds	r7, #84	; 0x54
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <UART_DMAAbortOnError>:
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004654:	60fb      	str	r3, [r7, #12]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2200      	movs	r2, #0
 800465a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2200      	movs	r2, #0
 8004662:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	f7ff faaa 	bl	8003bc0 <HAL_UART_ErrorCallback>
 800466c:	bf00      	nop
 800466e:	3710      	adds	r7, #16
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <UART_EndTransmit_IT>:
 8004674:	b580      	push	{r7, lr}
 8004676:	b088      	sub	sp, #32
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	60fb      	str	r3, [r7, #12]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	e853 3f00 	ldrex	r3, [r3]
 8004688:	60bb      	str	r3, [r7, #8]
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004690:	61fb      	str	r3, [r7, #28]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	461a      	mov	r2, r3
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	61bb      	str	r3, [r7, #24]
 800469c:	617a      	str	r2, [r7, #20]
 800469e:	6979      	ldr	r1, [r7, #20]
 80046a0:	69ba      	ldr	r2, [r7, #24]
 80046a2:	e841 2300 	strex	r3, r2, [r1]
 80046a6:	613b      	str	r3, [r7, #16]
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d1e6      	bne.n	800467c <UART_EndTransmit_IT+0x8>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2220      	movs	r2, #32
 80046b2:	67da      	str	r2, [r3, #124]	; 0x7c
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	66da      	str	r2, [r3, #108]	; 0x6c
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f7ff fa6c 	bl	8003b98 <HAL_UART_TxCpltCallback>
 80046c0:	bf00      	nop
 80046c2:	3720      	adds	r7, #32
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <UART_RxISR_8BIT>:
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b096      	sub	sp, #88	; 0x58
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80046d6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046e0:	2b22      	cmp	r3, #34	; 0x22
 80046e2:	f040 8098 	bne.w	8004816 <UART_RxISR_8BIT+0x14e>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ec:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 80046f0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80046f4:	b2d9      	uxtb	r1, r3
 80046f6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80046fa:	b2da      	uxtb	r2, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004700:	400a      	ands	r2, r1
 8004702:	b2d2      	uxtb	r2, r2
 8004704:	701a      	strb	r2, [r3, #0]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800470a:	1c5a      	adds	r2, r3, #1
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	655a      	str	r2, [r3, #84]	; 0x54
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004716:	b29b      	uxth	r3, r3
 8004718:	3b01      	subs	r3, #1
 800471a:	b29a      	uxth	r2, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004728:	b29b      	uxth	r3, r3
 800472a:	2b00      	cmp	r3, #0
 800472c:	d17b      	bne.n	8004826 <UART_RxISR_8BIT+0x15e>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	63bb      	str	r3, [r7, #56]	; 0x38
 8004734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004736:	e853 3f00 	ldrex	r3, [r3]
 800473a:	637b      	str	r3, [r7, #52]	; 0x34
 800473c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800473e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004742:	653b      	str	r3, [r7, #80]	; 0x50
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	461a      	mov	r2, r3
 800474a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800474c:	647b      	str	r3, [r7, #68]	; 0x44
 800474e:	643a      	str	r2, [r7, #64]	; 0x40
 8004750:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004752:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004754:	e841 2300 	strex	r3, r2, [r1]
 8004758:	63fb      	str	r3, [r7, #60]	; 0x3c
 800475a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800475c:	2b00      	cmp	r3, #0
 800475e:	d1e6      	bne.n	800472e <UART_RxISR_8BIT+0x66>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	3308      	adds	r3, #8
 8004766:	627b      	str	r3, [r7, #36]	; 0x24
 8004768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476a:	e853 3f00 	ldrex	r3, [r3]
 800476e:	623b      	str	r3, [r7, #32]
 8004770:	6a3b      	ldr	r3, [r7, #32]
 8004772:	f023 0301 	bic.w	r3, r3, #1
 8004776:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	3308      	adds	r3, #8
 800477e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004780:	633a      	str	r2, [r7, #48]	; 0x30
 8004782:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004784:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004786:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004788:	e841 2300 	strex	r3, r2, [r1]
 800478c:	62bb      	str	r3, [r7, #40]	; 0x28
 800478e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004790:	2b00      	cmp	r3, #0
 8004792:	d1e5      	bne.n	8004760 <UART_RxISR_8BIT+0x98>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2220      	movs	r2, #32
 8004798:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	669a      	str	r2, [r3, #104]	; 0x68
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	665a      	str	r2, [r3, #100]	; 0x64
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d12e      	bne.n	800480e <UART_RxISR_8BIT+0x146>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	661a      	str	r2, [r3, #96]	; 0x60
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	613b      	str	r3, [r7, #16]
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	e853 3f00 	ldrex	r3, [r3]
 80047c2:	60fb      	str	r3, [r7, #12]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f023 0310 	bic.w	r3, r3, #16
 80047ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	461a      	mov	r2, r3
 80047d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047d4:	61fb      	str	r3, [r7, #28]
 80047d6:	61ba      	str	r2, [r7, #24]
 80047d8:	69b9      	ldr	r1, [r7, #24]
 80047da:	69fa      	ldr	r2, [r7, #28]
 80047dc:	e841 2300 	strex	r3, r2, [r1]
 80047e0:	617b      	str	r3, [r7, #20]
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d1e6      	bne.n	80047b6 <UART_RxISR_8BIT+0xee>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	69db      	ldr	r3, [r3, #28]
 80047ee:	f003 0310 	and.w	r3, r3, #16
 80047f2:	2b10      	cmp	r3, #16
 80047f4:	d103      	bne.n	80047fe <UART_RxISR_8BIT+0x136>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2210      	movs	r2, #16
 80047fc:	621a      	str	r2, [r3, #32]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004804:	4619      	mov	r1, r3
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f7ff f9e4 	bl	8003bd4 <HAL_UARTEx_RxEventCallback>
 800480c:	e00b      	b.n	8004826 <UART_RxISR_8BIT+0x15e>
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f7ff f9cc 	bl	8003bac <HAL_UART_RxCpltCallback>
 8004814:	e007      	b.n	8004826 <UART_RxISR_8BIT+0x15e>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	699a      	ldr	r2, [r3, #24]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f042 0208 	orr.w	r2, r2, #8
 8004824:	619a      	str	r2, [r3, #24]
 8004826:	bf00      	nop
 8004828:	3758      	adds	r7, #88	; 0x58
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}

0800482e <UART_RxISR_16BIT>:
 800482e:	b580      	push	{r7, lr}
 8004830:	b096      	sub	sp, #88	; 0x58
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800483c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004846:	2b22      	cmp	r3, #34	; 0x22
 8004848:	f040 8098 	bne.w	800497c <UART_RxISR_16BIT+0x14e>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004852:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800485a:	653b      	str	r3, [r7, #80]	; 0x50
 800485c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8004860:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004864:	4013      	ands	r3, r2
 8004866:	b29a      	uxth	r2, r3
 8004868:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800486a:	801a      	strh	r2, [r3, #0]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004870:	1c9a      	adds	r2, r3, #2
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	655a      	str	r2, [r3, #84]	; 0x54
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800487c:	b29b      	uxth	r3, r3
 800487e:	3b01      	subs	r3, #1
 8004880:	b29a      	uxth	r2, r3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800488e:	b29b      	uxth	r3, r3
 8004890:	2b00      	cmp	r3, #0
 8004892:	d17b      	bne.n	800498c <UART_RxISR_16BIT+0x15e>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	637b      	str	r3, [r7, #52]	; 0x34
 800489a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800489c:	e853 3f00 	ldrex	r3, [r3]
 80048a0:	633b      	str	r3, [r7, #48]	; 0x30
 80048a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	461a      	mov	r2, r3
 80048b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048b2:	643b      	str	r3, [r7, #64]	; 0x40
 80048b4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80048b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80048b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80048ba:	e841 2300 	strex	r3, r2, [r1]
 80048be:	63bb      	str	r3, [r7, #56]	; 0x38
 80048c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d1e6      	bne.n	8004894 <UART_RxISR_16BIT+0x66>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	3308      	adds	r3, #8
 80048cc:	623b      	str	r3, [r7, #32]
 80048ce:	6a3b      	ldr	r3, [r7, #32]
 80048d0:	e853 3f00 	ldrex	r3, [r3]
 80048d4:	61fb      	str	r3, [r7, #28]
 80048d6:	69fb      	ldr	r3, [r7, #28]
 80048d8:	f023 0301 	bic.w	r3, r3, #1
 80048dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	3308      	adds	r3, #8
 80048e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80048ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80048ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048ee:	e841 2300 	strex	r3, r2, [r1]
 80048f2:	627b      	str	r3, [r7, #36]	; 0x24
 80048f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d1e5      	bne.n	80048c6 <UART_RxISR_16BIT+0x98>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2220      	movs	r2, #32
 80048fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	669a      	str	r2, [r3, #104]	; 0x68
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	665a      	str	r2, [r3, #100]	; 0x64
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004912:	2b01      	cmp	r3, #1
 8004914:	d12e      	bne.n	8004974 <UART_RxISR_16BIT+0x146>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	661a      	str	r2, [r3, #96]	; 0x60
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	60fb      	str	r3, [r7, #12]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	e853 3f00 	ldrex	r3, [r3]
 8004928:	60bb      	str	r3, [r7, #8]
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	f023 0310 	bic.w	r3, r3, #16
 8004930:	647b      	str	r3, [r7, #68]	; 0x44
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	461a      	mov	r2, r3
 8004938:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800493a:	61bb      	str	r3, [r7, #24]
 800493c:	617a      	str	r2, [r7, #20]
 800493e:	6979      	ldr	r1, [r7, #20]
 8004940:	69ba      	ldr	r2, [r7, #24]
 8004942:	e841 2300 	strex	r3, r2, [r1]
 8004946:	613b      	str	r3, [r7, #16]
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d1e6      	bne.n	800491c <UART_RxISR_16BIT+0xee>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	69db      	ldr	r3, [r3, #28]
 8004954:	f003 0310 	and.w	r3, r3, #16
 8004958:	2b10      	cmp	r3, #16
 800495a:	d103      	bne.n	8004964 <UART_RxISR_16BIT+0x136>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2210      	movs	r2, #16
 8004962:	621a      	str	r2, [r3, #32]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800496a:	4619      	mov	r1, r3
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f7ff f931 	bl	8003bd4 <HAL_UARTEx_RxEventCallback>
 8004972:	e00b      	b.n	800498c <UART_RxISR_16BIT+0x15e>
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f7ff f919 	bl	8003bac <HAL_UART_RxCpltCallback>
 800497a:	e007      	b.n	800498c <UART_RxISR_16BIT+0x15e>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	699a      	ldr	r2, [r3, #24]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f042 0208 	orr.w	r2, r2, #8
 800498a:	619a      	str	r2, [r3, #24]
 800498c:	bf00      	nop
 800498e:	3758      	adds	r7, #88	; 0x58
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}

08004994 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004994:	b480      	push	{r7}
 8004996:	b085      	sub	sp, #20
 8004998:	af00      	add	r7, sp, #0
 800499a:	4603      	mov	r3, r0
 800499c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800499e:	2300      	movs	r3, #0
 80049a0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80049a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80049a6:	2b84      	cmp	r3, #132	; 0x84
 80049a8:	d005      	beq.n	80049b6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80049aa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	4413      	add	r3, r2
 80049b2:	3303      	adds	r3, #3
 80049b4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80049b6:	68fb      	ldr	r3, [r7, #12]
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3714      	adds	r7, #20
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80049c8:	f000 fdde 	bl	8005588 <vTaskStartScheduler>
  
  return osOK;
 80049cc:	2300      	movs	r3, #0
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	bd80      	pop	{r7, pc}

080049d2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80049d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049d4:	b089      	sub	sp, #36	; 0x24
 80049d6:	af04      	add	r7, sp, #16
 80049d8:	6078      	str	r0, [r7, #4]
 80049da:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	695b      	ldr	r3, [r3, #20]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d020      	beq.n	8004a26 <osThreadCreate+0x54>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	699b      	ldr	r3, [r3, #24]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d01c      	beq.n	8004a26 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	685c      	ldr	r4, [r3, #4]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681d      	ldr	r5, [r3, #0]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	691e      	ldr	r6, [r3, #16]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80049fe:	4618      	mov	r0, r3
 8004a00:	f7ff ffc8 	bl	8004994 <makeFreeRtosPriority>
 8004a04:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	695b      	ldr	r3, [r3, #20]
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004a0e:	9202      	str	r2, [sp, #8]
 8004a10:	9301      	str	r3, [sp, #4]
 8004a12:	9100      	str	r1, [sp, #0]
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	4632      	mov	r2, r6
 8004a18:	4629      	mov	r1, r5
 8004a1a:	4620      	mov	r0, r4
 8004a1c:	f000 fbe2 	bl	80051e4 <xTaskCreateStatic>
 8004a20:	4603      	mov	r3, r0
 8004a22:	60fb      	str	r3, [r7, #12]
 8004a24:	e01c      	b.n	8004a60 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	685c      	ldr	r4, [r3, #4]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004a32:	b29e      	uxth	r6, r3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f7ff ffaa 	bl	8004994 <makeFreeRtosPriority>
 8004a40:	4602      	mov	r2, r0
 8004a42:	f107 030c 	add.w	r3, r7, #12
 8004a46:	9301      	str	r3, [sp, #4]
 8004a48:	9200      	str	r2, [sp, #0]
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	4632      	mov	r2, r6
 8004a4e:	4629      	mov	r1, r5
 8004a50:	4620      	mov	r0, r4
 8004a52:	f000 fc2a 	bl	80052aa <xTaskCreate>
 8004a56:	4603      	mov	r3, r0
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d001      	beq.n	8004a60 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	e000      	b.n	8004a62 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004a60:	68fb      	ldr	r3, [r7, #12]
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3714      	adds	r7, #20
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004a6a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004a6a:	b580      	push	{r7, lr}
 8004a6c:	b084      	sub	sp, #16
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d001      	beq.n	8004a80 <osDelay+0x16>
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	e000      	b.n	8004a82 <osDelay+0x18>
 8004a80:	2301      	movs	r3, #1
 8004a82:	4618      	mov	r0, r3
 8004a84:	f000 fd4a 	bl	800551c <vTaskDelay>
  
  return osOK;
 8004a88:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3710      	adds	r7, #16
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}

08004a92 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004a92:	b480      	push	{r7}
 8004a94:	b083      	sub	sp, #12
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f103 0208 	add.w	r2, r3, #8
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f04f 32ff 	mov.w	r2, #4294967295
 8004aaa:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f103 0208 	add.w	r2, r3, #8
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f103 0208 	add.w	r2, r3, #8
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004ac6:	bf00      	nop
 8004ac8:	370c      	adds	r7, #12
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr

08004ad2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004ad2:	b480      	push	{r7}
 8004ad4:	b083      	sub	sp, #12
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004ae0:	bf00      	nop
 8004ae2:	370c      	adds	r7, #12
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004aec:	b480      	push	{r7}
 8004aee:	b085      	sub	sp, #20
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	68fa      	ldr	r2, [r7, #12]
 8004b00:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	689a      	ldr	r2, [r3, #8]
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	683a      	ldr	r2, [r7, #0]
 8004b10:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	683a      	ldr	r2, [r7, #0]
 8004b16:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	1c5a      	adds	r2, r3, #1
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	601a      	str	r2, [r3, #0]
}
 8004b28:	bf00      	nop
 8004b2a:	3714      	adds	r7, #20
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004b34:	b480      	push	{r7}
 8004b36:	b085      	sub	sp, #20
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b4a:	d103      	bne.n	8004b54 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	60fb      	str	r3, [r7, #12]
 8004b52:	e00c      	b.n	8004b6e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	3308      	adds	r3, #8
 8004b58:	60fb      	str	r3, [r7, #12]
 8004b5a:	e002      	b.n	8004b62 <vListInsert+0x2e>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	60fb      	str	r3, [r7, #12]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	68ba      	ldr	r2, [r7, #8]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d2f6      	bcs.n	8004b5c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	685a      	ldr	r2, [r3, #4]
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	683a      	ldr	r2, [r7, #0]
 8004b7c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	68fa      	ldr	r2, [r7, #12]
 8004b82:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	683a      	ldr	r2, [r7, #0]
 8004b88:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	1c5a      	adds	r2, r3, #1
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	601a      	str	r2, [r3, #0]
}
 8004b9a:	bf00      	nop
 8004b9c:	3714      	adds	r7, #20
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr

08004ba6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004ba6:	b480      	push	{r7}
 8004ba8:	b085      	sub	sp, #20
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	6892      	ldr	r2, [r2, #8]
 8004bbc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	6852      	ldr	r2, [r2, #4]
 8004bc6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d103      	bne.n	8004bda <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	689a      	ldr	r2, [r3, #8]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	1e5a      	subs	r2, r3, #1
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3714      	adds	r7, #20
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr
	...

08004bfc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d10c      	bne.n	8004c2a <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c14:	b672      	cpsid	i
 8004c16:	f383 8811 	msr	BASEPRI, r3
 8004c1a:	f3bf 8f6f 	isb	sy
 8004c1e:	f3bf 8f4f 	dsb	sy
 8004c22:	b662      	cpsie	i
 8004c24:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004c26:	bf00      	nop
 8004c28:	e7fe      	b.n	8004c28 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8004c2a:	f001 fb7f 	bl	800632c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c36:	68f9      	ldr	r1, [r7, #12]
 8004c38:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004c3a:	fb01 f303 	mul.w	r3, r1, r3
 8004c3e:	441a      	add	r2, r3
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2200      	movs	r2, #0
 8004c48:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c5a:	3b01      	subs	r3, #1
 8004c5c:	68f9      	ldr	r1, [r7, #12]
 8004c5e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004c60:	fb01 f303 	mul.w	r3, r1, r3
 8004c64:	441a      	add	r2, r3
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	22ff      	movs	r2, #255	; 0xff
 8004c6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	22ff      	movs	r2, #255	; 0xff
 8004c76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d114      	bne.n	8004caa <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	691b      	ldr	r3, [r3, #16]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d01a      	beq.n	8004cbe <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	3310      	adds	r3, #16
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f000 fec9 	bl	8005a24 <xTaskRemoveFromEventList>
 8004c92:	4603      	mov	r3, r0
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d012      	beq.n	8004cbe <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004c98:	4b0c      	ldr	r3, [pc, #48]	; (8004ccc <xQueueGenericReset+0xd0>)
 8004c9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c9e:	601a      	str	r2, [r3, #0]
 8004ca0:	f3bf 8f4f 	dsb	sy
 8004ca4:	f3bf 8f6f 	isb	sy
 8004ca8:	e009      	b.n	8004cbe <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	3310      	adds	r3, #16
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f7ff feef 	bl	8004a92 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	3324      	adds	r3, #36	; 0x24
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f7ff feea 	bl	8004a92 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004cbe:	f001 fb69 	bl	8006394 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004cc2:	2301      	movs	r3, #1
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3710      	adds	r7, #16
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	e000ed04 	.word	0xe000ed04

08004cd0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b08a      	sub	sp, #40	; 0x28
 8004cd4:	af02      	add	r7, sp, #8
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	60b9      	str	r1, [r7, #8]
 8004cda:	4613      	mov	r3, r2
 8004cdc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d10c      	bne.n	8004cfe <xQueueGenericCreate+0x2e>
	__asm volatile
 8004ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce8:	b672      	cpsid	i
 8004cea:	f383 8811 	msr	BASEPRI, r3
 8004cee:	f3bf 8f6f 	isb	sy
 8004cf2:	f3bf 8f4f 	dsb	sy
 8004cf6:	b662      	cpsie	i
 8004cf8:	613b      	str	r3, [r7, #16]
}
 8004cfa:	bf00      	nop
 8004cfc:	e7fe      	b.n	8004cfc <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d102      	bne.n	8004d0a <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004d04:	2300      	movs	r3, #0
 8004d06:	61fb      	str	r3, [r7, #28]
 8004d08:	e004      	b.n	8004d14 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	68ba      	ldr	r2, [r7, #8]
 8004d0e:	fb02 f303 	mul.w	r3, r2, r3
 8004d12:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004d14:	69fb      	ldr	r3, [r7, #28]
 8004d16:	3348      	adds	r3, #72	; 0x48
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f001 fc33 	bl	8006584 <pvPortMalloc>
 8004d1e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004d20:	69bb      	ldr	r3, [r7, #24]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d011      	beq.n	8004d4a <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	3348      	adds	r3, #72	; 0x48
 8004d2e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004d30:	69bb      	ldr	r3, [r7, #24]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004d38:	79fa      	ldrb	r2, [r7, #7]
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	9300      	str	r3, [sp, #0]
 8004d3e:	4613      	mov	r3, r2
 8004d40:	697a      	ldr	r2, [r7, #20]
 8004d42:	68b9      	ldr	r1, [r7, #8]
 8004d44:	68f8      	ldr	r0, [r7, #12]
 8004d46:	f000 f805 	bl	8004d54 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004d4a:	69bb      	ldr	r3, [r7, #24]
	}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3720      	adds	r7, #32
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	60f8      	str	r0, [r7, #12]
 8004d5c:	60b9      	str	r1, [r7, #8]
 8004d5e:	607a      	str	r2, [r7, #4]
 8004d60:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d103      	bne.n	8004d70 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	69ba      	ldr	r2, [r7, #24]
 8004d6c:	601a      	str	r2, [r3, #0]
 8004d6e:	e002      	b.n	8004d76 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004d70:	69bb      	ldr	r3, [r7, #24]
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004d76:	69bb      	ldr	r3, [r7, #24]
 8004d78:	68fa      	ldr	r2, [r7, #12]
 8004d7a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	68ba      	ldr	r2, [r7, #8]
 8004d80:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004d82:	2101      	movs	r1, #1
 8004d84:	69b8      	ldr	r0, [r7, #24]
 8004d86:	f7ff ff39 	bl	8004bfc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004d8a:	bf00      	nop
 8004d8c:	3710      	adds	r7, #16
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}

08004d92 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004d92:	b580      	push	{r7, lr}
 8004d94:	b08e      	sub	sp, #56	; 0x38
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
 8004d9a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d10c      	bne.n	8004dc0 <xQueueGiveFromISR+0x2e>
	__asm volatile
 8004da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004daa:	b672      	cpsid	i
 8004dac:	f383 8811 	msr	BASEPRI, r3
 8004db0:	f3bf 8f6f 	isb	sy
 8004db4:	f3bf 8f4f 	dsb	sy
 8004db8:	b662      	cpsie	i
 8004dba:	623b      	str	r3, [r7, #32]
}
 8004dbc:	bf00      	nop
 8004dbe:	e7fe      	b.n	8004dbe <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d00c      	beq.n	8004de2 <xQueueGiveFromISR+0x50>
	__asm volatile
 8004dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dcc:	b672      	cpsid	i
 8004dce:	f383 8811 	msr	BASEPRI, r3
 8004dd2:	f3bf 8f6f 	isb	sy
 8004dd6:	f3bf 8f4f 	dsb	sy
 8004dda:	b662      	cpsie	i
 8004ddc:	61fb      	str	r3, [r7, #28]
}
 8004dde:	bf00      	nop
 8004de0:	e7fe      	b.n	8004de0 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d103      	bne.n	8004df2 <xQueueGiveFromISR+0x60>
 8004dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d101      	bne.n	8004df6 <xQueueGiveFromISR+0x64>
 8004df2:	2301      	movs	r3, #1
 8004df4:	e000      	b.n	8004df8 <xQueueGiveFromISR+0x66>
 8004df6:	2300      	movs	r3, #0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d10c      	bne.n	8004e16 <xQueueGiveFromISR+0x84>
	__asm volatile
 8004dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e00:	b672      	cpsid	i
 8004e02:	f383 8811 	msr	BASEPRI, r3
 8004e06:	f3bf 8f6f 	isb	sy
 8004e0a:	f3bf 8f4f 	dsb	sy
 8004e0e:	b662      	cpsie	i
 8004e10:	61bb      	str	r3, [r7, #24]
}
 8004e12:	bf00      	nop
 8004e14:	e7fe      	b.n	8004e14 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004e16:	f001 fb71 	bl	80064fc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004e1a:	f3ef 8211 	mrs	r2, BASEPRI
 8004e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e22:	b672      	cpsid	i
 8004e24:	f383 8811 	msr	BASEPRI, r3
 8004e28:	f3bf 8f6f 	isb	sy
 8004e2c:	f3bf 8f4f 	dsb	sy
 8004e30:	b662      	cpsie	i
 8004e32:	617a      	str	r2, [r7, #20]
 8004e34:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004e36:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004e38:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e3e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d22b      	bcs.n	8004ea2 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e56:	1c5a      	adds	r2, r3, #1
 8004e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e5a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004e5c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e64:	d112      	bne.n	8004e8c <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d016      	beq.n	8004e9c <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e70:	3324      	adds	r3, #36	; 0x24
 8004e72:	4618      	mov	r0, r3
 8004e74:	f000 fdd6 	bl	8005a24 <xTaskRemoveFromEventList>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d00e      	beq.n	8004e9c <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d00b      	beq.n	8004e9c <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	2201      	movs	r2, #1
 8004e88:	601a      	str	r2, [r3, #0]
 8004e8a:	e007      	b.n	8004e9c <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004e8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e90:	3301      	adds	r3, #1
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	b25a      	sxtb	r2, r3
 8004e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	637b      	str	r3, [r7, #52]	; 0x34
 8004ea0:	e001      	b.n	8004ea6 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	637b      	str	r3, [r7, #52]	; 0x34
 8004ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ea8:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004eb0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3738      	adds	r7, #56	; 0x38
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}

08004ebc <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b08e      	sub	sp, #56	; 0x38
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d10c      	bne.n	8004ef2 <xQueueSemaphoreTake+0x36>
	__asm volatile
 8004ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004edc:	b672      	cpsid	i
 8004ede:	f383 8811 	msr	BASEPRI, r3
 8004ee2:	f3bf 8f6f 	isb	sy
 8004ee6:	f3bf 8f4f 	dsb	sy
 8004eea:	b662      	cpsie	i
 8004eec:	623b      	str	r3, [r7, #32]
}
 8004eee:	bf00      	nop
 8004ef0:	e7fe      	b.n	8004ef0 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00c      	beq.n	8004f14 <xQueueSemaphoreTake+0x58>
	__asm volatile
 8004efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004efe:	b672      	cpsid	i
 8004f00:	f383 8811 	msr	BASEPRI, r3
 8004f04:	f3bf 8f6f 	isb	sy
 8004f08:	f3bf 8f4f 	dsb	sy
 8004f0c:	b662      	cpsie	i
 8004f0e:	61fb      	str	r3, [r7, #28]
}
 8004f10:	bf00      	nop
 8004f12:	e7fe      	b.n	8004f12 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f14:	f000 ff4a 	bl	8005dac <xTaskGetSchedulerState>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d102      	bne.n	8004f24 <xQueueSemaphoreTake+0x68>
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d101      	bne.n	8004f28 <xQueueSemaphoreTake+0x6c>
 8004f24:	2301      	movs	r3, #1
 8004f26:	e000      	b.n	8004f2a <xQueueSemaphoreTake+0x6e>
 8004f28:	2300      	movs	r3, #0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d10c      	bne.n	8004f48 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8004f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f32:	b672      	cpsid	i
 8004f34:	f383 8811 	msr	BASEPRI, r3
 8004f38:	f3bf 8f6f 	isb	sy
 8004f3c:	f3bf 8f4f 	dsb	sy
 8004f40:	b662      	cpsie	i
 8004f42:	61bb      	str	r3, [r7, #24]
}
 8004f44:	bf00      	nop
 8004f46:	e7fe      	b.n	8004f46 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f48:	f001 f9f0 	bl	800632c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f50:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d024      	beq.n	8004fa2 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f5a:	1e5a      	subs	r2, r3, #1
 8004f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f5e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d104      	bne.n	8004f72 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004f68:	f001 f85c 	bl	8006024 <pvTaskIncrementMutexHeldCount>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f70:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00f      	beq.n	8004f9a <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f7c:	3310      	adds	r3, #16
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f000 fd50 	bl	8005a24 <xTaskRemoveFromEventList>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d007      	beq.n	8004f9a <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004f8a:	4b55      	ldr	r3, [pc, #340]	; (80050e0 <xQueueSemaphoreTake+0x224>)
 8004f8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f90:	601a      	str	r2, [r3, #0]
 8004f92:	f3bf 8f4f 	dsb	sy
 8004f96:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004f9a:	f001 f9fb 	bl	8006394 <vPortExitCritical>
				return pdPASS;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e099      	b.n	80050d6 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d113      	bne.n	8004fd0 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d00c      	beq.n	8004fc8 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8004fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb2:	b672      	cpsid	i
 8004fb4:	f383 8811 	msr	BASEPRI, r3
 8004fb8:	f3bf 8f6f 	isb	sy
 8004fbc:	f3bf 8f4f 	dsb	sy
 8004fc0:	b662      	cpsie	i
 8004fc2:	617b      	str	r3, [r7, #20]
}
 8004fc4:	bf00      	nop
 8004fc6:	e7fe      	b.n	8004fc6 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004fc8:	f001 f9e4 	bl	8006394 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	e082      	b.n	80050d6 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d106      	bne.n	8004fe4 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004fd6:	f107 030c 	add.w	r3, r7, #12
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f000 fd86 	bl	8005aec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004fe4:	f001 f9d6 	bl	8006394 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004fe8:	f000 fb32 	bl	8005650 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004fec:	f001 f99e 	bl	800632c <vPortEnterCritical>
 8004ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ff6:	b25b      	sxtb	r3, r3
 8004ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ffc:	d103      	bne.n	8005006 <xQueueSemaphoreTake+0x14a>
 8004ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005000:	2200      	movs	r2, #0
 8005002:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005008:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800500c:	b25b      	sxtb	r3, r3
 800500e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005012:	d103      	bne.n	800501c <xQueueSemaphoreTake+0x160>
 8005014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005016:	2200      	movs	r2, #0
 8005018:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800501c:	f001 f9ba 	bl	8006394 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005020:	463a      	mov	r2, r7
 8005022:	f107 030c 	add.w	r3, r7, #12
 8005026:	4611      	mov	r1, r2
 8005028:	4618      	mov	r0, r3
 800502a:	f000 fd75 	bl	8005b18 <xTaskCheckForTimeOut>
 800502e:	4603      	mov	r3, r0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d132      	bne.n	800509a <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005034:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005036:	f000 f8bf 	bl	80051b8 <prvIsQueueEmpty>
 800503a:	4603      	mov	r3, r0
 800503c:	2b00      	cmp	r3, #0
 800503e:	d026      	beq.n	800508e <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d109      	bne.n	800505c <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8005048:	f001 f970 	bl	800632c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800504c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	4618      	mov	r0, r3
 8005052:	f000 fec9 	bl	8005de8 <xTaskPriorityInherit>
 8005056:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005058:	f001 f99c 	bl	8006394 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800505c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800505e:	3324      	adds	r3, #36	; 0x24
 8005060:	683a      	ldr	r2, [r7, #0]
 8005062:	4611      	mov	r1, r2
 8005064:	4618      	mov	r0, r3
 8005066:	f000 fcb7 	bl	80059d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800506a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800506c:	f000 f852 	bl	8005114 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005070:	f000 fafc 	bl	800566c <xTaskResumeAll>
 8005074:	4603      	mov	r3, r0
 8005076:	2b00      	cmp	r3, #0
 8005078:	f47f af66 	bne.w	8004f48 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800507c:	4b18      	ldr	r3, [pc, #96]	; (80050e0 <xQueueSemaphoreTake+0x224>)
 800507e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005082:	601a      	str	r2, [r3, #0]
 8005084:	f3bf 8f4f 	dsb	sy
 8005088:	f3bf 8f6f 	isb	sy
 800508c:	e75c      	b.n	8004f48 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800508e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005090:	f000 f840 	bl	8005114 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005094:	f000 faea 	bl	800566c <xTaskResumeAll>
 8005098:	e756      	b.n	8004f48 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800509a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800509c:	f000 f83a 	bl	8005114 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80050a0:	f000 fae4 	bl	800566c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80050a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80050a6:	f000 f887 	bl	80051b8 <prvIsQueueEmpty>
 80050aa:	4603      	mov	r3, r0
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	f43f af4b 	beq.w	8004f48 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80050b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d00d      	beq.n	80050d4 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 80050b8:	f001 f938 	bl	800632c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80050bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80050be:	f000 f811 	bl	80050e4 <prvGetDisinheritPriorityAfterTimeout>
 80050c2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80050c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80050ca:	4618      	mov	r0, r3
 80050cc:	f000 ff0c 	bl	8005ee8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80050d0:	f001 f960 	bl	8006394 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80050d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3738      	adds	r7, #56	; 0x38
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	e000ed04 	.word	0xe000ed04

080050e4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80050e4:	b480      	push	{r7}
 80050e6:	b085      	sub	sp, #20
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d006      	beq.n	8005102 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f1c3 0307 	rsb	r3, r3, #7
 80050fe:	60fb      	str	r3, [r7, #12]
 8005100:	e001      	b.n	8005106 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005102:	2300      	movs	r3, #0
 8005104:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005106:	68fb      	ldr	r3, [r7, #12]
	}
 8005108:	4618      	mov	r0, r3
 800510a:	3714      	adds	r7, #20
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800511c:	f001 f906 	bl	800632c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005126:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005128:	e011      	b.n	800514e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512e:	2b00      	cmp	r3, #0
 8005130:	d012      	beq.n	8005158 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	3324      	adds	r3, #36	; 0x24
 8005136:	4618      	mov	r0, r3
 8005138:	f000 fc74 	bl	8005a24 <xTaskRemoveFromEventList>
 800513c:	4603      	mov	r3, r0
 800513e:	2b00      	cmp	r3, #0
 8005140:	d001      	beq.n	8005146 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005142:	f000 fd4f 	bl	8005be4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005146:	7bfb      	ldrb	r3, [r7, #15]
 8005148:	3b01      	subs	r3, #1
 800514a:	b2db      	uxtb	r3, r3
 800514c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800514e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005152:	2b00      	cmp	r3, #0
 8005154:	dce9      	bgt.n	800512a <prvUnlockQueue+0x16>
 8005156:	e000      	b.n	800515a <prvUnlockQueue+0x46>
					break;
 8005158:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	22ff      	movs	r2, #255	; 0xff
 800515e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005162:	f001 f917 	bl	8006394 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005166:	f001 f8e1 	bl	800632c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005170:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005172:	e011      	b.n	8005198 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	691b      	ldr	r3, [r3, #16]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d012      	beq.n	80051a2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	3310      	adds	r3, #16
 8005180:	4618      	mov	r0, r3
 8005182:	f000 fc4f 	bl	8005a24 <xTaskRemoveFromEventList>
 8005186:	4603      	mov	r3, r0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d001      	beq.n	8005190 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800518c:	f000 fd2a 	bl	8005be4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005190:	7bbb      	ldrb	r3, [r7, #14]
 8005192:	3b01      	subs	r3, #1
 8005194:	b2db      	uxtb	r3, r3
 8005196:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005198:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800519c:	2b00      	cmp	r3, #0
 800519e:	dce9      	bgt.n	8005174 <prvUnlockQueue+0x60>
 80051a0:	e000      	b.n	80051a4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80051a2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	22ff      	movs	r2, #255	; 0xff
 80051a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80051ac:	f001 f8f2 	bl	8006394 <vPortExitCritical>
}
 80051b0:	bf00      	nop
 80051b2:	3710      	adds	r7, #16
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b084      	sub	sp, #16
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80051c0:	f001 f8b4 	bl	800632c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d102      	bne.n	80051d2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80051cc:	2301      	movs	r3, #1
 80051ce:	60fb      	str	r3, [r7, #12]
 80051d0:	e001      	b.n	80051d6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80051d2:	2300      	movs	r3, #0
 80051d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80051d6:	f001 f8dd 	bl	8006394 <vPortExitCritical>

	return xReturn;
 80051da:	68fb      	ldr	r3, [r7, #12]
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3710      	adds	r7, #16
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b08e      	sub	sp, #56	; 0x38
 80051e8:	af04      	add	r7, sp, #16
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	60b9      	str	r1, [r7, #8]
 80051ee:	607a      	str	r2, [r7, #4]
 80051f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80051f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d10c      	bne.n	8005212 <xTaskCreateStatic+0x2e>
	__asm volatile
 80051f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051fc:	b672      	cpsid	i
 80051fe:	f383 8811 	msr	BASEPRI, r3
 8005202:	f3bf 8f6f 	isb	sy
 8005206:	f3bf 8f4f 	dsb	sy
 800520a:	b662      	cpsie	i
 800520c:	623b      	str	r3, [r7, #32]
}
 800520e:	bf00      	nop
 8005210:	e7fe      	b.n	8005210 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8005212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005214:	2b00      	cmp	r3, #0
 8005216:	d10c      	bne.n	8005232 <xTaskCreateStatic+0x4e>
	__asm volatile
 8005218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800521c:	b672      	cpsid	i
 800521e:	f383 8811 	msr	BASEPRI, r3
 8005222:	f3bf 8f6f 	isb	sy
 8005226:	f3bf 8f4f 	dsb	sy
 800522a:	b662      	cpsie	i
 800522c:	61fb      	str	r3, [r7, #28]
}
 800522e:	bf00      	nop
 8005230:	e7fe      	b.n	8005230 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005232:	2354      	movs	r3, #84	; 0x54
 8005234:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	2b54      	cmp	r3, #84	; 0x54
 800523a:	d00c      	beq.n	8005256 <xTaskCreateStatic+0x72>
	__asm volatile
 800523c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005240:	b672      	cpsid	i
 8005242:	f383 8811 	msr	BASEPRI, r3
 8005246:	f3bf 8f6f 	isb	sy
 800524a:	f3bf 8f4f 	dsb	sy
 800524e:	b662      	cpsie	i
 8005250:	61bb      	str	r3, [r7, #24]
}
 8005252:	bf00      	nop
 8005254:	e7fe      	b.n	8005254 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005256:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800525a:	2b00      	cmp	r3, #0
 800525c:	d01e      	beq.n	800529c <xTaskCreateStatic+0xb8>
 800525e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005260:	2b00      	cmp	r3, #0
 8005262:	d01b      	beq.n	800529c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005266:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800526c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800526e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005270:	2202      	movs	r2, #2
 8005272:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005276:	2300      	movs	r3, #0
 8005278:	9303      	str	r3, [sp, #12]
 800527a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527c:	9302      	str	r3, [sp, #8]
 800527e:	f107 0314 	add.w	r3, r7, #20
 8005282:	9301      	str	r3, [sp, #4]
 8005284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005286:	9300      	str	r3, [sp, #0]
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	68b9      	ldr	r1, [r7, #8]
 800528e:	68f8      	ldr	r0, [r7, #12]
 8005290:	f000 f850 	bl	8005334 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005294:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005296:	f000 f8d7 	bl	8005448 <prvAddNewTaskToReadyList>
 800529a:	e001      	b.n	80052a0 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800529c:	2300      	movs	r3, #0
 800529e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80052a0:	697b      	ldr	r3, [r7, #20]
	}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3728      	adds	r7, #40	; 0x28
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}

080052aa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80052aa:	b580      	push	{r7, lr}
 80052ac:	b08c      	sub	sp, #48	; 0x30
 80052ae:	af04      	add	r7, sp, #16
 80052b0:	60f8      	str	r0, [r7, #12]
 80052b2:	60b9      	str	r1, [r7, #8]
 80052b4:	603b      	str	r3, [r7, #0]
 80052b6:	4613      	mov	r3, r2
 80052b8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80052ba:	88fb      	ldrh	r3, [r7, #6]
 80052bc:	009b      	lsls	r3, r3, #2
 80052be:	4618      	mov	r0, r3
 80052c0:	f001 f960 	bl	8006584 <pvPortMalloc>
 80052c4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d00e      	beq.n	80052ea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80052cc:	2054      	movs	r0, #84	; 0x54
 80052ce:	f001 f959 	bl	8006584 <pvPortMalloc>
 80052d2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d003      	beq.n	80052e2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	697a      	ldr	r2, [r7, #20]
 80052de:	631a      	str	r2, [r3, #48]	; 0x30
 80052e0:	e005      	b.n	80052ee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80052e2:	6978      	ldr	r0, [r7, #20]
 80052e4:	f001 fa18 	bl	8006718 <vPortFree>
 80052e8:	e001      	b.n	80052ee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80052ea:	2300      	movs	r3, #0
 80052ec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d017      	beq.n	8005324 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80052f4:	69fb      	ldr	r3, [r7, #28]
 80052f6:	2200      	movs	r2, #0
 80052f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80052fc:	88fa      	ldrh	r2, [r7, #6]
 80052fe:	2300      	movs	r3, #0
 8005300:	9303      	str	r3, [sp, #12]
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	9302      	str	r3, [sp, #8]
 8005306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005308:	9301      	str	r3, [sp, #4]
 800530a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800530c:	9300      	str	r3, [sp, #0]
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	68b9      	ldr	r1, [r7, #8]
 8005312:	68f8      	ldr	r0, [r7, #12]
 8005314:	f000 f80e 	bl	8005334 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005318:	69f8      	ldr	r0, [r7, #28]
 800531a:	f000 f895 	bl	8005448 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800531e:	2301      	movs	r3, #1
 8005320:	61bb      	str	r3, [r7, #24]
 8005322:	e002      	b.n	800532a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005324:	f04f 33ff 	mov.w	r3, #4294967295
 8005328:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800532a:	69bb      	ldr	r3, [r7, #24]
	}
 800532c:	4618      	mov	r0, r3
 800532e:	3720      	adds	r7, #32
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b088      	sub	sp, #32
 8005338:	af00      	add	r7, sp, #0
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	60b9      	str	r1, [r7, #8]
 800533e:	607a      	str	r2, [r7, #4]
 8005340:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005344:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005346:	6879      	ldr	r1, [r7, #4]
 8005348:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800534c:	440b      	add	r3, r1
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	4413      	add	r3, r2
 8005352:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005354:	69bb      	ldr	r3, [r7, #24]
 8005356:	f023 0307 	bic.w	r3, r3, #7
 800535a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800535c:	69bb      	ldr	r3, [r7, #24]
 800535e:	f003 0307 	and.w	r3, r3, #7
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00c      	beq.n	8005380 <prvInitialiseNewTask+0x4c>
	__asm volatile
 8005366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800536a:	b672      	cpsid	i
 800536c:	f383 8811 	msr	BASEPRI, r3
 8005370:	f3bf 8f6f 	isb	sy
 8005374:	f3bf 8f4f 	dsb	sy
 8005378:	b662      	cpsie	i
 800537a:	617b      	str	r3, [r7, #20]
}
 800537c:	bf00      	nop
 800537e:	e7fe      	b.n	800537e <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d01f      	beq.n	80053c6 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005386:	2300      	movs	r3, #0
 8005388:	61fb      	str	r3, [r7, #28]
 800538a:	e012      	b.n	80053b2 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800538c:	68ba      	ldr	r2, [r7, #8]
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	4413      	add	r3, r2
 8005392:	7819      	ldrb	r1, [r3, #0]
 8005394:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	4413      	add	r3, r2
 800539a:	3334      	adds	r3, #52	; 0x34
 800539c:	460a      	mov	r2, r1
 800539e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80053a0:	68ba      	ldr	r2, [r7, #8]
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	4413      	add	r3, r2
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d006      	beq.n	80053ba <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	3301      	adds	r3, #1
 80053b0:	61fb      	str	r3, [r7, #28]
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	2b0f      	cmp	r3, #15
 80053b6:	d9e9      	bls.n	800538c <prvInitialiseNewTask+0x58>
 80053b8:	e000      	b.n	80053bc <prvInitialiseNewTask+0x88>
			{
				break;
 80053ba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80053bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053be:	2200      	movs	r2, #0
 80053c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053c4:	e003      	b.n	80053ce <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80053c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c8:	2200      	movs	r2, #0
 80053ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80053ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d0:	2b06      	cmp	r3, #6
 80053d2:	d901      	bls.n	80053d8 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80053d4:	2306      	movs	r3, #6
 80053d6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80053d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053dc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80053de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053e2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80053e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e6:	2200      	movs	r2, #0
 80053e8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80053ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ec:	3304      	adds	r3, #4
 80053ee:	4618      	mov	r0, r3
 80053f0:	f7ff fb6f 	bl	8004ad2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80053f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f6:	3318      	adds	r3, #24
 80053f8:	4618      	mov	r0, r3
 80053fa:	f7ff fb6a 	bl	8004ad2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80053fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005400:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005402:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005406:	f1c3 0207 	rsb	r2, r3, #7
 800540a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800540c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800540e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005410:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005412:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005416:	2200      	movs	r2, #0
 8005418:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800541a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800541c:	2200      	movs	r2, #0
 800541e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005422:	683a      	ldr	r2, [r7, #0]
 8005424:	68f9      	ldr	r1, [r7, #12]
 8005426:	69b8      	ldr	r0, [r7, #24]
 8005428:	f000 fe76 	bl	8006118 <pxPortInitialiseStack>
 800542c:	4602      	mov	r2, r0
 800542e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005430:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005434:	2b00      	cmp	r3, #0
 8005436:	d002      	beq.n	800543e <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800543a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800543c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800543e:	bf00      	nop
 8005440:	3720      	adds	r7, #32
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
	...

08005448 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b082      	sub	sp, #8
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005450:	f000 ff6c 	bl	800632c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005454:	4b2a      	ldr	r3, [pc, #168]	; (8005500 <prvAddNewTaskToReadyList+0xb8>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	3301      	adds	r3, #1
 800545a:	4a29      	ldr	r2, [pc, #164]	; (8005500 <prvAddNewTaskToReadyList+0xb8>)
 800545c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800545e:	4b29      	ldr	r3, [pc, #164]	; (8005504 <prvAddNewTaskToReadyList+0xbc>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d109      	bne.n	800547a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005466:	4a27      	ldr	r2, [pc, #156]	; (8005504 <prvAddNewTaskToReadyList+0xbc>)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800546c:	4b24      	ldr	r3, [pc, #144]	; (8005500 <prvAddNewTaskToReadyList+0xb8>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	2b01      	cmp	r3, #1
 8005472:	d110      	bne.n	8005496 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005474:	f000 fbda 	bl	8005c2c <prvInitialiseTaskLists>
 8005478:	e00d      	b.n	8005496 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800547a:	4b23      	ldr	r3, [pc, #140]	; (8005508 <prvAddNewTaskToReadyList+0xc0>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d109      	bne.n	8005496 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005482:	4b20      	ldr	r3, [pc, #128]	; (8005504 <prvAddNewTaskToReadyList+0xbc>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800548c:	429a      	cmp	r2, r3
 800548e:	d802      	bhi.n	8005496 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005490:	4a1c      	ldr	r2, [pc, #112]	; (8005504 <prvAddNewTaskToReadyList+0xbc>)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005496:	4b1d      	ldr	r3, [pc, #116]	; (800550c <prvAddNewTaskToReadyList+0xc4>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	3301      	adds	r3, #1
 800549c:	4a1b      	ldr	r2, [pc, #108]	; (800550c <prvAddNewTaskToReadyList+0xc4>)
 800549e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a4:	2201      	movs	r2, #1
 80054a6:	409a      	lsls	r2, r3
 80054a8:	4b19      	ldr	r3, [pc, #100]	; (8005510 <prvAddNewTaskToReadyList+0xc8>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	4a18      	ldr	r2, [pc, #96]	; (8005510 <prvAddNewTaskToReadyList+0xc8>)
 80054b0:	6013      	str	r3, [r2, #0]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054b6:	4613      	mov	r3, r2
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	4413      	add	r3, r2
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	4a15      	ldr	r2, [pc, #84]	; (8005514 <prvAddNewTaskToReadyList+0xcc>)
 80054c0:	441a      	add	r2, r3
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	3304      	adds	r3, #4
 80054c6:	4619      	mov	r1, r3
 80054c8:	4610      	mov	r0, r2
 80054ca:	f7ff fb0f 	bl	8004aec <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80054ce:	f000 ff61 	bl	8006394 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80054d2:	4b0d      	ldr	r3, [pc, #52]	; (8005508 <prvAddNewTaskToReadyList+0xc0>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00e      	beq.n	80054f8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80054da:	4b0a      	ldr	r3, [pc, #40]	; (8005504 <prvAddNewTaskToReadyList+0xbc>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d207      	bcs.n	80054f8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80054e8:	4b0b      	ldr	r3, [pc, #44]	; (8005518 <prvAddNewTaskToReadyList+0xd0>)
 80054ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054ee:	601a      	str	r2, [r3, #0]
 80054f0:	f3bf 8f4f 	dsb	sy
 80054f4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80054f8:	bf00      	nop
 80054fa:	3708      	adds	r7, #8
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}
 8005500:	200007f8 	.word	0x200007f8
 8005504:	200006f8 	.word	0x200006f8
 8005508:	20000804 	.word	0x20000804
 800550c:	20000814 	.word	0x20000814
 8005510:	20000800 	.word	0x20000800
 8005514:	200006fc 	.word	0x200006fc
 8005518:	e000ed04 	.word	0xe000ed04

0800551c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800551c:	b580      	push	{r7, lr}
 800551e:	b084      	sub	sp, #16
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005524:	2300      	movs	r3, #0
 8005526:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d019      	beq.n	8005562 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800552e:	4b14      	ldr	r3, [pc, #80]	; (8005580 <vTaskDelay+0x64>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d00c      	beq.n	8005550 <vTaskDelay+0x34>
	__asm volatile
 8005536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800553a:	b672      	cpsid	i
 800553c:	f383 8811 	msr	BASEPRI, r3
 8005540:	f3bf 8f6f 	isb	sy
 8005544:	f3bf 8f4f 	dsb	sy
 8005548:	b662      	cpsie	i
 800554a:	60bb      	str	r3, [r7, #8]
}
 800554c:	bf00      	nop
 800554e:	e7fe      	b.n	800554e <vTaskDelay+0x32>
			vTaskSuspendAll();
 8005550:	f000 f87e 	bl	8005650 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005554:	2100      	movs	r1, #0
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f000 fd78 	bl	800604c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800555c:	f000 f886 	bl	800566c <xTaskResumeAll>
 8005560:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d107      	bne.n	8005578 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8005568:	4b06      	ldr	r3, [pc, #24]	; (8005584 <vTaskDelay+0x68>)
 800556a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800556e:	601a      	str	r2, [r3, #0]
 8005570:	f3bf 8f4f 	dsb	sy
 8005574:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005578:	bf00      	nop
 800557a:	3710      	adds	r7, #16
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}
 8005580:	20000820 	.word	0x20000820
 8005584:	e000ed04 	.word	0xe000ed04

08005588 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b08a      	sub	sp, #40	; 0x28
 800558c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800558e:	2300      	movs	r3, #0
 8005590:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005592:	2300      	movs	r3, #0
 8005594:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005596:	463a      	mov	r2, r7
 8005598:	1d39      	adds	r1, r7, #4
 800559a:	f107 0308 	add.w	r3, r7, #8
 800559e:	4618      	mov	r0, r3
 80055a0:	f7fb f808 	bl	80005b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80055a4:	6839      	ldr	r1, [r7, #0]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	68ba      	ldr	r2, [r7, #8]
 80055aa:	9202      	str	r2, [sp, #8]
 80055ac:	9301      	str	r3, [sp, #4]
 80055ae:	2300      	movs	r3, #0
 80055b0:	9300      	str	r3, [sp, #0]
 80055b2:	2300      	movs	r3, #0
 80055b4:	460a      	mov	r2, r1
 80055b6:	4920      	ldr	r1, [pc, #128]	; (8005638 <vTaskStartScheduler+0xb0>)
 80055b8:	4820      	ldr	r0, [pc, #128]	; (800563c <vTaskStartScheduler+0xb4>)
 80055ba:	f7ff fe13 	bl	80051e4 <xTaskCreateStatic>
 80055be:	4603      	mov	r3, r0
 80055c0:	4a1f      	ldr	r2, [pc, #124]	; (8005640 <vTaskStartScheduler+0xb8>)
 80055c2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80055c4:	4b1e      	ldr	r3, [pc, #120]	; (8005640 <vTaskStartScheduler+0xb8>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d002      	beq.n	80055d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80055cc:	2301      	movs	r3, #1
 80055ce:	617b      	str	r3, [r7, #20]
 80055d0:	e001      	b.n	80055d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80055d2:	2300      	movs	r3, #0
 80055d4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d118      	bne.n	800560e <vTaskStartScheduler+0x86>
	__asm volatile
 80055dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e0:	b672      	cpsid	i
 80055e2:	f383 8811 	msr	BASEPRI, r3
 80055e6:	f3bf 8f6f 	isb	sy
 80055ea:	f3bf 8f4f 	dsb	sy
 80055ee:	b662      	cpsie	i
 80055f0:	613b      	str	r3, [r7, #16]
}
 80055f2:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80055f4:	4b13      	ldr	r3, [pc, #76]	; (8005644 <vTaskStartScheduler+0xbc>)
 80055f6:	f04f 32ff 	mov.w	r2, #4294967295
 80055fa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80055fc:	4b12      	ldr	r3, [pc, #72]	; (8005648 <vTaskStartScheduler+0xc0>)
 80055fe:	2201      	movs	r2, #1
 8005600:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005602:	4b12      	ldr	r3, [pc, #72]	; (800564c <vTaskStartScheduler+0xc4>)
 8005604:	2200      	movs	r2, #0
 8005606:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005608:	f000 fe12 	bl	8006230 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800560c:	e010      	b.n	8005630 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005614:	d10c      	bne.n	8005630 <vTaskStartScheduler+0xa8>
	__asm volatile
 8005616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800561a:	b672      	cpsid	i
 800561c:	f383 8811 	msr	BASEPRI, r3
 8005620:	f3bf 8f6f 	isb	sy
 8005624:	f3bf 8f4f 	dsb	sy
 8005628:	b662      	cpsie	i
 800562a:	60fb      	str	r3, [r7, #12]
}
 800562c:	bf00      	nop
 800562e:	e7fe      	b.n	800562e <vTaskStartScheduler+0xa6>
}
 8005630:	bf00      	nop
 8005632:	3718      	adds	r7, #24
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}
 8005638:	0800801c 	.word	0x0800801c
 800563c:	08005bfd 	.word	0x08005bfd
 8005640:	2000081c 	.word	0x2000081c
 8005644:	20000818 	.word	0x20000818
 8005648:	20000804 	.word	0x20000804
 800564c:	200007fc 	.word	0x200007fc

08005650 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005650:	b480      	push	{r7}
 8005652:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005654:	4b04      	ldr	r3, [pc, #16]	; (8005668 <vTaskSuspendAll+0x18>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	3301      	adds	r3, #1
 800565a:	4a03      	ldr	r2, [pc, #12]	; (8005668 <vTaskSuspendAll+0x18>)
 800565c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800565e:	bf00      	nop
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr
 8005668:	20000820 	.word	0x20000820

0800566c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b084      	sub	sp, #16
 8005670:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005672:	2300      	movs	r3, #0
 8005674:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005676:	2300      	movs	r3, #0
 8005678:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800567a:	4b42      	ldr	r3, [pc, #264]	; (8005784 <xTaskResumeAll+0x118>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d10c      	bne.n	800569c <xTaskResumeAll+0x30>
	__asm volatile
 8005682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005686:	b672      	cpsid	i
 8005688:	f383 8811 	msr	BASEPRI, r3
 800568c:	f3bf 8f6f 	isb	sy
 8005690:	f3bf 8f4f 	dsb	sy
 8005694:	b662      	cpsie	i
 8005696:	603b      	str	r3, [r7, #0]
}
 8005698:	bf00      	nop
 800569a:	e7fe      	b.n	800569a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800569c:	f000 fe46 	bl	800632c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80056a0:	4b38      	ldr	r3, [pc, #224]	; (8005784 <xTaskResumeAll+0x118>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	3b01      	subs	r3, #1
 80056a6:	4a37      	ldr	r2, [pc, #220]	; (8005784 <xTaskResumeAll+0x118>)
 80056a8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056aa:	4b36      	ldr	r3, [pc, #216]	; (8005784 <xTaskResumeAll+0x118>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d161      	bne.n	8005776 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80056b2:	4b35      	ldr	r3, [pc, #212]	; (8005788 <xTaskResumeAll+0x11c>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d05d      	beq.n	8005776 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80056ba:	e02e      	b.n	800571a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056bc:	4b33      	ldr	r3, [pc, #204]	; (800578c <xTaskResumeAll+0x120>)
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	68db      	ldr	r3, [r3, #12]
 80056c2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	3318      	adds	r3, #24
 80056c8:	4618      	mov	r0, r3
 80056ca:	f7ff fa6c 	bl	8004ba6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	3304      	adds	r3, #4
 80056d2:	4618      	mov	r0, r3
 80056d4:	f7ff fa67 	bl	8004ba6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056dc:	2201      	movs	r2, #1
 80056de:	409a      	lsls	r2, r3
 80056e0:	4b2b      	ldr	r3, [pc, #172]	; (8005790 <xTaskResumeAll+0x124>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4313      	orrs	r3, r2
 80056e6:	4a2a      	ldr	r2, [pc, #168]	; (8005790 <xTaskResumeAll+0x124>)
 80056e8:	6013      	str	r3, [r2, #0]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056ee:	4613      	mov	r3, r2
 80056f0:	009b      	lsls	r3, r3, #2
 80056f2:	4413      	add	r3, r2
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	4a27      	ldr	r2, [pc, #156]	; (8005794 <xTaskResumeAll+0x128>)
 80056f8:	441a      	add	r2, r3
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	3304      	adds	r3, #4
 80056fe:	4619      	mov	r1, r3
 8005700:	4610      	mov	r0, r2
 8005702:	f7ff f9f3 	bl	8004aec <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800570a:	4b23      	ldr	r3, [pc, #140]	; (8005798 <xTaskResumeAll+0x12c>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005710:	429a      	cmp	r2, r3
 8005712:	d302      	bcc.n	800571a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005714:	4b21      	ldr	r3, [pc, #132]	; (800579c <xTaskResumeAll+0x130>)
 8005716:	2201      	movs	r2, #1
 8005718:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800571a:	4b1c      	ldr	r3, [pc, #112]	; (800578c <xTaskResumeAll+0x120>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d1cc      	bne.n	80056bc <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d001      	beq.n	800572c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005728:	f000 fb20 	bl	8005d6c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800572c:	4b1c      	ldr	r3, [pc, #112]	; (80057a0 <xTaskResumeAll+0x134>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d010      	beq.n	800575a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005738:	f000 f836 	bl	80057a8 <xTaskIncrementTick>
 800573c:	4603      	mov	r3, r0
 800573e:	2b00      	cmp	r3, #0
 8005740:	d002      	beq.n	8005748 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005742:	4b16      	ldr	r3, [pc, #88]	; (800579c <xTaskResumeAll+0x130>)
 8005744:	2201      	movs	r2, #1
 8005746:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	3b01      	subs	r3, #1
 800574c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d1f1      	bne.n	8005738 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8005754:	4b12      	ldr	r3, [pc, #72]	; (80057a0 <xTaskResumeAll+0x134>)
 8005756:	2200      	movs	r2, #0
 8005758:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800575a:	4b10      	ldr	r3, [pc, #64]	; (800579c <xTaskResumeAll+0x130>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d009      	beq.n	8005776 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005762:	2301      	movs	r3, #1
 8005764:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005766:	4b0f      	ldr	r3, [pc, #60]	; (80057a4 <xTaskResumeAll+0x138>)
 8005768:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800576c:	601a      	str	r2, [r3, #0]
 800576e:	f3bf 8f4f 	dsb	sy
 8005772:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005776:	f000 fe0d 	bl	8006394 <vPortExitCritical>

	return xAlreadyYielded;
 800577a:	68bb      	ldr	r3, [r7, #8]
}
 800577c:	4618      	mov	r0, r3
 800577e:	3710      	adds	r7, #16
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}
 8005784:	20000820 	.word	0x20000820
 8005788:	200007f8 	.word	0x200007f8
 800578c:	200007b8 	.word	0x200007b8
 8005790:	20000800 	.word	0x20000800
 8005794:	200006fc 	.word	0x200006fc
 8005798:	200006f8 	.word	0x200006f8
 800579c:	2000080c 	.word	0x2000080c
 80057a0:	20000808 	.word	0x20000808
 80057a4:	e000ed04 	.word	0xe000ed04

080057a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b086      	sub	sp, #24
 80057ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80057ae:	2300      	movs	r3, #0
 80057b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057b2:	4b4f      	ldr	r3, [pc, #316]	; (80058f0 <xTaskIncrementTick+0x148>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	f040 808a 	bne.w	80058d0 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80057bc:	4b4d      	ldr	r3, [pc, #308]	; (80058f4 <xTaskIncrementTick+0x14c>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	3301      	adds	r3, #1
 80057c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80057c4:	4a4b      	ldr	r2, [pc, #300]	; (80058f4 <xTaskIncrementTick+0x14c>)
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d122      	bne.n	8005816 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80057d0:	4b49      	ldr	r3, [pc, #292]	; (80058f8 <xTaskIncrementTick+0x150>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00c      	beq.n	80057f4 <xTaskIncrementTick+0x4c>
	__asm volatile
 80057da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057de:	b672      	cpsid	i
 80057e0:	f383 8811 	msr	BASEPRI, r3
 80057e4:	f3bf 8f6f 	isb	sy
 80057e8:	f3bf 8f4f 	dsb	sy
 80057ec:	b662      	cpsie	i
 80057ee:	603b      	str	r3, [r7, #0]
}
 80057f0:	bf00      	nop
 80057f2:	e7fe      	b.n	80057f2 <xTaskIncrementTick+0x4a>
 80057f4:	4b40      	ldr	r3, [pc, #256]	; (80058f8 <xTaskIncrementTick+0x150>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	60fb      	str	r3, [r7, #12]
 80057fa:	4b40      	ldr	r3, [pc, #256]	; (80058fc <xTaskIncrementTick+0x154>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a3e      	ldr	r2, [pc, #248]	; (80058f8 <xTaskIncrementTick+0x150>)
 8005800:	6013      	str	r3, [r2, #0]
 8005802:	4a3e      	ldr	r2, [pc, #248]	; (80058fc <xTaskIncrementTick+0x154>)
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6013      	str	r3, [r2, #0]
 8005808:	4b3d      	ldr	r3, [pc, #244]	; (8005900 <xTaskIncrementTick+0x158>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	3301      	adds	r3, #1
 800580e:	4a3c      	ldr	r2, [pc, #240]	; (8005900 <xTaskIncrementTick+0x158>)
 8005810:	6013      	str	r3, [r2, #0]
 8005812:	f000 faab 	bl	8005d6c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005816:	4b3b      	ldr	r3, [pc, #236]	; (8005904 <xTaskIncrementTick+0x15c>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	693a      	ldr	r2, [r7, #16]
 800581c:	429a      	cmp	r2, r3
 800581e:	d348      	bcc.n	80058b2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005820:	4b35      	ldr	r3, [pc, #212]	; (80058f8 <xTaskIncrementTick+0x150>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d104      	bne.n	8005834 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800582a:	4b36      	ldr	r3, [pc, #216]	; (8005904 <xTaskIncrementTick+0x15c>)
 800582c:	f04f 32ff 	mov.w	r2, #4294967295
 8005830:	601a      	str	r2, [r3, #0]
					break;
 8005832:	e03e      	b.n	80058b2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005834:	4b30      	ldr	r3, [pc, #192]	; (80058f8 <xTaskIncrementTick+0x150>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	68db      	ldr	r3, [r3, #12]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005844:	693a      	ldr	r2, [r7, #16]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	429a      	cmp	r2, r3
 800584a:	d203      	bcs.n	8005854 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800584c:	4a2d      	ldr	r2, [pc, #180]	; (8005904 <xTaskIncrementTick+0x15c>)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005852:	e02e      	b.n	80058b2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	3304      	adds	r3, #4
 8005858:	4618      	mov	r0, r3
 800585a:	f7ff f9a4 	bl	8004ba6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005862:	2b00      	cmp	r3, #0
 8005864:	d004      	beq.n	8005870 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	3318      	adds	r3, #24
 800586a:	4618      	mov	r0, r3
 800586c:	f7ff f99b 	bl	8004ba6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005874:	2201      	movs	r2, #1
 8005876:	409a      	lsls	r2, r3
 8005878:	4b23      	ldr	r3, [pc, #140]	; (8005908 <xTaskIncrementTick+0x160>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4313      	orrs	r3, r2
 800587e:	4a22      	ldr	r2, [pc, #136]	; (8005908 <xTaskIncrementTick+0x160>)
 8005880:	6013      	str	r3, [r2, #0]
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005886:	4613      	mov	r3, r2
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	4413      	add	r3, r2
 800588c:	009b      	lsls	r3, r3, #2
 800588e:	4a1f      	ldr	r2, [pc, #124]	; (800590c <xTaskIncrementTick+0x164>)
 8005890:	441a      	add	r2, r3
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	3304      	adds	r3, #4
 8005896:	4619      	mov	r1, r3
 8005898:	4610      	mov	r0, r2
 800589a:	f7ff f927 	bl	8004aec <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058a2:	4b1b      	ldr	r3, [pc, #108]	; (8005910 <xTaskIncrementTick+0x168>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d3b9      	bcc.n	8005820 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80058ac:	2301      	movs	r3, #1
 80058ae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80058b0:	e7b6      	b.n	8005820 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80058b2:	4b17      	ldr	r3, [pc, #92]	; (8005910 <xTaskIncrementTick+0x168>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058b8:	4914      	ldr	r1, [pc, #80]	; (800590c <xTaskIncrementTick+0x164>)
 80058ba:	4613      	mov	r3, r2
 80058bc:	009b      	lsls	r3, r3, #2
 80058be:	4413      	add	r3, r2
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	440b      	add	r3, r1
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d907      	bls.n	80058da <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 80058ca:	2301      	movs	r3, #1
 80058cc:	617b      	str	r3, [r7, #20]
 80058ce:	e004      	b.n	80058da <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80058d0:	4b10      	ldr	r3, [pc, #64]	; (8005914 <xTaskIncrementTick+0x16c>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	3301      	adds	r3, #1
 80058d6:	4a0f      	ldr	r2, [pc, #60]	; (8005914 <xTaskIncrementTick+0x16c>)
 80058d8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80058da:	4b0f      	ldr	r3, [pc, #60]	; (8005918 <xTaskIncrementTick+0x170>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d001      	beq.n	80058e6 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 80058e2:	2301      	movs	r3, #1
 80058e4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80058e6:	697b      	ldr	r3, [r7, #20]
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3718      	adds	r7, #24
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}
 80058f0:	20000820 	.word	0x20000820
 80058f4:	200007fc 	.word	0x200007fc
 80058f8:	200007b0 	.word	0x200007b0
 80058fc:	200007b4 	.word	0x200007b4
 8005900:	20000810 	.word	0x20000810
 8005904:	20000818 	.word	0x20000818
 8005908:	20000800 	.word	0x20000800
 800590c:	200006fc 	.word	0x200006fc
 8005910:	200006f8 	.word	0x200006f8
 8005914:	20000808 	.word	0x20000808
 8005918:	2000080c 	.word	0x2000080c

0800591c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800591c:	b480      	push	{r7}
 800591e:	b087      	sub	sp, #28
 8005920:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005922:	4b28      	ldr	r3, [pc, #160]	; (80059c4 <vTaskSwitchContext+0xa8>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d003      	beq.n	8005932 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800592a:	4b27      	ldr	r3, [pc, #156]	; (80059c8 <vTaskSwitchContext+0xac>)
 800592c:	2201      	movs	r2, #1
 800592e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005930:	e041      	b.n	80059b6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005932:	4b25      	ldr	r3, [pc, #148]	; (80059c8 <vTaskSwitchContext+0xac>)
 8005934:	2200      	movs	r2, #0
 8005936:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005938:	4b24      	ldr	r3, [pc, #144]	; (80059cc <vTaskSwitchContext+0xb0>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	fab3 f383 	clz	r3, r3
 8005944:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005946:	7afb      	ldrb	r3, [r7, #11]
 8005948:	f1c3 031f 	rsb	r3, r3, #31
 800594c:	617b      	str	r3, [r7, #20]
 800594e:	4920      	ldr	r1, [pc, #128]	; (80059d0 <vTaskSwitchContext+0xb4>)
 8005950:	697a      	ldr	r2, [r7, #20]
 8005952:	4613      	mov	r3, r2
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	4413      	add	r3, r2
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	440b      	add	r3, r1
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d10c      	bne.n	800597c <vTaskSwitchContext+0x60>
	__asm volatile
 8005962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005966:	b672      	cpsid	i
 8005968:	f383 8811 	msr	BASEPRI, r3
 800596c:	f3bf 8f6f 	isb	sy
 8005970:	f3bf 8f4f 	dsb	sy
 8005974:	b662      	cpsie	i
 8005976:	607b      	str	r3, [r7, #4]
}
 8005978:	bf00      	nop
 800597a:	e7fe      	b.n	800597a <vTaskSwitchContext+0x5e>
 800597c:	697a      	ldr	r2, [r7, #20]
 800597e:	4613      	mov	r3, r2
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	4413      	add	r3, r2
 8005984:	009b      	lsls	r3, r3, #2
 8005986:	4a12      	ldr	r2, [pc, #72]	; (80059d0 <vTaskSwitchContext+0xb4>)
 8005988:	4413      	add	r3, r2
 800598a:	613b      	str	r3, [r7, #16]
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	685a      	ldr	r2, [r3, #4]
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	605a      	str	r2, [r3, #4]
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	685a      	ldr	r2, [r3, #4]
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	3308      	adds	r3, #8
 800599e:	429a      	cmp	r2, r3
 80059a0:	d104      	bne.n	80059ac <vTaskSwitchContext+0x90>
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	685a      	ldr	r2, [r3, #4]
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	605a      	str	r2, [r3, #4]
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	4a08      	ldr	r2, [pc, #32]	; (80059d4 <vTaskSwitchContext+0xb8>)
 80059b4:	6013      	str	r3, [r2, #0]
}
 80059b6:	bf00      	nop
 80059b8:	371c      	adds	r7, #28
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr
 80059c2:	bf00      	nop
 80059c4:	20000820 	.word	0x20000820
 80059c8:	2000080c 	.word	0x2000080c
 80059cc:	20000800 	.word	0x20000800
 80059d0:	200006fc 	.word	0x200006fc
 80059d4:	200006f8 	.word	0x200006f8

080059d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b084      	sub	sp, #16
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d10c      	bne.n	8005a02 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80059e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ec:	b672      	cpsid	i
 80059ee:	f383 8811 	msr	BASEPRI, r3
 80059f2:	f3bf 8f6f 	isb	sy
 80059f6:	f3bf 8f4f 	dsb	sy
 80059fa:	b662      	cpsie	i
 80059fc:	60fb      	str	r3, [r7, #12]
}
 80059fe:	bf00      	nop
 8005a00:	e7fe      	b.n	8005a00 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005a02:	4b07      	ldr	r3, [pc, #28]	; (8005a20 <vTaskPlaceOnEventList+0x48>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	3318      	adds	r3, #24
 8005a08:	4619      	mov	r1, r3
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f7ff f892 	bl	8004b34 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005a10:	2101      	movs	r1, #1
 8005a12:	6838      	ldr	r0, [r7, #0]
 8005a14:	f000 fb1a 	bl	800604c <prvAddCurrentTaskToDelayedList>
}
 8005a18:	bf00      	nop
 8005a1a:	3710      	adds	r7, #16
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}
 8005a20:	200006f8 	.word	0x200006f8

08005a24 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b086      	sub	sp, #24
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d10c      	bne.n	8005a54 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8005a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a3e:	b672      	cpsid	i
 8005a40:	f383 8811 	msr	BASEPRI, r3
 8005a44:	f3bf 8f6f 	isb	sy
 8005a48:	f3bf 8f4f 	dsb	sy
 8005a4c:	b662      	cpsie	i
 8005a4e:	60fb      	str	r3, [r7, #12]
}
 8005a50:	bf00      	nop
 8005a52:	e7fe      	b.n	8005a52 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	3318      	adds	r3, #24
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f7ff f8a4 	bl	8004ba6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a5e:	4b1d      	ldr	r3, [pc, #116]	; (8005ad4 <xTaskRemoveFromEventList+0xb0>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d11c      	bne.n	8005aa0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	3304      	adds	r3, #4
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f7ff f89b 	bl	8004ba6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a74:	2201      	movs	r2, #1
 8005a76:	409a      	lsls	r2, r3
 8005a78:	4b17      	ldr	r3, [pc, #92]	; (8005ad8 <xTaskRemoveFromEventList+0xb4>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	4a16      	ldr	r2, [pc, #88]	; (8005ad8 <xTaskRemoveFromEventList+0xb4>)
 8005a80:	6013      	str	r3, [r2, #0]
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a86:	4613      	mov	r3, r2
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	4413      	add	r3, r2
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	4a13      	ldr	r2, [pc, #76]	; (8005adc <xTaskRemoveFromEventList+0xb8>)
 8005a90:	441a      	add	r2, r3
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	3304      	adds	r3, #4
 8005a96:	4619      	mov	r1, r3
 8005a98:	4610      	mov	r0, r2
 8005a9a:	f7ff f827 	bl	8004aec <vListInsertEnd>
 8005a9e:	e005      	b.n	8005aac <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	3318      	adds	r3, #24
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	480e      	ldr	r0, [pc, #56]	; (8005ae0 <xTaskRemoveFromEventList+0xbc>)
 8005aa8:	f7ff f820 	bl	8004aec <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ab0:	4b0c      	ldr	r3, [pc, #48]	; (8005ae4 <xTaskRemoveFromEventList+0xc0>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d905      	bls.n	8005ac6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005aba:	2301      	movs	r3, #1
 8005abc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005abe:	4b0a      	ldr	r3, [pc, #40]	; (8005ae8 <xTaskRemoveFromEventList+0xc4>)
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	601a      	str	r2, [r3, #0]
 8005ac4:	e001      	b.n	8005aca <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005aca:	697b      	ldr	r3, [r7, #20]
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3718      	adds	r7, #24
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}
 8005ad4:	20000820 	.word	0x20000820
 8005ad8:	20000800 	.word	0x20000800
 8005adc:	200006fc 	.word	0x200006fc
 8005ae0:	200007b8 	.word	0x200007b8
 8005ae4:	200006f8 	.word	0x200006f8
 8005ae8:	2000080c 	.word	0x2000080c

08005aec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005aec:	b480      	push	{r7}
 8005aee:	b083      	sub	sp, #12
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005af4:	4b06      	ldr	r3, [pc, #24]	; (8005b10 <vTaskInternalSetTimeOutState+0x24>)
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005afc:	4b05      	ldr	r3, [pc, #20]	; (8005b14 <vTaskInternalSetTimeOutState+0x28>)
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	605a      	str	r2, [r3, #4]
}
 8005b04:	bf00      	nop
 8005b06:	370c      	adds	r7, #12
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr
 8005b10:	20000810 	.word	0x20000810
 8005b14:	200007fc 	.word	0x200007fc

08005b18 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b088      	sub	sp, #32
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d10c      	bne.n	8005b42 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8005b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b2c:	b672      	cpsid	i
 8005b2e:	f383 8811 	msr	BASEPRI, r3
 8005b32:	f3bf 8f6f 	isb	sy
 8005b36:	f3bf 8f4f 	dsb	sy
 8005b3a:	b662      	cpsie	i
 8005b3c:	613b      	str	r3, [r7, #16]
}
 8005b3e:	bf00      	nop
 8005b40:	e7fe      	b.n	8005b40 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d10c      	bne.n	8005b62 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8005b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b4c:	b672      	cpsid	i
 8005b4e:	f383 8811 	msr	BASEPRI, r3
 8005b52:	f3bf 8f6f 	isb	sy
 8005b56:	f3bf 8f4f 	dsb	sy
 8005b5a:	b662      	cpsie	i
 8005b5c:	60fb      	str	r3, [r7, #12]
}
 8005b5e:	bf00      	nop
 8005b60:	e7fe      	b.n	8005b60 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8005b62:	f000 fbe3 	bl	800632c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005b66:	4b1d      	ldr	r3, [pc, #116]	; (8005bdc <xTaskCheckForTimeOut+0xc4>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	69ba      	ldr	r2, [r7, #24]
 8005b72:	1ad3      	subs	r3, r2, r3
 8005b74:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b7e:	d102      	bne.n	8005b86 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005b80:	2300      	movs	r3, #0
 8005b82:	61fb      	str	r3, [r7, #28]
 8005b84:	e023      	b.n	8005bce <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	4b15      	ldr	r3, [pc, #84]	; (8005be0 <xTaskCheckForTimeOut+0xc8>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d007      	beq.n	8005ba2 <xTaskCheckForTimeOut+0x8a>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	69ba      	ldr	r2, [r7, #24]
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d302      	bcc.n	8005ba2 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	61fb      	str	r3, [r7, #28]
 8005ba0:	e015      	b.n	8005bce <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	697a      	ldr	r2, [r7, #20]
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d20b      	bcs.n	8005bc4 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	1ad2      	subs	r2, r2, r3
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f7ff ff97 	bl	8005aec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	61fb      	str	r3, [r7, #28]
 8005bc2:	e004      	b.n	8005bce <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005bce:	f000 fbe1 	bl	8006394 <vPortExitCritical>

	return xReturn;
 8005bd2:	69fb      	ldr	r3, [r7, #28]
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3720      	adds	r7, #32
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}
 8005bdc:	200007fc 	.word	0x200007fc
 8005be0:	20000810 	.word	0x20000810

08005be4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005be4:	b480      	push	{r7}
 8005be6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005be8:	4b03      	ldr	r3, [pc, #12]	; (8005bf8 <vTaskMissedYield+0x14>)
 8005bea:	2201      	movs	r2, #1
 8005bec:	601a      	str	r2, [r3, #0]
}
 8005bee:	bf00      	nop
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr
 8005bf8:	2000080c 	.word	0x2000080c

08005bfc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b082      	sub	sp, #8
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005c04:	f000 f852 	bl	8005cac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005c08:	4b06      	ldr	r3, [pc, #24]	; (8005c24 <prvIdleTask+0x28>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d9f9      	bls.n	8005c04 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005c10:	4b05      	ldr	r3, [pc, #20]	; (8005c28 <prvIdleTask+0x2c>)
 8005c12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c16:	601a      	str	r2, [r3, #0]
 8005c18:	f3bf 8f4f 	dsb	sy
 8005c1c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005c20:	e7f0      	b.n	8005c04 <prvIdleTask+0x8>
 8005c22:	bf00      	nop
 8005c24:	200006fc 	.word	0x200006fc
 8005c28:	e000ed04 	.word	0xe000ed04

08005c2c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b082      	sub	sp, #8
 8005c30:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c32:	2300      	movs	r3, #0
 8005c34:	607b      	str	r3, [r7, #4]
 8005c36:	e00c      	b.n	8005c52 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005c38:	687a      	ldr	r2, [r7, #4]
 8005c3a:	4613      	mov	r3, r2
 8005c3c:	009b      	lsls	r3, r3, #2
 8005c3e:	4413      	add	r3, r2
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	4a12      	ldr	r2, [pc, #72]	; (8005c8c <prvInitialiseTaskLists+0x60>)
 8005c44:	4413      	add	r3, r2
 8005c46:	4618      	mov	r0, r3
 8005c48:	f7fe ff23 	bl	8004a92 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	3301      	adds	r3, #1
 8005c50:	607b      	str	r3, [r7, #4]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2b06      	cmp	r3, #6
 8005c56:	d9ef      	bls.n	8005c38 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005c58:	480d      	ldr	r0, [pc, #52]	; (8005c90 <prvInitialiseTaskLists+0x64>)
 8005c5a:	f7fe ff1a 	bl	8004a92 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005c5e:	480d      	ldr	r0, [pc, #52]	; (8005c94 <prvInitialiseTaskLists+0x68>)
 8005c60:	f7fe ff17 	bl	8004a92 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005c64:	480c      	ldr	r0, [pc, #48]	; (8005c98 <prvInitialiseTaskLists+0x6c>)
 8005c66:	f7fe ff14 	bl	8004a92 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005c6a:	480c      	ldr	r0, [pc, #48]	; (8005c9c <prvInitialiseTaskLists+0x70>)
 8005c6c:	f7fe ff11 	bl	8004a92 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005c70:	480b      	ldr	r0, [pc, #44]	; (8005ca0 <prvInitialiseTaskLists+0x74>)
 8005c72:	f7fe ff0e 	bl	8004a92 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005c76:	4b0b      	ldr	r3, [pc, #44]	; (8005ca4 <prvInitialiseTaskLists+0x78>)
 8005c78:	4a05      	ldr	r2, [pc, #20]	; (8005c90 <prvInitialiseTaskLists+0x64>)
 8005c7a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005c7c:	4b0a      	ldr	r3, [pc, #40]	; (8005ca8 <prvInitialiseTaskLists+0x7c>)
 8005c7e:	4a05      	ldr	r2, [pc, #20]	; (8005c94 <prvInitialiseTaskLists+0x68>)
 8005c80:	601a      	str	r2, [r3, #0]
}
 8005c82:	bf00      	nop
 8005c84:	3708      	adds	r7, #8
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}
 8005c8a:	bf00      	nop
 8005c8c:	200006fc 	.word	0x200006fc
 8005c90:	20000788 	.word	0x20000788
 8005c94:	2000079c 	.word	0x2000079c
 8005c98:	200007b8 	.word	0x200007b8
 8005c9c:	200007cc 	.word	0x200007cc
 8005ca0:	200007e4 	.word	0x200007e4
 8005ca4:	200007b0 	.word	0x200007b0
 8005ca8:	200007b4 	.word	0x200007b4

08005cac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b082      	sub	sp, #8
 8005cb0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005cb2:	e019      	b.n	8005ce8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005cb4:	f000 fb3a 	bl	800632c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cb8:	4b10      	ldr	r3, [pc, #64]	; (8005cfc <prvCheckTasksWaitingTermination+0x50>)
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	3304      	adds	r3, #4
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f7fe ff6e 	bl	8004ba6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005cca:	4b0d      	ldr	r3, [pc, #52]	; (8005d00 <prvCheckTasksWaitingTermination+0x54>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	3b01      	subs	r3, #1
 8005cd0:	4a0b      	ldr	r2, [pc, #44]	; (8005d00 <prvCheckTasksWaitingTermination+0x54>)
 8005cd2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005cd4:	4b0b      	ldr	r3, [pc, #44]	; (8005d04 <prvCheckTasksWaitingTermination+0x58>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	3b01      	subs	r3, #1
 8005cda:	4a0a      	ldr	r2, [pc, #40]	; (8005d04 <prvCheckTasksWaitingTermination+0x58>)
 8005cdc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005cde:	f000 fb59 	bl	8006394 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 f810 	bl	8005d08 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ce8:	4b06      	ldr	r3, [pc, #24]	; (8005d04 <prvCheckTasksWaitingTermination+0x58>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d1e1      	bne.n	8005cb4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005cf0:	bf00      	nop
 8005cf2:	bf00      	nop
 8005cf4:	3708      	adds	r7, #8
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}
 8005cfa:	bf00      	nop
 8005cfc:	200007cc 	.word	0x200007cc
 8005d00:	200007f8 	.word	0x200007f8
 8005d04:	200007e0 	.word	0x200007e0

08005d08 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b084      	sub	sp, #16
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d108      	bne.n	8005d2c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f000 fcfa 	bl	8006718 <vPortFree>
				vPortFree( pxTCB );
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f000 fcf7 	bl	8006718 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005d2a:	e01a      	b.n	8005d62 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d103      	bne.n	8005d3e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f000 fcee 	bl	8006718 <vPortFree>
	}
 8005d3c:	e011      	b.n	8005d62 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d44:	2b02      	cmp	r3, #2
 8005d46:	d00c      	beq.n	8005d62 <prvDeleteTCB+0x5a>
	__asm volatile
 8005d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d4c:	b672      	cpsid	i
 8005d4e:	f383 8811 	msr	BASEPRI, r3
 8005d52:	f3bf 8f6f 	isb	sy
 8005d56:	f3bf 8f4f 	dsb	sy
 8005d5a:	b662      	cpsie	i
 8005d5c:	60fb      	str	r3, [r7, #12]
}
 8005d5e:	bf00      	nop
 8005d60:	e7fe      	b.n	8005d60 <prvDeleteTCB+0x58>
	}
 8005d62:	bf00      	nop
 8005d64:	3710      	adds	r7, #16
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
	...

08005d6c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b083      	sub	sp, #12
 8005d70:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d72:	4b0c      	ldr	r3, [pc, #48]	; (8005da4 <prvResetNextTaskUnblockTime+0x38>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d104      	bne.n	8005d86 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005d7c:	4b0a      	ldr	r3, [pc, #40]	; (8005da8 <prvResetNextTaskUnblockTime+0x3c>)
 8005d7e:	f04f 32ff 	mov.w	r2, #4294967295
 8005d82:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005d84:	e008      	b.n	8005d98 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d86:	4b07      	ldr	r3, [pc, #28]	; (8005da4 <prvResetNextTaskUnblockTime+0x38>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	68db      	ldr	r3, [r3, #12]
 8005d8c:	68db      	ldr	r3, [r3, #12]
 8005d8e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	4a04      	ldr	r2, [pc, #16]	; (8005da8 <prvResetNextTaskUnblockTime+0x3c>)
 8005d96:	6013      	str	r3, [r2, #0]
}
 8005d98:	bf00      	nop
 8005d9a:	370c      	adds	r7, #12
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr
 8005da4:	200007b0 	.word	0x200007b0
 8005da8:	20000818 	.word	0x20000818

08005dac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005dac:	b480      	push	{r7}
 8005dae:	b083      	sub	sp, #12
 8005db0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005db2:	4b0b      	ldr	r3, [pc, #44]	; (8005de0 <xTaskGetSchedulerState+0x34>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d102      	bne.n	8005dc0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	607b      	str	r3, [r7, #4]
 8005dbe:	e008      	b.n	8005dd2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005dc0:	4b08      	ldr	r3, [pc, #32]	; (8005de4 <xTaskGetSchedulerState+0x38>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d102      	bne.n	8005dce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005dc8:	2302      	movs	r3, #2
 8005dca:	607b      	str	r3, [r7, #4]
 8005dcc:	e001      	b.n	8005dd2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005dd2:	687b      	ldr	r3, [r7, #4]
	}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	370c      	adds	r7, #12
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr
 8005de0:	20000804 	.word	0x20000804
 8005de4:	20000820 	.word	0x20000820

08005de8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b084      	sub	sp, #16
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005df4:	2300      	movs	r3, #0
 8005df6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d069      	beq.n	8005ed2 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e02:	4b36      	ldr	r3, [pc, #216]	; (8005edc <xTaskPriorityInherit+0xf4>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d259      	bcs.n	8005ec0 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	699b      	ldr	r3, [r3, #24]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	db06      	blt.n	8005e22 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e14:	4b31      	ldr	r3, [pc, #196]	; (8005edc <xTaskPriorityInherit+0xf4>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e1a:	f1c3 0207 	rsb	r2, r3, #7
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	6959      	ldr	r1, [r3, #20]
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e2a:	4613      	mov	r3, r2
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	4413      	add	r3, r2
 8005e30:	009b      	lsls	r3, r3, #2
 8005e32:	4a2b      	ldr	r2, [pc, #172]	; (8005ee0 <xTaskPriorityInherit+0xf8>)
 8005e34:	4413      	add	r3, r2
 8005e36:	4299      	cmp	r1, r3
 8005e38:	d13a      	bne.n	8005eb0 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	3304      	adds	r3, #4
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f7fe feb1 	bl	8004ba6 <uxListRemove>
 8005e44:	4603      	mov	r3, r0
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d115      	bne.n	8005e76 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e4e:	4924      	ldr	r1, [pc, #144]	; (8005ee0 <xTaskPriorityInherit+0xf8>)
 8005e50:	4613      	mov	r3, r2
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	4413      	add	r3, r2
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	440b      	add	r3, r1
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d10a      	bne.n	8005e76 <xTaskPriorityInherit+0x8e>
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e64:	2201      	movs	r2, #1
 8005e66:	fa02 f303 	lsl.w	r3, r2, r3
 8005e6a:	43da      	mvns	r2, r3
 8005e6c:	4b1d      	ldr	r3, [pc, #116]	; (8005ee4 <xTaskPriorityInherit+0xfc>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4013      	ands	r3, r2
 8005e72:	4a1c      	ldr	r2, [pc, #112]	; (8005ee4 <xTaskPriorityInherit+0xfc>)
 8005e74:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005e76:	4b19      	ldr	r3, [pc, #100]	; (8005edc <xTaskPriorityInherit+0xf4>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e84:	2201      	movs	r2, #1
 8005e86:	409a      	lsls	r2, r3
 8005e88:	4b16      	ldr	r3, [pc, #88]	; (8005ee4 <xTaskPriorityInherit+0xfc>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	4a15      	ldr	r2, [pc, #84]	; (8005ee4 <xTaskPriorityInherit+0xfc>)
 8005e90:	6013      	str	r3, [r2, #0]
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e96:	4613      	mov	r3, r2
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	4413      	add	r3, r2
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	4a10      	ldr	r2, [pc, #64]	; (8005ee0 <xTaskPriorityInherit+0xf8>)
 8005ea0:	441a      	add	r2, r3
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	3304      	adds	r3, #4
 8005ea6:	4619      	mov	r1, r3
 8005ea8:	4610      	mov	r0, r2
 8005eaa:	f7fe fe1f 	bl	8004aec <vListInsertEnd>
 8005eae:	e004      	b.n	8005eba <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005eb0:	4b0a      	ldr	r3, [pc, #40]	; (8005edc <xTaskPriorityInherit+0xf4>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	60fb      	str	r3, [r7, #12]
 8005ebe:	e008      	b.n	8005ed2 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ec4:	4b05      	ldr	r3, [pc, #20]	; (8005edc <xTaskPriorityInherit+0xf4>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d201      	bcs.n	8005ed2 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
	}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3710      	adds	r7, #16
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}
 8005edc:	200006f8 	.word	0x200006f8
 8005ee0:	200006fc 	.word	0x200006fc
 8005ee4:	20000800 	.word	0x20000800

08005ee8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b088      	sub	sp, #32
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	f000 8087 	beq.w	8006010 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005f02:	69bb      	ldr	r3, [r7, #24]
 8005f04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d10c      	bne.n	8005f24 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8005f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f0e:	b672      	cpsid	i
 8005f10:	f383 8811 	msr	BASEPRI, r3
 8005f14:	f3bf 8f6f 	isb	sy
 8005f18:	f3bf 8f4f 	dsb	sy
 8005f1c:	b662      	cpsie	i
 8005f1e:	60fb      	str	r3, [r7, #12]
}
 8005f20:	bf00      	nop
 8005f22:	e7fe      	b.n	8005f22 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f28:	683a      	ldr	r2, [r7, #0]
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d902      	bls.n	8005f34 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	61fb      	str	r3, [r7, #28]
 8005f32:	e002      	b.n	8005f3a <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005f34:	69bb      	ldr	r3, [r7, #24]
 8005f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f38:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f3e:	69fa      	ldr	r2, [r7, #28]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d065      	beq.n	8006010 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005f44:	69bb      	ldr	r3, [r7, #24]
 8005f46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f48:	697a      	ldr	r2, [r7, #20]
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d160      	bne.n	8006010 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005f4e:	4b32      	ldr	r3, [pc, #200]	; (8006018 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	69ba      	ldr	r2, [r7, #24]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d10c      	bne.n	8005f72 <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 8005f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f5c:	b672      	cpsid	i
 8005f5e:	f383 8811 	msr	BASEPRI, r3
 8005f62:	f3bf 8f6f 	isb	sy
 8005f66:	f3bf 8f4f 	dsb	sy
 8005f6a:	b662      	cpsie	i
 8005f6c:	60bb      	str	r3, [r7, #8]
}
 8005f6e:	bf00      	nop
 8005f70:	e7fe      	b.n	8005f70 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005f72:	69bb      	ldr	r3, [r7, #24]
 8005f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f76:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005f78:	69bb      	ldr	r3, [r7, #24]
 8005f7a:	69fa      	ldr	r2, [r7, #28]
 8005f7c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	699b      	ldr	r3, [r3, #24]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	db04      	blt.n	8005f90 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f86:	69fb      	ldr	r3, [r7, #28]
 8005f88:	f1c3 0207 	rsb	r2, r3, #7
 8005f8c:	69bb      	ldr	r3, [r7, #24]
 8005f8e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005f90:	69bb      	ldr	r3, [r7, #24]
 8005f92:	6959      	ldr	r1, [r3, #20]
 8005f94:	693a      	ldr	r2, [r7, #16]
 8005f96:	4613      	mov	r3, r2
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	4413      	add	r3, r2
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	4a1f      	ldr	r2, [pc, #124]	; (800601c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8005fa0:	4413      	add	r3, r2
 8005fa2:	4299      	cmp	r1, r3
 8005fa4:	d134      	bne.n	8006010 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	3304      	adds	r3, #4
 8005faa:	4618      	mov	r0, r3
 8005fac:	f7fe fdfb 	bl	8004ba6 <uxListRemove>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d115      	bne.n	8005fe2 <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005fb6:	69bb      	ldr	r3, [r7, #24]
 8005fb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fba:	4918      	ldr	r1, [pc, #96]	; (800601c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8005fbc:	4613      	mov	r3, r2
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	4413      	add	r3, r2
 8005fc2:	009b      	lsls	r3, r3, #2
 8005fc4:	440b      	add	r3, r1
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d10a      	bne.n	8005fe2 <vTaskPriorityDisinheritAfterTimeout+0xfa>
 8005fcc:	69bb      	ldr	r3, [r7, #24]
 8005fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd6:	43da      	mvns	r2, r3
 8005fd8:	4b11      	ldr	r3, [pc, #68]	; (8006020 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4013      	ands	r3, r2
 8005fde:	4a10      	ldr	r2, [pc, #64]	; (8006020 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005fe0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005fe2:	69bb      	ldr	r3, [r7, #24]
 8005fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	409a      	lsls	r2, r3
 8005fea:	4b0d      	ldr	r3, [pc, #52]	; (8006020 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	4a0b      	ldr	r2, [pc, #44]	; (8006020 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005ff2:	6013      	str	r3, [r2, #0]
 8005ff4:	69bb      	ldr	r3, [r7, #24]
 8005ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ff8:	4613      	mov	r3, r2
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	4413      	add	r3, r2
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	4a06      	ldr	r2, [pc, #24]	; (800601c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8006002:	441a      	add	r2, r3
 8006004:	69bb      	ldr	r3, [r7, #24]
 8006006:	3304      	adds	r3, #4
 8006008:	4619      	mov	r1, r3
 800600a:	4610      	mov	r0, r2
 800600c:	f7fe fd6e 	bl	8004aec <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006010:	bf00      	nop
 8006012:	3720      	adds	r7, #32
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}
 8006018:	200006f8 	.word	0x200006f8
 800601c:	200006fc 	.word	0x200006fc
 8006020:	20000800 	.word	0x20000800

08006024 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006024:	b480      	push	{r7}
 8006026:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006028:	4b07      	ldr	r3, [pc, #28]	; (8006048 <pvTaskIncrementMutexHeldCount+0x24>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d004      	beq.n	800603a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006030:	4b05      	ldr	r3, [pc, #20]	; (8006048 <pvTaskIncrementMutexHeldCount+0x24>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006036:	3201      	adds	r2, #1
 8006038:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800603a:	4b03      	ldr	r3, [pc, #12]	; (8006048 <pvTaskIncrementMutexHeldCount+0x24>)
 800603c:	681b      	ldr	r3, [r3, #0]
	}
 800603e:	4618      	mov	r0, r3
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr
 8006048:	200006f8 	.word	0x200006f8

0800604c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b084      	sub	sp, #16
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006056:	4b29      	ldr	r3, [pc, #164]	; (80060fc <prvAddCurrentTaskToDelayedList+0xb0>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800605c:	4b28      	ldr	r3, [pc, #160]	; (8006100 <prvAddCurrentTaskToDelayedList+0xb4>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	3304      	adds	r3, #4
 8006062:	4618      	mov	r0, r3
 8006064:	f7fe fd9f 	bl	8004ba6 <uxListRemove>
 8006068:	4603      	mov	r3, r0
 800606a:	2b00      	cmp	r3, #0
 800606c:	d10b      	bne.n	8006086 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800606e:	4b24      	ldr	r3, [pc, #144]	; (8006100 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006074:	2201      	movs	r2, #1
 8006076:	fa02 f303 	lsl.w	r3, r2, r3
 800607a:	43da      	mvns	r2, r3
 800607c:	4b21      	ldr	r3, [pc, #132]	; (8006104 <prvAddCurrentTaskToDelayedList+0xb8>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4013      	ands	r3, r2
 8006082:	4a20      	ldr	r2, [pc, #128]	; (8006104 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006084:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800608c:	d10a      	bne.n	80060a4 <prvAddCurrentTaskToDelayedList+0x58>
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d007      	beq.n	80060a4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006094:	4b1a      	ldr	r3, [pc, #104]	; (8006100 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	3304      	adds	r3, #4
 800609a:	4619      	mov	r1, r3
 800609c:	481a      	ldr	r0, [pc, #104]	; (8006108 <prvAddCurrentTaskToDelayedList+0xbc>)
 800609e:	f7fe fd25 	bl	8004aec <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80060a2:	e026      	b.n	80060f2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80060a4:	68fa      	ldr	r2, [r7, #12]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4413      	add	r3, r2
 80060aa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80060ac:	4b14      	ldr	r3, [pc, #80]	; (8006100 <prvAddCurrentTaskToDelayedList+0xb4>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	68ba      	ldr	r2, [r7, #8]
 80060b2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80060b4:	68ba      	ldr	r2, [r7, #8]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d209      	bcs.n	80060d0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060bc:	4b13      	ldr	r3, [pc, #76]	; (800610c <prvAddCurrentTaskToDelayedList+0xc0>)
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	4b0f      	ldr	r3, [pc, #60]	; (8006100 <prvAddCurrentTaskToDelayedList+0xb4>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	3304      	adds	r3, #4
 80060c6:	4619      	mov	r1, r3
 80060c8:	4610      	mov	r0, r2
 80060ca:	f7fe fd33 	bl	8004b34 <vListInsert>
}
 80060ce:	e010      	b.n	80060f2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060d0:	4b0f      	ldr	r3, [pc, #60]	; (8006110 <prvAddCurrentTaskToDelayedList+0xc4>)
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	4b0a      	ldr	r3, [pc, #40]	; (8006100 <prvAddCurrentTaskToDelayedList+0xb4>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	3304      	adds	r3, #4
 80060da:	4619      	mov	r1, r3
 80060dc:	4610      	mov	r0, r2
 80060de:	f7fe fd29 	bl	8004b34 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80060e2:	4b0c      	ldr	r3, [pc, #48]	; (8006114 <prvAddCurrentTaskToDelayedList+0xc8>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	68ba      	ldr	r2, [r7, #8]
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d202      	bcs.n	80060f2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80060ec:	4a09      	ldr	r2, [pc, #36]	; (8006114 <prvAddCurrentTaskToDelayedList+0xc8>)
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	6013      	str	r3, [r2, #0]
}
 80060f2:	bf00      	nop
 80060f4:	3710      	adds	r7, #16
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	bf00      	nop
 80060fc:	200007fc 	.word	0x200007fc
 8006100:	200006f8 	.word	0x200006f8
 8006104:	20000800 	.word	0x20000800
 8006108:	200007e4 	.word	0x200007e4
 800610c:	200007b4 	.word	0x200007b4
 8006110:	200007b0 	.word	0x200007b0
 8006114:	20000818 	.word	0x20000818

08006118 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006118:	b480      	push	{r7}
 800611a:	b085      	sub	sp, #20
 800611c:	af00      	add	r7, sp, #0
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	60b9      	str	r1, [r7, #8]
 8006122:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	3b04      	subs	r3, #4
 8006128:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006130:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	3b04      	subs	r3, #4
 8006136:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	f023 0201 	bic.w	r2, r3, #1
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	3b04      	subs	r3, #4
 8006146:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006148:	4a0c      	ldr	r2, [pc, #48]	; (800617c <pxPortInitialiseStack+0x64>)
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	3b14      	subs	r3, #20
 8006152:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006154:	687a      	ldr	r2, [r7, #4]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	3b04      	subs	r3, #4
 800615e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f06f 0202 	mvn.w	r2, #2
 8006166:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	3b20      	subs	r3, #32
 800616c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800616e:	68fb      	ldr	r3, [r7, #12]
}
 8006170:	4618      	mov	r0, r3
 8006172:	3714      	adds	r7, #20
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr
 800617c:	08006181 	.word	0x08006181

08006180 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006180:	b480      	push	{r7}
 8006182:	b085      	sub	sp, #20
 8006184:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006186:	2300      	movs	r3, #0
 8006188:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800618a:	4b14      	ldr	r3, [pc, #80]	; (80061dc <prvTaskExitError+0x5c>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006192:	d00c      	beq.n	80061ae <prvTaskExitError+0x2e>
	__asm volatile
 8006194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006198:	b672      	cpsid	i
 800619a:	f383 8811 	msr	BASEPRI, r3
 800619e:	f3bf 8f6f 	isb	sy
 80061a2:	f3bf 8f4f 	dsb	sy
 80061a6:	b662      	cpsie	i
 80061a8:	60fb      	str	r3, [r7, #12]
}
 80061aa:	bf00      	nop
 80061ac:	e7fe      	b.n	80061ac <prvTaskExitError+0x2c>
	__asm volatile
 80061ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b2:	b672      	cpsid	i
 80061b4:	f383 8811 	msr	BASEPRI, r3
 80061b8:	f3bf 8f6f 	isb	sy
 80061bc:	f3bf 8f4f 	dsb	sy
 80061c0:	b662      	cpsie	i
 80061c2:	60bb      	str	r3, [r7, #8]
}
 80061c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80061c6:	bf00      	nop
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d0fc      	beq.n	80061c8 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80061ce:	bf00      	nop
 80061d0:	bf00      	nop
 80061d2:	3714      	adds	r7, #20
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr
 80061dc:	20000014 	.word	0x20000014

080061e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80061e0:	4b07      	ldr	r3, [pc, #28]	; (8006200 <pxCurrentTCBConst2>)
 80061e2:	6819      	ldr	r1, [r3, #0]
 80061e4:	6808      	ldr	r0, [r1, #0]
 80061e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061ea:	f380 8809 	msr	PSP, r0
 80061ee:	f3bf 8f6f 	isb	sy
 80061f2:	f04f 0000 	mov.w	r0, #0
 80061f6:	f380 8811 	msr	BASEPRI, r0
 80061fa:	4770      	bx	lr
 80061fc:	f3af 8000 	nop.w

08006200 <pxCurrentTCBConst2>:
 8006200:	200006f8 	.word	0x200006f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006204:	bf00      	nop
 8006206:	bf00      	nop

08006208 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006208:	4808      	ldr	r0, [pc, #32]	; (800622c <prvPortStartFirstTask+0x24>)
 800620a:	6800      	ldr	r0, [r0, #0]
 800620c:	6800      	ldr	r0, [r0, #0]
 800620e:	f380 8808 	msr	MSP, r0
 8006212:	f04f 0000 	mov.w	r0, #0
 8006216:	f380 8814 	msr	CONTROL, r0
 800621a:	b662      	cpsie	i
 800621c:	b661      	cpsie	f
 800621e:	f3bf 8f4f 	dsb	sy
 8006222:	f3bf 8f6f 	isb	sy
 8006226:	df00      	svc	0
 8006228:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800622a:	bf00      	nop
 800622c:	e000ed08 	.word	0xe000ed08

08006230 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b084      	sub	sp, #16
 8006234:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006236:	4b37      	ldr	r3, [pc, #220]	; (8006314 <xPortStartScheduler+0xe4>)
 8006238:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	781b      	ldrb	r3, [r3, #0]
 800623e:	b2db      	uxtb	r3, r3
 8006240:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	22ff      	movs	r2, #255	; 0xff
 8006246:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	b2db      	uxtb	r3, r3
 800624e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006250:	78fb      	ldrb	r3, [r7, #3]
 8006252:	b2db      	uxtb	r3, r3
 8006254:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006258:	b2da      	uxtb	r2, r3
 800625a:	4b2f      	ldr	r3, [pc, #188]	; (8006318 <xPortStartScheduler+0xe8>)
 800625c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800625e:	4b2f      	ldr	r3, [pc, #188]	; (800631c <xPortStartScheduler+0xec>)
 8006260:	2207      	movs	r2, #7
 8006262:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006264:	e009      	b.n	800627a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006266:	4b2d      	ldr	r3, [pc, #180]	; (800631c <xPortStartScheduler+0xec>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	3b01      	subs	r3, #1
 800626c:	4a2b      	ldr	r2, [pc, #172]	; (800631c <xPortStartScheduler+0xec>)
 800626e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006270:	78fb      	ldrb	r3, [r7, #3]
 8006272:	b2db      	uxtb	r3, r3
 8006274:	005b      	lsls	r3, r3, #1
 8006276:	b2db      	uxtb	r3, r3
 8006278:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800627a:	78fb      	ldrb	r3, [r7, #3]
 800627c:	b2db      	uxtb	r3, r3
 800627e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006282:	2b80      	cmp	r3, #128	; 0x80
 8006284:	d0ef      	beq.n	8006266 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006286:	4b25      	ldr	r3, [pc, #148]	; (800631c <xPortStartScheduler+0xec>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f1c3 0307 	rsb	r3, r3, #7
 800628e:	2b04      	cmp	r3, #4
 8006290:	d00c      	beq.n	80062ac <xPortStartScheduler+0x7c>
	__asm volatile
 8006292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006296:	b672      	cpsid	i
 8006298:	f383 8811 	msr	BASEPRI, r3
 800629c:	f3bf 8f6f 	isb	sy
 80062a0:	f3bf 8f4f 	dsb	sy
 80062a4:	b662      	cpsie	i
 80062a6:	60bb      	str	r3, [r7, #8]
}
 80062a8:	bf00      	nop
 80062aa:	e7fe      	b.n	80062aa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80062ac:	4b1b      	ldr	r3, [pc, #108]	; (800631c <xPortStartScheduler+0xec>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	021b      	lsls	r3, r3, #8
 80062b2:	4a1a      	ldr	r2, [pc, #104]	; (800631c <xPortStartScheduler+0xec>)
 80062b4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80062b6:	4b19      	ldr	r3, [pc, #100]	; (800631c <xPortStartScheduler+0xec>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80062be:	4a17      	ldr	r2, [pc, #92]	; (800631c <xPortStartScheduler+0xec>)
 80062c0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	b2da      	uxtb	r2, r3
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80062ca:	4b15      	ldr	r3, [pc, #84]	; (8006320 <xPortStartScheduler+0xf0>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a14      	ldr	r2, [pc, #80]	; (8006320 <xPortStartScheduler+0xf0>)
 80062d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80062d4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80062d6:	4b12      	ldr	r3, [pc, #72]	; (8006320 <xPortStartScheduler+0xf0>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a11      	ldr	r2, [pc, #68]	; (8006320 <xPortStartScheduler+0xf0>)
 80062dc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80062e0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80062e2:	f000 f8dd 	bl	80064a0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80062e6:	4b0f      	ldr	r3, [pc, #60]	; (8006324 <xPortStartScheduler+0xf4>)
 80062e8:	2200      	movs	r2, #0
 80062ea:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80062ec:	f000 f8fc 	bl	80064e8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80062f0:	4b0d      	ldr	r3, [pc, #52]	; (8006328 <xPortStartScheduler+0xf8>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a0c      	ldr	r2, [pc, #48]	; (8006328 <xPortStartScheduler+0xf8>)
 80062f6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80062fa:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80062fc:	f7ff ff84 	bl	8006208 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006300:	f7ff fb0c 	bl	800591c <vTaskSwitchContext>
	prvTaskExitError();
 8006304:	f7ff ff3c 	bl	8006180 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006308:	2300      	movs	r3, #0
}
 800630a:	4618      	mov	r0, r3
 800630c:	3710      	adds	r7, #16
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}
 8006312:	bf00      	nop
 8006314:	e000e400 	.word	0xe000e400
 8006318:	20000824 	.word	0x20000824
 800631c:	20000828 	.word	0x20000828
 8006320:	e000ed20 	.word	0xe000ed20
 8006324:	20000014 	.word	0x20000014
 8006328:	e000ef34 	.word	0xe000ef34

0800632c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800632c:	b480      	push	{r7}
 800632e:	b083      	sub	sp, #12
 8006330:	af00      	add	r7, sp, #0
	__asm volatile
 8006332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006336:	b672      	cpsid	i
 8006338:	f383 8811 	msr	BASEPRI, r3
 800633c:	f3bf 8f6f 	isb	sy
 8006340:	f3bf 8f4f 	dsb	sy
 8006344:	b662      	cpsie	i
 8006346:	607b      	str	r3, [r7, #4]
}
 8006348:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800634a:	4b10      	ldr	r3, [pc, #64]	; (800638c <vPortEnterCritical+0x60>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	3301      	adds	r3, #1
 8006350:	4a0e      	ldr	r2, [pc, #56]	; (800638c <vPortEnterCritical+0x60>)
 8006352:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006354:	4b0d      	ldr	r3, [pc, #52]	; (800638c <vPortEnterCritical+0x60>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	2b01      	cmp	r3, #1
 800635a:	d111      	bne.n	8006380 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800635c:	4b0c      	ldr	r3, [pc, #48]	; (8006390 <vPortEnterCritical+0x64>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	b2db      	uxtb	r3, r3
 8006362:	2b00      	cmp	r3, #0
 8006364:	d00c      	beq.n	8006380 <vPortEnterCritical+0x54>
	__asm volatile
 8006366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800636a:	b672      	cpsid	i
 800636c:	f383 8811 	msr	BASEPRI, r3
 8006370:	f3bf 8f6f 	isb	sy
 8006374:	f3bf 8f4f 	dsb	sy
 8006378:	b662      	cpsie	i
 800637a:	603b      	str	r3, [r7, #0]
}
 800637c:	bf00      	nop
 800637e:	e7fe      	b.n	800637e <vPortEnterCritical+0x52>
	}
}
 8006380:	bf00      	nop
 8006382:	370c      	adds	r7, #12
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr
 800638c:	20000014 	.word	0x20000014
 8006390:	e000ed04 	.word	0xe000ed04

08006394 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800639a:	4b13      	ldr	r3, [pc, #76]	; (80063e8 <vPortExitCritical+0x54>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d10c      	bne.n	80063bc <vPortExitCritical+0x28>
	__asm volatile
 80063a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a6:	b672      	cpsid	i
 80063a8:	f383 8811 	msr	BASEPRI, r3
 80063ac:	f3bf 8f6f 	isb	sy
 80063b0:	f3bf 8f4f 	dsb	sy
 80063b4:	b662      	cpsie	i
 80063b6:	607b      	str	r3, [r7, #4]
}
 80063b8:	bf00      	nop
 80063ba:	e7fe      	b.n	80063ba <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80063bc:	4b0a      	ldr	r3, [pc, #40]	; (80063e8 <vPortExitCritical+0x54>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	3b01      	subs	r3, #1
 80063c2:	4a09      	ldr	r2, [pc, #36]	; (80063e8 <vPortExitCritical+0x54>)
 80063c4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80063c6:	4b08      	ldr	r3, [pc, #32]	; (80063e8 <vPortExitCritical+0x54>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d105      	bne.n	80063da <vPortExitCritical+0x46>
 80063ce:	2300      	movs	r3, #0
 80063d0:	603b      	str	r3, [r7, #0]
	__asm volatile
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	f383 8811 	msr	BASEPRI, r3
}
 80063d8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80063da:	bf00      	nop
 80063dc:	370c      	adds	r7, #12
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr
 80063e6:	bf00      	nop
 80063e8:	20000014 	.word	0x20000014
 80063ec:	00000000 	.word	0x00000000

080063f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80063f0:	f3ef 8009 	mrs	r0, PSP
 80063f4:	f3bf 8f6f 	isb	sy
 80063f8:	4b15      	ldr	r3, [pc, #84]	; (8006450 <pxCurrentTCBConst>)
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	f01e 0f10 	tst.w	lr, #16
 8006400:	bf08      	it	eq
 8006402:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006406:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800640a:	6010      	str	r0, [r2, #0]
 800640c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006410:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006414:	b672      	cpsid	i
 8006416:	f380 8811 	msr	BASEPRI, r0
 800641a:	f3bf 8f4f 	dsb	sy
 800641e:	f3bf 8f6f 	isb	sy
 8006422:	b662      	cpsie	i
 8006424:	f7ff fa7a 	bl	800591c <vTaskSwitchContext>
 8006428:	f04f 0000 	mov.w	r0, #0
 800642c:	f380 8811 	msr	BASEPRI, r0
 8006430:	bc09      	pop	{r0, r3}
 8006432:	6819      	ldr	r1, [r3, #0]
 8006434:	6808      	ldr	r0, [r1, #0]
 8006436:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800643a:	f01e 0f10 	tst.w	lr, #16
 800643e:	bf08      	it	eq
 8006440:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006444:	f380 8809 	msr	PSP, r0
 8006448:	f3bf 8f6f 	isb	sy
 800644c:	4770      	bx	lr
 800644e:	bf00      	nop

08006450 <pxCurrentTCBConst>:
 8006450:	200006f8 	.word	0x200006f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006454:	bf00      	nop
 8006456:	bf00      	nop

08006458 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b082      	sub	sp, #8
 800645c:	af00      	add	r7, sp, #0
	__asm volatile
 800645e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006462:	b672      	cpsid	i
 8006464:	f383 8811 	msr	BASEPRI, r3
 8006468:	f3bf 8f6f 	isb	sy
 800646c:	f3bf 8f4f 	dsb	sy
 8006470:	b662      	cpsie	i
 8006472:	607b      	str	r3, [r7, #4]
}
 8006474:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006476:	f7ff f997 	bl	80057a8 <xTaskIncrementTick>
 800647a:	4603      	mov	r3, r0
 800647c:	2b00      	cmp	r3, #0
 800647e:	d003      	beq.n	8006488 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006480:	4b06      	ldr	r3, [pc, #24]	; (800649c <xPortSysTickHandler+0x44>)
 8006482:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006486:	601a      	str	r2, [r3, #0]
 8006488:	2300      	movs	r3, #0
 800648a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	f383 8811 	msr	BASEPRI, r3
}
 8006492:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006494:	bf00      	nop
 8006496:	3708      	adds	r7, #8
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}
 800649c:	e000ed04 	.word	0xe000ed04

080064a0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80064a0:	b480      	push	{r7}
 80064a2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80064a4:	4b0b      	ldr	r3, [pc, #44]	; (80064d4 <vPortSetupTimerInterrupt+0x34>)
 80064a6:	2200      	movs	r2, #0
 80064a8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80064aa:	4b0b      	ldr	r3, [pc, #44]	; (80064d8 <vPortSetupTimerInterrupt+0x38>)
 80064ac:	2200      	movs	r2, #0
 80064ae:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80064b0:	4b0a      	ldr	r3, [pc, #40]	; (80064dc <vPortSetupTimerInterrupt+0x3c>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a0a      	ldr	r2, [pc, #40]	; (80064e0 <vPortSetupTimerInterrupt+0x40>)
 80064b6:	fba2 2303 	umull	r2, r3, r2, r3
 80064ba:	099b      	lsrs	r3, r3, #6
 80064bc:	4a09      	ldr	r2, [pc, #36]	; (80064e4 <vPortSetupTimerInterrupt+0x44>)
 80064be:	3b01      	subs	r3, #1
 80064c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80064c2:	4b04      	ldr	r3, [pc, #16]	; (80064d4 <vPortSetupTimerInterrupt+0x34>)
 80064c4:	2207      	movs	r2, #7
 80064c6:	601a      	str	r2, [r3, #0]
}
 80064c8:	bf00      	nop
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr
 80064d2:	bf00      	nop
 80064d4:	e000e010 	.word	0xe000e010
 80064d8:	e000e018 	.word	0xe000e018
 80064dc:	20000008 	.word	0x20000008
 80064e0:	10624dd3 	.word	0x10624dd3
 80064e4:	e000e014 	.word	0xe000e014

080064e8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80064e8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80064f8 <vPortEnableVFP+0x10>
 80064ec:	6801      	ldr	r1, [r0, #0]
 80064ee:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80064f2:	6001      	str	r1, [r0, #0]
 80064f4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80064f6:	bf00      	nop
 80064f8:	e000ed88 	.word	0xe000ed88

080064fc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80064fc:	b480      	push	{r7}
 80064fe:	b085      	sub	sp, #20
 8006500:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006502:	f3ef 8305 	mrs	r3, IPSR
 8006506:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2b0f      	cmp	r3, #15
 800650c:	d916      	bls.n	800653c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800650e:	4a19      	ldr	r2, [pc, #100]	; (8006574 <vPortValidateInterruptPriority+0x78>)
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	4413      	add	r3, r2
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006518:	4b17      	ldr	r3, [pc, #92]	; (8006578 <vPortValidateInterruptPriority+0x7c>)
 800651a:	781b      	ldrb	r3, [r3, #0]
 800651c:	7afa      	ldrb	r2, [r7, #11]
 800651e:	429a      	cmp	r2, r3
 8006520:	d20c      	bcs.n	800653c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8006522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006526:	b672      	cpsid	i
 8006528:	f383 8811 	msr	BASEPRI, r3
 800652c:	f3bf 8f6f 	isb	sy
 8006530:	f3bf 8f4f 	dsb	sy
 8006534:	b662      	cpsie	i
 8006536:	607b      	str	r3, [r7, #4]
}
 8006538:	bf00      	nop
 800653a:	e7fe      	b.n	800653a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800653c:	4b0f      	ldr	r3, [pc, #60]	; (800657c <vPortValidateInterruptPriority+0x80>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006544:	4b0e      	ldr	r3, [pc, #56]	; (8006580 <vPortValidateInterruptPriority+0x84>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	429a      	cmp	r2, r3
 800654a:	d90c      	bls.n	8006566 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800654c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006550:	b672      	cpsid	i
 8006552:	f383 8811 	msr	BASEPRI, r3
 8006556:	f3bf 8f6f 	isb	sy
 800655a:	f3bf 8f4f 	dsb	sy
 800655e:	b662      	cpsie	i
 8006560:	603b      	str	r3, [r7, #0]
}
 8006562:	bf00      	nop
 8006564:	e7fe      	b.n	8006564 <vPortValidateInterruptPriority+0x68>
	}
 8006566:	bf00      	nop
 8006568:	3714      	adds	r7, #20
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr
 8006572:	bf00      	nop
 8006574:	e000e3f0 	.word	0xe000e3f0
 8006578:	20000824 	.word	0x20000824
 800657c:	e000ed0c 	.word	0xe000ed0c
 8006580:	20000828 	.word	0x20000828

08006584 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b08a      	sub	sp, #40	; 0x28
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800658c:	2300      	movs	r3, #0
 800658e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006590:	f7ff f85e 	bl	8005650 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006594:	4b5b      	ldr	r3, [pc, #364]	; (8006704 <pvPortMalloc+0x180>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d101      	bne.n	80065a0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800659c:	f000 f91a 	bl	80067d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80065a0:	4b59      	ldr	r3, [pc, #356]	; (8006708 <pvPortMalloc+0x184>)
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	4013      	ands	r3, r2
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	f040 8092 	bne.w	80066d2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d01f      	beq.n	80065f4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80065b4:	2208      	movs	r2, #8
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	4413      	add	r3, r2
 80065ba:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f003 0307 	and.w	r3, r3, #7
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d016      	beq.n	80065f4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f023 0307 	bic.w	r3, r3, #7
 80065cc:	3308      	adds	r3, #8
 80065ce:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f003 0307 	and.w	r3, r3, #7
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d00c      	beq.n	80065f4 <pvPortMalloc+0x70>
	__asm volatile
 80065da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065de:	b672      	cpsid	i
 80065e0:	f383 8811 	msr	BASEPRI, r3
 80065e4:	f3bf 8f6f 	isb	sy
 80065e8:	f3bf 8f4f 	dsb	sy
 80065ec:	b662      	cpsie	i
 80065ee:	617b      	str	r3, [r7, #20]
}
 80065f0:	bf00      	nop
 80065f2:	e7fe      	b.n	80065f2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d06b      	beq.n	80066d2 <pvPortMalloc+0x14e>
 80065fa:	4b44      	ldr	r3, [pc, #272]	; (800670c <pvPortMalloc+0x188>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	429a      	cmp	r2, r3
 8006602:	d866      	bhi.n	80066d2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006604:	4b42      	ldr	r3, [pc, #264]	; (8006710 <pvPortMalloc+0x18c>)
 8006606:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006608:	4b41      	ldr	r3, [pc, #260]	; (8006710 <pvPortMalloc+0x18c>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800660e:	e004      	b.n	800661a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8006610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006612:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800661a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	429a      	cmp	r2, r3
 8006622:	d903      	bls.n	800662c <pvPortMalloc+0xa8>
 8006624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d1f1      	bne.n	8006610 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800662c:	4b35      	ldr	r3, [pc, #212]	; (8006704 <pvPortMalloc+0x180>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006632:	429a      	cmp	r2, r3
 8006634:	d04d      	beq.n	80066d2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006636:	6a3b      	ldr	r3, [r7, #32]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	2208      	movs	r2, #8
 800663c:	4413      	add	r3, r2
 800663e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	6a3b      	ldr	r3, [r7, #32]
 8006646:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664a:	685a      	ldr	r2, [r3, #4]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	1ad2      	subs	r2, r2, r3
 8006650:	2308      	movs	r3, #8
 8006652:	005b      	lsls	r3, r3, #1
 8006654:	429a      	cmp	r2, r3
 8006656:	d921      	bls.n	800669c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	4413      	add	r3, r2
 800665e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006660:	69bb      	ldr	r3, [r7, #24]
 8006662:	f003 0307 	and.w	r3, r3, #7
 8006666:	2b00      	cmp	r3, #0
 8006668:	d00c      	beq.n	8006684 <pvPortMalloc+0x100>
	__asm volatile
 800666a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800666e:	b672      	cpsid	i
 8006670:	f383 8811 	msr	BASEPRI, r3
 8006674:	f3bf 8f6f 	isb	sy
 8006678:	f3bf 8f4f 	dsb	sy
 800667c:	b662      	cpsie	i
 800667e:	613b      	str	r3, [r7, #16]
}
 8006680:	bf00      	nop
 8006682:	e7fe      	b.n	8006682 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006686:	685a      	ldr	r2, [r3, #4]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	1ad2      	subs	r2, r2, r3
 800668c:	69bb      	ldr	r3, [r7, #24]
 800668e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006696:	69b8      	ldr	r0, [r7, #24]
 8006698:	f000 f8fe 	bl	8006898 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800669c:	4b1b      	ldr	r3, [pc, #108]	; (800670c <pvPortMalloc+0x188>)
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	1ad3      	subs	r3, r2, r3
 80066a6:	4a19      	ldr	r2, [pc, #100]	; (800670c <pvPortMalloc+0x188>)
 80066a8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80066aa:	4b18      	ldr	r3, [pc, #96]	; (800670c <pvPortMalloc+0x188>)
 80066ac:	681a      	ldr	r2, [r3, #0]
 80066ae:	4b19      	ldr	r3, [pc, #100]	; (8006714 <pvPortMalloc+0x190>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d203      	bcs.n	80066be <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80066b6:	4b15      	ldr	r3, [pc, #84]	; (800670c <pvPortMalloc+0x188>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a16      	ldr	r2, [pc, #88]	; (8006714 <pvPortMalloc+0x190>)
 80066bc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80066be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c0:	685a      	ldr	r2, [r3, #4]
 80066c2:	4b11      	ldr	r3, [pc, #68]	; (8006708 <pvPortMalloc+0x184>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	431a      	orrs	r2, r3
 80066c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80066cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ce:	2200      	movs	r2, #0
 80066d0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80066d2:	f7fe ffcb 	bl	800566c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80066d6:	69fb      	ldr	r3, [r7, #28]
 80066d8:	f003 0307 	and.w	r3, r3, #7
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d00c      	beq.n	80066fa <pvPortMalloc+0x176>
	__asm volatile
 80066e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e4:	b672      	cpsid	i
 80066e6:	f383 8811 	msr	BASEPRI, r3
 80066ea:	f3bf 8f6f 	isb	sy
 80066ee:	f3bf 8f4f 	dsb	sy
 80066f2:	b662      	cpsie	i
 80066f4:	60fb      	str	r3, [r7, #12]
}
 80066f6:	bf00      	nop
 80066f8:	e7fe      	b.n	80066f8 <pvPortMalloc+0x174>
	return pvReturn;
 80066fa:	69fb      	ldr	r3, [r7, #28]
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3728      	adds	r7, #40	; 0x28
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}
 8006704:	20008034 	.word	0x20008034
 8006708:	20008040 	.word	0x20008040
 800670c:	20008038 	.word	0x20008038
 8006710:	2000802c 	.word	0x2000802c
 8006714:	2000803c 	.word	0x2000803c

08006718 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b086      	sub	sp, #24
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d04c      	beq.n	80067c4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800672a:	2308      	movs	r3, #8
 800672c:	425b      	negs	r3, r3
 800672e:	697a      	ldr	r2, [r7, #20]
 8006730:	4413      	add	r3, r2
 8006732:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	685a      	ldr	r2, [r3, #4]
 800673c:	4b23      	ldr	r3, [pc, #140]	; (80067cc <vPortFree+0xb4>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4013      	ands	r3, r2
 8006742:	2b00      	cmp	r3, #0
 8006744:	d10c      	bne.n	8006760 <vPortFree+0x48>
	__asm volatile
 8006746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800674a:	b672      	cpsid	i
 800674c:	f383 8811 	msr	BASEPRI, r3
 8006750:	f3bf 8f6f 	isb	sy
 8006754:	f3bf 8f4f 	dsb	sy
 8006758:	b662      	cpsie	i
 800675a:	60fb      	str	r3, [r7, #12]
}
 800675c:	bf00      	nop
 800675e:	e7fe      	b.n	800675e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d00c      	beq.n	8006782 <vPortFree+0x6a>
	__asm volatile
 8006768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800676c:	b672      	cpsid	i
 800676e:	f383 8811 	msr	BASEPRI, r3
 8006772:	f3bf 8f6f 	isb	sy
 8006776:	f3bf 8f4f 	dsb	sy
 800677a:	b662      	cpsie	i
 800677c:	60bb      	str	r3, [r7, #8]
}
 800677e:	bf00      	nop
 8006780:	e7fe      	b.n	8006780 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	685a      	ldr	r2, [r3, #4]
 8006786:	4b11      	ldr	r3, [pc, #68]	; (80067cc <vPortFree+0xb4>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4013      	ands	r3, r2
 800678c:	2b00      	cmp	r3, #0
 800678e:	d019      	beq.n	80067c4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d115      	bne.n	80067c4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	685a      	ldr	r2, [r3, #4]
 800679c:	4b0b      	ldr	r3, [pc, #44]	; (80067cc <vPortFree+0xb4>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	43db      	mvns	r3, r3
 80067a2:	401a      	ands	r2, r3
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80067a8:	f7fe ff52 	bl	8005650 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	685a      	ldr	r2, [r3, #4]
 80067b0:	4b07      	ldr	r3, [pc, #28]	; (80067d0 <vPortFree+0xb8>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4413      	add	r3, r2
 80067b6:	4a06      	ldr	r2, [pc, #24]	; (80067d0 <vPortFree+0xb8>)
 80067b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80067ba:	6938      	ldr	r0, [r7, #16]
 80067bc:	f000 f86c 	bl	8006898 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80067c0:	f7fe ff54 	bl	800566c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80067c4:	bf00      	nop
 80067c6:	3718      	adds	r7, #24
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}
 80067cc:	20008040 	.word	0x20008040
 80067d0:	20008038 	.word	0x20008038

080067d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80067d4:	b480      	push	{r7}
 80067d6:	b085      	sub	sp, #20
 80067d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80067da:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 80067de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80067e0:	4b27      	ldr	r3, [pc, #156]	; (8006880 <prvHeapInit+0xac>)
 80067e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f003 0307 	and.w	r3, r3, #7
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d00c      	beq.n	8006808 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	3307      	adds	r3, #7
 80067f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f023 0307 	bic.w	r3, r3, #7
 80067fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80067fc:	68ba      	ldr	r2, [r7, #8]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	1ad3      	subs	r3, r2, r3
 8006802:	4a1f      	ldr	r2, [pc, #124]	; (8006880 <prvHeapInit+0xac>)
 8006804:	4413      	add	r3, r2
 8006806:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800680c:	4a1d      	ldr	r2, [pc, #116]	; (8006884 <prvHeapInit+0xb0>)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006812:	4b1c      	ldr	r3, [pc, #112]	; (8006884 <prvHeapInit+0xb0>)
 8006814:	2200      	movs	r2, #0
 8006816:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	68ba      	ldr	r2, [r7, #8]
 800681c:	4413      	add	r3, r2
 800681e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006820:	2208      	movs	r2, #8
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	1a9b      	subs	r3, r3, r2
 8006826:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f023 0307 	bic.w	r3, r3, #7
 800682e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	4a15      	ldr	r2, [pc, #84]	; (8006888 <prvHeapInit+0xb4>)
 8006834:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006836:	4b14      	ldr	r3, [pc, #80]	; (8006888 <prvHeapInit+0xb4>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	2200      	movs	r2, #0
 800683c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800683e:	4b12      	ldr	r3, [pc, #72]	; (8006888 <prvHeapInit+0xb4>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	2200      	movs	r2, #0
 8006844:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	68fa      	ldr	r2, [r7, #12]
 800684e:	1ad2      	subs	r2, r2, r3
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006854:	4b0c      	ldr	r3, [pc, #48]	; (8006888 <prvHeapInit+0xb4>)
 8006856:	681a      	ldr	r2, [r3, #0]
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	4a0a      	ldr	r2, [pc, #40]	; (800688c <prvHeapInit+0xb8>)
 8006862:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	4a09      	ldr	r2, [pc, #36]	; (8006890 <prvHeapInit+0xbc>)
 800686a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800686c:	4b09      	ldr	r3, [pc, #36]	; (8006894 <prvHeapInit+0xc0>)
 800686e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006872:	601a      	str	r2, [r3, #0]
}
 8006874:	bf00      	nop
 8006876:	3714      	adds	r7, #20
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr
 8006880:	2000082c 	.word	0x2000082c
 8006884:	2000802c 	.word	0x2000802c
 8006888:	20008034 	.word	0x20008034
 800688c:	2000803c 	.word	0x2000803c
 8006890:	20008038 	.word	0x20008038
 8006894:	20008040 	.word	0x20008040

08006898 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006898:	b480      	push	{r7}
 800689a:	b085      	sub	sp, #20
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80068a0:	4b28      	ldr	r3, [pc, #160]	; (8006944 <prvInsertBlockIntoFreeList+0xac>)
 80068a2:	60fb      	str	r3, [r7, #12]
 80068a4:	e002      	b.n	80068ac <prvInsertBlockIntoFreeList+0x14>
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	60fb      	str	r3, [r7, #12]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d8f7      	bhi.n	80068a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	68ba      	ldr	r2, [r7, #8]
 80068c0:	4413      	add	r3, r2
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d108      	bne.n	80068da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	685a      	ldr	r2, [r3, #4]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	441a      	add	r2, r3
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	68ba      	ldr	r2, [r7, #8]
 80068e4:	441a      	add	r2, r3
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d118      	bne.n	8006920 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	4b15      	ldr	r3, [pc, #84]	; (8006948 <prvInsertBlockIntoFreeList+0xb0>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	429a      	cmp	r2, r3
 80068f8:	d00d      	beq.n	8006916 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	685a      	ldr	r2, [r3, #4]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	441a      	add	r2, r3
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	601a      	str	r2, [r3, #0]
 8006914:	e008      	b.n	8006928 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006916:	4b0c      	ldr	r3, [pc, #48]	; (8006948 <prvInsertBlockIntoFreeList+0xb0>)
 8006918:	681a      	ldr	r2, [r3, #0]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	601a      	str	r2, [r3, #0]
 800691e:	e003      	b.n	8006928 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006928:	68fa      	ldr	r2, [r7, #12]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	429a      	cmp	r2, r3
 800692e:	d002      	beq.n	8006936 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006936:	bf00      	nop
 8006938:	3714      	adds	r7, #20
 800693a:	46bd      	mov	sp, r7
 800693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006940:	4770      	bx	lr
 8006942:	bf00      	nop
 8006944:	2000802c 	.word	0x2000802c
 8006948:	20008034 	.word	0x20008034

0800694c <atoi>:
 800694c:	220a      	movs	r2, #10
 800694e:	2100      	movs	r1, #0
 8006950:	f000 b984 	b.w	8006c5c <strtol>

08006954 <__errno>:
 8006954:	4b01      	ldr	r3, [pc, #4]	; (800695c <__errno+0x8>)
 8006956:	6818      	ldr	r0, [r3, #0]
 8006958:	4770      	bx	lr
 800695a:	bf00      	nop
 800695c:	20000018 	.word	0x20000018

08006960 <__libc_init_array>:
 8006960:	b570      	push	{r4, r5, r6, lr}
 8006962:	4d0d      	ldr	r5, [pc, #52]	; (8006998 <__libc_init_array+0x38>)
 8006964:	4c0d      	ldr	r4, [pc, #52]	; (800699c <__libc_init_array+0x3c>)
 8006966:	1b64      	subs	r4, r4, r5
 8006968:	10a4      	asrs	r4, r4, #2
 800696a:	2600      	movs	r6, #0
 800696c:	42a6      	cmp	r6, r4
 800696e:	d109      	bne.n	8006984 <__libc_init_array+0x24>
 8006970:	4d0b      	ldr	r5, [pc, #44]	; (80069a0 <__libc_init_array+0x40>)
 8006972:	4c0c      	ldr	r4, [pc, #48]	; (80069a4 <__libc_init_array+0x44>)
 8006974:	f001 faa0 	bl	8007eb8 <_init>
 8006978:	1b64      	subs	r4, r4, r5
 800697a:	10a4      	asrs	r4, r4, #2
 800697c:	2600      	movs	r6, #0
 800697e:	42a6      	cmp	r6, r4
 8006980:	d105      	bne.n	800698e <__libc_init_array+0x2e>
 8006982:	bd70      	pop	{r4, r5, r6, pc}
 8006984:	f855 3b04 	ldr.w	r3, [r5], #4
 8006988:	4798      	blx	r3
 800698a:	3601      	adds	r6, #1
 800698c:	e7ee      	b.n	800696c <__libc_init_array+0xc>
 800698e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006992:	4798      	blx	r3
 8006994:	3601      	adds	r6, #1
 8006996:	e7f2      	b.n	800697e <__libc_init_array+0x1e>
 8006998:	080081e0 	.word	0x080081e0
 800699c:	080081e0 	.word	0x080081e0
 80069a0:	080081e0 	.word	0x080081e0
 80069a4:	080081e4 	.word	0x080081e4

080069a8 <memcpy>:
 80069a8:	440a      	add	r2, r1
 80069aa:	4291      	cmp	r1, r2
 80069ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80069b0:	d100      	bne.n	80069b4 <memcpy+0xc>
 80069b2:	4770      	bx	lr
 80069b4:	b510      	push	{r4, lr}
 80069b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80069be:	4291      	cmp	r1, r2
 80069c0:	d1f9      	bne.n	80069b6 <memcpy+0xe>
 80069c2:	bd10      	pop	{r4, pc}

080069c4 <memset>:
 80069c4:	4402      	add	r2, r0
 80069c6:	4603      	mov	r3, r0
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d100      	bne.n	80069ce <memset+0xa>
 80069cc:	4770      	bx	lr
 80069ce:	f803 1b01 	strb.w	r1, [r3], #1
 80069d2:	e7f9      	b.n	80069c8 <memset+0x4>

080069d4 <iprintf>:
 80069d4:	b40f      	push	{r0, r1, r2, r3}
 80069d6:	4b0a      	ldr	r3, [pc, #40]	; (8006a00 <iprintf+0x2c>)
 80069d8:	b513      	push	{r0, r1, r4, lr}
 80069da:	681c      	ldr	r4, [r3, #0]
 80069dc:	b124      	cbz	r4, 80069e8 <iprintf+0x14>
 80069de:	69a3      	ldr	r3, [r4, #24]
 80069e0:	b913      	cbnz	r3, 80069e8 <iprintf+0x14>
 80069e2:	4620      	mov	r0, r4
 80069e4:	f000 fb1e 	bl	8007024 <__sinit>
 80069e8:	ab05      	add	r3, sp, #20
 80069ea:	9a04      	ldr	r2, [sp, #16]
 80069ec:	68a1      	ldr	r1, [r4, #8]
 80069ee:	9301      	str	r3, [sp, #4]
 80069f0:	4620      	mov	r0, r4
 80069f2:	f000 fe83 	bl	80076fc <_vfiprintf_r>
 80069f6:	b002      	add	sp, #8
 80069f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069fc:	b004      	add	sp, #16
 80069fe:	4770      	bx	lr
 8006a00:	20000018 	.word	0x20000018

08006a04 <_puts_r>:
 8006a04:	b570      	push	{r4, r5, r6, lr}
 8006a06:	460e      	mov	r6, r1
 8006a08:	4605      	mov	r5, r0
 8006a0a:	b118      	cbz	r0, 8006a14 <_puts_r+0x10>
 8006a0c:	6983      	ldr	r3, [r0, #24]
 8006a0e:	b90b      	cbnz	r3, 8006a14 <_puts_r+0x10>
 8006a10:	f000 fb08 	bl	8007024 <__sinit>
 8006a14:	69ab      	ldr	r3, [r5, #24]
 8006a16:	68ac      	ldr	r4, [r5, #8]
 8006a18:	b913      	cbnz	r3, 8006a20 <_puts_r+0x1c>
 8006a1a:	4628      	mov	r0, r5
 8006a1c:	f000 fb02 	bl	8007024 <__sinit>
 8006a20:	4b2c      	ldr	r3, [pc, #176]	; (8006ad4 <_puts_r+0xd0>)
 8006a22:	429c      	cmp	r4, r3
 8006a24:	d120      	bne.n	8006a68 <_puts_r+0x64>
 8006a26:	686c      	ldr	r4, [r5, #4]
 8006a28:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a2a:	07db      	lsls	r3, r3, #31
 8006a2c:	d405      	bmi.n	8006a3a <_puts_r+0x36>
 8006a2e:	89a3      	ldrh	r3, [r4, #12]
 8006a30:	0598      	lsls	r0, r3, #22
 8006a32:	d402      	bmi.n	8006a3a <_puts_r+0x36>
 8006a34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a36:	f000 fb93 	bl	8007160 <__retarget_lock_acquire_recursive>
 8006a3a:	89a3      	ldrh	r3, [r4, #12]
 8006a3c:	0719      	lsls	r1, r3, #28
 8006a3e:	d51d      	bpl.n	8006a7c <_puts_r+0x78>
 8006a40:	6923      	ldr	r3, [r4, #16]
 8006a42:	b1db      	cbz	r3, 8006a7c <_puts_r+0x78>
 8006a44:	3e01      	subs	r6, #1
 8006a46:	68a3      	ldr	r3, [r4, #8]
 8006a48:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006a4c:	3b01      	subs	r3, #1
 8006a4e:	60a3      	str	r3, [r4, #8]
 8006a50:	bb39      	cbnz	r1, 8006aa2 <_puts_r+0x9e>
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	da38      	bge.n	8006ac8 <_puts_r+0xc4>
 8006a56:	4622      	mov	r2, r4
 8006a58:	210a      	movs	r1, #10
 8006a5a:	4628      	mov	r0, r5
 8006a5c:	f000 f908 	bl	8006c70 <__swbuf_r>
 8006a60:	3001      	adds	r0, #1
 8006a62:	d011      	beq.n	8006a88 <_puts_r+0x84>
 8006a64:	250a      	movs	r5, #10
 8006a66:	e011      	b.n	8006a8c <_puts_r+0x88>
 8006a68:	4b1b      	ldr	r3, [pc, #108]	; (8006ad8 <_puts_r+0xd4>)
 8006a6a:	429c      	cmp	r4, r3
 8006a6c:	d101      	bne.n	8006a72 <_puts_r+0x6e>
 8006a6e:	68ac      	ldr	r4, [r5, #8]
 8006a70:	e7da      	b.n	8006a28 <_puts_r+0x24>
 8006a72:	4b1a      	ldr	r3, [pc, #104]	; (8006adc <_puts_r+0xd8>)
 8006a74:	429c      	cmp	r4, r3
 8006a76:	bf08      	it	eq
 8006a78:	68ec      	ldreq	r4, [r5, #12]
 8006a7a:	e7d5      	b.n	8006a28 <_puts_r+0x24>
 8006a7c:	4621      	mov	r1, r4
 8006a7e:	4628      	mov	r0, r5
 8006a80:	f000 f948 	bl	8006d14 <__swsetup_r>
 8006a84:	2800      	cmp	r0, #0
 8006a86:	d0dd      	beq.n	8006a44 <_puts_r+0x40>
 8006a88:	f04f 35ff 	mov.w	r5, #4294967295
 8006a8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a8e:	07da      	lsls	r2, r3, #31
 8006a90:	d405      	bmi.n	8006a9e <_puts_r+0x9a>
 8006a92:	89a3      	ldrh	r3, [r4, #12]
 8006a94:	059b      	lsls	r3, r3, #22
 8006a96:	d402      	bmi.n	8006a9e <_puts_r+0x9a>
 8006a98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a9a:	f000 fb62 	bl	8007162 <__retarget_lock_release_recursive>
 8006a9e:	4628      	mov	r0, r5
 8006aa0:	bd70      	pop	{r4, r5, r6, pc}
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	da04      	bge.n	8006ab0 <_puts_r+0xac>
 8006aa6:	69a2      	ldr	r2, [r4, #24]
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	dc06      	bgt.n	8006aba <_puts_r+0xb6>
 8006aac:	290a      	cmp	r1, #10
 8006aae:	d004      	beq.n	8006aba <_puts_r+0xb6>
 8006ab0:	6823      	ldr	r3, [r4, #0]
 8006ab2:	1c5a      	adds	r2, r3, #1
 8006ab4:	6022      	str	r2, [r4, #0]
 8006ab6:	7019      	strb	r1, [r3, #0]
 8006ab8:	e7c5      	b.n	8006a46 <_puts_r+0x42>
 8006aba:	4622      	mov	r2, r4
 8006abc:	4628      	mov	r0, r5
 8006abe:	f000 f8d7 	bl	8006c70 <__swbuf_r>
 8006ac2:	3001      	adds	r0, #1
 8006ac4:	d1bf      	bne.n	8006a46 <_puts_r+0x42>
 8006ac6:	e7df      	b.n	8006a88 <_puts_r+0x84>
 8006ac8:	6823      	ldr	r3, [r4, #0]
 8006aca:	250a      	movs	r5, #10
 8006acc:	1c5a      	adds	r2, r3, #1
 8006ace:	6022      	str	r2, [r4, #0]
 8006ad0:	701d      	strb	r5, [r3, #0]
 8006ad2:	e7db      	b.n	8006a8c <_puts_r+0x88>
 8006ad4:	08008164 	.word	0x08008164
 8006ad8:	08008184 	.word	0x08008184
 8006adc:	08008144 	.word	0x08008144

08006ae0 <puts>:
 8006ae0:	4b02      	ldr	r3, [pc, #8]	; (8006aec <puts+0xc>)
 8006ae2:	4601      	mov	r1, r0
 8006ae4:	6818      	ldr	r0, [r3, #0]
 8006ae6:	f7ff bf8d 	b.w	8006a04 <_puts_r>
 8006aea:	bf00      	nop
 8006aec:	20000018 	.word	0x20000018

08006af0 <sniprintf>:
 8006af0:	b40c      	push	{r2, r3}
 8006af2:	b530      	push	{r4, r5, lr}
 8006af4:	4b17      	ldr	r3, [pc, #92]	; (8006b54 <sniprintf+0x64>)
 8006af6:	1e0c      	subs	r4, r1, #0
 8006af8:	681d      	ldr	r5, [r3, #0]
 8006afa:	b09d      	sub	sp, #116	; 0x74
 8006afc:	da08      	bge.n	8006b10 <sniprintf+0x20>
 8006afe:	238b      	movs	r3, #139	; 0x8b
 8006b00:	602b      	str	r3, [r5, #0]
 8006b02:	f04f 30ff 	mov.w	r0, #4294967295
 8006b06:	b01d      	add	sp, #116	; 0x74
 8006b08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b0c:	b002      	add	sp, #8
 8006b0e:	4770      	bx	lr
 8006b10:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006b14:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006b18:	bf14      	ite	ne
 8006b1a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006b1e:	4623      	moveq	r3, r4
 8006b20:	9304      	str	r3, [sp, #16]
 8006b22:	9307      	str	r3, [sp, #28]
 8006b24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006b28:	9002      	str	r0, [sp, #8]
 8006b2a:	9006      	str	r0, [sp, #24]
 8006b2c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006b30:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006b32:	ab21      	add	r3, sp, #132	; 0x84
 8006b34:	a902      	add	r1, sp, #8
 8006b36:	4628      	mov	r0, r5
 8006b38:	9301      	str	r3, [sp, #4]
 8006b3a:	f000 fcb5 	bl	80074a8 <_svfiprintf_r>
 8006b3e:	1c43      	adds	r3, r0, #1
 8006b40:	bfbc      	itt	lt
 8006b42:	238b      	movlt	r3, #139	; 0x8b
 8006b44:	602b      	strlt	r3, [r5, #0]
 8006b46:	2c00      	cmp	r4, #0
 8006b48:	d0dd      	beq.n	8006b06 <sniprintf+0x16>
 8006b4a:	9b02      	ldr	r3, [sp, #8]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	701a      	strb	r2, [r3, #0]
 8006b50:	e7d9      	b.n	8006b06 <sniprintf+0x16>
 8006b52:	bf00      	nop
 8006b54:	20000018 	.word	0x20000018

08006b58 <_strtol_l.constprop.0>:
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b5e:	d001      	beq.n	8006b64 <_strtol_l.constprop.0+0xc>
 8006b60:	2b24      	cmp	r3, #36	; 0x24
 8006b62:	d906      	bls.n	8006b72 <_strtol_l.constprop.0+0x1a>
 8006b64:	f7ff fef6 	bl	8006954 <__errno>
 8006b68:	2316      	movs	r3, #22
 8006b6a:	6003      	str	r3, [r0, #0]
 8006b6c:	2000      	movs	r0, #0
 8006b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b72:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006c58 <_strtol_l.constprop.0+0x100>
 8006b76:	460d      	mov	r5, r1
 8006b78:	462e      	mov	r6, r5
 8006b7a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006b7e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8006b82:	f017 0708 	ands.w	r7, r7, #8
 8006b86:	d1f7      	bne.n	8006b78 <_strtol_l.constprop.0+0x20>
 8006b88:	2c2d      	cmp	r4, #45	; 0x2d
 8006b8a:	d132      	bne.n	8006bf2 <_strtol_l.constprop.0+0x9a>
 8006b8c:	782c      	ldrb	r4, [r5, #0]
 8006b8e:	2701      	movs	r7, #1
 8006b90:	1cb5      	adds	r5, r6, #2
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d05b      	beq.n	8006c4e <_strtol_l.constprop.0+0xf6>
 8006b96:	2b10      	cmp	r3, #16
 8006b98:	d109      	bne.n	8006bae <_strtol_l.constprop.0+0x56>
 8006b9a:	2c30      	cmp	r4, #48	; 0x30
 8006b9c:	d107      	bne.n	8006bae <_strtol_l.constprop.0+0x56>
 8006b9e:	782c      	ldrb	r4, [r5, #0]
 8006ba0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006ba4:	2c58      	cmp	r4, #88	; 0x58
 8006ba6:	d14d      	bne.n	8006c44 <_strtol_l.constprop.0+0xec>
 8006ba8:	786c      	ldrb	r4, [r5, #1]
 8006baa:	2310      	movs	r3, #16
 8006bac:	3502      	adds	r5, #2
 8006bae:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006bb2:	f108 38ff 	add.w	r8, r8, #4294967295
 8006bb6:	f04f 0c00 	mov.w	ip, #0
 8006bba:	fbb8 f9f3 	udiv	r9, r8, r3
 8006bbe:	4666      	mov	r6, ip
 8006bc0:	fb03 8a19 	mls	sl, r3, r9, r8
 8006bc4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006bc8:	f1be 0f09 	cmp.w	lr, #9
 8006bcc:	d816      	bhi.n	8006bfc <_strtol_l.constprop.0+0xa4>
 8006bce:	4674      	mov	r4, lr
 8006bd0:	42a3      	cmp	r3, r4
 8006bd2:	dd24      	ble.n	8006c1e <_strtol_l.constprop.0+0xc6>
 8006bd4:	f1bc 0f00 	cmp.w	ip, #0
 8006bd8:	db1e      	blt.n	8006c18 <_strtol_l.constprop.0+0xc0>
 8006bda:	45b1      	cmp	r9, r6
 8006bdc:	d31c      	bcc.n	8006c18 <_strtol_l.constprop.0+0xc0>
 8006bde:	d101      	bne.n	8006be4 <_strtol_l.constprop.0+0x8c>
 8006be0:	45a2      	cmp	sl, r4
 8006be2:	db19      	blt.n	8006c18 <_strtol_l.constprop.0+0xc0>
 8006be4:	fb06 4603 	mla	r6, r6, r3, r4
 8006be8:	f04f 0c01 	mov.w	ip, #1
 8006bec:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006bf0:	e7e8      	b.n	8006bc4 <_strtol_l.constprop.0+0x6c>
 8006bf2:	2c2b      	cmp	r4, #43	; 0x2b
 8006bf4:	bf04      	itt	eq
 8006bf6:	782c      	ldrbeq	r4, [r5, #0]
 8006bf8:	1cb5      	addeq	r5, r6, #2
 8006bfa:	e7ca      	b.n	8006b92 <_strtol_l.constprop.0+0x3a>
 8006bfc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006c00:	f1be 0f19 	cmp.w	lr, #25
 8006c04:	d801      	bhi.n	8006c0a <_strtol_l.constprop.0+0xb2>
 8006c06:	3c37      	subs	r4, #55	; 0x37
 8006c08:	e7e2      	b.n	8006bd0 <_strtol_l.constprop.0+0x78>
 8006c0a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8006c0e:	f1be 0f19 	cmp.w	lr, #25
 8006c12:	d804      	bhi.n	8006c1e <_strtol_l.constprop.0+0xc6>
 8006c14:	3c57      	subs	r4, #87	; 0x57
 8006c16:	e7db      	b.n	8006bd0 <_strtol_l.constprop.0+0x78>
 8006c18:	f04f 3cff 	mov.w	ip, #4294967295
 8006c1c:	e7e6      	b.n	8006bec <_strtol_l.constprop.0+0x94>
 8006c1e:	f1bc 0f00 	cmp.w	ip, #0
 8006c22:	da05      	bge.n	8006c30 <_strtol_l.constprop.0+0xd8>
 8006c24:	2322      	movs	r3, #34	; 0x22
 8006c26:	6003      	str	r3, [r0, #0]
 8006c28:	4646      	mov	r6, r8
 8006c2a:	b942      	cbnz	r2, 8006c3e <_strtol_l.constprop.0+0xe6>
 8006c2c:	4630      	mov	r0, r6
 8006c2e:	e79e      	b.n	8006b6e <_strtol_l.constprop.0+0x16>
 8006c30:	b107      	cbz	r7, 8006c34 <_strtol_l.constprop.0+0xdc>
 8006c32:	4276      	negs	r6, r6
 8006c34:	2a00      	cmp	r2, #0
 8006c36:	d0f9      	beq.n	8006c2c <_strtol_l.constprop.0+0xd4>
 8006c38:	f1bc 0f00 	cmp.w	ip, #0
 8006c3c:	d000      	beq.n	8006c40 <_strtol_l.constprop.0+0xe8>
 8006c3e:	1e69      	subs	r1, r5, #1
 8006c40:	6011      	str	r1, [r2, #0]
 8006c42:	e7f3      	b.n	8006c2c <_strtol_l.constprop.0+0xd4>
 8006c44:	2430      	movs	r4, #48	; 0x30
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d1b1      	bne.n	8006bae <_strtol_l.constprop.0+0x56>
 8006c4a:	2308      	movs	r3, #8
 8006c4c:	e7af      	b.n	8006bae <_strtol_l.constprop.0+0x56>
 8006c4e:	2c30      	cmp	r4, #48	; 0x30
 8006c50:	d0a5      	beq.n	8006b9e <_strtol_l.constprop.0+0x46>
 8006c52:	230a      	movs	r3, #10
 8006c54:	e7ab      	b.n	8006bae <_strtol_l.constprop.0+0x56>
 8006c56:	bf00      	nop
 8006c58:	08008041 	.word	0x08008041

08006c5c <strtol>:
 8006c5c:	4613      	mov	r3, r2
 8006c5e:	460a      	mov	r2, r1
 8006c60:	4601      	mov	r1, r0
 8006c62:	4802      	ldr	r0, [pc, #8]	; (8006c6c <strtol+0x10>)
 8006c64:	6800      	ldr	r0, [r0, #0]
 8006c66:	f7ff bf77 	b.w	8006b58 <_strtol_l.constprop.0>
 8006c6a:	bf00      	nop
 8006c6c:	20000018 	.word	0x20000018

08006c70 <__swbuf_r>:
 8006c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c72:	460e      	mov	r6, r1
 8006c74:	4614      	mov	r4, r2
 8006c76:	4605      	mov	r5, r0
 8006c78:	b118      	cbz	r0, 8006c82 <__swbuf_r+0x12>
 8006c7a:	6983      	ldr	r3, [r0, #24]
 8006c7c:	b90b      	cbnz	r3, 8006c82 <__swbuf_r+0x12>
 8006c7e:	f000 f9d1 	bl	8007024 <__sinit>
 8006c82:	4b21      	ldr	r3, [pc, #132]	; (8006d08 <__swbuf_r+0x98>)
 8006c84:	429c      	cmp	r4, r3
 8006c86:	d12b      	bne.n	8006ce0 <__swbuf_r+0x70>
 8006c88:	686c      	ldr	r4, [r5, #4]
 8006c8a:	69a3      	ldr	r3, [r4, #24]
 8006c8c:	60a3      	str	r3, [r4, #8]
 8006c8e:	89a3      	ldrh	r3, [r4, #12]
 8006c90:	071a      	lsls	r2, r3, #28
 8006c92:	d52f      	bpl.n	8006cf4 <__swbuf_r+0x84>
 8006c94:	6923      	ldr	r3, [r4, #16]
 8006c96:	b36b      	cbz	r3, 8006cf4 <__swbuf_r+0x84>
 8006c98:	6923      	ldr	r3, [r4, #16]
 8006c9a:	6820      	ldr	r0, [r4, #0]
 8006c9c:	1ac0      	subs	r0, r0, r3
 8006c9e:	6963      	ldr	r3, [r4, #20]
 8006ca0:	b2f6      	uxtb	r6, r6
 8006ca2:	4283      	cmp	r3, r0
 8006ca4:	4637      	mov	r7, r6
 8006ca6:	dc04      	bgt.n	8006cb2 <__swbuf_r+0x42>
 8006ca8:	4621      	mov	r1, r4
 8006caa:	4628      	mov	r0, r5
 8006cac:	f000 f926 	bl	8006efc <_fflush_r>
 8006cb0:	bb30      	cbnz	r0, 8006d00 <__swbuf_r+0x90>
 8006cb2:	68a3      	ldr	r3, [r4, #8]
 8006cb4:	3b01      	subs	r3, #1
 8006cb6:	60a3      	str	r3, [r4, #8]
 8006cb8:	6823      	ldr	r3, [r4, #0]
 8006cba:	1c5a      	adds	r2, r3, #1
 8006cbc:	6022      	str	r2, [r4, #0]
 8006cbe:	701e      	strb	r6, [r3, #0]
 8006cc0:	6963      	ldr	r3, [r4, #20]
 8006cc2:	3001      	adds	r0, #1
 8006cc4:	4283      	cmp	r3, r0
 8006cc6:	d004      	beq.n	8006cd2 <__swbuf_r+0x62>
 8006cc8:	89a3      	ldrh	r3, [r4, #12]
 8006cca:	07db      	lsls	r3, r3, #31
 8006ccc:	d506      	bpl.n	8006cdc <__swbuf_r+0x6c>
 8006cce:	2e0a      	cmp	r6, #10
 8006cd0:	d104      	bne.n	8006cdc <__swbuf_r+0x6c>
 8006cd2:	4621      	mov	r1, r4
 8006cd4:	4628      	mov	r0, r5
 8006cd6:	f000 f911 	bl	8006efc <_fflush_r>
 8006cda:	b988      	cbnz	r0, 8006d00 <__swbuf_r+0x90>
 8006cdc:	4638      	mov	r0, r7
 8006cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ce0:	4b0a      	ldr	r3, [pc, #40]	; (8006d0c <__swbuf_r+0x9c>)
 8006ce2:	429c      	cmp	r4, r3
 8006ce4:	d101      	bne.n	8006cea <__swbuf_r+0x7a>
 8006ce6:	68ac      	ldr	r4, [r5, #8]
 8006ce8:	e7cf      	b.n	8006c8a <__swbuf_r+0x1a>
 8006cea:	4b09      	ldr	r3, [pc, #36]	; (8006d10 <__swbuf_r+0xa0>)
 8006cec:	429c      	cmp	r4, r3
 8006cee:	bf08      	it	eq
 8006cf0:	68ec      	ldreq	r4, [r5, #12]
 8006cf2:	e7ca      	b.n	8006c8a <__swbuf_r+0x1a>
 8006cf4:	4621      	mov	r1, r4
 8006cf6:	4628      	mov	r0, r5
 8006cf8:	f000 f80c 	bl	8006d14 <__swsetup_r>
 8006cfc:	2800      	cmp	r0, #0
 8006cfe:	d0cb      	beq.n	8006c98 <__swbuf_r+0x28>
 8006d00:	f04f 37ff 	mov.w	r7, #4294967295
 8006d04:	e7ea      	b.n	8006cdc <__swbuf_r+0x6c>
 8006d06:	bf00      	nop
 8006d08:	08008164 	.word	0x08008164
 8006d0c:	08008184 	.word	0x08008184
 8006d10:	08008144 	.word	0x08008144

08006d14 <__swsetup_r>:
 8006d14:	4b32      	ldr	r3, [pc, #200]	; (8006de0 <__swsetup_r+0xcc>)
 8006d16:	b570      	push	{r4, r5, r6, lr}
 8006d18:	681d      	ldr	r5, [r3, #0]
 8006d1a:	4606      	mov	r6, r0
 8006d1c:	460c      	mov	r4, r1
 8006d1e:	b125      	cbz	r5, 8006d2a <__swsetup_r+0x16>
 8006d20:	69ab      	ldr	r3, [r5, #24]
 8006d22:	b913      	cbnz	r3, 8006d2a <__swsetup_r+0x16>
 8006d24:	4628      	mov	r0, r5
 8006d26:	f000 f97d 	bl	8007024 <__sinit>
 8006d2a:	4b2e      	ldr	r3, [pc, #184]	; (8006de4 <__swsetup_r+0xd0>)
 8006d2c:	429c      	cmp	r4, r3
 8006d2e:	d10f      	bne.n	8006d50 <__swsetup_r+0x3c>
 8006d30:	686c      	ldr	r4, [r5, #4]
 8006d32:	89a3      	ldrh	r3, [r4, #12]
 8006d34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d38:	0719      	lsls	r1, r3, #28
 8006d3a:	d42c      	bmi.n	8006d96 <__swsetup_r+0x82>
 8006d3c:	06dd      	lsls	r5, r3, #27
 8006d3e:	d411      	bmi.n	8006d64 <__swsetup_r+0x50>
 8006d40:	2309      	movs	r3, #9
 8006d42:	6033      	str	r3, [r6, #0]
 8006d44:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006d48:	81a3      	strh	r3, [r4, #12]
 8006d4a:	f04f 30ff 	mov.w	r0, #4294967295
 8006d4e:	e03e      	b.n	8006dce <__swsetup_r+0xba>
 8006d50:	4b25      	ldr	r3, [pc, #148]	; (8006de8 <__swsetup_r+0xd4>)
 8006d52:	429c      	cmp	r4, r3
 8006d54:	d101      	bne.n	8006d5a <__swsetup_r+0x46>
 8006d56:	68ac      	ldr	r4, [r5, #8]
 8006d58:	e7eb      	b.n	8006d32 <__swsetup_r+0x1e>
 8006d5a:	4b24      	ldr	r3, [pc, #144]	; (8006dec <__swsetup_r+0xd8>)
 8006d5c:	429c      	cmp	r4, r3
 8006d5e:	bf08      	it	eq
 8006d60:	68ec      	ldreq	r4, [r5, #12]
 8006d62:	e7e6      	b.n	8006d32 <__swsetup_r+0x1e>
 8006d64:	0758      	lsls	r0, r3, #29
 8006d66:	d512      	bpl.n	8006d8e <__swsetup_r+0x7a>
 8006d68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d6a:	b141      	cbz	r1, 8006d7e <__swsetup_r+0x6a>
 8006d6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d70:	4299      	cmp	r1, r3
 8006d72:	d002      	beq.n	8006d7a <__swsetup_r+0x66>
 8006d74:	4630      	mov	r0, r6
 8006d76:	f000 fa5b 	bl	8007230 <_free_r>
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	6363      	str	r3, [r4, #52]	; 0x34
 8006d7e:	89a3      	ldrh	r3, [r4, #12]
 8006d80:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006d84:	81a3      	strh	r3, [r4, #12]
 8006d86:	2300      	movs	r3, #0
 8006d88:	6063      	str	r3, [r4, #4]
 8006d8a:	6923      	ldr	r3, [r4, #16]
 8006d8c:	6023      	str	r3, [r4, #0]
 8006d8e:	89a3      	ldrh	r3, [r4, #12]
 8006d90:	f043 0308 	orr.w	r3, r3, #8
 8006d94:	81a3      	strh	r3, [r4, #12]
 8006d96:	6923      	ldr	r3, [r4, #16]
 8006d98:	b94b      	cbnz	r3, 8006dae <__swsetup_r+0x9a>
 8006d9a:	89a3      	ldrh	r3, [r4, #12]
 8006d9c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006da0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006da4:	d003      	beq.n	8006dae <__swsetup_r+0x9a>
 8006da6:	4621      	mov	r1, r4
 8006da8:	4630      	mov	r0, r6
 8006daa:	f000 fa01 	bl	80071b0 <__smakebuf_r>
 8006dae:	89a0      	ldrh	r0, [r4, #12]
 8006db0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006db4:	f010 0301 	ands.w	r3, r0, #1
 8006db8:	d00a      	beq.n	8006dd0 <__swsetup_r+0xbc>
 8006dba:	2300      	movs	r3, #0
 8006dbc:	60a3      	str	r3, [r4, #8]
 8006dbe:	6963      	ldr	r3, [r4, #20]
 8006dc0:	425b      	negs	r3, r3
 8006dc2:	61a3      	str	r3, [r4, #24]
 8006dc4:	6923      	ldr	r3, [r4, #16]
 8006dc6:	b943      	cbnz	r3, 8006dda <__swsetup_r+0xc6>
 8006dc8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006dcc:	d1ba      	bne.n	8006d44 <__swsetup_r+0x30>
 8006dce:	bd70      	pop	{r4, r5, r6, pc}
 8006dd0:	0781      	lsls	r1, r0, #30
 8006dd2:	bf58      	it	pl
 8006dd4:	6963      	ldrpl	r3, [r4, #20]
 8006dd6:	60a3      	str	r3, [r4, #8]
 8006dd8:	e7f4      	b.n	8006dc4 <__swsetup_r+0xb0>
 8006dda:	2000      	movs	r0, #0
 8006ddc:	e7f7      	b.n	8006dce <__swsetup_r+0xba>
 8006dde:	bf00      	nop
 8006de0:	20000018 	.word	0x20000018
 8006de4:	08008164 	.word	0x08008164
 8006de8:	08008184 	.word	0x08008184
 8006dec:	08008144 	.word	0x08008144

08006df0 <__sflush_r>:
 8006df0:	898a      	ldrh	r2, [r1, #12]
 8006df2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006df6:	4605      	mov	r5, r0
 8006df8:	0710      	lsls	r0, r2, #28
 8006dfa:	460c      	mov	r4, r1
 8006dfc:	d458      	bmi.n	8006eb0 <__sflush_r+0xc0>
 8006dfe:	684b      	ldr	r3, [r1, #4]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	dc05      	bgt.n	8006e10 <__sflush_r+0x20>
 8006e04:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	dc02      	bgt.n	8006e10 <__sflush_r+0x20>
 8006e0a:	2000      	movs	r0, #0
 8006e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e12:	2e00      	cmp	r6, #0
 8006e14:	d0f9      	beq.n	8006e0a <__sflush_r+0x1a>
 8006e16:	2300      	movs	r3, #0
 8006e18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006e1c:	682f      	ldr	r7, [r5, #0]
 8006e1e:	602b      	str	r3, [r5, #0]
 8006e20:	d032      	beq.n	8006e88 <__sflush_r+0x98>
 8006e22:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006e24:	89a3      	ldrh	r3, [r4, #12]
 8006e26:	075a      	lsls	r2, r3, #29
 8006e28:	d505      	bpl.n	8006e36 <__sflush_r+0x46>
 8006e2a:	6863      	ldr	r3, [r4, #4]
 8006e2c:	1ac0      	subs	r0, r0, r3
 8006e2e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006e30:	b10b      	cbz	r3, 8006e36 <__sflush_r+0x46>
 8006e32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006e34:	1ac0      	subs	r0, r0, r3
 8006e36:	2300      	movs	r3, #0
 8006e38:	4602      	mov	r2, r0
 8006e3a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e3c:	6a21      	ldr	r1, [r4, #32]
 8006e3e:	4628      	mov	r0, r5
 8006e40:	47b0      	blx	r6
 8006e42:	1c43      	adds	r3, r0, #1
 8006e44:	89a3      	ldrh	r3, [r4, #12]
 8006e46:	d106      	bne.n	8006e56 <__sflush_r+0x66>
 8006e48:	6829      	ldr	r1, [r5, #0]
 8006e4a:	291d      	cmp	r1, #29
 8006e4c:	d82c      	bhi.n	8006ea8 <__sflush_r+0xb8>
 8006e4e:	4a2a      	ldr	r2, [pc, #168]	; (8006ef8 <__sflush_r+0x108>)
 8006e50:	40ca      	lsrs	r2, r1
 8006e52:	07d6      	lsls	r6, r2, #31
 8006e54:	d528      	bpl.n	8006ea8 <__sflush_r+0xb8>
 8006e56:	2200      	movs	r2, #0
 8006e58:	6062      	str	r2, [r4, #4]
 8006e5a:	04d9      	lsls	r1, r3, #19
 8006e5c:	6922      	ldr	r2, [r4, #16]
 8006e5e:	6022      	str	r2, [r4, #0]
 8006e60:	d504      	bpl.n	8006e6c <__sflush_r+0x7c>
 8006e62:	1c42      	adds	r2, r0, #1
 8006e64:	d101      	bne.n	8006e6a <__sflush_r+0x7a>
 8006e66:	682b      	ldr	r3, [r5, #0]
 8006e68:	b903      	cbnz	r3, 8006e6c <__sflush_r+0x7c>
 8006e6a:	6560      	str	r0, [r4, #84]	; 0x54
 8006e6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e6e:	602f      	str	r7, [r5, #0]
 8006e70:	2900      	cmp	r1, #0
 8006e72:	d0ca      	beq.n	8006e0a <__sflush_r+0x1a>
 8006e74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e78:	4299      	cmp	r1, r3
 8006e7a:	d002      	beq.n	8006e82 <__sflush_r+0x92>
 8006e7c:	4628      	mov	r0, r5
 8006e7e:	f000 f9d7 	bl	8007230 <_free_r>
 8006e82:	2000      	movs	r0, #0
 8006e84:	6360      	str	r0, [r4, #52]	; 0x34
 8006e86:	e7c1      	b.n	8006e0c <__sflush_r+0x1c>
 8006e88:	6a21      	ldr	r1, [r4, #32]
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	4628      	mov	r0, r5
 8006e8e:	47b0      	blx	r6
 8006e90:	1c41      	adds	r1, r0, #1
 8006e92:	d1c7      	bne.n	8006e24 <__sflush_r+0x34>
 8006e94:	682b      	ldr	r3, [r5, #0]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d0c4      	beq.n	8006e24 <__sflush_r+0x34>
 8006e9a:	2b1d      	cmp	r3, #29
 8006e9c:	d001      	beq.n	8006ea2 <__sflush_r+0xb2>
 8006e9e:	2b16      	cmp	r3, #22
 8006ea0:	d101      	bne.n	8006ea6 <__sflush_r+0xb6>
 8006ea2:	602f      	str	r7, [r5, #0]
 8006ea4:	e7b1      	b.n	8006e0a <__sflush_r+0x1a>
 8006ea6:	89a3      	ldrh	r3, [r4, #12]
 8006ea8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006eac:	81a3      	strh	r3, [r4, #12]
 8006eae:	e7ad      	b.n	8006e0c <__sflush_r+0x1c>
 8006eb0:	690f      	ldr	r7, [r1, #16]
 8006eb2:	2f00      	cmp	r7, #0
 8006eb4:	d0a9      	beq.n	8006e0a <__sflush_r+0x1a>
 8006eb6:	0793      	lsls	r3, r2, #30
 8006eb8:	680e      	ldr	r6, [r1, #0]
 8006eba:	bf08      	it	eq
 8006ebc:	694b      	ldreq	r3, [r1, #20]
 8006ebe:	600f      	str	r7, [r1, #0]
 8006ec0:	bf18      	it	ne
 8006ec2:	2300      	movne	r3, #0
 8006ec4:	eba6 0807 	sub.w	r8, r6, r7
 8006ec8:	608b      	str	r3, [r1, #8]
 8006eca:	f1b8 0f00 	cmp.w	r8, #0
 8006ece:	dd9c      	ble.n	8006e0a <__sflush_r+0x1a>
 8006ed0:	6a21      	ldr	r1, [r4, #32]
 8006ed2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006ed4:	4643      	mov	r3, r8
 8006ed6:	463a      	mov	r2, r7
 8006ed8:	4628      	mov	r0, r5
 8006eda:	47b0      	blx	r6
 8006edc:	2800      	cmp	r0, #0
 8006ede:	dc06      	bgt.n	8006eee <__sflush_r+0xfe>
 8006ee0:	89a3      	ldrh	r3, [r4, #12]
 8006ee2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ee6:	81a3      	strh	r3, [r4, #12]
 8006ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8006eec:	e78e      	b.n	8006e0c <__sflush_r+0x1c>
 8006eee:	4407      	add	r7, r0
 8006ef0:	eba8 0800 	sub.w	r8, r8, r0
 8006ef4:	e7e9      	b.n	8006eca <__sflush_r+0xda>
 8006ef6:	bf00      	nop
 8006ef8:	20400001 	.word	0x20400001

08006efc <_fflush_r>:
 8006efc:	b538      	push	{r3, r4, r5, lr}
 8006efe:	690b      	ldr	r3, [r1, #16]
 8006f00:	4605      	mov	r5, r0
 8006f02:	460c      	mov	r4, r1
 8006f04:	b913      	cbnz	r3, 8006f0c <_fflush_r+0x10>
 8006f06:	2500      	movs	r5, #0
 8006f08:	4628      	mov	r0, r5
 8006f0a:	bd38      	pop	{r3, r4, r5, pc}
 8006f0c:	b118      	cbz	r0, 8006f16 <_fflush_r+0x1a>
 8006f0e:	6983      	ldr	r3, [r0, #24]
 8006f10:	b90b      	cbnz	r3, 8006f16 <_fflush_r+0x1a>
 8006f12:	f000 f887 	bl	8007024 <__sinit>
 8006f16:	4b14      	ldr	r3, [pc, #80]	; (8006f68 <_fflush_r+0x6c>)
 8006f18:	429c      	cmp	r4, r3
 8006f1a:	d11b      	bne.n	8006f54 <_fflush_r+0x58>
 8006f1c:	686c      	ldr	r4, [r5, #4]
 8006f1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d0ef      	beq.n	8006f06 <_fflush_r+0xa>
 8006f26:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006f28:	07d0      	lsls	r0, r2, #31
 8006f2a:	d404      	bmi.n	8006f36 <_fflush_r+0x3a>
 8006f2c:	0599      	lsls	r1, r3, #22
 8006f2e:	d402      	bmi.n	8006f36 <_fflush_r+0x3a>
 8006f30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f32:	f000 f915 	bl	8007160 <__retarget_lock_acquire_recursive>
 8006f36:	4628      	mov	r0, r5
 8006f38:	4621      	mov	r1, r4
 8006f3a:	f7ff ff59 	bl	8006df0 <__sflush_r>
 8006f3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f40:	07da      	lsls	r2, r3, #31
 8006f42:	4605      	mov	r5, r0
 8006f44:	d4e0      	bmi.n	8006f08 <_fflush_r+0xc>
 8006f46:	89a3      	ldrh	r3, [r4, #12]
 8006f48:	059b      	lsls	r3, r3, #22
 8006f4a:	d4dd      	bmi.n	8006f08 <_fflush_r+0xc>
 8006f4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f4e:	f000 f908 	bl	8007162 <__retarget_lock_release_recursive>
 8006f52:	e7d9      	b.n	8006f08 <_fflush_r+0xc>
 8006f54:	4b05      	ldr	r3, [pc, #20]	; (8006f6c <_fflush_r+0x70>)
 8006f56:	429c      	cmp	r4, r3
 8006f58:	d101      	bne.n	8006f5e <_fflush_r+0x62>
 8006f5a:	68ac      	ldr	r4, [r5, #8]
 8006f5c:	e7df      	b.n	8006f1e <_fflush_r+0x22>
 8006f5e:	4b04      	ldr	r3, [pc, #16]	; (8006f70 <_fflush_r+0x74>)
 8006f60:	429c      	cmp	r4, r3
 8006f62:	bf08      	it	eq
 8006f64:	68ec      	ldreq	r4, [r5, #12]
 8006f66:	e7da      	b.n	8006f1e <_fflush_r+0x22>
 8006f68:	08008164 	.word	0x08008164
 8006f6c:	08008184 	.word	0x08008184
 8006f70:	08008144 	.word	0x08008144

08006f74 <std>:
 8006f74:	2300      	movs	r3, #0
 8006f76:	b510      	push	{r4, lr}
 8006f78:	4604      	mov	r4, r0
 8006f7a:	e9c0 3300 	strd	r3, r3, [r0]
 8006f7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006f82:	6083      	str	r3, [r0, #8]
 8006f84:	8181      	strh	r1, [r0, #12]
 8006f86:	6643      	str	r3, [r0, #100]	; 0x64
 8006f88:	81c2      	strh	r2, [r0, #14]
 8006f8a:	6183      	str	r3, [r0, #24]
 8006f8c:	4619      	mov	r1, r3
 8006f8e:	2208      	movs	r2, #8
 8006f90:	305c      	adds	r0, #92	; 0x5c
 8006f92:	f7ff fd17 	bl	80069c4 <memset>
 8006f96:	4b05      	ldr	r3, [pc, #20]	; (8006fac <std+0x38>)
 8006f98:	6263      	str	r3, [r4, #36]	; 0x24
 8006f9a:	4b05      	ldr	r3, [pc, #20]	; (8006fb0 <std+0x3c>)
 8006f9c:	62a3      	str	r3, [r4, #40]	; 0x28
 8006f9e:	4b05      	ldr	r3, [pc, #20]	; (8006fb4 <std+0x40>)
 8006fa0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006fa2:	4b05      	ldr	r3, [pc, #20]	; (8006fb8 <std+0x44>)
 8006fa4:	6224      	str	r4, [r4, #32]
 8006fa6:	6323      	str	r3, [r4, #48]	; 0x30
 8006fa8:	bd10      	pop	{r4, pc}
 8006faa:	bf00      	nop
 8006fac:	08007ca5 	.word	0x08007ca5
 8006fb0:	08007cc7 	.word	0x08007cc7
 8006fb4:	08007cff 	.word	0x08007cff
 8006fb8:	08007d23 	.word	0x08007d23

08006fbc <_cleanup_r>:
 8006fbc:	4901      	ldr	r1, [pc, #4]	; (8006fc4 <_cleanup_r+0x8>)
 8006fbe:	f000 b8af 	b.w	8007120 <_fwalk_reent>
 8006fc2:	bf00      	nop
 8006fc4:	08006efd 	.word	0x08006efd

08006fc8 <__sfmoreglue>:
 8006fc8:	b570      	push	{r4, r5, r6, lr}
 8006fca:	2268      	movs	r2, #104	; 0x68
 8006fcc:	1e4d      	subs	r5, r1, #1
 8006fce:	4355      	muls	r5, r2
 8006fd0:	460e      	mov	r6, r1
 8006fd2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006fd6:	f000 f997 	bl	8007308 <_malloc_r>
 8006fda:	4604      	mov	r4, r0
 8006fdc:	b140      	cbz	r0, 8006ff0 <__sfmoreglue+0x28>
 8006fde:	2100      	movs	r1, #0
 8006fe0:	e9c0 1600 	strd	r1, r6, [r0]
 8006fe4:	300c      	adds	r0, #12
 8006fe6:	60a0      	str	r0, [r4, #8]
 8006fe8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006fec:	f7ff fcea 	bl	80069c4 <memset>
 8006ff0:	4620      	mov	r0, r4
 8006ff2:	bd70      	pop	{r4, r5, r6, pc}

08006ff4 <__sfp_lock_acquire>:
 8006ff4:	4801      	ldr	r0, [pc, #4]	; (8006ffc <__sfp_lock_acquire+0x8>)
 8006ff6:	f000 b8b3 	b.w	8007160 <__retarget_lock_acquire_recursive>
 8006ffa:	bf00      	nop
 8006ffc:	20008045 	.word	0x20008045

08007000 <__sfp_lock_release>:
 8007000:	4801      	ldr	r0, [pc, #4]	; (8007008 <__sfp_lock_release+0x8>)
 8007002:	f000 b8ae 	b.w	8007162 <__retarget_lock_release_recursive>
 8007006:	bf00      	nop
 8007008:	20008045 	.word	0x20008045

0800700c <__sinit_lock_acquire>:
 800700c:	4801      	ldr	r0, [pc, #4]	; (8007014 <__sinit_lock_acquire+0x8>)
 800700e:	f000 b8a7 	b.w	8007160 <__retarget_lock_acquire_recursive>
 8007012:	bf00      	nop
 8007014:	20008046 	.word	0x20008046

08007018 <__sinit_lock_release>:
 8007018:	4801      	ldr	r0, [pc, #4]	; (8007020 <__sinit_lock_release+0x8>)
 800701a:	f000 b8a2 	b.w	8007162 <__retarget_lock_release_recursive>
 800701e:	bf00      	nop
 8007020:	20008046 	.word	0x20008046

08007024 <__sinit>:
 8007024:	b510      	push	{r4, lr}
 8007026:	4604      	mov	r4, r0
 8007028:	f7ff fff0 	bl	800700c <__sinit_lock_acquire>
 800702c:	69a3      	ldr	r3, [r4, #24]
 800702e:	b11b      	cbz	r3, 8007038 <__sinit+0x14>
 8007030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007034:	f7ff bff0 	b.w	8007018 <__sinit_lock_release>
 8007038:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800703c:	6523      	str	r3, [r4, #80]	; 0x50
 800703e:	4b13      	ldr	r3, [pc, #76]	; (800708c <__sinit+0x68>)
 8007040:	4a13      	ldr	r2, [pc, #76]	; (8007090 <__sinit+0x6c>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	62a2      	str	r2, [r4, #40]	; 0x28
 8007046:	42a3      	cmp	r3, r4
 8007048:	bf04      	itt	eq
 800704a:	2301      	moveq	r3, #1
 800704c:	61a3      	streq	r3, [r4, #24]
 800704e:	4620      	mov	r0, r4
 8007050:	f000 f820 	bl	8007094 <__sfp>
 8007054:	6060      	str	r0, [r4, #4]
 8007056:	4620      	mov	r0, r4
 8007058:	f000 f81c 	bl	8007094 <__sfp>
 800705c:	60a0      	str	r0, [r4, #8]
 800705e:	4620      	mov	r0, r4
 8007060:	f000 f818 	bl	8007094 <__sfp>
 8007064:	2200      	movs	r2, #0
 8007066:	60e0      	str	r0, [r4, #12]
 8007068:	2104      	movs	r1, #4
 800706a:	6860      	ldr	r0, [r4, #4]
 800706c:	f7ff ff82 	bl	8006f74 <std>
 8007070:	68a0      	ldr	r0, [r4, #8]
 8007072:	2201      	movs	r2, #1
 8007074:	2109      	movs	r1, #9
 8007076:	f7ff ff7d 	bl	8006f74 <std>
 800707a:	68e0      	ldr	r0, [r4, #12]
 800707c:	2202      	movs	r2, #2
 800707e:	2112      	movs	r1, #18
 8007080:	f7ff ff78 	bl	8006f74 <std>
 8007084:	2301      	movs	r3, #1
 8007086:	61a3      	str	r3, [r4, #24]
 8007088:	e7d2      	b.n	8007030 <__sinit+0xc>
 800708a:	bf00      	nop
 800708c:	0800803c 	.word	0x0800803c
 8007090:	08006fbd 	.word	0x08006fbd

08007094 <__sfp>:
 8007094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007096:	4607      	mov	r7, r0
 8007098:	f7ff ffac 	bl	8006ff4 <__sfp_lock_acquire>
 800709c:	4b1e      	ldr	r3, [pc, #120]	; (8007118 <__sfp+0x84>)
 800709e:	681e      	ldr	r6, [r3, #0]
 80070a0:	69b3      	ldr	r3, [r6, #24]
 80070a2:	b913      	cbnz	r3, 80070aa <__sfp+0x16>
 80070a4:	4630      	mov	r0, r6
 80070a6:	f7ff ffbd 	bl	8007024 <__sinit>
 80070aa:	3648      	adds	r6, #72	; 0x48
 80070ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80070b0:	3b01      	subs	r3, #1
 80070b2:	d503      	bpl.n	80070bc <__sfp+0x28>
 80070b4:	6833      	ldr	r3, [r6, #0]
 80070b6:	b30b      	cbz	r3, 80070fc <__sfp+0x68>
 80070b8:	6836      	ldr	r6, [r6, #0]
 80070ba:	e7f7      	b.n	80070ac <__sfp+0x18>
 80070bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80070c0:	b9d5      	cbnz	r5, 80070f8 <__sfp+0x64>
 80070c2:	4b16      	ldr	r3, [pc, #88]	; (800711c <__sfp+0x88>)
 80070c4:	60e3      	str	r3, [r4, #12]
 80070c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80070ca:	6665      	str	r5, [r4, #100]	; 0x64
 80070cc:	f000 f847 	bl	800715e <__retarget_lock_init_recursive>
 80070d0:	f7ff ff96 	bl	8007000 <__sfp_lock_release>
 80070d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80070d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80070dc:	6025      	str	r5, [r4, #0]
 80070de:	61a5      	str	r5, [r4, #24]
 80070e0:	2208      	movs	r2, #8
 80070e2:	4629      	mov	r1, r5
 80070e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80070e8:	f7ff fc6c 	bl	80069c4 <memset>
 80070ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80070f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80070f4:	4620      	mov	r0, r4
 80070f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070f8:	3468      	adds	r4, #104	; 0x68
 80070fa:	e7d9      	b.n	80070b0 <__sfp+0x1c>
 80070fc:	2104      	movs	r1, #4
 80070fe:	4638      	mov	r0, r7
 8007100:	f7ff ff62 	bl	8006fc8 <__sfmoreglue>
 8007104:	4604      	mov	r4, r0
 8007106:	6030      	str	r0, [r6, #0]
 8007108:	2800      	cmp	r0, #0
 800710a:	d1d5      	bne.n	80070b8 <__sfp+0x24>
 800710c:	f7ff ff78 	bl	8007000 <__sfp_lock_release>
 8007110:	230c      	movs	r3, #12
 8007112:	603b      	str	r3, [r7, #0]
 8007114:	e7ee      	b.n	80070f4 <__sfp+0x60>
 8007116:	bf00      	nop
 8007118:	0800803c 	.word	0x0800803c
 800711c:	ffff0001 	.word	0xffff0001

08007120 <_fwalk_reent>:
 8007120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007124:	4606      	mov	r6, r0
 8007126:	4688      	mov	r8, r1
 8007128:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800712c:	2700      	movs	r7, #0
 800712e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007132:	f1b9 0901 	subs.w	r9, r9, #1
 8007136:	d505      	bpl.n	8007144 <_fwalk_reent+0x24>
 8007138:	6824      	ldr	r4, [r4, #0]
 800713a:	2c00      	cmp	r4, #0
 800713c:	d1f7      	bne.n	800712e <_fwalk_reent+0xe>
 800713e:	4638      	mov	r0, r7
 8007140:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007144:	89ab      	ldrh	r3, [r5, #12]
 8007146:	2b01      	cmp	r3, #1
 8007148:	d907      	bls.n	800715a <_fwalk_reent+0x3a>
 800714a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800714e:	3301      	adds	r3, #1
 8007150:	d003      	beq.n	800715a <_fwalk_reent+0x3a>
 8007152:	4629      	mov	r1, r5
 8007154:	4630      	mov	r0, r6
 8007156:	47c0      	blx	r8
 8007158:	4307      	orrs	r7, r0
 800715a:	3568      	adds	r5, #104	; 0x68
 800715c:	e7e9      	b.n	8007132 <_fwalk_reent+0x12>

0800715e <__retarget_lock_init_recursive>:
 800715e:	4770      	bx	lr

08007160 <__retarget_lock_acquire_recursive>:
 8007160:	4770      	bx	lr

08007162 <__retarget_lock_release_recursive>:
 8007162:	4770      	bx	lr

08007164 <__swhatbuf_r>:
 8007164:	b570      	push	{r4, r5, r6, lr}
 8007166:	460e      	mov	r6, r1
 8007168:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800716c:	2900      	cmp	r1, #0
 800716e:	b096      	sub	sp, #88	; 0x58
 8007170:	4614      	mov	r4, r2
 8007172:	461d      	mov	r5, r3
 8007174:	da08      	bge.n	8007188 <__swhatbuf_r+0x24>
 8007176:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800717a:	2200      	movs	r2, #0
 800717c:	602a      	str	r2, [r5, #0]
 800717e:	061a      	lsls	r2, r3, #24
 8007180:	d410      	bmi.n	80071a4 <__swhatbuf_r+0x40>
 8007182:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007186:	e00e      	b.n	80071a6 <__swhatbuf_r+0x42>
 8007188:	466a      	mov	r2, sp
 800718a:	f000 fdf1 	bl	8007d70 <_fstat_r>
 800718e:	2800      	cmp	r0, #0
 8007190:	dbf1      	blt.n	8007176 <__swhatbuf_r+0x12>
 8007192:	9a01      	ldr	r2, [sp, #4]
 8007194:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007198:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800719c:	425a      	negs	r2, r3
 800719e:	415a      	adcs	r2, r3
 80071a0:	602a      	str	r2, [r5, #0]
 80071a2:	e7ee      	b.n	8007182 <__swhatbuf_r+0x1e>
 80071a4:	2340      	movs	r3, #64	; 0x40
 80071a6:	2000      	movs	r0, #0
 80071a8:	6023      	str	r3, [r4, #0]
 80071aa:	b016      	add	sp, #88	; 0x58
 80071ac:	bd70      	pop	{r4, r5, r6, pc}
	...

080071b0 <__smakebuf_r>:
 80071b0:	898b      	ldrh	r3, [r1, #12]
 80071b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80071b4:	079d      	lsls	r5, r3, #30
 80071b6:	4606      	mov	r6, r0
 80071b8:	460c      	mov	r4, r1
 80071ba:	d507      	bpl.n	80071cc <__smakebuf_r+0x1c>
 80071bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80071c0:	6023      	str	r3, [r4, #0]
 80071c2:	6123      	str	r3, [r4, #16]
 80071c4:	2301      	movs	r3, #1
 80071c6:	6163      	str	r3, [r4, #20]
 80071c8:	b002      	add	sp, #8
 80071ca:	bd70      	pop	{r4, r5, r6, pc}
 80071cc:	ab01      	add	r3, sp, #4
 80071ce:	466a      	mov	r2, sp
 80071d0:	f7ff ffc8 	bl	8007164 <__swhatbuf_r>
 80071d4:	9900      	ldr	r1, [sp, #0]
 80071d6:	4605      	mov	r5, r0
 80071d8:	4630      	mov	r0, r6
 80071da:	f000 f895 	bl	8007308 <_malloc_r>
 80071de:	b948      	cbnz	r0, 80071f4 <__smakebuf_r+0x44>
 80071e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071e4:	059a      	lsls	r2, r3, #22
 80071e6:	d4ef      	bmi.n	80071c8 <__smakebuf_r+0x18>
 80071e8:	f023 0303 	bic.w	r3, r3, #3
 80071ec:	f043 0302 	orr.w	r3, r3, #2
 80071f0:	81a3      	strh	r3, [r4, #12]
 80071f2:	e7e3      	b.n	80071bc <__smakebuf_r+0xc>
 80071f4:	4b0d      	ldr	r3, [pc, #52]	; (800722c <__smakebuf_r+0x7c>)
 80071f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80071f8:	89a3      	ldrh	r3, [r4, #12]
 80071fa:	6020      	str	r0, [r4, #0]
 80071fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007200:	81a3      	strh	r3, [r4, #12]
 8007202:	9b00      	ldr	r3, [sp, #0]
 8007204:	6163      	str	r3, [r4, #20]
 8007206:	9b01      	ldr	r3, [sp, #4]
 8007208:	6120      	str	r0, [r4, #16]
 800720a:	b15b      	cbz	r3, 8007224 <__smakebuf_r+0x74>
 800720c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007210:	4630      	mov	r0, r6
 8007212:	f000 fdbf 	bl	8007d94 <_isatty_r>
 8007216:	b128      	cbz	r0, 8007224 <__smakebuf_r+0x74>
 8007218:	89a3      	ldrh	r3, [r4, #12]
 800721a:	f023 0303 	bic.w	r3, r3, #3
 800721e:	f043 0301 	orr.w	r3, r3, #1
 8007222:	81a3      	strh	r3, [r4, #12]
 8007224:	89a0      	ldrh	r0, [r4, #12]
 8007226:	4305      	orrs	r5, r0
 8007228:	81a5      	strh	r5, [r4, #12]
 800722a:	e7cd      	b.n	80071c8 <__smakebuf_r+0x18>
 800722c:	08006fbd 	.word	0x08006fbd

08007230 <_free_r>:
 8007230:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007232:	2900      	cmp	r1, #0
 8007234:	d044      	beq.n	80072c0 <_free_r+0x90>
 8007236:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800723a:	9001      	str	r0, [sp, #4]
 800723c:	2b00      	cmp	r3, #0
 800723e:	f1a1 0404 	sub.w	r4, r1, #4
 8007242:	bfb8      	it	lt
 8007244:	18e4      	addlt	r4, r4, r3
 8007246:	f000 fde1 	bl	8007e0c <__malloc_lock>
 800724a:	4a1e      	ldr	r2, [pc, #120]	; (80072c4 <_free_r+0x94>)
 800724c:	9801      	ldr	r0, [sp, #4]
 800724e:	6813      	ldr	r3, [r2, #0]
 8007250:	b933      	cbnz	r3, 8007260 <_free_r+0x30>
 8007252:	6063      	str	r3, [r4, #4]
 8007254:	6014      	str	r4, [r2, #0]
 8007256:	b003      	add	sp, #12
 8007258:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800725c:	f000 bddc 	b.w	8007e18 <__malloc_unlock>
 8007260:	42a3      	cmp	r3, r4
 8007262:	d908      	bls.n	8007276 <_free_r+0x46>
 8007264:	6825      	ldr	r5, [r4, #0]
 8007266:	1961      	adds	r1, r4, r5
 8007268:	428b      	cmp	r3, r1
 800726a:	bf01      	itttt	eq
 800726c:	6819      	ldreq	r1, [r3, #0]
 800726e:	685b      	ldreq	r3, [r3, #4]
 8007270:	1949      	addeq	r1, r1, r5
 8007272:	6021      	streq	r1, [r4, #0]
 8007274:	e7ed      	b.n	8007252 <_free_r+0x22>
 8007276:	461a      	mov	r2, r3
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	b10b      	cbz	r3, 8007280 <_free_r+0x50>
 800727c:	42a3      	cmp	r3, r4
 800727e:	d9fa      	bls.n	8007276 <_free_r+0x46>
 8007280:	6811      	ldr	r1, [r2, #0]
 8007282:	1855      	adds	r5, r2, r1
 8007284:	42a5      	cmp	r5, r4
 8007286:	d10b      	bne.n	80072a0 <_free_r+0x70>
 8007288:	6824      	ldr	r4, [r4, #0]
 800728a:	4421      	add	r1, r4
 800728c:	1854      	adds	r4, r2, r1
 800728e:	42a3      	cmp	r3, r4
 8007290:	6011      	str	r1, [r2, #0]
 8007292:	d1e0      	bne.n	8007256 <_free_r+0x26>
 8007294:	681c      	ldr	r4, [r3, #0]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	6053      	str	r3, [r2, #4]
 800729a:	4421      	add	r1, r4
 800729c:	6011      	str	r1, [r2, #0]
 800729e:	e7da      	b.n	8007256 <_free_r+0x26>
 80072a0:	d902      	bls.n	80072a8 <_free_r+0x78>
 80072a2:	230c      	movs	r3, #12
 80072a4:	6003      	str	r3, [r0, #0]
 80072a6:	e7d6      	b.n	8007256 <_free_r+0x26>
 80072a8:	6825      	ldr	r5, [r4, #0]
 80072aa:	1961      	adds	r1, r4, r5
 80072ac:	428b      	cmp	r3, r1
 80072ae:	bf04      	itt	eq
 80072b0:	6819      	ldreq	r1, [r3, #0]
 80072b2:	685b      	ldreq	r3, [r3, #4]
 80072b4:	6063      	str	r3, [r4, #4]
 80072b6:	bf04      	itt	eq
 80072b8:	1949      	addeq	r1, r1, r5
 80072ba:	6021      	streq	r1, [r4, #0]
 80072bc:	6054      	str	r4, [r2, #4]
 80072be:	e7ca      	b.n	8007256 <_free_r+0x26>
 80072c0:	b003      	add	sp, #12
 80072c2:	bd30      	pop	{r4, r5, pc}
 80072c4:	20008048 	.word	0x20008048

080072c8 <sbrk_aligned>:
 80072c8:	b570      	push	{r4, r5, r6, lr}
 80072ca:	4e0e      	ldr	r6, [pc, #56]	; (8007304 <sbrk_aligned+0x3c>)
 80072cc:	460c      	mov	r4, r1
 80072ce:	6831      	ldr	r1, [r6, #0]
 80072d0:	4605      	mov	r5, r0
 80072d2:	b911      	cbnz	r1, 80072da <sbrk_aligned+0x12>
 80072d4:	f000 fcd6 	bl	8007c84 <_sbrk_r>
 80072d8:	6030      	str	r0, [r6, #0]
 80072da:	4621      	mov	r1, r4
 80072dc:	4628      	mov	r0, r5
 80072de:	f000 fcd1 	bl	8007c84 <_sbrk_r>
 80072e2:	1c43      	adds	r3, r0, #1
 80072e4:	d00a      	beq.n	80072fc <sbrk_aligned+0x34>
 80072e6:	1cc4      	adds	r4, r0, #3
 80072e8:	f024 0403 	bic.w	r4, r4, #3
 80072ec:	42a0      	cmp	r0, r4
 80072ee:	d007      	beq.n	8007300 <sbrk_aligned+0x38>
 80072f0:	1a21      	subs	r1, r4, r0
 80072f2:	4628      	mov	r0, r5
 80072f4:	f000 fcc6 	bl	8007c84 <_sbrk_r>
 80072f8:	3001      	adds	r0, #1
 80072fa:	d101      	bne.n	8007300 <sbrk_aligned+0x38>
 80072fc:	f04f 34ff 	mov.w	r4, #4294967295
 8007300:	4620      	mov	r0, r4
 8007302:	bd70      	pop	{r4, r5, r6, pc}
 8007304:	2000804c 	.word	0x2000804c

08007308 <_malloc_r>:
 8007308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800730c:	1ccd      	adds	r5, r1, #3
 800730e:	f025 0503 	bic.w	r5, r5, #3
 8007312:	3508      	adds	r5, #8
 8007314:	2d0c      	cmp	r5, #12
 8007316:	bf38      	it	cc
 8007318:	250c      	movcc	r5, #12
 800731a:	2d00      	cmp	r5, #0
 800731c:	4607      	mov	r7, r0
 800731e:	db01      	blt.n	8007324 <_malloc_r+0x1c>
 8007320:	42a9      	cmp	r1, r5
 8007322:	d905      	bls.n	8007330 <_malloc_r+0x28>
 8007324:	230c      	movs	r3, #12
 8007326:	603b      	str	r3, [r7, #0]
 8007328:	2600      	movs	r6, #0
 800732a:	4630      	mov	r0, r6
 800732c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007330:	4e2e      	ldr	r6, [pc, #184]	; (80073ec <_malloc_r+0xe4>)
 8007332:	f000 fd6b 	bl	8007e0c <__malloc_lock>
 8007336:	6833      	ldr	r3, [r6, #0]
 8007338:	461c      	mov	r4, r3
 800733a:	bb34      	cbnz	r4, 800738a <_malloc_r+0x82>
 800733c:	4629      	mov	r1, r5
 800733e:	4638      	mov	r0, r7
 8007340:	f7ff ffc2 	bl	80072c8 <sbrk_aligned>
 8007344:	1c43      	adds	r3, r0, #1
 8007346:	4604      	mov	r4, r0
 8007348:	d14d      	bne.n	80073e6 <_malloc_r+0xde>
 800734a:	6834      	ldr	r4, [r6, #0]
 800734c:	4626      	mov	r6, r4
 800734e:	2e00      	cmp	r6, #0
 8007350:	d140      	bne.n	80073d4 <_malloc_r+0xcc>
 8007352:	6823      	ldr	r3, [r4, #0]
 8007354:	4631      	mov	r1, r6
 8007356:	4638      	mov	r0, r7
 8007358:	eb04 0803 	add.w	r8, r4, r3
 800735c:	f000 fc92 	bl	8007c84 <_sbrk_r>
 8007360:	4580      	cmp	r8, r0
 8007362:	d13a      	bne.n	80073da <_malloc_r+0xd2>
 8007364:	6821      	ldr	r1, [r4, #0]
 8007366:	3503      	adds	r5, #3
 8007368:	1a6d      	subs	r5, r5, r1
 800736a:	f025 0503 	bic.w	r5, r5, #3
 800736e:	3508      	adds	r5, #8
 8007370:	2d0c      	cmp	r5, #12
 8007372:	bf38      	it	cc
 8007374:	250c      	movcc	r5, #12
 8007376:	4629      	mov	r1, r5
 8007378:	4638      	mov	r0, r7
 800737a:	f7ff ffa5 	bl	80072c8 <sbrk_aligned>
 800737e:	3001      	adds	r0, #1
 8007380:	d02b      	beq.n	80073da <_malloc_r+0xd2>
 8007382:	6823      	ldr	r3, [r4, #0]
 8007384:	442b      	add	r3, r5
 8007386:	6023      	str	r3, [r4, #0]
 8007388:	e00e      	b.n	80073a8 <_malloc_r+0xa0>
 800738a:	6822      	ldr	r2, [r4, #0]
 800738c:	1b52      	subs	r2, r2, r5
 800738e:	d41e      	bmi.n	80073ce <_malloc_r+0xc6>
 8007390:	2a0b      	cmp	r2, #11
 8007392:	d916      	bls.n	80073c2 <_malloc_r+0xba>
 8007394:	1961      	adds	r1, r4, r5
 8007396:	42a3      	cmp	r3, r4
 8007398:	6025      	str	r5, [r4, #0]
 800739a:	bf18      	it	ne
 800739c:	6059      	strne	r1, [r3, #4]
 800739e:	6863      	ldr	r3, [r4, #4]
 80073a0:	bf08      	it	eq
 80073a2:	6031      	streq	r1, [r6, #0]
 80073a4:	5162      	str	r2, [r4, r5]
 80073a6:	604b      	str	r3, [r1, #4]
 80073a8:	4638      	mov	r0, r7
 80073aa:	f104 060b 	add.w	r6, r4, #11
 80073ae:	f000 fd33 	bl	8007e18 <__malloc_unlock>
 80073b2:	f026 0607 	bic.w	r6, r6, #7
 80073b6:	1d23      	adds	r3, r4, #4
 80073b8:	1af2      	subs	r2, r6, r3
 80073ba:	d0b6      	beq.n	800732a <_malloc_r+0x22>
 80073bc:	1b9b      	subs	r3, r3, r6
 80073be:	50a3      	str	r3, [r4, r2]
 80073c0:	e7b3      	b.n	800732a <_malloc_r+0x22>
 80073c2:	6862      	ldr	r2, [r4, #4]
 80073c4:	42a3      	cmp	r3, r4
 80073c6:	bf0c      	ite	eq
 80073c8:	6032      	streq	r2, [r6, #0]
 80073ca:	605a      	strne	r2, [r3, #4]
 80073cc:	e7ec      	b.n	80073a8 <_malloc_r+0xa0>
 80073ce:	4623      	mov	r3, r4
 80073d0:	6864      	ldr	r4, [r4, #4]
 80073d2:	e7b2      	b.n	800733a <_malloc_r+0x32>
 80073d4:	4634      	mov	r4, r6
 80073d6:	6876      	ldr	r6, [r6, #4]
 80073d8:	e7b9      	b.n	800734e <_malloc_r+0x46>
 80073da:	230c      	movs	r3, #12
 80073dc:	603b      	str	r3, [r7, #0]
 80073de:	4638      	mov	r0, r7
 80073e0:	f000 fd1a 	bl	8007e18 <__malloc_unlock>
 80073e4:	e7a1      	b.n	800732a <_malloc_r+0x22>
 80073e6:	6025      	str	r5, [r4, #0]
 80073e8:	e7de      	b.n	80073a8 <_malloc_r+0xa0>
 80073ea:	bf00      	nop
 80073ec:	20008048 	.word	0x20008048

080073f0 <__ssputs_r>:
 80073f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073f4:	688e      	ldr	r6, [r1, #8]
 80073f6:	429e      	cmp	r6, r3
 80073f8:	4682      	mov	sl, r0
 80073fa:	460c      	mov	r4, r1
 80073fc:	4690      	mov	r8, r2
 80073fe:	461f      	mov	r7, r3
 8007400:	d838      	bhi.n	8007474 <__ssputs_r+0x84>
 8007402:	898a      	ldrh	r2, [r1, #12]
 8007404:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007408:	d032      	beq.n	8007470 <__ssputs_r+0x80>
 800740a:	6825      	ldr	r5, [r4, #0]
 800740c:	6909      	ldr	r1, [r1, #16]
 800740e:	eba5 0901 	sub.w	r9, r5, r1
 8007412:	6965      	ldr	r5, [r4, #20]
 8007414:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007418:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800741c:	3301      	adds	r3, #1
 800741e:	444b      	add	r3, r9
 8007420:	106d      	asrs	r5, r5, #1
 8007422:	429d      	cmp	r5, r3
 8007424:	bf38      	it	cc
 8007426:	461d      	movcc	r5, r3
 8007428:	0553      	lsls	r3, r2, #21
 800742a:	d531      	bpl.n	8007490 <__ssputs_r+0xa0>
 800742c:	4629      	mov	r1, r5
 800742e:	f7ff ff6b 	bl	8007308 <_malloc_r>
 8007432:	4606      	mov	r6, r0
 8007434:	b950      	cbnz	r0, 800744c <__ssputs_r+0x5c>
 8007436:	230c      	movs	r3, #12
 8007438:	f8ca 3000 	str.w	r3, [sl]
 800743c:	89a3      	ldrh	r3, [r4, #12]
 800743e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007442:	81a3      	strh	r3, [r4, #12]
 8007444:	f04f 30ff 	mov.w	r0, #4294967295
 8007448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800744c:	6921      	ldr	r1, [r4, #16]
 800744e:	464a      	mov	r2, r9
 8007450:	f7ff faaa 	bl	80069a8 <memcpy>
 8007454:	89a3      	ldrh	r3, [r4, #12]
 8007456:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800745a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800745e:	81a3      	strh	r3, [r4, #12]
 8007460:	6126      	str	r6, [r4, #16]
 8007462:	6165      	str	r5, [r4, #20]
 8007464:	444e      	add	r6, r9
 8007466:	eba5 0509 	sub.w	r5, r5, r9
 800746a:	6026      	str	r6, [r4, #0]
 800746c:	60a5      	str	r5, [r4, #8]
 800746e:	463e      	mov	r6, r7
 8007470:	42be      	cmp	r6, r7
 8007472:	d900      	bls.n	8007476 <__ssputs_r+0x86>
 8007474:	463e      	mov	r6, r7
 8007476:	6820      	ldr	r0, [r4, #0]
 8007478:	4632      	mov	r2, r6
 800747a:	4641      	mov	r1, r8
 800747c:	f000 fcac 	bl	8007dd8 <memmove>
 8007480:	68a3      	ldr	r3, [r4, #8]
 8007482:	1b9b      	subs	r3, r3, r6
 8007484:	60a3      	str	r3, [r4, #8]
 8007486:	6823      	ldr	r3, [r4, #0]
 8007488:	4433      	add	r3, r6
 800748a:	6023      	str	r3, [r4, #0]
 800748c:	2000      	movs	r0, #0
 800748e:	e7db      	b.n	8007448 <__ssputs_r+0x58>
 8007490:	462a      	mov	r2, r5
 8007492:	f000 fcc7 	bl	8007e24 <_realloc_r>
 8007496:	4606      	mov	r6, r0
 8007498:	2800      	cmp	r0, #0
 800749a:	d1e1      	bne.n	8007460 <__ssputs_r+0x70>
 800749c:	6921      	ldr	r1, [r4, #16]
 800749e:	4650      	mov	r0, sl
 80074a0:	f7ff fec6 	bl	8007230 <_free_r>
 80074a4:	e7c7      	b.n	8007436 <__ssputs_r+0x46>
	...

080074a8 <_svfiprintf_r>:
 80074a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074ac:	4698      	mov	r8, r3
 80074ae:	898b      	ldrh	r3, [r1, #12]
 80074b0:	061b      	lsls	r3, r3, #24
 80074b2:	b09d      	sub	sp, #116	; 0x74
 80074b4:	4607      	mov	r7, r0
 80074b6:	460d      	mov	r5, r1
 80074b8:	4614      	mov	r4, r2
 80074ba:	d50e      	bpl.n	80074da <_svfiprintf_r+0x32>
 80074bc:	690b      	ldr	r3, [r1, #16]
 80074be:	b963      	cbnz	r3, 80074da <_svfiprintf_r+0x32>
 80074c0:	2140      	movs	r1, #64	; 0x40
 80074c2:	f7ff ff21 	bl	8007308 <_malloc_r>
 80074c6:	6028      	str	r0, [r5, #0]
 80074c8:	6128      	str	r0, [r5, #16]
 80074ca:	b920      	cbnz	r0, 80074d6 <_svfiprintf_r+0x2e>
 80074cc:	230c      	movs	r3, #12
 80074ce:	603b      	str	r3, [r7, #0]
 80074d0:	f04f 30ff 	mov.w	r0, #4294967295
 80074d4:	e0d1      	b.n	800767a <_svfiprintf_r+0x1d2>
 80074d6:	2340      	movs	r3, #64	; 0x40
 80074d8:	616b      	str	r3, [r5, #20]
 80074da:	2300      	movs	r3, #0
 80074dc:	9309      	str	r3, [sp, #36]	; 0x24
 80074de:	2320      	movs	r3, #32
 80074e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80074e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80074e8:	2330      	movs	r3, #48	; 0x30
 80074ea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007694 <_svfiprintf_r+0x1ec>
 80074ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80074f2:	f04f 0901 	mov.w	r9, #1
 80074f6:	4623      	mov	r3, r4
 80074f8:	469a      	mov	sl, r3
 80074fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074fe:	b10a      	cbz	r2, 8007504 <_svfiprintf_r+0x5c>
 8007500:	2a25      	cmp	r2, #37	; 0x25
 8007502:	d1f9      	bne.n	80074f8 <_svfiprintf_r+0x50>
 8007504:	ebba 0b04 	subs.w	fp, sl, r4
 8007508:	d00b      	beq.n	8007522 <_svfiprintf_r+0x7a>
 800750a:	465b      	mov	r3, fp
 800750c:	4622      	mov	r2, r4
 800750e:	4629      	mov	r1, r5
 8007510:	4638      	mov	r0, r7
 8007512:	f7ff ff6d 	bl	80073f0 <__ssputs_r>
 8007516:	3001      	adds	r0, #1
 8007518:	f000 80aa 	beq.w	8007670 <_svfiprintf_r+0x1c8>
 800751c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800751e:	445a      	add	r2, fp
 8007520:	9209      	str	r2, [sp, #36]	; 0x24
 8007522:	f89a 3000 	ldrb.w	r3, [sl]
 8007526:	2b00      	cmp	r3, #0
 8007528:	f000 80a2 	beq.w	8007670 <_svfiprintf_r+0x1c8>
 800752c:	2300      	movs	r3, #0
 800752e:	f04f 32ff 	mov.w	r2, #4294967295
 8007532:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007536:	f10a 0a01 	add.w	sl, sl, #1
 800753a:	9304      	str	r3, [sp, #16]
 800753c:	9307      	str	r3, [sp, #28]
 800753e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007542:	931a      	str	r3, [sp, #104]	; 0x68
 8007544:	4654      	mov	r4, sl
 8007546:	2205      	movs	r2, #5
 8007548:	f814 1b01 	ldrb.w	r1, [r4], #1
 800754c:	4851      	ldr	r0, [pc, #324]	; (8007694 <_svfiprintf_r+0x1ec>)
 800754e:	f7f8 fe5f 	bl	8000210 <memchr>
 8007552:	9a04      	ldr	r2, [sp, #16]
 8007554:	b9d8      	cbnz	r0, 800758e <_svfiprintf_r+0xe6>
 8007556:	06d0      	lsls	r0, r2, #27
 8007558:	bf44      	itt	mi
 800755a:	2320      	movmi	r3, #32
 800755c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007560:	0711      	lsls	r1, r2, #28
 8007562:	bf44      	itt	mi
 8007564:	232b      	movmi	r3, #43	; 0x2b
 8007566:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800756a:	f89a 3000 	ldrb.w	r3, [sl]
 800756e:	2b2a      	cmp	r3, #42	; 0x2a
 8007570:	d015      	beq.n	800759e <_svfiprintf_r+0xf6>
 8007572:	9a07      	ldr	r2, [sp, #28]
 8007574:	4654      	mov	r4, sl
 8007576:	2000      	movs	r0, #0
 8007578:	f04f 0c0a 	mov.w	ip, #10
 800757c:	4621      	mov	r1, r4
 800757e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007582:	3b30      	subs	r3, #48	; 0x30
 8007584:	2b09      	cmp	r3, #9
 8007586:	d94e      	bls.n	8007626 <_svfiprintf_r+0x17e>
 8007588:	b1b0      	cbz	r0, 80075b8 <_svfiprintf_r+0x110>
 800758a:	9207      	str	r2, [sp, #28]
 800758c:	e014      	b.n	80075b8 <_svfiprintf_r+0x110>
 800758e:	eba0 0308 	sub.w	r3, r0, r8
 8007592:	fa09 f303 	lsl.w	r3, r9, r3
 8007596:	4313      	orrs	r3, r2
 8007598:	9304      	str	r3, [sp, #16]
 800759a:	46a2      	mov	sl, r4
 800759c:	e7d2      	b.n	8007544 <_svfiprintf_r+0x9c>
 800759e:	9b03      	ldr	r3, [sp, #12]
 80075a0:	1d19      	adds	r1, r3, #4
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	9103      	str	r1, [sp, #12]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	bfbb      	ittet	lt
 80075aa:	425b      	neglt	r3, r3
 80075ac:	f042 0202 	orrlt.w	r2, r2, #2
 80075b0:	9307      	strge	r3, [sp, #28]
 80075b2:	9307      	strlt	r3, [sp, #28]
 80075b4:	bfb8      	it	lt
 80075b6:	9204      	strlt	r2, [sp, #16]
 80075b8:	7823      	ldrb	r3, [r4, #0]
 80075ba:	2b2e      	cmp	r3, #46	; 0x2e
 80075bc:	d10c      	bne.n	80075d8 <_svfiprintf_r+0x130>
 80075be:	7863      	ldrb	r3, [r4, #1]
 80075c0:	2b2a      	cmp	r3, #42	; 0x2a
 80075c2:	d135      	bne.n	8007630 <_svfiprintf_r+0x188>
 80075c4:	9b03      	ldr	r3, [sp, #12]
 80075c6:	1d1a      	adds	r2, r3, #4
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	9203      	str	r2, [sp, #12]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	bfb8      	it	lt
 80075d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80075d4:	3402      	adds	r4, #2
 80075d6:	9305      	str	r3, [sp, #20]
 80075d8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80076a4 <_svfiprintf_r+0x1fc>
 80075dc:	7821      	ldrb	r1, [r4, #0]
 80075de:	2203      	movs	r2, #3
 80075e0:	4650      	mov	r0, sl
 80075e2:	f7f8 fe15 	bl	8000210 <memchr>
 80075e6:	b140      	cbz	r0, 80075fa <_svfiprintf_r+0x152>
 80075e8:	2340      	movs	r3, #64	; 0x40
 80075ea:	eba0 000a 	sub.w	r0, r0, sl
 80075ee:	fa03 f000 	lsl.w	r0, r3, r0
 80075f2:	9b04      	ldr	r3, [sp, #16]
 80075f4:	4303      	orrs	r3, r0
 80075f6:	3401      	adds	r4, #1
 80075f8:	9304      	str	r3, [sp, #16]
 80075fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075fe:	4826      	ldr	r0, [pc, #152]	; (8007698 <_svfiprintf_r+0x1f0>)
 8007600:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007604:	2206      	movs	r2, #6
 8007606:	f7f8 fe03 	bl	8000210 <memchr>
 800760a:	2800      	cmp	r0, #0
 800760c:	d038      	beq.n	8007680 <_svfiprintf_r+0x1d8>
 800760e:	4b23      	ldr	r3, [pc, #140]	; (800769c <_svfiprintf_r+0x1f4>)
 8007610:	bb1b      	cbnz	r3, 800765a <_svfiprintf_r+0x1b2>
 8007612:	9b03      	ldr	r3, [sp, #12]
 8007614:	3307      	adds	r3, #7
 8007616:	f023 0307 	bic.w	r3, r3, #7
 800761a:	3308      	adds	r3, #8
 800761c:	9303      	str	r3, [sp, #12]
 800761e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007620:	4433      	add	r3, r6
 8007622:	9309      	str	r3, [sp, #36]	; 0x24
 8007624:	e767      	b.n	80074f6 <_svfiprintf_r+0x4e>
 8007626:	fb0c 3202 	mla	r2, ip, r2, r3
 800762a:	460c      	mov	r4, r1
 800762c:	2001      	movs	r0, #1
 800762e:	e7a5      	b.n	800757c <_svfiprintf_r+0xd4>
 8007630:	2300      	movs	r3, #0
 8007632:	3401      	adds	r4, #1
 8007634:	9305      	str	r3, [sp, #20]
 8007636:	4619      	mov	r1, r3
 8007638:	f04f 0c0a 	mov.w	ip, #10
 800763c:	4620      	mov	r0, r4
 800763e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007642:	3a30      	subs	r2, #48	; 0x30
 8007644:	2a09      	cmp	r2, #9
 8007646:	d903      	bls.n	8007650 <_svfiprintf_r+0x1a8>
 8007648:	2b00      	cmp	r3, #0
 800764a:	d0c5      	beq.n	80075d8 <_svfiprintf_r+0x130>
 800764c:	9105      	str	r1, [sp, #20]
 800764e:	e7c3      	b.n	80075d8 <_svfiprintf_r+0x130>
 8007650:	fb0c 2101 	mla	r1, ip, r1, r2
 8007654:	4604      	mov	r4, r0
 8007656:	2301      	movs	r3, #1
 8007658:	e7f0      	b.n	800763c <_svfiprintf_r+0x194>
 800765a:	ab03      	add	r3, sp, #12
 800765c:	9300      	str	r3, [sp, #0]
 800765e:	462a      	mov	r2, r5
 8007660:	4b0f      	ldr	r3, [pc, #60]	; (80076a0 <_svfiprintf_r+0x1f8>)
 8007662:	a904      	add	r1, sp, #16
 8007664:	4638      	mov	r0, r7
 8007666:	f3af 8000 	nop.w
 800766a:	1c42      	adds	r2, r0, #1
 800766c:	4606      	mov	r6, r0
 800766e:	d1d6      	bne.n	800761e <_svfiprintf_r+0x176>
 8007670:	89ab      	ldrh	r3, [r5, #12]
 8007672:	065b      	lsls	r3, r3, #25
 8007674:	f53f af2c 	bmi.w	80074d0 <_svfiprintf_r+0x28>
 8007678:	9809      	ldr	r0, [sp, #36]	; 0x24
 800767a:	b01d      	add	sp, #116	; 0x74
 800767c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007680:	ab03      	add	r3, sp, #12
 8007682:	9300      	str	r3, [sp, #0]
 8007684:	462a      	mov	r2, r5
 8007686:	4b06      	ldr	r3, [pc, #24]	; (80076a0 <_svfiprintf_r+0x1f8>)
 8007688:	a904      	add	r1, sp, #16
 800768a:	4638      	mov	r0, r7
 800768c:	f000 f9d4 	bl	8007a38 <_printf_i>
 8007690:	e7eb      	b.n	800766a <_svfiprintf_r+0x1c2>
 8007692:	bf00      	nop
 8007694:	080081a4 	.word	0x080081a4
 8007698:	080081ae 	.word	0x080081ae
 800769c:	00000000 	.word	0x00000000
 80076a0:	080073f1 	.word	0x080073f1
 80076a4:	080081aa 	.word	0x080081aa

080076a8 <__sfputc_r>:
 80076a8:	6893      	ldr	r3, [r2, #8]
 80076aa:	3b01      	subs	r3, #1
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	b410      	push	{r4}
 80076b0:	6093      	str	r3, [r2, #8]
 80076b2:	da08      	bge.n	80076c6 <__sfputc_r+0x1e>
 80076b4:	6994      	ldr	r4, [r2, #24]
 80076b6:	42a3      	cmp	r3, r4
 80076b8:	db01      	blt.n	80076be <__sfputc_r+0x16>
 80076ba:	290a      	cmp	r1, #10
 80076bc:	d103      	bne.n	80076c6 <__sfputc_r+0x1e>
 80076be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076c2:	f7ff bad5 	b.w	8006c70 <__swbuf_r>
 80076c6:	6813      	ldr	r3, [r2, #0]
 80076c8:	1c58      	adds	r0, r3, #1
 80076ca:	6010      	str	r0, [r2, #0]
 80076cc:	7019      	strb	r1, [r3, #0]
 80076ce:	4608      	mov	r0, r1
 80076d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076d4:	4770      	bx	lr

080076d6 <__sfputs_r>:
 80076d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076d8:	4606      	mov	r6, r0
 80076da:	460f      	mov	r7, r1
 80076dc:	4614      	mov	r4, r2
 80076de:	18d5      	adds	r5, r2, r3
 80076e0:	42ac      	cmp	r4, r5
 80076e2:	d101      	bne.n	80076e8 <__sfputs_r+0x12>
 80076e4:	2000      	movs	r0, #0
 80076e6:	e007      	b.n	80076f8 <__sfputs_r+0x22>
 80076e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076ec:	463a      	mov	r2, r7
 80076ee:	4630      	mov	r0, r6
 80076f0:	f7ff ffda 	bl	80076a8 <__sfputc_r>
 80076f4:	1c43      	adds	r3, r0, #1
 80076f6:	d1f3      	bne.n	80076e0 <__sfputs_r+0xa>
 80076f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080076fc <_vfiprintf_r>:
 80076fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007700:	460d      	mov	r5, r1
 8007702:	b09d      	sub	sp, #116	; 0x74
 8007704:	4614      	mov	r4, r2
 8007706:	4698      	mov	r8, r3
 8007708:	4606      	mov	r6, r0
 800770a:	b118      	cbz	r0, 8007714 <_vfiprintf_r+0x18>
 800770c:	6983      	ldr	r3, [r0, #24]
 800770e:	b90b      	cbnz	r3, 8007714 <_vfiprintf_r+0x18>
 8007710:	f7ff fc88 	bl	8007024 <__sinit>
 8007714:	4b89      	ldr	r3, [pc, #548]	; (800793c <_vfiprintf_r+0x240>)
 8007716:	429d      	cmp	r5, r3
 8007718:	d11b      	bne.n	8007752 <_vfiprintf_r+0x56>
 800771a:	6875      	ldr	r5, [r6, #4]
 800771c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800771e:	07d9      	lsls	r1, r3, #31
 8007720:	d405      	bmi.n	800772e <_vfiprintf_r+0x32>
 8007722:	89ab      	ldrh	r3, [r5, #12]
 8007724:	059a      	lsls	r2, r3, #22
 8007726:	d402      	bmi.n	800772e <_vfiprintf_r+0x32>
 8007728:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800772a:	f7ff fd19 	bl	8007160 <__retarget_lock_acquire_recursive>
 800772e:	89ab      	ldrh	r3, [r5, #12]
 8007730:	071b      	lsls	r3, r3, #28
 8007732:	d501      	bpl.n	8007738 <_vfiprintf_r+0x3c>
 8007734:	692b      	ldr	r3, [r5, #16]
 8007736:	b9eb      	cbnz	r3, 8007774 <_vfiprintf_r+0x78>
 8007738:	4629      	mov	r1, r5
 800773a:	4630      	mov	r0, r6
 800773c:	f7ff faea 	bl	8006d14 <__swsetup_r>
 8007740:	b1c0      	cbz	r0, 8007774 <_vfiprintf_r+0x78>
 8007742:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007744:	07dc      	lsls	r4, r3, #31
 8007746:	d50e      	bpl.n	8007766 <_vfiprintf_r+0x6a>
 8007748:	f04f 30ff 	mov.w	r0, #4294967295
 800774c:	b01d      	add	sp, #116	; 0x74
 800774e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007752:	4b7b      	ldr	r3, [pc, #492]	; (8007940 <_vfiprintf_r+0x244>)
 8007754:	429d      	cmp	r5, r3
 8007756:	d101      	bne.n	800775c <_vfiprintf_r+0x60>
 8007758:	68b5      	ldr	r5, [r6, #8]
 800775a:	e7df      	b.n	800771c <_vfiprintf_r+0x20>
 800775c:	4b79      	ldr	r3, [pc, #484]	; (8007944 <_vfiprintf_r+0x248>)
 800775e:	429d      	cmp	r5, r3
 8007760:	bf08      	it	eq
 8007762:	68f5      	ldreq	r5, [r6, #12]
 8007764:	e7da      	b.n	800771c <_vfiprintf_r+0x20>
 8007766:	89ab      	ldrh	r3, [r5, #12]
 8007768:	0598      	lsls	r0, r3, #22
 800776a:	d4ed      	bmi.n	8007748 <_vfiprintf_r+0x4c>
 800776c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800776e:	f7ff fcf8 	bl	8007162 <__retarget_lock_release_recursive>
 8007772:	e7e9      	b.n	8007748 <_vfiprintf_r+0x4c>
 8007774:	2300      	movs	r3, #0
 8007776:	9309      	str	r3, [sp, #36]	; 0x24
 8007778:	2320      	movs	r3, #32
 800777a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800777e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007782:	2330      	movs	r3, #48	; 0x30
 8007784:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007948 <_vfiprintf_r+0x24c>
 8007788:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800778c:	f04f 0901 	mov.w	r9, #1
 8007790:	4623      	mov	r3, r4
 8007792:	469a      	mov	sl, r3
 8007794:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007798:	b10a      	cbz	r2, 800779e <_vfiprintf_r+0xa2>
 800779a:	2a25      	cmp	r2, #37	; 0x25
 800779c:	d1f9      	bne.n	8007792 <_vfiprintf_r+0x96>
 800779e:	ebba 0b04 	subs.w	fp, sl, r4
 80077a2:	d00b      	beq.n	80077bc <_vfiprintf_r+0xc0>
 80077a4:	465b      	mov	r3, fp
 80077a6:	4622      	mov	r2, r4
 80077a8:	4629      	mov	r1, r5
 80077aa:	4630      	mov	r0, r6
 80077ac:	f7ff ff93 	bl	80076d6 <__sfputs_r>
 80077b0:	3001      	adds	r0, #1
 80077b2:	f000 80aa 	beq.w	800790a <_vfiprintf_r+0x20e>
 80077b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077b8:	445a      	add	r2, fp
 80077ba:	9209      	str	r2, [sp, #36]	; 0x24
 80077bc:	f89a 3000 	ldrb.w	r3, [sl]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	f000 80a2 	beq.w	800790a <_vfiprintf_r+0x20e>
 80077c6:	2300      	movs	r3, #0
 80077c8:	f04f 32ff 	mov.w	r2, #4294967295
 80077cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80077d0:	f10a 0a01 	add.w	sl, sl, #1
 80077d4:	9304      	str	r3, [sp, #16]
 80077d6:	9307      	str	r3, [sp, #28]
 80077d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80077dc:	931a      	str	r3, [sp, #104]	; 0x68
 80077de:	4654      	mov	r4, sl
 80077e0:	2205      	movs	r2, #5
 80077e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077e6:	4858      	ldr	r0, [pc, #352]	; (8007948 <_vfiprintf_r+0x24c>)
 80077e8:	f7f8 fd12 	bl	8000210 <memchr>
 80077ec:	9a04      	ldr	r2, [sp, #16]
 80077ee:	b9d8      	cbnz	r0, 8007828 <_vfiprintf_r+0x12c>
 80077f0:	06d1      	lsls	r1, r2, #27
 80077f2:	bf44      	itt	mi
 80077f4:	2320      	movmi	r3, #32
 80077f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077fa:	0713      	lsls	r3, r2, #28
 80077fc:	bf44      	itt	mi
 80077fe:	232b      	movmi	r3, #43	; 0x2b
 8007800:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007804:	f89a 3000 	ldrb.w	r3, [sl]
 8007808:	2b2a      	cmp	r3, #42	; 0x2a
 800780a:	d015      	beq.n	8007838 <_vfiprintf_r+0x13c>
 800780c:	9a07      	ldr	r2, [sp, #28]
 800780e:	4654      	mov	r4, sl
 8007810:	2000      	movs	r0, #0
 8007812:	f04f 0c0a 	mov.w	ip, #10
 8007816:	4621      	mov	r1, r4
 8007818:	f811 3b01 	ldrb.w	r3, [r1], #1
 800781c:	3b30      	subs	r3, #48	; 0x30
 800781e:	2b09      	cmp	r3, #9
 8007820:	d94e      	bls.n	80078c0 <_vfiprintf_r+0x1c4>
 8007822:	b1b0      	cbz	r0, 8007852 <_vfiprintf_r+0x156>
 8007824:	9207      	str	r2, [sp, #28]
 8007826:	e014      	b.n	8007852 <_vfiprintf_r+0x156>
 8007828:	eba0 0308 	sub.w	r3, r0, r8
 800782c:	fa09 f303 	lsl.w	r3, r9, r3
 8007830:	4313      	orrs	r3, r2
 8007832:	9304      	str	r3, [sp, #16]
 8007834:	46a2      	mov	sl, r4
 8007836:	e7d2      	b.n	80077de <_vfiprintf_r+0xe2>
 8007838:	9b03      	ldr	r3, [sp, #12]
 800783a:	1d19      	adds	r1, r3, #4
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	9103      	str	r1, [sp, #12]
 8007840:	2b00      	cmp	r3, #0
 8007842:	bfbb      	ittet	lt
 8007844:	425b      	neglt	r3, r3
 8007846:	f042 0202 	orrlt.w	r2, r2, #2
 800784a:	9307      	strge	r3, [sp, #28]
 800784c:	9307      	strlt	r3, [sp, #28]
 800784e:	bfb8      	it	lt
 8007850:	9204      	strlt	r2, [sp, #16]
 8007852:	7823      	ldrb	r3, [r4, #0]
 8007854:	2b2e      	cmp	r3, #46	; 0x2e
 8007856:	d10c      	bne.n	8007872 <_vfiprintf_r+0x176>
 8007858:	7863      	ldrb	r3, [r4, #1]
 800785a:	2b2a      	cmp	r3, #42	; 0x2a
 800785c:	d135      	bne.n	80078ca <_vfiprintf_r+0x1ce>
 800785e:	9b03      	ldr	r3, [sp, #12]
 8007860:	1d1a      	adds	r2, r3, #4
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	9203      	str	r2, [sp, #12]
 8007866:	2b00      	cmp	r3, #0
 8007868:	bfb8      	it	lt
 800786a:	f04f 33ff 	movlt.w	r3, #4294967295
 800786e:	3402      	adds	r4, #2
 8007870:	9305      	str	r3, [sp, #20]
 8007872:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007958 <_vfiprintf_r+0x25c>
 8007876:	7821      	ldrb	r1, [r4, #0]
 8007878:	2203      	movs	r2, #3
 800787a:	4650      	mov	r0, sl
 800787c:	f7f8 fcc8 	bl	8000210 <memchr>
 8007880:	b140      	cbz	r0, 8007894 <_vfiprintf_r+0x198>
 8007882:	2340      	movs	r3, #64	; 0x40
 8007884:	eba0 000a 	sub.w	r0, r0, sl
 8007888:	fa03 f000 	lsl.w	r0, r3, r0
 800788c:	9b04      	ldr	r3, [sp, #16]
 800788e:	4303      	orrs	r3, r0
 8007890:	3401      	adds	r4, #1
 8007892:	9304      	str	r3, [sp, #16]
 8007894:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007898:	482c      	ldr	r0, [pc, #176]	; (800794c <_vfiprintf_r+0x250>)
 800789a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800789e:	2206      	movs	r2, #6
 80078a0:	f7f8 fcb6 	bl	8000210 <memchr>
 80078a4:	2800      	cmp	r0, #0
 80078a6:	d03f      	beq.n	8007928 <_vfiprintf_r+0x22c>
 80078a8:	4b29      	ldr	r3, [pc, #164]	; (8007950 <_vfiprintf_r+0x254>)
 80078aa:	bb1b      	cbnz	r3, 80078f4 <_vfiprintf_r+0x1f8>
 80078ac:	9b03      	ldr	r3, [sp, #12]
 80078ae:	3307      	adds	r3, #7
 80078b0:	f023 0307 	bic.w	r3, r3, #7
 80078b4:	3308      	adds	r3, #8
 80078b6:	9303      	str	r3, [sp, #12]
 80078b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078ba:	443b      	add	r3, r7
 80078bc:	9309      	str	r3, [sp, #36]	; 0x24
 80078be:	e767      	b.n	8007790 <_vfiprintf_r+0x94>
 80078c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80078c4:	460c      	mov	r4, r1
 80078c6:	2001      	movs	r0, #1
 80078c8:	e7a5      	b.n	8007816 <_vfiprintf_r+0x11a>
 80078ca:	2300      	movs	r3, #0
 80078cc:	3401      	adds	r4, #1
 80078ce:	9305      	str	r3, [sp, #20]
 80078d0:	4619      	mov	r1, r3
 80078d2:	f04f 0c0a 	mov.w	ip, #10
 80078d6:	4620      	mov	r0, r4
 80078d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078dc:	3a30      	subs	r2, #48	; 0x30
 80078de:	2a09      	cmp	r2, #9
 80078e0:	d903      	bls.n	80078ea <_vfiprintf_r+0x1ee>
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d0c5      	beq.n	8007872 <_vfiprintf_r+0x176>
 80078e6:	9105      	str	r1, [sp, #20]
 80078e8:	e7c3      	b.n	8007872 <_vfiprintf_r+0x176>
 80078ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80078ee:	4604      	mov	r4, r0
 80078f0:	2301      	movs	r3, #1
 80078f2:	e7f0      	b.n	80078d6 <_vfiprintf_r+0x1da>
 80078f4:	ab03      	add	r3, sp, #12
 80078f6:	9300      	str	r3, [sp, #0]
 80078f8:	462a      	mov	r2, r5
 80078fa:	4b16      	ldr	r3, [pc, #88]	; (8007954 <_vfiprintf_r+0x258>)
 80078fc:	a904      	add	r1, sp, #16
 80078fe:	4630      	mov	r0, r6
 8007900:	f3af 8000 	nop.w
 8007904:	4607      	mov	r7, r0
 8007906:	1c78      	adds	r0, r7, #1
 8007908:	d1d6      	bne.n	80078b8 <_vfiprintf_r+0x1bc>
 800790a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800790c:	07d9      	lsls	r1, r3, #31
 800790e:	d405      	bmi.n	800791c <_vfiprintf_r+0x220>
 8007910:	89ab      	ldrh	r3, [r5, #12]
 8007912:	059a      	lsls	r2, r3, #22
 8007914:	d402      	bmi.n	800791c <_vfiprintf_r+0x220>
 8007916:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007918:	f7ff fc23 	bl	8007162 <__retarget_lock_release_recursive>
 800791c:	89ab      	ldrh	r3, [r5, #12]
 800791e:	065b      	lsls	r3, r3, #25
 8007920:	f53f af12 	bmi.w	8007748 <_vfiprintf_r+0x4c>
 8007924:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007926:	e711      	b.n	800774c <_vfiprintf_r+0x50>
 8007928:	ab03      	add	r3, sp, #12
 800792a:	9300      	str	r3, [sp, #0]
 800792c:	462a      	mov	r2, r5
 800792e:	4b09      	ldr	r3, [pc, #36]	; (8007954 <_vfiprintf_r+0x258>)
 8007930:	a904      	add	r1, sp, #16
 8007932:	4630      	mov	r0, r6
 8007934:	f000 f880 	bl	8007a38 <_printf_i>
 8007938:	e7e4      	b.n	8007904 <_vfiprintf_r+0x208>
 800793a:	bf00      	nop
 800793c:	08008164 	.word	0x08008164
 8007940:	08008184 	.word	0x08008184
 8007944:	08008144 	.word	0x08008144
 8007948:	080081a4 	.word	0x080081a4
 800794c:	080081ae 	.word	0x080081ae
 8007950:	00000000 	.word	0x00000000
 8007954:	080076d7 	.word	0x080076d7
 8007958:	080081aa 	.word	0x080081aa

0800795c <_printf_common>:
 800795c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007960:	4616      	mov	r6, r2
 8007962:	4699      	mov	r9, r3
 8007964:	688a      	ldr	r2, [r1, #8]
 8007966:	690b      	ldr	r3, [r1, #16]
 8007968:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800796c:	4293      	cmp	r3, r2
 800796e:	bfb8      	it	lt
 8007970:	4613      	movlt	r3, r2
 8007972:	6033      	str	r3, [r6, #0]
 8007974:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007978:	4607      	mov	r7, r0
 800797a:	460c      	mov	r4, r1
 800797c:	b10a      	cbz	r2, 8007982 <_printf_common+0x26>
 800797e:	3301      	adds	r3, #1
 8007980:	6033      	str	r3, [r6, #0]
 8007982:	6823      	ldr	r3, [r4, #0]
 8007984:	0699      	lsls	r1, r3, #26
 8007986:	bf42      	ittt	mi
 8007988:	6833      	ldrmi	r3, [r6, #0]
 800798a:	3302      	addmi	r3, #2
 800798c:	6033      	strmi	r3, [r6, #0]
 800798e:	6825      	ldr	r5, [r4, #0]
 8007990:	f015 0506 	ands.w	r5, r5, #6
 8007994:	d106      	bne.n	80079a4 <_printf_common+0x48>
 8007996:	f104 0a19 	add.w	sl, r4, #25
 800799a:	68e3      	ldr	r3, [r4, #12]
 800799c:	6832      	ldr	r2, [r6, #0]
 800799e:	1a9b      	subs	r3, r3, r2
 80079a0:	42ab      	cmp	r3, r5
 80079a2:	dc26      	bgt.n	80079f2 <_printf_common+0x96>
 80079a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80079a8:	1e13      	subs	r3, r2, #0
 80079aa:	6822      	ldr	r2, [r4, #0]
 80079ac:	bf18      	it	ne
 80079ae:	2301      	movne	r3, #1
 80079b0:	0692      	lsls	r2, r2, #26
 80079b2:	d42b      	bmi.n	8007a0c <_printf_common+0xb0>
 80079b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80079b8:	4649      	mov	r1, r9
 80079ba:	4638      	mov	r0, r7
 80079bc:	47c0      	blx	r8
 80079be:	3001      	adds	r0, #1
 80079c0:	d01e      	beq.n	8007a00 <_printf_common+0xa4>
 80079c2:	6823      	ldr	r3, [r4, #0]
 80079c4:	68e5      	ldr	r5, [r4, #12]
 80079c6:	6832      	ldr	r2, [r6, #0]
 80079c8:	f003 0306 	and.w	r3, r3, #6
 80079cc:	2b04      	cmp	r3, #4
 80079ce:	bf08      	it	eq
 80079d0:	1aad      	subeq	r5, r5, r2
 80079d2:	68a3      	ldr	r3, [r4, #8]
 80079d4:	6922      	ldr	r2, [r4, #16]
 80079d6:	bf0c      	ite	eq
 80079d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80079dc:	2500      	movne	r5, #0
 80079de:	4293      	cmp	r3, r2
 80079e0:	bfc4      	itt	gt
 80079e2:	1a9b      	subgt	r3, r3, r2
 80079e4:	18ed      	addgt	r5, r5, r3
 80079e6:	2600      	movs	r6, #0
 80079e8:	341a      	adds	r4, #26
 80079ea:	42b5      	cmp	r5, r6
 80079ec:	d11a      	bne.n	8007a24 <_printf_common+0xc8>
 80079ee:	2000      	movs	r0, #0
 80079f0:	e008      	b.n	8007a04 <_printf_common+0xa8>
 80079f2:	2301      	movs	r3, #1
 80079f4:	4652      	mov	r2, sl
 80079f6:	4649      	mov	r1, r9
 80079f8:	4638      	mov	r0, r7
 80079fa:	47c0      	blx	r8
 80079fc:	3001      	adds	r0, #1
 80079fe:	d103      	bne.n	8007a08 <_printf_common+0xac>
 8007a00:	f04f 30ff 	mov.w	r0, #4294967295
 8007a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a08:	3501      	adds	r5, #1
 8007a0a:	e7c6      	b.n	800799a <_printf_common+0x3e>
 8007a0c:	18e1      	adds	r1, r4, r3
 8007a0e:	1c5a      	adds	r2, r3, #1
 8007a10:	2030      	movs	r0, #48	; 0x30
 8007a12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007a16:	4422      	add	r2, r4
 8007a18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007a20:	3302      	adds	r3, #2
 8007a22:	e7c7      	b.n	80079b4 <_printf_common+0x58>
 8007a24:	2301      	movs	r3, #1
 8007a26:	4622      	mov	r2, r4
 8007a28:	4649      	mov	r1, r9
 8007a2a:	4638      	mov	r0, r7
 8007a2c:	47c0      	blx	r8
 8007a2e:	3001      	adds	r0, #1
 8007a30:	d0e6      	beq.n	8007a00 <_printf_common+0xa4>
 8007a32:	3601      	adds	r6, #1
 8007a34:	e7d9      	b.n	80079ea <_printf_common+0x8e>
	...

08007a38 <_printf_i>:
 8007a38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a3c:	7e0f      	ldrb	r7, [r1, #24]
 8007a3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007a40:	2f78      	cmp	r7, #120	; 0x78
 8007a42:	4691      	mov	r9, r2
 8007a44:	4680      	mov	r8, r0
 8007a46:	460c      	mov	r4, r1
 8007a48:	469a      	mov	sl, r3
 8007a4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007a4e:	d807      	bhi.n	8007a60 <_printf_i+0x28>
 8007a50:	2f62      	cmp	r7, #98	; 0x62
 8007a52:	d80a      	bhi.n	8007a6a <_printf_i+0x32>
 8007a54:	2f00      	cmp	r7, #0
 8007a56:	f000 80d8 	beq.w	8007c0a <_printf_i+0x1d2>
 8007a5a:	2f58      	cmp	r7, #88	; 0x58
 8007a5c:	f000 80a3 	beq.w	8007ba6 <_printf_i+0x16e>
 8007a60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007a68:	e03a      	b.n	8007ae0 <_printf_i+0xa8>
 8007a6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007a6e:	2b15      	cmp	r3, #21
 8007a70:	d8f6      	bhi.n	8007a60 <_printf_i+0x28>
 8007a72:	a101      	add	r1, pc, #4	; (adr r1, 8007a78 <_printf_i+0x40>)
 8007a74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007a78:	08007ad1 	.word	0x08007ad1
 8007a7c:	08007ae5 	.word	0x08007ae5
 8007a80:	08007a61 	.word	0x08007a61
 8007a84:	08007a61 	.word	0x08007a61
 8007a88:	08007a61 	.word	0x08007a61
 8007a8c:	08007a61 	.word	0x08007a61
 8007a90:	08007ae5 	.word	0x08007ae5
 8007a94:	08007a61 	.word	0x08007a61
 8007a98:	08007a61 	.word	0x08007a61
 8007a9c:	08007a61 	.word	0x08007a61
 8007aa0:	08007a61 	.word	0x08007a61
 8007aa4:	08007bf1 	.word	0x08007bf1
 8007aa8:	08007b15 	.word	0x08007b15
 8007aac:	08007bd3 	.word	0x08007bd3
 8007ab0:	08007a61 	.word	0x08007a61
 8007ab4:	08007a61 	.word	0x08007a61
 8007ab8:	08007c13 	.word	0x08007c13
 8007abc:	08007a61 	.word	0x08007a61
 8007ac0:	08007b15 	.word	0x08007b15
 8007ac4:	08007a61 	.word	0x08007a61
 8007ac8:	08007a61 	.word	0x08007a61
 8007acc:	08007bdb 	.word	0x08007bdb
 8007ad0:	682b      	ldr	r3, [r5, #0]
 8007ad2:	1d1a      	adds	r2, r3, #4
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	602a      	str	r2, [r5, #0]
 8007ad8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007adc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	e0a3      	b.n	8007c2c <_printf_i+0x1f4>
 8007ae4:	6820      	ldr	r0, [r4, #0]
 8007ae6:	6829      	ldr	r1, [r5, #0]
 8007ae8:	0606      	lsls	r6, r0, #24
 8007aea:	f101 0304 	add.w	r3, r1, #4
 8007aee:	d50a      	bpl.n	8007b06 <_printf_i+0xce>
 8007af0:	680e      	ldr	r6, [r1, #0]
 8007af2:	602b      	str	r3, [r5, #0]
 8007af4:	2e00      	cmp	r6, #0
 8007af6:	da03      	bge.n	8007b00 <_printf_i+0xc8>
 8007af8:	232d      	movs	r3, #45	; 0x2d
 8007afa:	4276      	negs	r6, r6
 8007afc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b00:	485e      	ldr	r0, [pc, #376]	; (8007c7c <_printf_i+0x244>)
 8007b02:	230a      	movs	r3, #10
 8007b04:	e019      	b.n	8007b3a <_printf_i+0x102>
 8007b06:	680e      	ldr	r6, [r1, #0]
 8007b08:	602b      	str	r3, [r5, #0]
 8007b0a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007b0e:	bf18      	it	ne
 8007b10:	b236      	sxthne	r6, r6
 8007b12:	e7ef      	b.n	8007af4 <_printf_i+0xbc>
 8007b14:	682b      	ldr	r3, [r5, #0]
 8007b16:	6820      	ldr	r0, [r4, #0]
 8007b18:	1d19      	adds	r1, r3, #4
 8007b1a:	6029      	str	r1, [r5, #0]
 8007b1c:	0601      	lsls	r1, r0, #24
 8007b1e:	d501      	bpl.n	8007b24 <_printf_i+0xec>
 8007b20:	681e      	ldr	r6, [r3, #0]
 8007b22:	e002      	b.n	8007b2a <_printf_i+0xf2>
 8007b24:	0646      	lsls	r6, r0, #25
 8007b26:	d5fb      	bpl.n	8007b20 <_printf_i+0xe8>
 8007b28:	881e      	ldrh	r6, [r3, #0]
 8007b2a:	4854      	ldr	r0, [pc, #336]	; (8007c7c <_printf_i+0x244>)
 8007b2c:	2f6f      	cmp	r7, #111	; 0x6f
 8007b2e:	bf0c      	ite	eq
 8007b30:	2308      	moveq	r3, #8
 8007b32:	230a      	movne	r3, #10
 8007b34:	2100      	movs	r1, #0
 8007b36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007b3a:	6865      	ldr	r5, [r4, #4]
 8007b3c:	60a5      	str	r5, [r4, #8]
 8007b3e:	2d00      	cmp	r5, #0
 8007b40:	bfa2      	ittt	ge
 8007b42:	6821      	ldrge	r1, [r4, #0]
 8007b44:	f021 0104 	bicge.w	r1, r1, #4
 8007b48:	6021      	strge	r1, [r4, #0]
 8007b4a:	b90e      	cbnz	r6, 8007b50 <_printf_i+0x118>
 8007b4c:	2d00      	cmp	r5, #0
 8007b4e:	d04d      	beq.n	8007bec <_printf_i+0x1b4>
 8007b50:	4615      	mov	r5, r2
 8007b52:	fbb6 f1f3 	udiv	r1, r6, r3
 8007b56:	fb03 6711 	mls	r7, r3, r1, r6
 8007b5a:	5dc7      	ldrb	r7, [r0, r7]
 8007b5c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007b60:	4637      	mov	r7, r6
 8007b62:	42bb      	cmp	r3, r7
 8007b64:	460e      	mov	r6, r1
 8007b66:	d9f4      	bls.n	8007b52 <_printf_i+0x11a>
 8007b68:	2b08      	cmp	r3, #8
 8007b6a:	d10b      	bne.n	8007b84 <_printf_i+0x14c>
 8007b6c:	6823      	ldr	r3, [r4, #0]
 8007b6e:	07de      	lsls	r6, r3, #31
 8007b70:	d508      	bpl.n	8007b84 <_printf_i+0x14c>
 8007b72:	6923      	ldr	r3, [r4, #16]
 8007b74:	6861      	ldr	r1, [r4, #4]
 8007b76:	4299      	cmp	r1, r3
 8007b78:	bfde      	ittt	le
 8007b7a:	2330      	movle	r3, #48	; 0x30
 8007b7c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007b80:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007b84:	1b52      	subs	r2, r2, r5
 8007b86:	6122      	str	r2, [r4, #16]
 8007b88:	f8cd a000 	str.w	sl, [sp]
 8007b8c:	464b      	mov	r3, r9
 8007b8e:	aa03      	add	r2, sp, #12
 8007b90:	4621      	mov	r1, r4
 8007b92:	4640      	mov	r0, r8
 8007b94:	f7ff fee2 	bl	800795c <_printf_common>
 8007b98:	3001      	adds	r0, #1
 8007b9a:	d14c      	bne.n	8007c36 <_printf_i+0x1fe>
 8007b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8007ba0:	b004      	add	sp, #16
 8007ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ba6:	4835      	ldr	r0, [pc, #212]	; (8007c7c <_printf_i+0x244>)
 8007ba8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007bac:	6829      	ldr	r1, [r5, #0]
 8007bae:	6823      	ldr	r3, [r4, #0]
 8007bb0:	f851 6b04 	ldr.w	r6, [r1], #4
 8007bb4:	6029      	str	r1, [r5, #0]
 8007bb6:	061d      	lsls	r5, r3, #24
 8007bb8:	d514      	bpl.n	8007be4 <_printf_i+0x1ac>
 8007bba:	07df      	lsls	r7, r3, #31
 8007bbc:	bf44      	itt	mi
 8007bbe:	f043 0320 	orrmi.w	r3, r3, #32
 8007bc2:	6023      	strmi	r3, [r4, #0]
 8007bc4:	b91e      	cbnz	r6, 8007bce <_printf_i+0x196>
 8007bc6:	6823      	ldr	r3, [r4, #0]
 8007bc8:	f023 0320 	bic.w	r3, r3, #32
 8007bcc:	6023      	str	r3, [r4, #0]
 8007bce:	2310      	movs	r3, #16
 8007bd0:	e7b0      	b.n	8007b34 <_printf_i+0xfc>
 8007bd2:	6823      	ldr	r3, [r4, #0]
 8007bd4:	f043 0320 	orr.w	r3, r3, #32
 8007bd8:	6023      	str	r3, [r4, #0]
 8007bda:	2378      	movs	r3, #120	; 0x78
 8007bdc:	4828      	ldr	r0, [pc, #160]	; (8007c80 <_printf_i+0x248>)
 8007bde:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007be2:	e7e3      	b.n	8007bac <_printf_i+0x174>
 8007be4:	0659      	lsls	r1, r3, #25
 8007be6:	bf48      	it	mi
 8007be8:	b2b6      	uxthmi	r6, r6
 8007bea:	e7e6      	b.n	8007bba <_printf_i+0x182>
 8007bec:	4615      	mov	r5, r2
 8007bee:	e7bb      	b.n	8007b68 <_printf_i+0x130>
 8007bf0:	682b      	ldr	r3, [r5, #0]
 8007bf2:	6826      	ldr	r6, [r4, #0]
 8007bf4:	6961      	ldr	r1, [r4, #20]
 8007bf6:	1d18      	adds	r0, r3, #4
 8007bf8:	6028      	str	r0, [r5, #0]
 8007bfa:	0635      	lsls	r5, r6, #24
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	d501      	bpl.n	8007c04 <_printf_i+0x1cc>
 8007c00:	6019      	str	r1, [r3, #0]
 8007c02:	e002      	b.n	8007c0a <_printf_i+0x1d2>
 8007c04:	0670      	lsls	r0, r6, #25
 8007c06:	d5fb      	bpl.n	8007c00 <_printf_i+0x1c8>
 8007c08:	8019      	strh	r1, [r3, #0]
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	6123      	str	r3, [r4, #16]
 8007c0e:	4615      	mov	r5, r2
 8007c10:	e7ba      	b.n	8007b88 <_printf_i+0x150>
 8007c12:	682b      	ldr	r3, [r5, #0]
 8007c14:	1d1a      	adds	r2, r3, #4
 8007c16:	602a      	str	r2, [r5, #0]
 8007c18:	681d      	ldr	r5, [r3, #0]
 8007c1a:	6862      	ldr	r2, [r4, #4]
 8007c1c:	2100      	movs	r1, #0
 8007c1e:	4628      	mov	r0, r5
 8007c20:	f7f8 faf6 	bl	8000210 <memchr>
 8007c24:	b108      	cbz	r0, 8007c2a <_printf_i+0x1f2>
 8007c26:	1b40      	subs	r0, r0, r5
 8007c28:	6060      	str	r0, [r4, #4]
 8007c2a:	6863      	ldr	r3, [r4, #4]
 8007c2c:	6123      	str	r3, [r4, #16]
 8007c2e:	2300      	movs	r3, #0
 8007c30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c34:	e7a8      	b.n	8007b88 <_printf_i+0x150>
 8007c36:	6923      	ldr	r3, [r4, #16]
 8007c38:	462a      	mov	r2, r5
 8007c3a:	4649      	mov	r1, r9
 8007c3c:	4640      	mov	r0, r8
 8007c3e:	47d0      	blx	sl
 8007c40:	3001      	adds	r0, #1
 8007c42:	d0ab      	beq.n	8007b9c <_printf_i+0x164>
 8007c44:	6823      	ldr	r3, [r4, #0]
 8007c46:	079b      	lsls	r3, r3, #30
 8007c48:	d413      	bmi.n	8007c72 <_printf_i+0x23a>
 8007c4a:	68e0      	ldr	r0, [r4, #12]
 8007c4c:	9b03      	ldr	r3, [sp, #12]
 8007c4e:	4298      	cmp	r0, r3
 8007c50:	bfb8      	it	lt
 8007c52:	4618      	movlt	r0, r3
 8007c54:	e7a4      	b.n	8007ba0 <_printf_i+0x168>
 8007c56:	2301      	movs	r3, #1
 8007c58:	4632      	mov	r2, r6
 8007c5a:	4649      	mov	r1, r9
 8007c5c:	4640      	mov	r0, r8
 8007c5e:	47d0      	blx	sl
 8007c60:	3001      	adds	r0, #1
 8007c62:	d09b      	beq.n	8007b9c <_printf_i+0x164>
 8007c64:	3501      	adds	r5, #1
 8007c66:	68e3      	ldr	r3, [r4, #12]
 8007c68:	9903      	ldr	r1, [sp, #12]
 8007c6a:	1a5b      	subs	r3, r3, r1
 8007c6c:	42ab      	cmp	r3, r5
 8007c6e:	dcf2      	bgt.n	8007c56 <_printf_i+0x21e>
 8007c70:	e7eb      	b.n	8007c4a <_printf_i+0x212>
 8007c72:	2500      	movs	r5, #0
 8007c74:	f104 0619 	add.w	r6, r4, #25
 8007c78:	e7f5      	b.n	8007c66 <_printf_i+0x22e>
 8007c7a:	bf00      	nop
 8007c7c:	080081b5 	.word	0x080081b5
 8007c80:	080081c6 	.word	0x080081c6

08007c84 <_sbrk_r>:
 8007c84:	b538      	push	{r3, r4, r5, lr}
 8007c86:	4d06      	ldr	r5, [pc, #24]	; (8007ca0 <_sbrk_r+0x1c>)
 8007c88:	2300      	movs	r3, #0
 8007c8a:	4604      	mov	r4, r0
 8007c8c:	4608      	mov	r0, r1
 8007c8e:	602b      	str	r3, [r5, #0]
 8007c90:	f7f9 fdc4 	bl	800181c <_sbrk>
 8007c94:	1c43      	adds	r3, r0, #1
 8007c96:	d102      	bne.n	8007c9e <_sbrk_r+0x1a>
 8007c98:	682b      	ldr	r3, [r5, #0]
 8007c9a:	b103      	cbz	r3, 8007c9e <_sbrk_r+0x1a>
 8007c9c:	6023      	str	r3, [r4, #0]
 8007c9e:	bd38      	pop	{r3, r4, r5, pc}
 8007ca0:	20008050 	.word	0x20008050

08007ca4 <__sread>:
 8007ca4:	b510      	push	{r4, lr}
 8007ca6:	460c      	mov	r4, r1
 8007ca8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cac:	f000 f8ea 	bl	8007e84 <_read_r>
 8007cb0:	2800      	cmp	r0, #0
 8007cb2:	bfab      	itete	ge
 8007cb4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007cb6:	89a3      	ldrhlt	r3, [r4, #12]
 8007cb8:	181b      	addge	r3, r3, r0
 8007cba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007cbe:	bfac      	ite	ge
 8007cc0:	6563      	strge	r3, [r4, #84]	; 0x54
 8007cc2:	81a3      	strhlt	r3, [r4, #12]
 8007cc4:	bd10      	pop	{r4, pc}

08007cc6 <__swrite>:
 8007cc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cca:	461f      	mov	r7, r3
 8007ccc:	898b      	ldrh	r3, [r1, #12]
 8007cce:	05db      	lsls	r3, r3, #23
 8007cd0:	4605      	mov	r5, r0
 8007cd2:	460c      	mov	r4, r1
 8007cd4:	4616      	mov	r6, r2
 8007cd6:	d505      	bpl.n	8007ce4 <__swrite+0x1e>
 8007cd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cdc:	2302      	movs	r3, #2
 8007cde:	2200      	movs	r2, #0
 8007ce0:	f000 f868 	bl	8007db4 <_lseek_r>
 8007ce4:	89a3      	ldrh	r3, [r4, #12]
 8007ce6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007cea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007cee:	81a3      	strh	r3, [r4, #12]
 8007cf0:	4632      	mov	r2, r6
 8007cf2:	463b      	mov	r3, r7
 8007cf4:	4628      	mov	r0, r5
 8007cf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007cfa:	f000 b817 	b.w	8007d2c <_write_r>

08007cfe <__sseek>:
 8007cfe:	b510      	push	{r4, lr}
 8007d00:	460c      	mov	r4, r1
 8007d02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d06:	f000 f855 	bl	8007db4 <_lseek_r>
 8007d0a:	1c43      	adds	r3, r0, #1
 8007d0c:	89a3      	ldrh	r3, [r4, #12]
 8007d0e:	bf15      	itete	ne
 8007d10:	6560      	strne	r0, [r4, #84]	; 0x54
 8007d12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007d16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007d1a:	81a3      	strheq	r3, [r4, #12]
 8007d1c:	bf18      	it	ne
 8007d1e:	81a3      	strhne	r3, [r4, #12]
 8007d20:	bd10      	pop	{r4, pc}

08007d22 <__sclose>:
 8007d22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d26:	f000 b813 	b.w	8007d50 <_close_r>
	...

08007d2c <_write_r>:
 8007d2c:	b538      	push	{r3, r4, r5, lr}
 8007d2e:	4d07      	ldr	r5, [pc, #28]	; (8007d4c <_write_r+0x20>)
 8007d30:	4604      	mov	r4, r0
 8007d32:	4608      	mov	r0, r1
 8007d34:	4611      	mov	r1, r2
 8007d36:	2200      	movs	r2, #0
 8007d38:	602a      	str	r2, [r5, #0]
 8007d3a:	461a      	mov	r2, r3
 8007d3c:	f7f9 fd1d 	bl	800177a <_write>
 8007d40:	1c43      	adds	r3, r0, #1
 8007d42:	d102      	bne.n	8007d4a <_write_r+0x1e>
 8007d44:	682b      	ldr	r3, [r5, #0]
 8007d46:	b103      	cbz	r3, 8007d4a <_write_r+0x1e>
 8007d48:	6023      	str	r3, [r4, #0]
 8007d4a:	bd38      	pop	{r3, r4, r5, pc}
 8007d4c:	20008050 	.word	0x20008050

08007d50 <_close_r>:
 8007d50:	b538      	push	{r3, r4, r5, lr}
 8007d52:	4d06      	ldr	r5, [pc, #24]	; (8007d6c <_close_r+0x1c>)
 8007d54:	2300      	movs	r3, #0
 8007d56:	4604      	mov	r4, r0
 8007d58:	4608      	mov	r0, r1
 8007d5a:	602b      	str	r3, [r5, #0]
 8007d5c:	f7f9 fd29 	bl	80017b2 <_close>
 8007d60:	1c43      	adds	r3, r0, #1
 8007d62:	d102      	bne.n	8007d6a <_close_r+0x1a>
 8007d64:	682b      	ldr	r3, [r5, #0]
 8007d66:	b103      	cbz	r3, 8007d6a <_close_r+0x1a>
 8007d68:	6023      	str	r3, [r4, #0]
 8007d6a:	bd38      	pop	{r3, r4, r5, pc}
 8007d6c:	20008050 	.word	0x20008050

08007d70 <_fstat_r>:
 8007d70:	b538      	push	{r3, r4, r5, lr}
 8007d72:	4d07      	ldr	r5, [pc, #28]	; (8007d90 <_fstat_r+0x20>)
 8007d74:	2300      	movs	r3, #0
 8007d76:	4604      	mov	r4, r0
 8007d78:	4608      	mov	r0, r1
 8007d7a:	4611      	mov	r1, r2
 8007d7c:	602b      	str	r3, [r5, #0]
 8007d7e:	f7f9 fd24 	bl	80017ca <_fstat>
 8007d82:	1c43      	adds	r3, r0, #1
 8007d84:	d102      	bne.n	8007d8c <_fstat_r+0x1c>
 8007d86:	682b      	ldr	r3, [r5, #0]
 8007d88:	b103      	cbz	r3, 8007d8c <_fstat_r+0x1c>
 8007d8a:	6023      	str	r3, [r4, #0]
 8007d8c:	bd38      	pop	{r3, r4, r5, pc}
 8007d8e:	bf00      	nop
 8007d90:	20008050 	.word	0x20008050

08007d94 <_isatty_r>:
 8007d94:	b538      	push	{r3, r4, r5, lr}
 8007d96:	4d06      	ldr	r5, [pc, #24]	; (8007db0 <_isatty_r+0x1c>)
 8007d98:	2300      	movs	r3, #0
 8007d9a:	4604      	mov	r4, r0
 8007d9c:	4608      	mov	r0, r1
 8007d9e:	602b      	str	r3, [r5, #0]
 8007da0:	f7f9 fd23 	bl	80017ea <_isatty>
 8007da4:	1c43      	adds	r3, r0, #1
 8007da6:	d102      	bne.n	8007dae <_isatty_r+0x1a>
 8007da8:	682b      	ldr	r3, [r5, #0]
 8007daa:	b103      	cbz	r3, 8007dae <_isatty_r+0x1a>
 8007dac:	6023      	str	r3, [r4, #0]
 8007dae:	bd38      	pop	{r3, r4, r5, pc}
 8007db0:	20008050 	.word	0x20008050

08007db4 <_lseek_r>:
 8007db4:	b538      	push	{r3, r4, r5, lr}
 8007db6:	4d07      	ldr	r5, [pc, #28]	; (8007dd4 <_lseek_r+0x20>)
 8007db8:	4604      	mov	r4, r0
 8007dba:	4608      	mov	r0, r1
 8007dbc:	4611      	mov	r1, r2
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	602a      	str	r2, [r5, #0]
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	f7f9 fd1c 	bl	8001800 <_lseek>
 8007dc8:	1c43      	adds	r3, r0, #1
 8007dca:	d102      	bne.n	8007dd2 <_lseek_r+0x1e>
 8007dcc:	682b      	ldr	r3, [r5, #0]
 8007dce:	b103      	cbz	r3, 8007dd2 <_lseek_r+0x1e>
 8007dd0:	6023      	str	r3, [r4, #0]
 8007dd2:	bd38      	pop	{r3, r4, r5, pc}
 8007dd4:	20008050 	.word	0x20008050

08007dd8 <memmove>:
 8007dd8:	4288      	cmp	r0, r1
 8007dda:	b510      	push	{r4, lr}
 8007ddc:	eb01 0402 	add.w	r4, r1, r2
 8007de0:	d902      	bls.n	8007de8 <memmove+0x10>
 8007de2:	4284      	cmp	r4, r0
 8007de4:	4623      	mov	r3, r4
 8007de6:	d807      	bhi.n	8007df8 <memmove+0x20>
 8007de8:	1e43      	subs	r3, r0, #1
 8007dea:	42a1      	cmp	r1, r4
 8007dec:	d008      	beq.n	8007e00 <memmove+0x28>
 8007dee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007df2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007df6:	e7f8      	b.n	8007dea <memmove+0x12>
 8007df8:	4402      	add	r2, r0
 8007dfa:	4601      	mov	r1, r0
 8007dfc:	428a      	cmp	r2, r1
 8007dfe:	d100      	bne.n	8007e02 <memmove+0x2a>
 8007e00:	bd10      	pop	{r4, pc}
 8007e02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007e06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007e0a:	e7f7      	b.n	8007dfc <memmove+0x24>

08007e0c <__malloc_lock>:
 8007e0c:	4801      	ldr	r0, [pc, #4]	; (8007e14 <__malloc_lock+0x8>)
 8007e0e:	f7ff b9a7 	b.w	8007160 <__retarget_lock_acquire_recursive>
 8007e12:	bf00      	nop
 8007e14:	20008044 	.word	0x20008044

08007e18 <__malloc_unlock>:
 8007e18:	4801      	ldr	r0, [pc, #4]	; (8007e20 <__malloc_unlock+0x8>)
 8007e1a:	f7ff b9a2 	b.w	8007162 <__retarget_lock_release_recursive>
 8007e1e:	bf00      	nop
 8007e20:	20008044 	.word	0x20008044

08007e24 <_realloc_r>:
 8007e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e28:	4680      	mov	r8, r0
 8007e2a:	4614      	mov	r4, r2
 8007e2c:	460e      	mov	r6, r1
 8007e2e:	b921      	cbnz	r1, 8007e3a <_realloc_r+0x16>
 8007e30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e34:	4611      	mov	r1, r2
 8007e36:	f7ff ba67 	b.w	8007308 <_malloc_r>
 8007e3a:	b92a      	cbnz	r2, 8007e48 <_realloc_r+0x24>
 8007e3c:	f7ff f9f8 	bl	8007230 <_free_r>
 8007e40:	4625      	mov	r5, r4
 8007e42:	4628      	mov	r0, r5
 8007e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e48:	f000 f82e 	bl	8007ea8 <_malloc_usable_size_r>
 8007e4c:	4284      	cmp	r4, r0
 8007e4e:	4607      	mov	r7, r0
 8007e50:	d802      	bhi.n	8007e58 <_realloc_r+0x34>
 8007e52:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007e56:	d812      	bhi.n	8007e7e <_realloc_r+0x5a>
 8007e58:	4621      	mov	r1, r4
 8007e5a:	4640      	mov	r0, r8
 8007e5c:	f7ff fa54 	bl	8007308 <_malloc_r>
 8007e60:	4605      	mov	r5, r0
 8007e62:	2800      	cmp	r0, #0
 8007e64:	d0ed      	beq.n	8007e42 <_realloc_r+0x1e>
 8007e66:	42bc      	cmp	r4, r7
 8007e68:	4622      	mov	r2, r4
 8007e6a:	4631      	mov	r1, r6
 8007e6c:	bf28      	it	cs
 8007e6e:	463a      	movcs	r2, r7
 8007e70:	f7fe fd9a 	bl	80069a8 <memcpy>
 8007e74:	4631      	mov	r1, r6
 8007e76:	4640      	mov	r0, r8
 8007e78:	f7ff f9da 	bl	8007230 <_free_r>
 8007e7c:	e7e1      	b.n	8007e42 <_realloc_r+0x1e>
 8007e7e:	4635      	mov	r5, r6
 8007e80:	e7df      	b.n	8007e42 <_realloc_r+0x1e>
	...

08007e84 <_read_r>:
 8007e84:	b538      	push	{r3, r4, r5, lr}
 8007e86:	4d07      	ldr	r5, [pc, #28]	; (8007ea4 <_read_r+0x20>)
 8007e88:	4604      	mov	r4, r0
 8007e8a:	4608      	mov	r0, r1
 8007e8c:	4611      	mov	r1, r2
 8007e8e:	2200      	movs	r2, #0
 8007e90:	602a      	str	r2, [r5, #0]
 8007e92:	461a      	mov	r2, r3
 8007e94:	f7f9 fc54 	bl	8001740 <_read>
 8007e98:	1c43      	adds	r3, r0, #1
 8007e9a:	d102      	bne.n	8007ea2 <_read_r+0x1e>
 8007e9c:	682b      	ldr	r3, [r5, #0]
 8007e9e:	b103      	cbz	r3, 8007ea2 <_read_r+0x1e>
 8007ea0:	6023      	str	r3, [r4, #0]
 8007ea2:	bd38      	pop	{r3, r4, r5, pc}
 8007ea4:	20008050 	.word	0x20008050

08007ea8 <_malloc_usable_size_r>:
 8007ea8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007eac:	1f18      	subs	r0, r3, #4
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	bfbc      	itt	lt
 8007eb2:	580b      	ldrlt	r3, [r1, r0]
 8007eb4:	18c0      	addlt	r0, r0, r3
 8007eb6:	4770      	bx	lr

08007eb8 <_init>:
 8007eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eba:	bf00      	nop
 8007ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ebe:	bc08      	pop	{r3}
 8007ec0:	469e      	mov	lr, r3
 8007ec2:	4770      	bx	lr

08007ec4 <_fini>:
 8007ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ec6:	bf00      	nop
 8007ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007eca:	bc08      	pop	{r3}
 8007ecc:	469e      	mov	lr, r3
 8007ece:	4770      	bx	lr
